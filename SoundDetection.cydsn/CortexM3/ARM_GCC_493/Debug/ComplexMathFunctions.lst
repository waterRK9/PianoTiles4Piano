ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ComplexMathFunctions.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.arm_cmplx_conj_f32,"ax",%progbits
  19              		.align	2
  20              		.global	arm_cmplx_conj_f32
  21              		.thumb
  22              		.thumb_func
  23              		.type	arm_cmplx_conj_f32, %function
  24              	arm_cmplx_conj_f32:
  25              	.LFB84:
  26              		.file 1 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_conj_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Title:        arm_cmplx_conj_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Description:  Floating-point complex conjugate
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /**
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 2


  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @defgroup cmplx_conj Complex Conjugate
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   Conjugates the elements of a complex data vector.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   The <code>pSrc</code> points to the source data and
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   <code>pDst</code> points to the destination data where the result should be written.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   and the data in each array is stored in an interleaved fashion
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   (real, imag, real, imag, ...).
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   Each array has a total of <code>2*numSamples</code> values.
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   The underlying algorithm is used:
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   <pre>
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   for (n = 0; n < numSamples; n++) {
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       pDst[(2*n)  ] =  pSrc[(2*n)  ];    // real part
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       pDst[(2*n)+1] = -pSrc[(2*n)+1];    // imag part
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   }
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   </pre>
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  */
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /**
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @addtogroup cmplx_conj
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @{
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  */
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** /**
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @brief         Floating-point complex conjugate.
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @param[in]     pSrc        points to the input vector
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @param[out]    pDst        points to the output vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @param[in]     numSamples  number of samples in each vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   @return        none
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****  */
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** void arm_cmplx_conj_f32(
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     const float32_t * pSrc,
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     float32_t * pDst,
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     uint32_t numSamples)
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** {
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     static const float32_t cmplx_conj_sign[4] = { 1.0f, -1.0f, 1.0f, -1.0f };
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     uint32_t blockSize = numSamples * CMPLX_DIM;   /* loop counters */
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     uint32_t blkCnt;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     f32x4_t vecSrc;
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     f32x4_t vecSign;
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /*
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      * load sign vector
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      */
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     vecSign = *(f32x4_t *) cmplx_conj_sign;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 3


  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* Compute 4 real samples at a time */
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     blkCnt = blockSize >> 2U;
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     while (blkCnt > 0U)
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     {
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         vecSrc = vld1q(pSrc);
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         vst1q(pDst,vmulq(vecSrc, vecSign));
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         /*
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****          * Decrement the blkCnt loop counter
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****          * Advance vector source and destination pointers
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****          */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         pSrc += 4;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         pDst += 4;
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         blkCnt--;
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     }
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      /* Tail */
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     blkCnt = (blockSize & 0x3) >> 1;
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     while (blkCnt > 0U)
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     {
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       /* Calculate Complex Conjugate and store result in destination buffer. */
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       *pDst++ =  *pSrc++;
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       *pDst++ = -*pSrc++;
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       /* Decrement loop counter */
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****       blkCnt--;
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     }
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** }
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #else
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** void arm_cmplx_conj_f32(
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   const float32_t * pSrc,
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         float32_t * pDst,
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         uint32_t numSamples)
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** {
  27              		.loc 1 127 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 30B4     		push	{r4, r5}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 5, -4
  37              	.LVL1:
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    float32x4_t zero;
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    float32x4x2_t vec;
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    zero = vdupq_n_f32(0.0f);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 4


 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    /* Compute 4 outputs at a time */
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    blkCnt = numSamples >> 2U;
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    while (blkCnt > 0U)
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    {
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      /* C[0]+jC[1] = A[0]+(-1)*jA[1] */
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      /* Calculate Complex Conjugate and then store the results in the destination buffer. */
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      vec = vld2q_f32(pSrc);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      vec.val[1] = vsubq_f32(zero,vec.val[1]);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      vst2q_f32(pDst,vec);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      /* Increment pointers */
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      pSrc += 8;
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      pDst += 8;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****         
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      /* Decrement the loop counter */
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****      blkCnt--;
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    }
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    /* Tail */
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****    blkCnt = numSamples & 0x3;
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #else
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   blkCnt = numSamples >> 2U;
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   while (blkCnt > 0U)
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   {
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ =  *pSrc++;
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ =  *pSrc++;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ =  *pSrc++;
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ =  *pSrc++;
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* Decrement loop counter */
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     blkCnt--;
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   }
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   blkCnt = numSamples % 0x4U;
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #else
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   /* Initialize blkCnt with number of samples */
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   blkCnt = numSamples;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 5


 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** #endif /* #if defined (ARM_MATH_NEON) */
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   while (blkCnt > 0U)
  38              		.loc 1 196 0
  39 0002 0CE0     		b	.L2
  40              	.LVL2:
  41              	.L3:
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   {
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ =  *pSrc++;
  42              		.loc 1 201 0
  43 0004 0346     		mov	r3, r0
  44 0006 53F8085B 		ldr	r5, [r3], #8	@ float
  45 000a 0C46     		mov	r4, r1
  46 000c 44F8085B 		str	r5, [r4], #8	@ float
  47              	.LVL3:
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
  48              		.loc 1 202 0
  49 0010 4068     		ldr	r0, [r0, #4]	@ float
  50 0012 00F10040 		add	r0, r0, #-2147483648
  51 0016 4860     		str	r0, [r1, #4]	@ float
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     /* Decrement loop counter */
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     blkCnt--;
  52              		.loc 1 205 0
  53 0018 013A     		subs	r2, r2, #1
  54              	.LVL4:
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****     *pDst++ = -*pSrc++;
  55              		.loc 1 202 0
  56 001a 2146     		mov	r1, r4
  57 001c 1846     		mov	r0, r3
  58              	.LVL5:
  59              	.L2:
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   {
  60              		.loc 1 196 0
  61 001e 002A     		cmp	r2, #0
  62 0020 F0D1     		bne	.L3
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c ****   }
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** 
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_f32.c **** }
  63              		.loc 1 208 0
  64 0022 30BC     		pop	{r4, r5}
  65              		.cfi_restore 5
  66              		.cfi_restore 4
  67              		.cfi_def_cfa_offset 0
  68 0024 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE84:
  71              		.size	arm_cmplx_conj_f32, .-arm_cmplx_conj_f32
  72 0026 00BF     		.section	.text.arm_cmplx_conj_q15,"ax",%progbits
  73              		.align	2
  74              		.global	arm_cmplx_conj_q15
  75              		.thumb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 6


  76              		.thumb_func
  77              		.type	arm_cmplx_conj_q15, %function
  78              	arm_cmplx_conj_q15:
  79              	.LFB85:
  80              		.file 2 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_conj_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Title:        arm_cmplx_conj_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Description:  Q15 complex conjugate
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @addtogroup cmplx_conj
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @brief         Q15 complex conjugate.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @param[in]     pSrc        points to the input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @param[out]    pDst        points to the output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****                    The Q15 value -1 (0x8000) is saturated to the maximum allowable positive value 0
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****  */
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 7


  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** void arm_cmplx_conj_q15(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   const q15_t * pSrc,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         q15_t * pDst,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         uint32_t numSamples)
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** {
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     uint32_t blockSize = numSamples * CMPLX_DIM;   /* loop counters */
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     uint32_t blkCnt;
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     q31_t in1; 
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     q15x8x2_t vecSrc;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     q15x8_t zero;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     zero = vdupq_n_s16(0);
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* Compute 8 real samples at a time */
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     blkCnt = blockSize >> 4U;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     while (blkCnt > 0U)
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     {
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         vecSrc = vld2q(pSrc);
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         vecSrc.val[1] = vqsubq(zero, vecSrc.val[1]);
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         vst2q(pDst,vecSrc);
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         /*
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****          * Decrement the blkCnt loop counter
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****          * Advance vector source and destination pointers
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****          */
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         pSrc += 16;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         pDst += 16;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         blkCnt --;
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     }
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****      /* Tail */
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     blkCnt = (blockSize & 0xF) >> 1;
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     while (blkCnt > 0U)
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     {
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       /* Calculate Complex Conjugate and store result in destination buffer. */
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       *pDst++ =  *pSrc++;
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       in1 = *pSrc++;
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       *pDst++ = __SSAT(-in1, 16);
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       /* Decrement loop counter */
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****       blkCnt--;
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     }
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** }
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #else
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** void arm_cmplx_conj_q15(
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   const q15_t * pSrc,
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         q15_t * pDst,
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         uint32_t numSamples)
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** {
  81              		.loc 2 105 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 8


  85              		@ link register save eliminated.
  86              	.LVL6:
  87 0000 30B4     		push	{r4, r5}
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 5, -4
  91              	.LVL7:
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         q31_t in1;                                     /* Temporary input variable */
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined (ARM_MATH_LOOPUNROLL) && defined (ARM_MATH_DSP)
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****         q31_t in2, in3, in4;                           /* Temporary input variables */
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   blkCnt = numSamples >> 2U;
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   while (blkCnt > 0U)
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   {
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined (ARM_MATH_DSP)
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = read_q15x2_ia (&pSrc);
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in2 = read_q15x2_ia (&pSrc);
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in3 = read_q15x2_ia (&pSrc);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in4 = read_q15x2_ia (&pSrc);
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = __QASX(0, in1);
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in2 = __QASX(0, in2);
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in3 = __QASX(0, in3);
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in4 = __QASX(0, in4);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #else
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = __QSAX(0, in1);
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in2 = __QSAX(0, in2);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in3 = __QSAX(0, in3);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in4 = __QSAX(0, in4);
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = ((uint32_t) in1 >> 16) | ((uint32_t) in1 << 16);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in2 = ((uint32_t) in2 >> 16) | ((uint32_t) in2 << 16);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in3 = ((uint32_t) in3 >> 16) | ((uint32_t) in3 << 16);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in4 = ((uint32_t) in4 >> 16) | ((uint32_t) in4 << 16);
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     write_q15x2_ia (&pDst, in1);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     write_q15x2_ia (&pDst, in2);
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     write_q15x2_ia (&pDst, in3);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     write_q15x2_ia (&pDst, in4);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #else
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ =  *pSrc++;
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = *pSrc++;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = (in1 == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in1;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 9


 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ =  *pSrc++;
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = *pSrc++;
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = (in1 == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in1;
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ =  *pSrc++;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = *pSrc++;
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = (in1 == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in1;
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ =  *pSrc++;
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = *pSrc++;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = (in1 == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in1;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* Decrement loop counter */
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     blkCnt--;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   }
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   blkCnt = numSamples % 0x4U;
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #else
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   /* Initialize blkCnt with number of samples */
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   blkCnt = numSamples;
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   while (blkCnt > 0U)
  92              		.loc 2 185 0
  93 0002 13E0     		b	.L6
  94              	.LVL8:
  95              	.L8:
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   {
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ =  *pSrc++;
  96              		.loc 2 190 0
  97 0004 0446     		mov	r4, r0
  98 0006 34F8043B 		ldrh	r3, [r4], #4
  99 000a 0D46     		mov	r5, r1
 100 000c 25F8043B 		strh	r3, [r5], #4	@ movhi
 101              	.LVL9:
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     in1 = *pSrc++;
 102              		.loc 2 191 0
 103 0010 4388     		ldrh	r3, [r0, #2]
 104 0012 18B2     		sxth	r0, r3
 105              	.LVL10:
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined (ARM_MATH_DSP)
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = __SSAT(-in1, 16);
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #else
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     *pDst++ = (in1 == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in1;
 106              		.loc 2 195 0
 107 0014 10F5004F 		cmn	r0, #32768
 108 0018 02D0     		beq	.L9
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 10


 109              		.loc 2 195 0 is_stmt 0 discriminator 1
 110 001a 5B42     		negs	r3, r3
 111 001c 9BB2     		uxth	r3, r3
 112 001e 01E0     		b	.L7
 113              	.L9:
 114              		.loc 2 195 0
 115 0020 47F6FF73 		movw	r3, #32767
 116              	.L7:
 117              		.loc 2 195 0 discriminator 4
 118 0024 4B80     		strh	r3, [r1, #2]	@ movhi
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     /* Decrement loop counter */
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****     blkCnt--;
 119              		.loc 2 199 0 is_stmt 1 discriminator 4
 120 0026 013A     		subs	r2, r2, #1
 121              	.LVL11:
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #endif
 122              		.loc 2 195 0 discriminator 4
 123 0028 2946     		mov	r1, r5
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** #if defined (ARM_MATH_DSP)
 124              		.loc 2 191 0 discriminator 4
 125 002a 2046     		mov	r0, r4
 126              	.LVL12:
 127              	.L6:
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   {
 128              		.loc 2 185 0
 129 002c 002A     		cmp	r2, #0
 130 002e E9D1     		bne	.L8
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c ****   }
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** 
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q15.c **** }
 131              		.loc 2 202 0
 132 0030 30BC     		pop	{r4, r5}
 133              		.cfi_restore 5
 134              		.cfi_restore 4
 135              		.cfi_def_cfa_offset 0
 136 0032 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE85:
 139              		.size	arm_cmplx_conj_q15, .-arm_cmplx_conj_q15
 140              		.section	.text.arm_cmplx_conj_q31,"ax",%progbits
 141              		.align	2
 142              		.global	arm_cmplx_conj_q31
 143              		.thumb
 144              		.thumb_func
 145              		.type	arm_cmplx_conj_q31, %function
 146              	arm_cmplx_conj_q31:
 147              	.LFB86:
 148              		.file 3 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_conj_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Title:        arm_cmplx_conj_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Description:  Q31 complex conjugate
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * $Revision:    V1.9.0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 11


   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @addtogroup cmplx_conj
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @brief         Q31 complex conjugate.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @param[in]     pSrc        points to the input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @param[out]    pDst        points to the output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****                    The Q31 value -1 (0x80000000) is saturated to the maximum allowable positive val
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****  */
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** void arm_cmplx_conj_q31(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   const q31_t * pSrc,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         q31_t * pDst,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         uint32_t numSamples)
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** {
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     uint32_t blockSize = numSamples * CMPLX_DIM;   /* loop counters */
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     uint32_t blkCnt;
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     q31x4x2_t vecSrc;
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     q31_t in;                                      /* Temporary input variable */
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     q31x4_t zero;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 12


  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     zero = vdupq_n_s32(0);
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****    
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* Compute 4 real samples at a time */
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     blkCnt = blockSize >> 3U;
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     while (blkCnt > 0U)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     {
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         vecSrc = vld2q(pSrc);
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         vecSrc.val[1] = vqsubq(zero, vecSrc.val[1]);
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         vst2q(pDst,vecSrc);
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         /*
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****          * Decrement the blkCnt loop counter
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****          * Advance vector source and destination pointers
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****          */
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         pSrc += 8;
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         pDst += 8;
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         blkCnt --;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     }
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****      /* Tail */
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     blkCnt = (blockSize & 0x7) >> 1;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     while (blkCnt > 0U)
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     {
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       /* Calculate Complex Conjugate and store result in destination buffer. */
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       *pDst++ =  *pSrc++;
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       in = *pSrc++;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       *pDst++ = __QSUB(0, in);
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       /* Decrement loop counter */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****       blkCnt--;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     }
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** }
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** void arm_cmplx_conj_q31(
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   const q31_t * pSrc,
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         q31_t * pDst,
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         uint32_t numSamples)
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** {
 149              		.loc 3 111 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL13:
 155 0000 30B4     		push	{r4, r5}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 5, -4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 13


 159              	.LVL14:
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****         q31_t in;                                      /* Temporary input variable */
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   blkCnt = numSamples >> 2U;
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   while (blkCnt > 0U)
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   {
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ =  *pSrc++;
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     in = *pSrc++;
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = __QSUB(0, in);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ =  *pSrc++;
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     in =  *pSrc++;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = __QSUB(0, in);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ =  *pSrc++;
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     in = *pSrc++;
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = __QSUB(0, in);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ =  *pSrc++;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     in = *pSrc++;
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = __QSUB(0, in);
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* Decrement loop counter */
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     blkCnt--;
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   }
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   blkCnt = numSamples % 0x4U;
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   /* Initialize blkCnt with number of samples */
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   blkCnt = numSamples;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 14


 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   while (blkCnt > 0U)
 160              		.loc 3 171 0
 161 0002 11E0     		b	.L12
 162              	.LVL15:
 163              	.L14:
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   {
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* C[0] + jC[1] = A[0]+ j(-1)A[1] */
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* Calculate Complex Conjugate and store result in destination buffer. */
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ =  *pSrc++;
 164              		.loc 3 176 0
 165 0004 0446     		mov	r4, r0
 166 0006 54F8083B 		ldr	r3, [r4], #8
 167 000a 0D46     		mov	r5, r1
 168 000c 45F8083B 		str	r3, [r5], #8
 169              	.LVL16:
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     in = *pSrc++;
 170              		.loc 3 177 0
 171 0010 4368     		ldr	r3, [r0, #4]
 172              	.LVL17:
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = __QSUB(0, in);
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #else
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 173              		.loc 3 181 0
 174 0012 B3F1004F 		cmp	r3, #-2147483648
 175 0016 01D0     		beq	.L15
 176              		.loc 3 181 0 is_stmt 0 discriminator 1
 177 0018 5B42     		negs	r3, r3
 178              	.LVL18:
 179 001a 01E0     		b	.L13
 180              	.LVL19:
 181              	.L15:
 182              		.loc 3 181 0
 183 001c 6FF00043 		mvn	r3, #-2147483648
 184              	.LVL20:
 185              	.L13:
 186              		.loc 3 181 0 discriminator 4
 187 0020 4B60     		str	r3, [r1, #4]
 188              	.LVL21:
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     /* Decrement loop counter */
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****     blkCnt--;
 189              		.loc 3 185 0 is_stmt 1 discriminator 4
 190 0022 013A     		subs	r2, r2, #1
 191              	.LVL22:
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #endif
 192              		.loc 3 181 0 discriminator 4
 193 0024 2946     		mov	r1, r5
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** #if defined (ARM_MATH_DSP)
 194              		.loc 3 177 0 discriminator 4
 195 0026 2046     		mov	r0, r4
 196              	.LVL23:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 15


 197              	.L12:
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   {
 198              		.loc 3 171 0
 199 0028 002A     		cmp	r2, #0
 200 002a EBD1     		bne	.L14
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c ****   }
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** 
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_conj_q31.c **** }
 201              		.loc 3 188 0
 202 002c 30BC     		pop	{r4, r5}
 203              		.cfi_restore 5
 204              		.cfi_restore 4
 205              		.cfi_def_cfa_offset 0
 206 002e 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE86:
 209              		.size	arm_cmplx_conj_q31, .-arm_cmplx_conj_q31
 210              		.global	__aeabi_fmul
 211              		.global	__aeabi_fadd
 212              		.global	__aeabi_fsub
 213              		.section	.text.arm_cmplx_dot_prod_f32,"ax",%progbits
 214              		.align	2
 215              		.global	arm_cmplx_dot_prod_f32
 216              		.thumb
 217              		.thumb_func
 218              		.type	arm_cmplx_dot_prod_f32, %function
 219              	arm_cmplx_dot_prod_f32:
 220              	.LFB87:
 221              		.file 4 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_dot_prod_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Title:        arm_cmplx_dot_prod_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Description:  Floating-point complex dot product
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 16


  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @defgroup cmplx_dot_prod Complex Dot Product
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   Computes the dot product of two complex vectors.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The <code>pSrcA</code> points to the first complex input vector and
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <code>pSrcB</code> points to the second complex input vector.
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   and the data in each array is stored in an interleaved fashion
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   (real, imag, real, imag, ...).
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   Each array has a total of <code>2*numSamples</code> values.
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The underlying algorithm is used:
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <pre>
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   realResult = 0;
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   imagResult = 0;
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   for (n = 0; n < numSamples; n++) {
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       realResult += pSrcA[(2*n)+0] * pSrcB[(2*n)+0] - pSrcA[(2*n)+1] * pSrcB[(2*n)+1];
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imagResult += pSrcA[(2*n)+0] * pSrcB[(2*n)+1] + pSrcA[(2*n)+1] * pSrcB[(2*n)+0];
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   </pre>
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @addtogroup cmplx_dot_prod
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @{
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @brief         Floating-point complex dot product.
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     pSrcA       points to the first input vector
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     pSrcB       points to the second input vector
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     numSamples  number of samples in each vector
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[out]    realResult  real part of the result returned here
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[out]    imagResult  imaginary part of the result returned here
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @return        none
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     const float32_t * pSrcA,
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     const float32_t * pSrcB,
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     uint32_t numSamples,
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t * realResult,
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t * imagResult)
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 17


  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     int32_t         blkCnt;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t       real_sum, imag_sum;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     f32x4_t         vecSrcA, vecSrcB;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     f32x4_t         vec_acc = vdupq_n_f32(0.0f);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     f32x4_t         vecSrcC, vecSrcD;
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = numSamples >> 2;
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt -= 1;
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     if (blkCnt > 0) {
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* should give more freedom to generate stall free code */
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcA = vld1q(pSrcA);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcB = vld1q(pSrcB);
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 4;
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 4;
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         while (blkCnt > 0) {
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq(vec_acc, vecSrcA, vecSrcB);
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcC = vld1q(pSrcA);
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcA += 4;
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_rot90(vec_acc, vecSrcA, vecSrcB);
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcD = vld1q(pSrcB);
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcB += 4;
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq(vec_acc, vecSrcC, vecSrcD);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcA = vld1q(pSrcA);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcA += 4;
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_rot90(vec_acc, vecSrcC, vecSrcD);
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcB = vld1q(pSrcB);
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcB += 4;
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             /*
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****              * Decrement the blockSize loop counter
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****              */
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             blkCnt--;
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         }
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq(vec_acc, vecSrcA, vecSrcB);
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcC = vld1q(pSrcA);
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq_rot90(vec_acc, vecSrcA, vecSrcB);
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcD = vld1q(pSrcB);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq(vec_acc, vecSrcC, vecSrcD);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq_rot90(vec_acc, vecSrcC, vecSrcD);
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /*
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          * tail
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          */
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         blkCnt = CMPLX_DIM * (numSamples & 3);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         while (blkCnt > 0) {
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcA += 4;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcB += 4;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcA = vldrwq_z_f32(pSrcA, p);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcB = vldrwq_z_f32(pSrcB, p);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 18


 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_m(vec_acc, vecSrcA, vecSrcB, p);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_rot90_m(vec_acc, vecSrcA, vecSrcB, p);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             blkCnt -= 4;
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         }
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     } else {
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* small vector */
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         blkCnt = numSamples * CMPLX_DIM;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vdupq_n_f32(0.0f);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         do {
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcA = vldrwq_z_f32(pSrcA, p);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vecSrcB = vldrwq_z_f32(pSrcB, p);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_m(vec_acc, vecSrcA, vecSrcB, p);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             vec_acc = vcmlaq_rot90_m(vec_acc, vecSrcA, vecSrcB, p);
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             /*
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****              * Decrement the blkCnt loop counter
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****              * Advance vector source and destination pointers
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****              */
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcA += 4;
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             pSrcB += 4;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****             blkCnt -= 4;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         }
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         while (blkCnt > 0);
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     }
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum = vgetq_lane(vec_acc, 0) + vgetq_lane(vec_acc, 2);
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum = vgetq_lane(vec_acc, 1) + vgetq_lane(vec_acc, 3);
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /*
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****      * Store the real and imaginary results in the destination buffers
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****      */
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     *realResult = real_sum;
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     *imagResult = imag_sum;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   const float32_t * pSrcA,
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   const float32_t * pSrcB,
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         uint32_t numSamples,
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t * realResult,
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t * imagResult)
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
 222              		.loc 4 189 0
 223              		.cfi_startproc
 224              		@ args = 4, pretend = 0, frame = 8
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL24:
 227 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 228              		.cfi_def_cfa_offset 36
 229              		.cfi_offset 4, -36
 230              		.cfi_offset 5, -32
 231              		.cfi_offset 6, -28
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 19


 232              		.cfi_offset 7, -24
 233              		.cfi_offset 8, -20
 234              		.cfi_offset 9, -16
 235              		.cfi_offset 10, -12
 236              		.cfi_offset 11, -8
 237              		.cfi_offset 14, -4
 238 0004 83B0     		sub	sp, sp, #12
 239              		.cfi_def_cfa_offset 48
 240 0006 1646     		mov	r6, r2
 241 0008 0193     		str	r3, [sp, #4]
 242              	.LVL25:
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result variables */
 243              		.loc 4 191 0
 244 000a 0023     		movs	r3, #0
 245              	.LVL26:
 246 000c 0093     		str	r3, [sp]	@ float
 247 000e 9B46     		mov	fp, r3
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t a0,b0,c0,d0;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x4x2_t vec1,vec2,vec3,vec4;
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x4_t accR,accI;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x2_t accum = vdup_n_f32(0);
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accR = vdupq_n_f32(0.0f);
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accI = vdupq_n_f32(0.0f);
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Loop unrolling: Compute 8 outputs at a time */
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = numSamples >> 3U;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     while (blkCnt > 0U)
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     {
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* C = (A[0]+jA[1])*(B[0]+jB[1]) + ...  */
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	      vec1 = vld2q_f32(pSrcA);
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec2 = vld2q_f32(pSrcB);
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Increment pointers */
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 8;
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 8;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlaq_f32(accR,vec1.val[0],vec2.val[0]);
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlsq_f32(accR,vec1.val[1],vec2.val[1]);
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec1.val[1],vec2.val[0]);
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec1.val[0],vec2.val[1]);
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec3 = vld2q_f32(pSrcA);
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec4 = vld2q_f32(pSrcB);
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Increment pointers */
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 8;
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 8;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 20


 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlaq_f32(accR,vec3.val[0],vec4.val[0]);
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlsq_f32(accR,vec3.val[1],vec4.val[1]);
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec3.val[1],vec4.val[0]);
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec3.val[0],vec4.val[1]);
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* Decrement the loop counter */
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         blkCnt--;
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     }
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accum = vpadd_f32(vget_low_f32(accR), vget_high_f32(accR));
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += vget_lane_f32(accum, 0) + vget_lane_f32(accum, 1);
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accum = vpadd_f32(vget_low_f32(accI), vget_high_f32(accI));
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += vget_lane_f32(accum, 0) + vget_lane_f32(accum, 1);
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Tail */
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = numSamples & 0x7;
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 256:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 257:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples >> 2U;
 258:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0U)
 260:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 261:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 263:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 264:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 265:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 266:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 267:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 268:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 269:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 270:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 271:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 272:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 273:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 274:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 275:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 276:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 277:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 278:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 279:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 280:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 281:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 282:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 283:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 284:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 285:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 286:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 287:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 21


 288:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 289:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 290:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 291:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 292:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 293:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 294:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 295:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 296:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 297:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 298:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 299:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 300:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 301:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Decrement loop counter */
 302:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt--;
 303:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 304:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 305:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 306:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples % 0x4U;
 307:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 308:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 309:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 310:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 311:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples;
 312:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 313:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 314:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 315:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 316:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0U)
 248              		.loc 4 316 0
 249 0010 2DE0     		b	.L18
 250              	.LVL27:
 251              	.L19:
 317:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 318:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 252              		.loc 4 318 0
 253 0012 0446     		mov	r4, r0
 254 0014 54F808AB 		ldr	r10, [r4], #8	@ float
 255              	.LVL28:
 319:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 256              		.loc 4 319 0
 257 0018 D0F80480 		ldr	r8, [r0, #4]	@ float
 258              	.LVL29:
 320:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 259              		.loc 4 320 0
 260 001c 0D46     		mov	r5, r1
 261 001e 55F8087B 		ldr	r7, [r5], #8	@ float
 262              	.LVL30:
 321:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 263              		.loc 4 321 0
 264 0022 D1F80490 		ldr	r9, [r1, #4]	@ float
 265              	.LVL31:
 322:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 323:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 266              		.loc 4 323 0
 267 0026 5046     		mov	r0, r10
 268 0028 3946     		mov	r1, r7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 22


 269 002a FFF7FEFF 		bl	__aeabi_fmul
 270              	.LVL32:
 271 002e 5946     		mov	r1, fp
 272 0030 FFF7FEFF 		bl	__aeabi_fadd
 273              	.LVL33:
 274 0034 8346     		mov	fp, r0
 275              	.LVL34:
 324:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 276              		.loc 4 324 0
 277 0036 5046     		mov	r0, r10
 278              	.LVL35:
 279 0038 4946     		mov	r1, r9
 280 003a FFF7FEFF 		bl	__aeabi_fmul
 281              	.LVL36:
 282 003e 0099     		ldr	r1, [sp]	@ float
 283 0040 FFF7FEFF 		bl	__aeabi_fadd
 284              	.LVL37:
 285 0044 8246     		mov	r10, r0
 286              	.LVL38:
 325:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 287              		.loc 4 325 0
 288 0046 4046     		mov	r0, r8
 289              	.LVL39:
 290 0048 4946     		mov	r1, r9
 291 004a FFF7FEFF 		bl	__aeabi_fmul
 292              	.LVL40:
 293 004e 0146     		mov	r1, r0
 294 0050 5846     		mov	r0, fp
 295 0052 FFF7FEFF 		bl	__aeabi_fsub
 296              	.LVL41:
 297 0056 8346     		mov	fp, r0
 298              	.LVL42:
 326:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 299              		.loc 4 326 0
 300 0058 4046     		mov	r0, r8
 301              	.LVL43:
 302 005a 3946     		mov	r1, r7
 303 005c FFF7FEFF 		bl	__aeabi_fmul
 304              	.LVL44:
 305 0060 5146     		mov	r1, r10
 306 0062 FFF7FEFF 		bl	__aeabi_fadd
 307              	.LVL45:
 308 0066 0090     		str	r0, [sp]	@ float
 309              	.LVL46:
 327:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 328:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Decrement loop counter */
 329:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt--;
 310              		.loc 4 329 0
 311 0068 013E     		subs	r6, r6, #1
 312              	.LVL47:
 321:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 313              		.loc 4 321 0
 314 006a 2946     		mov	r1, r5
 319:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 315              		.loc 4 319 0
 316 006c 2046     		mov	r0, r4
 317              	.LVL48:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 23


 318              	.L18:
 316:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 319              		.loc 4 316 0
 320 006e 002E     		cmp	r6, #0
 321 0070 CFD1     		bne	.L19
 330:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 331:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 332:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Store real and imaginary result in destination buffer. */
 333:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *realResult = real_sum;
 322              		.loc 4 333 0
 323 0072 019B     		ldr	r3, [sp, #4]
 324 0074 C3F800B0 		str	fp, [r3]	@ float
 334:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *imagResult = imag_sum;
 325              		.loc 4 334 0
 326 0078 0C9B     		ldr	r3, [sp, #48]
 327 007a 009A     		ldr	r2, [sp]	@ float
 328 007c 1A60     		str	r2, [r3]	@ float
 335:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 329              		.loc 4 335 0
 330 007e 03B0     		add	sp, sp, #12
 331              		.cfi_def_cfa_offset 36
 332              	.LVL49:
 333              		@ sp needed
 334 0080 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 335              		.cfi_endproc
 336              	.LFE87:
 337              		.size	arm_cmplx_dot_prod_f32, .-arm_cmplx_dot_prod_f32
 338              		.section	.text.arm_cmplx_dot_prod_q15,"ax",%progbits
 339              		.align	2
 340              		.global	arm_cmplx_dot_prod_q15
 341              		.thumb
 342              		.thumb_func
 343              		.type	arm_cmplx_dot_prod_q15, %function
 344              	arm_cmplx_dot_prod_q15:
 345              	.LFB88:
 346              		.file 5 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_dot_prod_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Title:        arm_cmplx_dot_prod_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Description:  Processing function for the Q15 Complex Dot product
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 24


  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @addtogroup cmplx_dot_prod
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @brief         Q15 complex dot product.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @param[in]     pSrcA       points to the first input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @param[in]     pSrcB       points to the second input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @param[out]    realResult  real part of the result returned here
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @param[out]    imagResult  imaginary part of the result returned her
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @return        none
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****                    The function is implemented using an internal 64-bit accumulator.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****                    The intermediate 1.15 by 1.15 multiplications are performed with full precision 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****                    These are accumulated in a 64-bit accumulator with 34.30 precision.
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****                    As a final step, the accumulators are converted to 8.24 format.
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****                    The return results <code>realResult</code> and <code>imagResult</code> are in 8.
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****  */
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** void arm_cmplx_dot_prod_q15(
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   const q15_t * pSrcA,
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   const q15_t * pSrcB,
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         uint32_t numSamples,
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q31_t * realResult,
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q31_t * imagResult)
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** {
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     int32_t         blkCnt;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     q63_t           accReal = 0LL;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     q63_t           accImag = 0LL;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     q15x8_t         vecSrcA, vecSrcB;
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     q15x8_t         vecSrcC, vecSrcD;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     blkCnt = (numSamples >> 3);
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     blkCnt -= 1;
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     if (blkCnt > 0) {
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         /* should give more freedom to generate stall free code */
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcA = vld1q(pSrcA);
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcB = vld1q(pSrcB);
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         pSrcA += 8;
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         pSrcB += 8;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 25


  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         while (blkCnt > 0) {
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accReal = vmlsldavaq(accReal, vecSrcA, vecSrcB);
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcC = vld1q(pSrcA);
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcA += 8;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accImag = vmlaldavaxq(accImag, vecSrcA, vecSrcB);
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcD = vld1q(pSrcB);
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcB += 8;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accReal = vmlsldavaq(accReal, vecSrcC, vecSrcD);
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcA = vld1q(pSrcA);
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcA += 8;
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accImag = vmlaldavaxq(accImag, vecSrcC, vecSrcD);
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcB = vld1q(pSrcB);
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcB += 8;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             /*
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****              * Decrement the blockSize loop counter
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****              */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             blkCnt--;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         }
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         accReal = vmlsldavaq(accReal, vecSrcA, vecSrcB);
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcC = vld1q(pSrcA);
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         accImag = vmlaldavaxq(accImag, vecSrcA, vecSrcB);
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcD = vld1q(pSrcB);
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         accReal = vmlsldavaq(accReal, vecSrcC, vecSrcD);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcA = vld1q(pSrcA);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         accImag = vmlaldavaxq(accImag, vecSrcC, vecSrcD);
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         vecSrcB = vld1q(pSrcB);
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         /*
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****          * tail
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****          */
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         blkCnt = CMPLX_DIM * (numSamples & 7);
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         do {
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             mve_pred16_t    p = vctp16q(blkCnt);
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcA += 8;
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcB += 8;
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcA = vldrhq_z_s16(pSrcA, p);
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcB = vldrhq_z_s16(pSrcB, p);
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accReal = vmlsldavaq_p(accReal, vecSrcA, vecSrcB, p);
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accImag = vmlaldavaxq_p(accImag, vecSrcA, vecSrcB, p);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             blkCnt -= 8;
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         }
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         while ((int32_t) blkCnt > 0);
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     } else {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 26


 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         blkCnt = numSamples * CMPLX_DIM;
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         while (blkCnt > 0) {
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             mve_pred16_t    p = vctp16q(blkCnt);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcA = vldrhq_z_s16(pSrcA, p);
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             vecSrcB = vldrhq_z_s16(pSrcB, p);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accReal = vmlsldavaq_p(accReal, vecSrcA, vecSrcB, p);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             accImag = vmlaldavaxq_p(accImag, vecSrcA, vecSrcB, p);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             /*
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****              * Decrement the blkCnt loop counter
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****              * Advance vector source and destination pointers
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****              */
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcA += 8;
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             pSrcB += 8;
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****             blkCnt -= 8;
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         }
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     }
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     *realResult = asrl(accReal, (14 - 8));
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     *imagResult = asrl(accImag, (14 - 8));
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** }
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #else
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** void arm_cmplx_dot_prod_q15(
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   const q15_t * pSrcA,
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   const q15_t * pSrcB,
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         uint32_t numSamples,
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q31_t * realResult,
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q31_t * imagResult)
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** {
 347              		.loc 5 165 0
 348              		.cfi_startproc
 349              		@ args = 4, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL50:
 352 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 353              		.cfi_def_cfa_offset 32
 354              		.cfi_offset 4, -32
 355              		.cfi_offset 5, -28
 356              		.cfi_offset 6, -24
 357              		.cfi_offset 7, -20
 358              		.cfi_offset 8, -16
 359              		.cfi_offset 9, -12
 360              		.cfi_offset 10, -8
 361              		.cfi_offset 14, -4
 362 0004 9A46     		mov	r10, r3
 363              	.LVL51:
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q63_t real_sum = 0, imag_sum = 0;              /* Temporary result variables */
 364              		.loc 5 167 0
 365 0006 0026     		movs	r6, #0
 366 0008 0027     		movs	r7, #0
 367 000a B046     		mov	r8, r6
 368 000c B946     		mov	r9, r7
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****         q15_t a0,b0,c0,d0;
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 27


 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   blkCnt = numSamples >> 2U;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   while (blkCnt > 0U)
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   {
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     a0 = *pSrcA++;
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     b0 = *pSrcA++;
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     d0 = *pSrcB++;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum += (q31_t)a0 * c0;
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)a0 * d0;
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum -= (q31_t)b0 * d0;
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)b0 * c0;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     a0 = *pSrcA++;
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     b0 = *pSrcA++;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     d0 = *pSrcB++;
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum += (q31_t)a0 * c0;
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)a0 * d0;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum -= (q31_t)b0 * d0;
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)b0 * c0;
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     a0 = *pSrcA++;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     b0 = *pSrcA++;
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     d0 = *pSrcB++;
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum += (q31_t)a0 * c0;
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)a0 * d0;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum -= (q31_t)b0 * d0;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)b0 * c0;
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     a0 = *pSrcA++;
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     b0 = *pSrcA++;
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     d0 = *pSrcB++;
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum += (q31_t)a0 * c0;
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)a0 * d0;
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum -= (q31_t)b0 * d0;
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)b0 * c0;
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     /* Decrement loop counter */
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     blkCnt--;
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   }
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   blkCnt = numSamples % 0x4U;
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #else
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Initialize blkCnt with number of samples */
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   blkCnt = numSamples;
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 28


 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   while (blkCnt > 0U)
 369              		.loc 5 230 0
 370 000e 23E0     		b	.L22
 371              	.LVL52:
 372              	.L23:
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   {
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     a0 = *pSrcA++;
 373              		.loc 5 232 0
 374 0010 0346     		mov	r3, r0
 375              	.LVL53:
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     b0 = *pSrcA++;
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 376              		.loc 5 234 0
 377 0012 0C46     		mov	r4, r1
 378              	.LVL54:
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     d0 = *pSrcB++;
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum += (q31_t)a0 * c0;
 379              		.loc 5 237 0
 380 0014 33F904EB 		ldrsh	lr, [r3], #4
 381 0018 34F9045B 		ldrsh	r5, [r4], #4
 382 001c 05FB0EFC 		mul	ip, r5, lr
 383 0020 18EB0C08 		adds	r8, r8, ip
 384              	.LVL55:
 385 0024 49EBEC79 		adc	r9, r9, ip, asr #31
 386              	.LVL56:
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)a0 * d0;
 387              		.loc 5 238 0
 388 0028 B1F90210 		ldrsh	r1, [r1, #2]
 389              	.LVL57:
 390 002c 01FB0EFE 		mul	lr, r1, lr
 391 0030 16EB0E06 		adds	r6, r6, lr
 392              	.LVL58:
 393 0034 47EBEE77 		adc	r7, r7, lr, asr #31
 394              	.LVL59:
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     real_sum -= (q31_t)b0 * d0;
 395              		.loc 5 239 0
 396 0038 B0F90200 		ldrsh	r0, [r0, #2]
 397              	.LVL60:
 398 003c 00FB01F1 		mul	r1, r0, r1
 399 0040 B8EB0108 		subs	r8, r8, r1
 400              	.LVL61:
 401 0044 69EBE179 		sbc	r9, r9, r1, asr #31
 402              	.LVL62:
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     imag_sum += (q31_t)b0 * c0;
 403              		.loc 5 240 0
 404 0048 00FB05F5 		mul	r5, r0, r5
 405 004c 7619     		adds	r6, r6, r5
 406              	.LVL63:
 407 004e 47EBE577 		adc	r7, r7, r5, asr #31
 408              	.LVL64:
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     /* Decrement loop counter */
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     blkCnt--;
 409              		.loc 5 243 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 29


 410 0052 013A     		subs	r2, r2, #1
 411              	.LVL65:
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 412              		.loc 5 235 0
 413 0054 2146     		mov	r1, r4
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****     c0 = *pSrcB++;
 414              		.loc 5 233 0
 415 0056 1846     		mov	r0, r3
 416              	.LVL66:
 417              	.L22:
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   {
 418              		.loc 5 230 0
 419 0058 002A     		cmp	r2, #0
 420 005a D9D1     		bne	.L23
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   }
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c **** 
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Store real and imaginary result in 8.24 format  */
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Convert real data in 34.30 to 8.24 by 6 right shifts */
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   *realResult = (q31_t) (real_sum >> 6);
 421              		.loc 5 248 0
 422 005c 4FEA9813 		lsr	r3, r8, #6
 423 0060 43EA8963 		orr	r3, r3, r9, lsl #26
 424 0064 CAF80030 		str	r3, [r10]
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   /* Convert imaginary data in 34.30 to 8.24 by 6 right shifts */
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q15.c ****   *imagResult = (q31_t) (imag_sum >> 6);
 425              		.loc 5 250 0
 426 0068 B309     		lsrs	r3, r6, #6
 427 006a 43EA8763 		orr	r3, r3, r7, lsl #26
 428 006e 089A     		ldr	r2, [sp, #32]
 429              	.LVL67:
 430 0070 1360     		str	r3, [r2]
 431 0072 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 432              		.cfi_endproc
 433              	.LFE88:
 434              		.size	arm_cmplx_dot_prod_q15, .-arm_cmplx_dot_prod_q15
 435 0076 00BF     		.section	.text.arm_cmplx_dot_prod_q31,"ax",%progbits
 436              		.align	2
 437              		.global	arm_cmplx_dot_prod_q31
 438              		.thumb
 439              		.thumb_func
 440              		.type	arm_cmplx_dot_prod_q31, %function
 441              	arm_cmplx_dot_prod_q31:
 442              	.LFB89:
 443              		.file 6 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_dot_prod_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Title:        arm_cmplx_dot_prod_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Description:  Q31 complex dot product
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 30


  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @addtogroup cmplx_dot_prod
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @brief         Q31 complex dot product.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @param[in]     pSrcA       points to the first input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @param[in]     pSrcB       points to the second input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @param[out]    realResult  real part of the result returned here
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @param[out]    imagResult  imaginary part of the result returned here
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @return        none
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    The function is implemented using an internal 64-bit accumulator.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    The intermediate 1.31 by 1.31 multiplications are performed with 64-bit precisio
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    The internal real and imaginary accumulators are in 16.48 format and provide 15 
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    Additions are nonsaturating and no overflow will occur as long as <code>numSampl
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    The return results <code>realResult</code> and <code>imagResult</code> are in 16
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****                    Input down scaling is not required.
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****  */
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** void arm_cmplx_dot_prod_q31(
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   const q31_t * pSrcA,
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   const q31_t * pSrcB,
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         uint32_t numSamples,
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q63_t * realResult,
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q63_t * imagResult)
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** {
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     int32_t         blkCnt;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     q63_t           accReal = 0LL;
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     q63_t           accImag = 0LL;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     q31x4_t         vecSrcA, vecSrcB;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 31


  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     q31x4_t         vecSrcC, vecSrcD;
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     blkCnt = numSamples >> 2;
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     blkCnt -= 1;
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     if (blkCnt > 0) {
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         /* should give more freedom to generate stall free code */
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcA = vld1q(pSrcA);
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcB = vld1q(pSrcB);
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         pSrcA += 4;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         pSrcB += 4;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         while (blkCnt > 0) {
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accReal = vrmlsldavhaq(accReal, vecSrcA, vecSrcB);
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcC = vld1q(pSrcA);
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcA += 4;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accImag = vrmlaldavhaxq(accImag, vecSrcA, vecSrcB);
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcD = vld1q(pSrcB);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcB += 4;
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accReal = vrmlsldavhaq(accReal, vecSrcC, vecSrcD);
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcA = vld1q(pSrcA);
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcA += 4;
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accImag = vrmlaldavhaxq(accImag, vecSrcC, vecSrcD);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcB = vld1q(pSrcB);
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcB += 4;
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             /*
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****              * Decrement the blockSize loop counter
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****              */
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             blkCnt--;
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         }
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         accReal = vrmlsldavhaq(accReal, vecSrcA, vecSrcB);
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcC = vld1q(pSrcA);
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         accImag = vrmlaldavhaxq(accImag, vecSrcA, vecSrcB);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcD = vld1q(pSrcB);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         accReal = vrmlsldavhaq(accReal, vecSrcC, vecSrcD);
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcA = vld1q(pSrcA);
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         accImag = vrmlaldavhaxq(accImag, vecSrcC, vecSrcD);
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         vecSrcB = vld1q(pSrcB);
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         /*
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****          * tail
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****          */
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         blkCnt = CMPLX_DIM * (numSamples & 3);
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         do {
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcA += 4;
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcB += 4;
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 32


 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcA = vldrwq_z_s32(pSrcA, p);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcB = vldrwq_z_s32(pSrcB, p);
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accReal = vrmlsldavhaq_p(accReal, vecSrcA, vecSrcB, p);
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accImag = vrmlaldavhaxq_p(accImag, vecSrcA, vecSrcB, p);
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             blkCnt -= 4;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         }
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         while ((int32_t) blkCnt > 0);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     } else {
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         blkCnt = numSamples * CMPLX_DIM;
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         while (blkCnt > 0) {
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcA = vldrwq_z_s32(pSrcA, p);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             vecSrcB = vldrwq_z_s32(pSrcB, p);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accReal = vrmlsldavhaq_p(accReal, vecSrcA, vecSrcB, p);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             accImag = vrmlaldavhaxq_p(accImag, vecSrcA, vecSrcB, p);
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             /*
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****              * Decrement the blkCnt loop counter
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****              * Advance vector source and destination pointers
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****              */
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcA += 4;
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             pSrcB += 4;
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****             blkCnt -= 4;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         }
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     }
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     *realResult = asrl(accReal, (14 - 8));
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     *imagResult = asrl(accImag, (14 - 8));
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** }
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #else
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** void arm_cmplx_dot_prod_q31(
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   const q31_t * pSrcA,
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   const q31_t * pSrcB,
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         uint32_t numSamples,
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q63_t * realResult,
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q63_t * imagResult)
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** {
 444              		.loc 6 169 0
 445              		.cfi_startproc
 446              		@ args = 4, pretend = 0, frame = 56
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL68:
 449 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 450              		.cfi_def_cfa_offset 36
 451              		.cfi_offset 4, -36
 452              		.cfi_offset 5, -32
 453              		.cfi_offset 6, -28
 454              		.cfi_offset 7, -24
 455              		.cfi_offset 8, -20
 456              		.cfi_offset 9, -16
 457              		.cfi_offset 10, -12
 458              		.cfi_offset 11, -8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 33


 459              		.cfi_offset 14, -4
 460 0004 8FB0     		sub	sp, sp, #60
 461              		.cfi_def_cfa_offset 96
 462 0006 9446     		mov	ip, r2
 463 0008 0D93     		str	r3, [sp, #52]
 464              	.LVL69:
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q63_t real_sum = 0, imag_sum = 0;              /* Temporary result variables */
 465              		.loc 6 171 0
 466 000a 0022     		movs	r2, #0
 467              	.LVL70:
 468 000c 0023     		movs	r3, #0
 469              	.LVL71:
 470 000e CDE90823 		strd	r2, [sp, #32]
 471 0012 CDE90623 		strd	r2, [sp, #24]
 472 0016 0346     		mov	r3, r0
 473 0018 CDF830C0 		str	ip, [sp, #48]
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****         q31_t a0,b0,c0,d0;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   blkCnt = numSamples >> 2U;
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   while (blkCnt > 0U)
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   {
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     a0 = *pSrcA++;
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     b0 = *pSrcA++;
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     d0 = *pSrcB++;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum += ((q63_t)a0 * c0) >> 14;
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)a0 * d0) >> 14;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum -= ((q63_t)b0 * d0) >> 14;
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)b0 * c0) >> 14;
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     a0 = *pSrcA++;
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     b0 = *pSrcA++;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     d0 = *pSrcB++;
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum += ((q63_t)a0 * c0) >> 14;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)a0 * d0) >> 14;
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum -= ((q63_t)b0 * d0) >> 14;
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)b0 * c0) >> 14;
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     a0 = *pSrcA++;
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     b0 = *pSrcA++;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     d0 = *pSrcB++;
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum += ((q63_t)a0 * c0) >> 14;
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)a0 * d0) >> 14;
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum -= ((q63_t)b0 * d0) >> 14;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)b0 * c0) >> 14;
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     a0 = *pSrcA++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 34


 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     b0 = *pSrcA++;
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     d0 = *pSrcB++;
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum += ((q63_t)a0 * c0) >> 14;
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)a0 * d0) >> 14;
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum -= ((q63_t)b0 * d0) >> 14;
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)b0 * c0) >> 14;
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     /* Decrement loop counter */
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     blkCnt--;
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   }
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   blkCnt = numSamples % 0x4U;
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #else
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   /* Initialize blkCnt with number of samples */
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   blkCnt = numSamples;
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   while (blkCnt > 0U)
 474              		.loc 6 235 0
 475 001c 70E0     		b	.L26
 476              	.LVL72:
 477              	.L27:
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   {
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     a0 = *pSrcA++;
 478              		.loc 6 237 0
 479 001e 9C46     		mov	ip, r3
 480 0020 5CF8080B 		ldr	r0, [ip], #8
 481              	.LVL73:
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     b0 = *pSrcA++;
 482              		.loc 6 238 0
 483 0024 5C68     		ldr	r4, [r3, #4]
 484              	.LVL74:
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 485              		.loc 6 239 0
 486 0026 8E46     		mov	lr, r1
 487 0028 5EF8083B 		ldr	r3, [lr], #8
 488              	.LVL75:
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     d0 = *pSrcB++;
 489              		.loc 6 240 0
 490 002c 4A68     		ldr	r2, [r1, #4]
 491              	.LVL76:
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum += ((q63_t)a0 * c0) >> 14;
 492              		.loc 6 242 0
 493 002e 4FEAE07B 		asr	fp, r0, #31
 494 0032 1E46     		mov	r6, r3
 495 0034 DF17     		asrs	r7, r3, #31
 496 0036 CDE90A67 		strd	r6, [sp, #40]
 497 003a 3946     		mov	r1, r7
 498 003c 00FB01F1 		mul	r1, r0, r1
 499 0040 03FB0B11 		mla	r1, r3, fp, r1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 35


 500 0044 A0FB0367 		umull	r6, r7, r0, r3
 501 0048 0F44     		add	r7, r7, r1
 502 004a 4FEA9638 		lsr	r8, r6, #14
 503 004e 48EA8748 		orr	r8, r8, r7, lsl #18
 504 0052 4FEAA739 		asr	r9, r7, #14
 505 0056 DDE90667 		ldrd	r6, [sp, #24]
 506 005a 16EB0806 		adds	r6, r6, r8
 507 005e 47EB0907 		adc	r7, r7, r9
 508 0062 CDE90667 		strd	r6, [sp, #24]
 509              	.LVL77:
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)a0 * d0) >> 14;
 510              		.loc 6 243 0
 511 0066 D717     		asrs	r7, r2, #31
 512 0068 00FB07F6 		mul	r6, r0, r7
 513              	.LVL78:
 514 006c 02FB0B66 		mla	r6, r2, fp, r6
 515 0070 A0FB0201 		umull	r0, r1, r0, r2
 516              	.LVL79:
 517 0074 3144     		add	r1, r1, r6
 518 0076 850B     		lsrs	r5, r0, #14
 519 0078 45EA8145 		orr	r5, r5, r1, lsl #18
 520 007c 0095     		str	r5, [sp]
 521 007e 8913     		asrs	r1, r1, #14
 522 0080 0191     		str	r1, [sp, #4]
 523 0082 DDE900AB 		ldrd	r10, [sp]
 524 0086 DDE90801 		ldrd	r0, [sp, #32]
 525 008a 1AEB000A 		adds	r10, r10, r0
 526 008e 4BEB010B 		adc	fp, fp, r1
 527 0092 CDE908AB 		strd	r10, [sp, #32]
 528              	.LVL80:
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     real_sum -= ((q63_t)b0 * d0) >> 14;
 529              		.loc 6 244 0
 530 0096 E117     		asrs	r1, r4, #31
 531 0098 02FB01F0 		mul	r0, r2, r1
 532 009c 04FB0700 		mla	r0, r4, r7, r0
 533 00a0 A2FB0467 		umull	r6, r7, r2, r4
 534 00a4 0744     		add	r7, r7, r0
 535 00a6 B20B     		lsrs	r2, r6, #14
 536              	.LVL81:
 537 00a8 42EA8742 		orr	r2, r2, r7, lsl #18
 538 00ac 0292     		str	r2, [sp, #8]
 539 00ae BA13     		asrs	r2, r7, #14
 540 00b0 0392     		str	r2, [sp, #12]
 541 00b2 DDE902AB 		ldrd	r10, [sp, #8]
 542              	.LVL82:
 543 00b6 DDE90667 		ldrd	r6, [sp, #24]
 544 00ba B6EB0A0A 		subs	r10, r6, r10
 545 00be 67EB0B0B 		sbc	fp, r7, fp
 546 00c2 CDE906AB 		strd	r10, [sp, #24]
 547              	.LVL83:
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     imag_sum += ((q63_t)b0 * c0) >> 14;
 548              		.loc 6 245 0
 549 00c6 03FB01F1 		mul	r1, r3, r1
 550 00ca 0B9A     		ldr	r2, [sp, #44]
 551 00cc 04FB0211 		mla	r1, r4, r2, r1
 552 00d0 A3FB0423 		umull	r2, r3, r3, r4
 553 00d4 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 36


 554              	.LVL84:
 555 00d6 910B     		lsrs	r1, r2, #14
 556 00d8 41EA8341 		orr	r1, r1, r3, lsl #18
 557 00dc 0491     		str	r1, [sp, #16]
 558 00de 9B13     		asrs	r3, r3, #14
 559 00e0 0593     		str	r3, [sp, #20]
 560 00e2 DDE90423 		ldrd	r2, [sp, #16]
 561 00e6 DDE90801 		ldrd	r0, [sp, #32]
 562 00ea 8018     		adds	r0, r0, r2
 563 00ec 5941     		adcs	r1, r1, r3
 564 00ee 0246     		mov	r2, r0
 565 00f0 0B46     		mov	r3, r1
 566 00f2 CDE90823 		strd	r2, [sp, #32]
 567              	.LVL85:
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     /* Decrement loop counter */
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     blkCnt--;
 568              		.loc 6 248 0
 569 00f6 0C9B     		ldr	r3, [sp, #48]
 570 00f8 013B     		subs	r3, r3, #1
 571 00fa 0C93     		str	r3, [sp, #48]
 572              	.LVL86:
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 573              		.loc 6 240 0
 574 00fc 7146     		mov	r1, lr
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****     c0 = *pSrcB++;
 575              		.loc 6 238 0
 576 00fe 6346     		mov	r3, ip
 577              	.LVL87:
 578              	.L26:
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   {
 579              		.loc 6 235 0
 580 0100 0C9A     		ldr	r2, [sp, #48]
 581 0102 002A     		cmp	r2, #0
 582 0104 8BD1     		bne	.L27
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   }
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** 
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   /* Store real and imaginary result in 16.48 format  */
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   *realResult = real_sum;
 583              		.loc 6 252 0
 584 0106 0D9B     		ldr	r3, [sp, #52]
 585              	.LVL88:
 586 0108 1946     		mov	r1, r3
 587              	.LVL89:
 588 010a DDE90623 		ldrd	r2, [sp, #24]
 589 010e C1E90023 		strd	r2, [r1]
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c ****   *imagResult = imag_sum;
 590              		.loc 6 253 0
 591 0112 189B     		ldr	r3, [sp, #96]
 592 0114 DDE90801 		ldrd	r0, [sp, #32]
 593 0118 C3E90001 		strd	r0, [r3]
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_dot_prod_q31.c **** }
 594              		.loc 6 254 0
 595 011c 0FB0     		add	sp, sp, #60
 596              		.cfi_def_cfa_offset 36
 597              		@ sp needed
 598 011e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 37


 599              		.cfi_endproc
 600              	.LFE89:
 601              		.size	arm_cmplx_dot_prod_q31, .-arm_cmplx_dot_prod_q31
 602              		.global	__aeabi_fcmpge
 603 0122 00BF     		.section	.text.arm_cmplx_mag_f32,"ax",%progbits
 604              		.align	2
 605              		.global	arm_cmplx_mag_f32
 606              		.thumb
 607              		.thumb_func
 608              		.type	arm_cmplx_mag_f32, %function
 609              	arm_cmplx_mag_f32:
 610              	.LFB90:
 611              		.file 7 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Title:        arm_cmplx_mag_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Description:  Floating-point complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @defgroup cmplx_mag Complex Magnitude
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   Computes the magnitude of the elements of a complex data vector.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The <code>pSrc</code> points to the source data and
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <code>pDst</code> points to the where the result should be written.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   in the input array and the data is stored in an interleaved fashion
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   (real, imag, real, imag, ...).
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 38


  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The input array has a total of <code>2*numSamples</code> values;
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   the output array has a total of <code>numSamples</code> values.
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The underlying algorithm is used:
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <pre>
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   for (n = 0; n < numSamples; n++) {
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       pDst[n] = sqrt(pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2);
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   </pre>
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @addtogroup cmplx_mag
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @{
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @brief         Floating-point complex magnitude.
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[in]     pSrc        points to input vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[out]    pDst        points to output vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @return        none
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "arm_vec_math.h"
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "arm_helium_utils.h"
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** void arm_cmplx_mag_f32(
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   const float32_t * pSrc,
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         float32_t * pDst,
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         uint32_t numSamples)
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** {
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     int32_t blockSize = numSamples;  /* loop counters */
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     uint32_t  blkCnt;           /* loop counters */
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     f32x4x2_t vecSrc;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     f32x4_t sum;
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     float32_t real, imag;                      /* Temporary variables to hold input values */
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Compute 4 complex samples at a time */
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt = blockSize >> 2;
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     while (blkCnt > 0U)
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     {
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         q31x4_t newtonStartVec;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         f32x4_t sumHalf, invSqrt;
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         vecSrc = vld2q(pSrc);  
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         pSrc += 8;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vmulq(vecSrc.val[0], vecSrc.val[0]);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 39


 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vfmaq(sum, vecSrc.val[1], vecSrc.val[1]);
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * inlined Fast SQRT using inverse SQRT newton-raphson method
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /* compute initial value */
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         newtonStartVec = vdupq_n_s32(INVSQRT_MAGIC_F32) - vshrq((q31x4_t) sum, 1);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sumHalf = sum * 0.5f;
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * compute 3 x iterations
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          *
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * The more iterations, the more accuracy.
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * If you need to trade a bit of accuracy for more performance,
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * you can comment out the 3rd use of the macro.
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, (f32x4_t) newtonStartVec);
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, invSqrt);
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, invSqrt);
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * set negative values to 0
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         invSqrt = vdupq_m(invSqrt, 0.0f, vcmpltq(invSqrt, 0.0f));
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * sqrt(x) = x * invSqrt(x)
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vmulq(sum, invSqrt);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         vst1q(pDst, sum); 
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         pDst += 4;
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * Decrement the blockSize loop counter
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         blkCnt--;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     }
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /*
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****      * tail
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****      */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt = blockSize & 3;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     while (blkCnt > 0U)
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     {
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       real = *pSrc++;
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       imag = *pSrc++;
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* store result in destination buffer. */
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* Decrement loop counter */
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       blkCnt--;
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     }
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** }
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** void arm_cmplx_mag_f32(
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   const float32_t * pSrc,
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         float32_t * pDst,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 40


 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         uint32_t numSamples)
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** {
 612              		.loc 7 160 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LVL90:
 617 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 618              		.cfi_def_cfa_offset 24
 619              		.cfi_offset 4, -24
 620              		.cfi_offset 5, -20
 621              		.cfi_offset 6, -16
 622              		.cfi_offset 7, -12
 623              		.cfi_offset 8, -8
 624              		.cfi_offset 14, -4
 625 0004 0E46     		mov	r6, r1
 626 0006 1546     		mov	r5, r2
 627              	.LVL91:
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   uint32_t blkCnt;                               /* loop counter */
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32_t real, imag;                      /* Temporary variables to hold input values */
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4x2_t vecA;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vRealA;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vImagA;
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vMagSqA;
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4x2_t vecB;
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vRealB;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vImagB;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vMagSqB;
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute 8 outputs at a time */
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples >> 3;
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* out = sqrt((real * real) + (imag * imag)) */
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vecA = vld2q_f32(pSrc);
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pSrc += 8;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vecB = vld2q_f32(pSrc);
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pSrc += 8;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vRealA = vmulq_f32(vecA.val[0], vecA.val[0]);
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vImagA = vmulq_f32(vecA.val[1], vecA.val[1]);
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vMagSqA = vaddq_f32(vRealA, vImagA);
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vRealB = vmulq_f32(vecB.val[0], vecB.val[0]);
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vImagB = vmulq_f32(vecB.val[1], vecB.val[1]);
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vMagSqB = vaddq_f32(vRealB, vImagB);
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Store the result in the destination buffer. */
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vst1q_f32(pDst, __arm_vec_sqrt_f32_neon(vMagSqA));
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pDst += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 41


 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vst1q_f32(pDst, __arm_vec_sqrt_f32_neon(vMagSqB));
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pDst += 4;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement the loop counter */
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples & 7;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples >> 2U;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* store result in destination buffer. */
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement loop counter */
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples % 0x4U;
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Initialize blkCnt with number of samples */
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples;
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
 628              		.loc 7 254 0
 629 0008 1FE0     		b	.L30
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 42


 630              	.LVL92:
 631              	.L34:
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 256:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 257:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 258:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 632              		.loc 7 258 0
 633 000a 0446     		mov	r4, r0
 634 000c 54F8081B 		ldr	r1, [r4], #8	@ float
 635              	.LVL93:
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 636              		.loc 7 259 0
 637 0010 4768     		ldr	r7, [r0, #4]	@ float
 638              	.LVL94:
 260:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 261:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* store result in destination buffer. */
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 639              		.loc 7 262 0
 640 0012 0846     		mov	r0, r1
 641 0014 FFF7FEFF 		bl	__aeabi_fmul
 642              	.LVL95:
 643 0018 8046     		mov	r8, r0
 644 001a 3846     		mov	r0, r7
 645 001c 3946     		mov	r1, r7
 646 001e FFF7FEFF 		bl	__aeabi_fmul
 647              	.LVL96:
 648 0022 0146     		mov	r1, r0
 649 0024 4046     		mov	r0, r8
 650 0026 FFF7FEFF 		bl	__aeabi_fadd
 651              	.LVL97:
 652 002a 8046     		mov	r8, r0
 653 002c 371D     		adds	r7, r6, #4
 654              	.LVL98:
 655              	.LBB8:
 656              	.LBB9:
 657              		.file 8 ".\\DSP\\Include/dsp/fast_math_functions.h"
   1:.\DSP\Include/dsp/fast_math_functions.h **** /******************************************************************************
   2:.\DSP\Include/dsp/fast_math_functions.h ****  * @file     fast_math_functions.h
   3:.\DSP\Include/dsp/fast_math_functions.h ****  * @brief    Public header file for CMSIS DSP Library
   4:.\DSP\Include/dsp/fast_math_functions.h ****  * @version  V1.10.0
   5:.\DSP\Include/dsp/fast_math_functions.h ****  * @date     08 July 2021
   6:.\DSP\Include/dsp/fast_math_functions.h ****  * Target Processor: Cortex-M and Cortex-A cores
   7:.\DSP\Include/dsp/fast_math_functions.h ****  ******************************************************************************/
   8:.\DSP\Include/dsp/fast_math_functions.h **** /*
   9:.\DSP\Include/dsp/fast_math_functions.h ****  * Copyright (c) 2010-2020 Arm Limited or its affiliates. All rights reserved.
  10:.\DSP\Include/dsp/fast_math_functions.h ****  *
  11:.\DSP\Include/dsp/fast_math_functions.h ****  * SPDX-License-Identifier: Apache-2.0
  12:.\DSP\Include/dsp/fast_math_functions.h ****  *
  13:.\DSP\Include/dsp/fast_math_functions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  14:.\DSP\Include/dsp/fast_math_functions.h ****  * not use this file except in compliance with the License.
  15:.\DSP\Include/dsp/fast_math_functions.h ****  * You may obtain a copy of the License at
  16:.\DSP\Include/dsp/fast_math_functions.h ****  *
  17:.\DSP\Include/dsp/fast_math_functions.h ****  * www.apache.org/licenses/LICENSE-2.0
  18:.\DSP\Include/dsp/fast_math_functions.h ****  *
  19:.\DSP\Include/dsp/fast_math_functions.h ****  * Unless required by applicable law or agreed to in writing, software
  20:.\DSP\Include/dsp/fast_math_functions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  21:.\DSP\Include/dsp/fast_math_functions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 43


  22:.\DSP\Include/dsp/fast_math_functions.h ****  * See the License for the specific language governing permissions and
  23:.\DSP\Include/dsp/fast_math_functions.h ****  * limitations under the License.
  24:.\DSP\Include/dsp/fast_math_functions.h ****  */
  25:.\DSP\Include/dsp/fast_math_functions.h **** 
  26:.\DSP\Include/dsp/fast_math_functions.h ****  
  27:.\DSP\Include/dsp/fast_math_functions.h **** #ifndef _FAST_MATH_FUNCTIONS_H_
  28:.\DSP\Include/dsp/fast_math_functions.h **** #define _FAST_MATH_FUNCTIONS_H_
  29:.\DSP\Include/dsp/fast_math_functions.h **** 
  30:.\DSP\Include/dsp/fast_math_functions.h **** #include "arm_math_types.h"
  31:.\DSP\Include/dsp/fast_math_functions.h **** #include "arm_math_memory.h"
  32:.\DSP\Include/dsp/fast_math_functions.h **** 
  33:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/none.h"
  34:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/utils.h"
  35:.\DSP\Include/dsp/fast_math_functions.h **** 
  36:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/basic_math_functions.h"
  37:.\DSP\Include/dsp/fast_math_functions.h **** 
  38:.\DSP\Include/dsp/fast_math_functions.h **** 
  39:.\DSP\Include/dsp/fast_math_functions.h **** #ifdef   __cplusplus
  40:.\DSP\Include/dsp/fast_math_functions.h **** extern "C"
  41:.\DSP\Include/dsp/fast_math_functions.h **** {
  42:.\DSP\Include/dsp/fast_math_functions.h **** #endif
  43:.\DSP\Include/dsp/fast_math_functions.h **** 
  44:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  45:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
  46:.\DSP\Include/dsp/fast_math_functions.h ****    */
  47:.\DSP\Include/dsp/fast_math_functions.h **** 
  48:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_TABLE_SIZE  512
  49:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
  50:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
  51:.\DSP\Include/dsp/fast_math_functions.h ****   
  52:.\DSP\Include/dsp/fast_math_functions.h **** #ifndef PI
  53:.\DSP\Include/dsp/fast_math_functions.h ****   #define PI               3.14159265358979f
  54:.\DSP\Include/dsp/fast_math_functions.h **** #endif
  55:.\DSP\Include/dsp/fast_math_functions.h **** 
  56:.\DSP\Include/dsp/fast_math_functions.h **** 
  57:.\DSP\Include/dsp/fast_math_functions.h **** /**
  58:.\DSP\Include/dsp/fast_math_functions.h ****  * @defgroup groupFastMath Fast Math Functions
  59:.\DSP\Include/dsp/fast_math_functions.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
  60:.\DSP\Include/dsp/fast_math_functions.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
  61:.\DSP\Include/dsp/fast_math_functions.h ****  * operate on individual values and not arrays.
  62:.\DSP\Include/dsp/fast_math_functions.h ****  * There are separate functions for Q15, Q31, and floating-point data.
  63:.\DSP\Include/dsp/fast_math_functions.h ****  *
  64:.\DSP\Include/dsp/fast_math_functions.h ****  */
  65:.\DSP\Include/dsp/fast_math_functions.h **** 
  66:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  67:.\DSP\Include/dsp/fast_math_functions.h ****    * @ingroup groupFastMath
  68:.\DSP\Include/dsp/fast_math_functions.h ****    */
  69:.\DSP\Include/dsp/fast_math_functions.h **** 
  70:.\DSP\Include/dsp/fast_math_functions.h **** 
  71:.\DSP\Include/dsp/fast_math_functions.h **** /**
  72:.\DSP\Include/dsp/fast_math_functions.h ****   @addtogroup sin
  73:.\DSP\Include/dsp/fast_math_functions.h ****   @{
  74:.\DSP\Include/dsp/fast_math_functions.h ****  */
  75:.\DSP\Include/dsp/fast_math_functions.h **** 
  76:.\DSP\Include/dsp/fast_math_functions.h **** /**
  77:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for floating-point data.
  78:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  input value in radians.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 44


  79:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  80:.\DSP\Include/dsp/fast_math_functions.h ****    */
  81:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t arm_sin_f32(
  82:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t x);
  83:.\DSP\Include/dsp/fast_math_functions.h **** 
  84:.\DSP\Include/dsp/fast_math_functions.h **** 
  85:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  86:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for Q31 data.
  87:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
  88:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  89:.\DSP\Include/dsp/fast_math_functions.h ****    */
  90:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t arm_sin_q31(
  91:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t x);
  92:.\DSP\Include/dsp/fast_math_functions.h **** 
  93:.\DSP\Include/dsp/fast_math_functions.h **** 
  94:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  95:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for Q15 data.
  96:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
  97:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  98:.\DSP\Include/dsp/fast_math_functions.h ****    */
  99:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t arm_sin_q15(
 100:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t x);
 101:.\DSP\Include/dsp/fast_math_functions.h **** 
 102:.\DSP\Include/dsp/fast_math_functions.h **** /**
 103:.\DSP\Include/dsp/fast_math_functions.h ****   @} end of sin group
 104:.\DSP\Include/dsp/fast_math_functions.h ****  */
 105:.\DSP\Include/dsp/fast_math_functions.h **** 
 106:.\DSP\Include/dsp/fast_math_functions.h **** /**
 107:.\DSP\Include/dsp/fast_math_functions.h ****   @addtogroup cos
 108:.\DSP\Include/dsp/fast_math_functions.h ****   @{
 109:.\DSP\Include/dsp/fast_math_functions.h ****  */
 110:.\DSP\Include/dsp/fast_math_functions.h **** 
 111:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 112:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
 113:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  input value in radians.
 114:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 115:.\DSP\Include/dsp/fast_math_functions.h ****    */
 116:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t arm_cos_f32(
 117:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t x);
 118:.\DSP\Include/dsp/fast_math_functions.h **** 
 119:.\DSP\Include/dsp/fast_math_functions.h **** 
 120:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 121:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief Fast approximation to the trigonometric cosine function for Q31 data.
 122:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
 123:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 124:.\DSP\Include/dsp/fast_math_functions.h ****    */
 125:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t arm_cos_q31(
 126:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t x);
 127:.\DSP\Include/dsp/fast_math_functions.h **** 
 128:.\DSP\Include/dsp/fast_math_functions.h **** 
 129:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 130:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric cosine function for Q15 data.
 131:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
 132:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 133:.\DSP\Include/dsp/fast_math_functions.h ****    */
 134:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t arm_cos_q15(
 135:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t x);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 45


 136:.\DSP\Include/dsp/fast_math_functions.h **** 
 137:.\DSP\Include/dsp/fast_math_functions.h **** /**
 138:.\DSP\Include/dsp/fast_math_functions.h ****   @} end of cos group
 139:.\DSP\Include/dsp/fast_math_functions.h ****  */
 140:.\DSP\Include/dsp/fast_math_functions.h **** 
 141:.\DSP\Include/dsp/fast_math_functions.h **** 
 142:.\DSP\Include/dsp/fast_math_functions.h **** /**
 143:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of log values.
 144:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 145:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 146:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 147:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 148:.\DSP\Include/dsp/fast_math_functions.h ****  */
 149:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_f32(
 150:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t * pSrc,
 151:.\DSP\Include/dsp/fast_math_functions.h ****         float32_t * pDst,
 152:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 153:.\DSP\Include/dsp/fast_math_functions.h **** 
 154:.\DSP\Include/dsp/fast_math_functions.h **** 
 155:.\DSP\Include/dsp/fast_math_functions.h **** 
 156:.\DSP\Include/dsp/fast_math_functions.h **** /**
 157:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of log values.
 158:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 159:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 160:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 161:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 162:.\DSP\Include/dsp/fast_math_functions.h ****  */
 163:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_f64(
 164:.\DSP\Include/dsp/fast_math_functions.h ****   const float64_t * pSrc,
 165:.\DSP\Include/dsp/fast_math_functions.h **** 		float64_t * pDst,
 166:.\DSP\Include/dsp/fast_math_functions.h **** 		uint32_t blockSize);
 167:.\DSP\Include/dsp/fast_math_functions.h **** 
 168:.\DSP\Include/dsp/fast_math_functions.h **** 
 169:.\DSP\Include/dsp/fast_math_functions.h **** 
 170:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 171:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  q31 vector of log values.
 172:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     pSrc       points to the input vector in q31
 173:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[out]    pDst       points to the output vector in q5.26
 174:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     blockSize  number of samples in each vector
 175:.\DSP\Include/dsp/fast_math_functions.h ****    * @return        none
 176:.\DSP\Include/dsp/fast_math_functions.h ****    */
 177:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_q31(const q31_t * pSrc,
 178:.\DSP\Include/dsp/fast_math_functions.h ****         q31_t * pDst,
 179:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 180:.\DSP\Include/dsp/fast_math_functions.h **** 
 181:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 182:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  q15 vector of log values.
 183:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     pSrc       points to the input vector in q15
 184:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[out]    pDst       points to the output vector in q4.11
 185:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     blockSize  number of samples in each vector
 186:.\DSP\Include/dsp/fast_math_functions.h ****    * @return        none
 187:.\DSP\Include/dsp/fast_math_functions.h ****    */
 188:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_q15(const q15_t * pSrc,
 189:.\DSP\Include/dsp/fast_math_functions.h ****         q15_t * pDst,
 190:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 191:.\DSP\Include/dsp/fast_math_functions.h **** 
 192:.\DSP\Include/dsp/fast_math_functions.h **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 46


 193:.\DSP\Include/dsp/fast_math_functions.h **** 
 194:.\DSP\Include/dsp/fast_math_functions.h **** /**
 195:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of exp values.
 196:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 197:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 198:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 199:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 200:.\DSP\Include/dsp/fast_math_functions.h ****  */
 201:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vexp_f32(
 202:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t * pSrc,
 203:.\DSP\Include/dsp/fast_math_functions.h ****         float32_t * pDst,
 204:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 205:.\DSP\Include/dsp/fast_math_functions.h **** 
 206:.\DSP\Include/dsp/fast_math_functions.h **** 
 207:.\DSP\Include/dsp/fast_math_functions.h **** 
 208:.\DSP\Include/dsp/fast_math_functions.h **** /**
 209:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of exp values.
 210:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 211:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 212:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 213:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 214:.\DSP\Include/dsp/fast_math_functions.h ****  */
 215:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vexp_f64(
 216:.\DSP\Include/dsp/fast_math_functions.h ****   const float64_t * pSrc,
 217:.\DSP\Include/dsp/fast_math_functions.h **** 		float64_t * pDst,
 218:.\DSP\Include/dsp/fast_math_functions.h **** 		uint32_t blockSize);
 219:.\DSP\Include/dsp/fast_math_functions.h **** 
 220:.\DSP\Include/dsp/fast_math_functions.h **** 
 221:.\DSP\Include/dsp/fast_math_functions.h **** 
 222:.\DSP\Include/dsp/fast_math_functions.h ****  /**
 223:.\DSP\Include/dsp/fast_math_functions.h ****    * @defgroup SQRT Square Root
 224:.\DSP\Include/dsp/fast_math_functions.h ****    *
 225:.\DSP\Include/dsp/fast_math_functions.h ****    * Computes the square root of a number.
 226:.\DSP\Include/dsp/fast_math_functions.h ****    * There are separate functions for Q15, Q31, and floating-point data types.
 227:.\DSP\Include/dsp/fast_math_functions.h ****    * The square root function is computed using the Newton-Raphson algorithm.
 228:.\DSP\Include/dsp/fast_math_functions.h ****    * This is an iterative algorithm of the form:
 229:.\DSP\Include/dsp/fast_math_functions.h ****    * <pre>
 230:.\DSP\Include/dsp/fast_math_functions.h ****    *      x1 = x0 - f(x0)/f'(x0)
 231:.\DSP\Include/dsp/fast_math_functions.h ****    * </pre>
 232:.\DSP\Include/dsp/fast_math_functions.h ****    * where <code>x1</code> is the current estimate,
 233:.\DSP\Include/dsp/fast_math_functions.h ****    * <code>x0</code> is the previous estimate, and
 234:.\DSP\Include/dsp/fast_math_functions.h ****    * <code>f'(x0)</code> is the derivative of <code>f()</code> evaluated at <code>x0</code>.
 235:.\DSP\Include/dsp/fast_math_functions.h ****    * For the square root function, the algorithm reduces to:
 236:.\DSP\Include/dsp/fast_math_functions.h ****    * <pre>
 237:.\DSP\Include/dsp/fast_math_functions.h ****    *     x0 = in/2                         [initial guess]
 238:.\DSP\Include/dsp/fast_math_functions.h ****    *     x1 = 1/2 * ( x0 + in / x0)        [each iteration]
 239:.\DSP\Include/dsp/fast_math_functions.h ****    * </pre>
 240:.\DSP\Include/dsp/fast_math_functions.h ****    */
 241:.\DSP\Include/dsp/fast_math_functions.h **** 
 242:.\DSP\Include/dsp/fast_math_functions.h **** 
 243:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 244:.\DSP\Include/dsp/fast_math_functions.h ****    * @addtogroup SQRT
 245:.\DSP\Include/dsp/fast_math_functions.h ****    * @{
 246:.\DSP\Include/dsp/fast_math_functions.h ****    */
 247:.\DSP\Include/dsp/fast_math_functions.h **** 
 248:.\DSP\Include/dsp/fast_math_functions.h **** /**
 249:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point square root function.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 47


 250:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     in    input value
 251:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pOut  square root of input value
 252:.\DSP\Include/dsp/fast_math_functions.h ****   @return        execution status
 253:.\DSP\Include/dsp/fast_math_functions.h ****                    - \ref ARM_MATH_SUCCESS        : input value is positive
 254:.\DSP\Include/dsp/fast_math_functions.h ****                    - \ref ARM_MATH_ARGUMENT_ERROR : input value is negative; *pOut is set to 0
 255:.\DSP\Include/dsp/fast_math_functions.h ****  */
 256:.\DSP\Include/dsp/fast_math_functions.h **** __STATIC_FORCEINLINE arm_status arm_sqrt_f32(
 257:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t in,
 258:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t * pOut)
 259:.\DSP\Include/dsp/fast_math_functions.h ****   {
 260:.\DSP\Include/dsp/fast_math_functions.h ****     if (in >= 0.0f)
 658              		.loc 8 260 0
 659 002e 0021     		movs	r1, #0
 660 0030 FFF7FEFF 		bl	__aeabi_fcmpge
 661              	.LVL99:
 662 0034 20B1     		cbz	r0, .L37
 261:.\DSP\Include/dsp/fast_math_functions.h ****     {
 262:.\DSP\Include/dsp/fast_math_functions.h **** #if defined ( __CC_ARM )
 263:.\DSP\Include/dsp/fast_math_functions.h ****   #if defined __TARGET_FPU_VFP
 264:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = __sqrtf(in);
 265:.\DSP\Include/dsp/fast_math_functions.h ****   #else
 266:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
 267:.\DSP\Include/dsp/fast_math_functions.h ****   #endif
 268:.\DSP\Include/dsp/fast_math_functions.h **** 
 269:.\DSP\Include/dsp/fast_math_functions.h **** #elif defined ( __ICCARM__ )
 270:.\DSP\Include/dsp/fast_math_functions.h ****   #if defined __ARMVFP__
 271:.\DSP\Include/dsp/fast_math_functions.h ****       __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 272:.\DSP\Include/dsp/fast_math_functions.h ****   #else
 273:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
 274:.\DSP\Include/dsp/fast_math_functions.h ****   #endif
 275:.\DSP\Include/dsp/fast_math_functions.h **** 
 276:.\DSP\Include/dsp/fast_math_functions.h **** #else
 277:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
 663              		.loc 8 277 0
 664 0036 4046     		mov	r0, r8
 665 0038 FFF7FEFF 		bl	sqrtf
 666              	.LVL100:
 667 003c 3060     		str	r0, [r6]	@ float
 668 003e 01E0     		b	.L36
 669              	.L37:
 278:.\DSP\Include/dsp/fast_math_functions.h **** #endif
 279:.\DSP\Include/dsp/fast_math_functions.h **** 
 280:.\DSP\Include/dsp/fast_math_functions.h ****       return (ARM_MATH_SUCCESS);
 281:.\DSP\Include/dsp/fast_math_functions.h ****     }
 282:.\DSP\Include/dsp/fast_math_functions.h ****     else
 283:.\DSP\Include/dsp/fast_math_functions.h ****     {
 284:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = 0.0f;
 670              		.loc 8 284 0
 671 0040 0023     		movs	r3, #0
 672 0042 3360     		str	r3, [r6]	@ float
 673              	.L36:
 674              	.LBE9:
 675              	.LBE8:
 263:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 264:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement loop counter */
 265:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 676              		.loc 7 265 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 48


 677 0044 013D     		subs	r5, r5, #1
 678              	.LVL101:
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 679              		.loc 7 262 0
 680 0046 3E46     		mov	r6, r7
 681              	.LVL102:
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 682              		.loc 7 259 0
 683 0048 2046     		mov	r0, r4
 684              	.LVL103:
 685              	.L30:
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 686              		.loc 7 254 0
 687 004a 002D     		cmp	r5, #0
 688 004c DDD1     		bne	.L34
 266:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 267:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 268:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** }
 689              		.loc 7 268 0
 690 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 691              		.cfi_endproc
 692              	.LFE90:
 693              		.size	arm_cmplx_mag_f32, .-arm_cmplx_mag_f32
 694              		.global	__aeabi_dmul
 695              		.global	__aeabi_dadd
 696 0052 00BF     		.section	.text.arm_cmplx_mag_f64,"ax",%progbits
 697              		.align	2
 698              		.global	arm_cmplx_mag_f64
 699              		.thumb
 700              		.thumb_func
 701              		.type	arm_cmplx_mag_f64, %function
 702              	arm_cmplx_mag_f64:
 703              	.LFB91:
 704              		.file 9 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_f64.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Title:        arm_cmplx_mag_f64.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Description:  Floating-point complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 49


  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @defgroup cmplx_mag Complex Magnitude
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   Computes the magnitude of the elements of a complex data vector.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   The <code>pSrc</code> points to the source data and
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   <code>pDst</code> points to the where the result should be written.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   <code>numSamples</code> specifies the number of complex samples
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   in the input array and the data is stored in an interleaved fashion
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   (real, imag, real, imag, ...).
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   The input array has a total of <code>2*numSamples</code> values;
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   the output array has a total of <code>numSamples</code> values.
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   The underlying algorithm is used:
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   <pre>
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   for (n = 0; n < numSamples; n++) {
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****       pDst[n] = sqrt(pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2);
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   }
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   </pre>
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  */
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /**
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @addtogroup cmplx_mag
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @{
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** /**
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @brief         Floating-point complex magnitude.
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @param[in]     pSrc        points to input vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @param[out]    pDst        points to output vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @param[in]     numSamples  number of samples in each vector
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   @return        none
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****  */
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** void arm_cmplx_mag_f64(
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   const float64_t * pSrc,
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****         float64_t * pDst,
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****         uint32_t numSamples)
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** {
 705              		.loc 9 75 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL104:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 50


 710 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 711              		.cfi_def_cfa_offset 40
 712              		.cfi_offset 3, -40
 713              		.cfi_offset 4, -36
 714              		.cfi_offset 5, -32
 715              		.cfi_offset 6, -28
 716              		.cfi_offset 7, -24
 717              		.cfi_offset 8, -20
 718              		.cfi_offset 9, -16
 719              		.cfi_offset 10, -12
 720              		.cfi_offset 11, -8
 721              		.cfi_offset 14, -4
 722 0004 8A46     		mov	r10, r1
 723 0006 1546     		mov	r5, r2
 724              	.LVL105:
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   uint32_t blkCnt;                               /* loop counter */
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   float64_t real, imag;                      /* Temporary variables to hold input values */
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   /* Initialize blkCnt with number of samples */
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   blkCnt = numSamples;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   while (blkCnt > 0U)
 725              		.loc 9 82 0
 726 0008 21E0     		b	.L40
 727              	.LVL106:
 728              	.L41:
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   {
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     real = *pSrc++;
 729              		.loc 9 86 0
 730 000a 0446     		mov	r4, r0
 731 000c F4E80423 		ldrd	r2, [r4], #16
 732              	.LVL107:
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     imag = *pSrc++;
 733              		.loc 9 87 0
 734 0010 D0E90289 		ldrd	r8, [r0, #8]
 735              	.LVL108:
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     /* store result in destination buffer. */
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     *pDst++ = sqrt((real * real) + (imag * imag));
 736              		.loc 9 90 0
 737 0014 0AF1080B 		add	fp, r10, #8
 738              	.LVL109:
 739 0018 1046     		mov	r0, r2
 740 001a 1946     		mov	r1, r3
 741 001c FFF7FEFF 		bl	__aeabi_dmul
 742              	.LVL110:
 743 0020 0646     		mov	r6, r0
 744 0022 0F46     		mov	r7, r1
 745 0024 4046     		mov	r0, r8
 746 0026 4946     		mov	r1, r9
 747 0028 4246     		mov	r2, r8
 748 002a 4B46     		mov	r3, r9
 749 002c FFF7FEFF 		bl	__aeabi_dmul
 750              	.LVL111:
 751 0030 8046     		mov	r8, r0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 51


 752              	.LVL112:
 753 0032 8946     		mov	r9, r1
 754 0034 3046     		mov	r0, r6
 755 0036 3946     		mov	r1, r7
 756 0038 4246     		mov	r2, r8
 757 003a 4B46     		mov	r3, r9
 758 003c FFF7FEFF 		bl	__aeabi_dadd
 759              	.LVL113:
 760 0040 FFF7FEFF 		bl	sqrt
 761              	.LVL114:
 762 0044 CAE90001 		strd	r0, [r10]
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     /* Decrement loop counter */
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****     blkCnt--;
 763              		.loc 9 93 0
 764 0048 013D     		subs	r5, r5, #1
 765              	.LVL115:
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
 766              		.loc 9 90 0
 767 004a DA46     		mov	r10, fp
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
 768              		.loc 9 87 0
 769 004c 2046     		mov	r0, r4
 770              	.LVL116:
 771              	.L40:
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   {
 772              		.loc 9 82 0
 773 004e 002D     		cmp	r5, #0
 774 0050 DBD1     		bne	.L41
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c ****   }
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** 
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f64.c **** }
 775              		.loc 9 96 0
 776 0052 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 777              		.cfi_endproc
 778              	.LFE91:
 779              		.size	arm_cmplx_mag_f64, .-arm_cmplx_mag_f64
 780 0056 00BF     		.section	.text.arm_cmplx_mag_q15,"ax",%progbits
 781              		.align	2
 782              		.global	arm_cmplx_mag_q15
 783              		.thumb
 784              		.thumb_func
 785              		.type	arm_cmplx_mag_q15, %function
 786              	arm_cmplx_mag_q15:
 787              	.LFB92:
 788              		.file 10 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Title:        arm_cmplx_mag_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Description:  Q15 complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /*
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 52


  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @addtogroup cmplx_mag
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @brief         Q15 complex magnitude.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****                    The function implements 1.15 by 1.15 multiplications and finally output is conve
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  */
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** /* Sqrt q31 is used otherwise accuracy is not good enough
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****            for small values and for some applications it is
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****            an issue.
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         */
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #include "arm_helium_utils.h"
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** void arm_cmplx_mag_q15(
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   const q15_t * pSrc,
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         q15_t * pDst,
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         uint32_t numSamples)
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** {
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     int32_t blockSize = numSamples;  /* loop counters */
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q15x8x2_t vecSrc;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31x4_t prod0;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 53


  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31x4_t prod1;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31_t in;
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31_t acc0;
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31x4_t acc0V;
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31x4_t acc1V;
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q31_t res;
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     q15x8_t resV;
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     blkCnt = blockSize >> 3;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     while (blkCnt > 0U)
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     {
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         vecSrc = vld2q(pSrc);  
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         pSrc += 16;
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc0V = vdupq_n_s32(0);
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc1V = vdupq_n_s32(0);
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         prod0 = vmullbq_int_s16(vecSrc.val[0], vecSrc.val[0]);
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc0V = vqaddq_s32(acc0V,prod0);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         prod0 = vmullbq_int_s16(vecSrc.val[1], vecSrc.val[1]);
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc0V = vqaddq_s32(acc0V,prod0);
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         prod1 = vmulltq_int_s16(vecSrc.val[0], vecSrc.val[0]);
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc1V = vqaddq_s32(acc1V,prod1);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         prod1 = vmulltq_int_s16(vecSrc.val[1], vecSrc.val[1]);
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc1V = vqaddq_s32(acc1V,prod1);
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****        
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc0V = vshrq(acc0V, 1);
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc1V = vshrq(acc1V, 1);
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc0V = FAST_VSQRT_Q31(acc0V);
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         acc1V = FAST_VSQRT_Q31(acc1V);
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         resV = vdupq_n_s16(0);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         resV = vqshrnbq_n_s32(resV,acc0V,16);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         resV = vqshrntq_n_s32(resV,acc1V,16);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         vst1q(pDst, resV); 
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         pDst += 8;
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         /*
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****          * Decrement the blockSize loop counter
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****          */
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         blkCnt--;
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     }
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /*
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****      * tail
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****      */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     blkCnt = blockSize & 7;
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 54


 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     while (blkCnt > 0U)
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     {
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       in = read_q15x2_ia ((q15_t **) &pSrc);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       acc0 = __SMUAD(in, in);
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       /* store result in 2.14 format in destination buffer. */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       arm_sqrt_q31(acc0  >> 1 , &res);
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       *pDst++ = res >> 16;
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       /* Decrement loop counter */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****       blkCnt--;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     }
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** }
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #else
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** void arm_cmplx_mag_q15(
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   const q15_t * pSrc,
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         q15_t * pDst,
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         uint32_t numSamples)
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** {
 789              		.loc 10 148 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              	.LVL117:
 794 0000 70B5     		push	{r4, r5, r6, lr}
 795              		.cfi_def_cfa_offset 16
 796              		.cfi_offset 4, -16
 797              		.cfi_offset 5, -12
 798              		.cfi_offset 6, -8
 799              		.cfi_offset 14, -4
 800 0002 82B0     		sub	sp, sp, #8
 801              		.cfi_def_cfa_offset 24
 802 0004 0E46     		mov	r6, r1
 803 0006 1546     		mov	r5, r2
 804              	.LVL118:
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         q31_t res; /* temporary result */
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #if defined (ARM_MATH_DSP)
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         q31_t in;
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****         q31_t acc0;                                    /* Accumulators */
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #else
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****        q15_t real, imag;                              /* Temporary input variables */
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****        q31_t acc0, acc1;                              /* Accumulators */
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #endif
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   blkCnt = numSamples >> 2U;
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   while (blkCnt > 0U)
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 55


 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #if defined (ARM_MATH_DSP)
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     in = read_q15x2_ia (&pSrc);
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = __SMUAD(in, in);
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* store result in 2.14 format in destination buffer. */
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31(acc0  >> 1 , &res);
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     in = read_q15x2_ia (&pSrc);
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = __SMUAD(in, in);
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31(acc0  >> 1 , &res);
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     in = read_q15x2_ia (&pSrc);
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = __SMUAD(in, in);
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31(acc0  >> 1 , &res);
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     in = read_q15x2_ia (&pSrc);
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = __SMUAD(in, in);
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31(acc0  >> 1 , &res);
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #else
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     real = *pSrc++;
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     imag = *pSrc++;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc1 = ((q31_t) imag * imag);
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* store result in 2.14 format in destination buffer. */
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31((acc0 + acc1) >> 1 , &res);
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     real = *pSrc++;
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     imag = *pSrc++;
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc1 = ((q31_t) imag * imag);
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31((acc0 + acc1) >> 1 , &res);
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     real = *pSrc++;
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     imag = *pSrc++;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc1 = ((q31_t) imag * imag);
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31((acc0 + acc1) >> 1 , &res);
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     real = *pSrc++;
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     imag = *pSrc++;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc1 = ((q31_t) imag * imag);
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31((acc0 + acc1) >> 1 , &res);
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* Decrement loop counter */
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     blkCnt--;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 56


 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   }
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   blkCnt = numSamples % 0x4U;
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #else
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   /* Initialize blkCnt with number of samples */
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   blkCnt = numSamples;
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   while (blkCnt > 0U)
 805              		.loc 10 236 0
 806 0008 12E0     		b	.L44
 807              	.LVL119:
 808              	.L45:
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   {
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #if defined (ARM_MATH_DSP)
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     in = read_q15x2_ia (&pSrc);
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = __SMUAD(in, in);
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* store result in 2.14 format in destination buffer. */
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31(acc0  >> 1 , &res);
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #else
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     real = *pSrc++;
 809              		.loc 10 248 0
 810 000a 0446     		mov	r4, r0
 811              	.LVL120:
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     imag = *pSrc++;
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 812              		.loc 10 250 0
 813 000c 34F9043B 		ldrsh	r3, [r4], #4
 814              	.LVL121:
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc1 = ((q31_t) imag * imag);
 815              		.loc 10 251 0
 816 0010 B0F90200 		ldrsh	r0, [r0, #2]
 817              	.LVL122:
 818 0014 00FB00F0 		mul	r0, r0, r0
 819              	.LVL123:
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* store result in 2.14 format in destination buffer. */
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     arm_sqrt_q31((acc0 + acc1) >> 1 , &res);
 820              		.loc 10 254 0
 821 0018 03FB0300 		mla	r0, r3, r3, r0
 822              	.LVL124:
 823 001c 4010     		asrs	r0, r0, #1
 824 001e 01A9     		add	r1, sp, #4
 825 0020 FFF7FEFF 		bl	arm_sqrt_q31
 826              	.LVL125:
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 827              		.loc 10 255 0
 828 0024 BDF90630 		ldrsh	r3, [sp, #6]
 829 0028 3380     		strh	r3, [r6]	@ movhi
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 57


 256:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****  
 257:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** #endif
 258:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     /* Decrement loop counter */
 260:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     blkCnt--;
 830              		.loc 10 260 0
 831 002a 013D     		subs	r5, r5, #1
 832              	.LVL126:
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     *pDst++ = res >> 16;
 833              		.loc 10 255 0
 834 002c 0236     		adds	r6, r6, #2
 835              	.LVL127:
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****     acc0 = ((q31_t) real * real);
 836              		.loc 10 249 0
 837 002e 2046     		mov	r0, r4
 838              	.LVL128:
 839              	.L44:
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   {
 840              		.loc 10 236 0
 841 0030 002D     		cmp	r5, #0
 842 0032 EAD1     		bne	.L45
 261:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c ****   }
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** 
 263:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q15.c **** }
 843              		.loc 10 263 0
 844 0034 02B0     		add	sp, sp, #8
 845              		.cfi_def_cfa_offset 16
 846              		@ sp needed
 847 0036 70BD     		pop	{r4, r5, r6, pc}
 848              		.cfi_endproc
 849              	.LFE92:
 850              		.size	arm_cmplx_mag_q15, .-arm_cmplx_mag_q15
 851              		.section	.text.arm_cmplx_mag_fast_q15,"ax",%progbits
 852              		.align	2
 853              		.global	arm_cmplx_mag_fast_q15
 854              		.thumb
 855              		.thumb_func
 856              		.type	arm_cmplx_mag_fast_q15, %function
 857              	arm_cmplx_mag_fast_q15:
 858              	.LFB93:
 859              		.file 11 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_fast_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Title:        arm_cmplx_mag_fast_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Description:  Q15 complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 58


  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @addtogroup cmplx_mag
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @brief         Q15 complex magnitude.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****                    The function implements 1.15 by 1.15 multiplications and finally output is conve
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****                    Fast functions are less accurate. This function will tend to clamp to 0
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****                    the too small values. So sqrt(x*x) = x will not always be true.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****  */
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** void arm_cmplx_mag_fast_q15(
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   const q15_t * pSrc,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         q15_t * pDst,
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         uint32_t numSamples)
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** {
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     int32_t blockSize = numSamples;  /* loop counters */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     q15x8x2_t vecSrc;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     q15x8_t sum;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     q31_t in;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     q31_t acc0;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     blkCnt = blockSize >> 3;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     while (blkCnt > 0U)
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     {
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         vecSrc = vld2q(pSrc);  
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         pSrc += 16;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 59


  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         sum = vqaddq(vmulhq(vecSrc.val[0], vecSrc.val[0]),
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****                      vmulhq(vecSrc.val[1], vecSrc.val[1]));
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         sum = vshrq(sum, 1);
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         sum = FAST_VSQRT_Q15(sum);
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         vst1q(pDst, sum); 
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         pDst += 8;
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         /*
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****          * Decrement the blockSize loop counter
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****          */
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         blkCnt--;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     }
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /*
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****      * tail
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****      */
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     blkCnt = blockSize & 7;
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     while (blkCnt > 0U)
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     {
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       in = read_q15x2_ia ((q15_t **) &pSrc);
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       acc0 = __SMUAD(in, in);
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       /* store result in 2.14 format in destination buffer. */
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       /* Decrement loop counter */
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****       blkCnt--;
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     }
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** }
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #else
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** void arm_cmplx_mag_fast_q15(
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   const q15_t * pSrc,
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         q15_t * pDst,
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         uint32_t numSamples)
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** {
 860              		.loc 11 115 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              	.LVL129:
 865 0000 70B5     		push	{r4, r5, r6, lr}
 866              		.cfi_def_cfa_offset 16
 867              		.cfi_offset 4, -16
 868              		.cfi_offset 5, -12
 869              		.cfi_offset 6, -8
 870              		.cfi_offset 14, -4
 871 0002 1546     		mov	r5, r2
 872              	.LVL130:
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 60


 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #if defined (ARM_MATH_DSP)
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         q31_t in;
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****         q31_t acc0;                                    /* Accumulators */
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #else
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****        q15_t real, imag;                              /* Temporary input variables */
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****        q31_t acc0, acc1;                              /* Accumulators */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #endif
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   blkCnt = numSamples >> 2U;
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   while (blkCnt > 0U)
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   {
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #if defined (ARM_MATH_DSP)
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     in = read_q15x2_ia (&pSrc);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = __SMUAD(in, in);
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* store result in 2.14 format in destination buffer. */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     in = read_q15x2_ia (&pSrc);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = __SMUAD(in, in);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     in = read_q15x2_ia (&pSrc);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = __SMUAD(in, in);
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     in = read_q15x2_ia (&pSrc);
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = __SMUAD(in, in);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #else
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     real = *pSrc++;
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     imag = *pSrc++;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc1 = ((q31_t) imag * imag);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* store result in 2.14 format in destination buffer. */
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     real = *pSrc++;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     imag = *pSrc++;
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc1 = ((q31_t) imag * imag);
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     real = *pSrc++;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     imag = *pSrc++;
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc1 = ((q31_t) imag * imag);
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     real = *pSrc++;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     imag = *pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 61


 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc1 = ((q31_t) imag * imag);
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* Decrement loop counter */
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     blkCnt--;
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   }
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   blkCnt = numSamples % 0x4U;
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #else
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   /* Initialize blkCnt with number of samples */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   blkCnt = numSamples;
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   while (blkCnt > 0U)
 873              		.loc 11 194 0
 874 0004 16E0     		b	.L48
 875              	.LVL131:
 876              	.L49:
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   {
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #if defined (ARM_MATH_DSP)
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     in = read_q15x2_ia (&pSrc);
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = __SMUAD(in, in);
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* store result in 2.14 format in destination buffer. */
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (acc0 >> 17), pDst++);
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #else
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     real = *pSrc++;
 877              		.loc 11 205 0
 878 0006 0446     		mov	r4, r0
 879              	.LVL132:
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     imag = *pSrc++;
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 880              		.loc 11 207 0
 881 0008 34F9043B 		ldrsh	r3, [r4], #4
 882 000c 03FB03F6 		mul	r6, r3, r3
 883              	.LVL133:
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc1 = ((q31_t) imag * imag);
 884              		.loc 11 208 0
 885 0010 B0F90220 		ldrsh	r2, [r0, #2]
 886 0014 02FB02F2 		mul	r2, r2, r2
 887              	.LVL134:
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* store result in 2.14 format in destination buffer. */
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     arm_sqrt_q15((q15_t) (((q63_t) acc0 + acc1) >> 17), pDst++);
 888              		.loc 11 211 0
 889 0018 D317     		asrs	r3, r2, #31
 890 001a 9219     		adds	r2, r2, r6
 891              	.LVL135:
 892 001c 43EBE673 		adc	r3, r3, r6, asr #31
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 62


 893 0020 500C     		lsrs	r0, r2, #17
 894              	.LVL136:
 895 0022 40EAC330 		orr	r0, r0, r3, lsl #15
 896 0026 8E1C     		adds	r6, r1, #2
 897              	.LVL137:
 898 0028 00B2     		sxth	r0, r0
 899 002a FFF7FEFF 		bl	arm_sqrt_q15
 900              	.LVL138:
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #endif
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     /* Decrement loop counter */
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     blkCnt--;
 901              		.loc 11 215 0
 902 002e 013D     		subs	r5, r5, #1
 903              	.LVL139:
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** #endif
 904              		.loc 11 211 0
 905 0030 3146     		mov	r1, r6
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****     acc0 = ((q31_t) real * real);
 906              		.loc 11 206 0
 907 0032 2046     		mov	r0, r4
 908              	.LVL140:
 909              	.L48:
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   {
 910              		.loc 11 194 0
 911 0034 002D     		cmp	r5, #0
 912 0036 E6D1     		bne	.L49
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c ****   }
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** 
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_fast_q15.c **** }
 913              		.loc 11 218 0
 914 0038 70BD     		pop	{r4, r5, r6, pc}
 915              		.cfi_endproc
 916              	.LFE93:
 917              		.size	arm_cmplx_mag_fast_q15, .-arm_cmplx_mag_fast_q15
 918 003a 00BF     		.section	.text.arm_cmplx_mag_q31,"ax",%progbits
 919              		.align	2
 920              		.global	arm_cmplx_mag_q31
 921              		.thumb
 922              		.thumb_func
 923              		.type	arm_cmplx_mag_q31, %function
 924              	arm_cmplx_mag_q31:
 925              	.LFB94:
 926              		.file 12 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Title:        arm_cmplx_mag_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Description:  Q31 complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 63


  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @addtogroup cmplx_mag
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @brief         Q31 complex magnitude.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****                    The function implements 1.31 by 1.31 multiplications and finally output is conve
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****                    Input down scaling is not required.
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** void arm_cmplx_mag_q31(
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   const q31_t * pSrc,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         q31_t * pDst,
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         uint32_t numSamples)
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** {
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     int32_t blockSize = numSamples;  /* loop counters */
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     q31x4x2_t vecSrc;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     q31x4_t sum;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     q31_t real, imag;                              /* Temporary input variables */
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     q31_t acc0, acc1;                              /* Accumulators */
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* Compute 4 complex samples at a time */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 64


  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt = blockSize >> 2;
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     while (blkCnt > 0U)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     {
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         vecSrc = vld2q(pSrc);
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         sum = vqaddq(vmulhq(vecSrc.val[0], vecSrc.val[0]),
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****                      vmulhq(vecSrc.val[1], vecSrc.val[1]));
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         sum = vshrq(sum, 1);
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         /*
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         This function is using a table. There are compilations flags to avoid
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         including this table (and in this case, arm_cmplx_maq_q31 must not
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         be built and linked.)
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         */
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         sum = FAST_VSQRT_Q31(sum);
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         vst1q(pDst, sum);
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         /*
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****          * Decrement the blockSize loop counter
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****          */
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         blkCnt--;
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         pSrc += 8;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         pDst += 4;
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     }
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /*
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****      * tail
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****      */
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt = blockSize & 3;
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     while (blkCnt > 0U)
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     {
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       real = *pSrc++;
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       imag = *pSrc++;
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       acc0 = (q31_t) (((q63_t) real * real) >> 33);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       /* store result in 2.30 format in destination buffer. */
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       arm_sqrt_q31(acc0 + acc1, pDst++);
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       /* Decrement loop counter */
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****       blkCnt--;
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     }
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** }
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #else
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** void arm_cmplx_mag_q31(
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   const q31_t * pSrc,
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         q31_t * pDst,
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         uint32_t numSamples)
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** {
 927              		.loc 12 126 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 65


 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              	.LVL141:
 932 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 933              		.cfi_def_cfa_offset 32
 934              		.cfi_offset 3, -32
 935              		.cfi_offset 4, -28
 936              		.cfi_offset 5, -24
 937              		.cfi_offset 6, -20
 938              		.cfi_offset 7, -16
 939              		.cfi_offset 8, -12
 940              		.cfi_offset 9, -8
 941              		.cfi_offset 14, -4
 942 0004 0E46     		mov	r6, r1
 943 0006 1546     		mov	r5, r2
 944              	.LVL142:
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         q31_t real, imag;                              /* Temporary input variables */
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****         q31_t acc0, acc1;                              /* Accumulators */
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples >> 2U;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   while (blkCnt > 0U)
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* store result in 2.30 format in destination buffer. */
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* Decrement loop counter */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 66


 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt--;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   }
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples % 0x4U;
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #else
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* Initialize blkCnt with number of samples */
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples;
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   while (blkCnt > 0U)
 945              		.loc 12 180 0
 946 0008 1DE0     		b	.L52
 947              	.LVL143:
 948              	.L53:
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 949              		.loc 12 184 0
 950 000a 0446     		mov	r4, r0
 951 000c 54F8082B 		ldr	r2, [r4], #8
 952              	.LVL144:
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 953              		.loc 12 185 0
 954 0010 4068     		ldr	r0, [r0, #4]
 955              	.LVL145:
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 956              		.loc 12 186 0
 957 0012 4FEAE279 		asr	r9, r2, #31
 958 0016 02FB09F1 		mul	r1, r2, r9
 959 001a A2FB0223 		umull	r2, r3, r2, r2
 960              	.LVL146:
 961 001e 03EB4103 		add	r3, r3, r1, lsl #1
 962              	.LVL147:
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 963              		.loc 12 187 0
 964 0022 4FEAE079 		asr	r9, r0, #31
 965 0026 00FB09F2 		mul	r2, r0, r9
 966 002a A0FB0001 		umull	r0, r1, r0, r0
 967              	.LVL148:
 968 002e 01EB4201 		add	r1, r1, r2, lsl #1
 969 0032 4810     		asrs	r0, r1, #1
 970              	.LVL149:
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* store result in 2.30 format in destination buffer. */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 971              		.loc 12 190 0
 972 0034 371D     		adds	r7, r6, #4
 973              	.LVL150:
 974 0036 00EB6300 		add	r0, r0, r3, asr #1
 975              	.LVL151:
 976 003a 3146     		mov	r1, r6
 977              	.LVL152:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 67


 978 003c FFF7FEFF 		bl	arm_sqrt_q31
 979              	.LVL153:
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* Decrement loop counter */
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt--;
 980              		.loc 12 193 0
 981 0040 013D     		subs	r5, r5, #1
 982              	.LVL154:
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 983              		.loc 12 190 0
 984 0042 3E46     		mov	r6, r7
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 985              		.loc 12 185 0
 986 0044 2046     		mov	r0, r4
 987              	.LVL155:
 988              	.L52:
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 989              		.loc 12 180 0
 990 0046 002D     		cmp	r5, #0
 991 0048 DFD1     		bne	.L53
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c ****   }
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_q31.c **** }
 992              		.loc 12 196 0
 993 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 994              		.cfi_endproc
 995              	.LFE94:
 996              		.size	arm_cmplx_mag_q31, .-arm_cmplx_mag_q31
 997 004e 00BF     		.section	.text.arm_cmplx_mag_squared_f32,"ax",%progbits
 998              		.align	2
 999              		.global	arm_cmplx_mag_squared_f32
 1000              		.thumb
 1001              		.thumb_func
 1002              		.type	arm_cmplx_mag_squared_f32, %function
 1003              	arm_cmplx_mag_squared_f32:
 1004              	.LFB95:
 1005              		.file 13 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_squared_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Title:        arm_cmplx_mag_squared_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Description:  Floating-point complex magnitude squared
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 68


  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @defgroup cmplx_mag_squared Complex Magnitude Squared
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   Computes the magnitude squared of the elements of a complex data vector.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The <code>pSrc</code> points to the source data and
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <code>pDst</code> points to the where the result should be written.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   in the input array and the data is stored in an interleaved fashion
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   (real, imag, real, imag, ...).
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The input array has a total of <code>2*numSamples</code> values;
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   the output array has a total of <code>numSamples</code> values.
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The underlying algorithm is used:
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <pre>
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   for (n = 0; n < numSamples; n++) {
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       pDst[n] = pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2;
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   </pre>
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @addtogroup cmplx_mag_squared
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @{
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @brief         Floating-point complex magnitude squared.
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[in]     pSrc        points to input vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[out]    pDst        points to output vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @return        none
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   const float32_t * pSrc,
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t * pDst,
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t numSamples)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 69


  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     int32_t blockSize = numSamples;  /* loop counters */
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     uint32_t  blkCnt;           /* loop counters */
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     f32x4x2_t vecSrc;
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     f32x4_t sum;
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     float32_t real, imag;                          /* Temporary input variables */
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Compute 4 complex samples at a time */
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt = blockSize >> 2;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     while (blkCnt > 0U)
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     {
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         vecSrc = vld2q(pSrc);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         sum = vmulq(vecSrc.val[0], vecSrc.val[0]);
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         sum = vfmaq(sum, vecSrc.val[1], vecSrc.val[1]);
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         vst1q(pDst, sum);
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         pSrc += 8;
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         pDst += 4;
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         /*
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****          * Decrement the blockSize loop counter
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****          */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         blkCnt--;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     }
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Tail */
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt = blockSize & 3;
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     while (blkCnt > 0U)
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     {
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       real = *pSrc++;
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       imag = *pSrc++;
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* store result in destination buffer. */
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       *pDst++ = (real * real) + (imag * imag);
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* Decrement loop counter */
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       blkCnt--;
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     }
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   const float32_t * pSrc,
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t * pDst,
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t numSamples)
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
 1006              		.loc 13 126 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              	.LVL156:
 1011 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1012              		.cfi_def_cfa_offset 32
 1013              		.cfi_offset 3, -32
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 70


 1014              		.cfi_offset 4, -28
 1015              		.cfi_offset 5, -24
 1016              		.cfi_offset 6, -20
 1017              		.cfi_offset 7, -16
 1018              		.cfi_offset 8, -12
 1019              		.cfi_offset 9, -8
 1020              		.cfi_offset 14, -4
 1021 0004 0E46     		mov	r6, r1
 1022 0006 1546     		mov	r5, r2
 1023              	.LVL157:
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t real, imag;                          /* Temporary input variables */
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4x2_t vecA;
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vRealA;
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vImagA;
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vMagSqA;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4x2_t vecB;
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vRealB;
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vImagB;
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vMagSqB;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute 8 outputs at a time */
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 3;
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* out = sqrt((real * real) + (imag * imag)) */
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vecA = vld2q_f32(pSrc);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vRealA = vmulq_f32(vecA.val[0], vecA.val[0]);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vImagA = vmulq_f32(vecA.val[1], vecA.val[1]);
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vMagSqA = vaddq_f32(vRealA, vImagA);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vecB = vld2q_f32(pSrc);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8;
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vRealB = vmulq_f32(vecB.val[0], vecB.val[0]);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vImagB = vmulq_f32(vecB.val[1], vecB.val[1]);
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vMagSqB = vaddq_f32(vRealB, vImagB);
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Store the result in the destination buffer. */
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vst1q_f32(pDst, vMagSqA);
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4;
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vst1q_f32(pDst, vMagSqB);
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples & 7;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 71


 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 2U;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement loop counter */
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples % 0x4U;
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Initialize blkCnt with number of samples */
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples;
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
 1024              		.loc 13 216 0
 1025 0008 15E0     		b	.L56
 1026              	.LVL158:
 1027              	.L57:
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 1028              		.loc 13 220 0
 1029 000a 0446     		mov	r4, r0
 1030 000c 54F8081B 		ldr	r1, [r4], #8	@ float
 1031              	.LVL159:
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 1032              		.loc 13 221 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 72


 1033 0010 4768     		ldr	r7, [r0, #4]	@ float
 1034              	.LVL160:
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store result in destination buffer. */
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 1035              		.loc 13 224 0
 1036 0012 06F10408 		add	r8, r6, #4
 1037              	.LVL161:
 1038 0016 0846     		mov	r0, r1
 1039 0018 FFF7FEFF 		bl	__aeabi_fmul
 1040              	.LVL162:
 1041 001c 8146     		mov	r9, r0
 1042 001e 3846     		mov	r0, r7
 1043 0020 3946     		mov	r1, r7
 1044 0022 FFF7FEFF 		bl	__aeabi_fmul
 1045              	.LVL163:
 1046 0026 0146     		mov	r1, r0
 1047 0028 4846     		mov	r0, r9
 1048 002a FFF7FEFF 		bl	__aeabi_fadd
 1049              	.LVL164:
 1050 002e 3060     		str	r0, [r6]	@ float
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement loop counter */
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 1051              		.loc 13 227 0
 1052 0030 013D     		subs	r5, r5, #1
 1053              	.LVL165:
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 1054              		.loc 13 224 0
 1055 0032 4646     		mov	r6, r8
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 1056              		.loc 13 221 0
 1057 0034 2046     		mov	r0, r4
 1058              	.LVL166:
 1059              	.L56:
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 1060              		.loc 13 216 0
 1061 0036 002D     		cmp	r5, #0
 1062 0038 E7D1     		bne	.L57
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 1063              		.loc 13 230 0
 1064 003a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1065              		.cfi_endproc
 1066              	.LFE95:
 1067              		.size	arm_cmplx_mag_squared_f32, .-arm_cmplx_mag_squared_f32
 1068 003e 00BF     		.section	.text.arm_cmplx_mag_squared_f64,"ax",%progbits
 1069              		.align	2
 1070              		.global	arm_cmplx_mag_squared_f64
 1071              		.thumb
 1072              		.thumb_func
 1073              		.type	arm_cmplx_mag_squared_f64, %function
 1074              	arm_cmplx_mag_squared_f64:
 1075              	.LFB96:
 1076              		.file 14 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_squared_f64.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** /* ----------------------------------------------------------------------
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 73


   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Title:        arm_cmplx_mag_squared_f64.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Description:  Floating-point complex magnitude squared
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @addtogroup cmplx_mag_squared
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @brief         Floating-point complex magnitude squared.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****  */
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** void arm_cmplx_mag_squared_f64(
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   const float64_t * pSrc,
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****         float64_t * pDst,
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****         uint32_t numSamples)
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** {
 1077              		.loc 14 51 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              	.LVL167:
 1082 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1083              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 74


 1084              		.cfi_offset 3, -40
 1085              		.cfi_offset 4, -36
 1086              		.cfi_offset 5, -32
 1087              		.cfi_offset 6, -28
 1088              		.cfi_offset 7, -24
 1089              		.cfi_offset 8, -20
 1090              		.cfi_offset 9, -16
 1091              		.cfi_offset 10, -12
 1092              		.cfi_offset 11, -8
 1093              		.cfi_offset 14, -4
 1094 0004 8A46     		mov	r10, r1
 1095 0006 1546     		mov	r5, r2
 1096              	.LVL168:
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****         uint32_t blkCnt;                               /* Loop counter */
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****         float64_t real, imag;                          /* Temporary input variables */
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   /* Initialize blkCnt with number of samples */
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   blkCnt = numSamples;
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   while (blkCnt > 0U)
 1097              		.loc 14 58 0
 1098 0008 1DE0     		b	.L60
 1099              	.LVL169:
 1100              	.L61:
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   {
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     real = *pSrc++;
 1101              		.loc 14 62 0
 1102 000a 0446     		mov	r4, r0
 1103 000c F4E80423 		ldrd	r2, [r4], #16
 1104              	.LVL170:
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     imag = *pSrc++;
 1105              		.loc 14 63 0
 1106 0010 D0E90267 		ldrd	r6, [r0, #8]
 1107              	.LVL171:
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     /* store result in destination buffer. */
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     *pDst++ = (real * real) + (imag * imag);
 1108              		.loc 14 66 0
 1109 0014 0AF1080B 		add	fp, r10, #8
 1110              	.LVL172:
 1111 0018 1046     		mov	r0, r2
 1112 001a 1946     		mov	r1, r3
 1113 001c FFF7FEFF 		bl	__aeabi_dmul
 1114              	.LVL173:
 1115 0020 8046     		mov	r8, r0
 1116 0022 8946     		mov	r9, r1
 1117 0024 3046     		mov	r0, r6
 1118 0026 3946     		mov	r1, r7
 1119 0028 3246     		mov	r2, r6
 1120 002a 3B46     		mov	r3, r7
 1121 002c FFF7FEFF 		bl	__aeabi_dmul
 1122              	.LVL174:
 1123 0030 0246     		mov	r2, r0
 1124 0032 0B46     		mov	r3, r1
 1125 0034 4046     		mov	r0, r8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 75


 1126 0036 4946     		mov	r1, r9
 1127 0038 FFF7FEFF 		bl	__aeabi_dadd
 1128              	.LVL175:
 1129 003c CAE90001 		strd	r0, [r10]
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     /* Decrement loop counter */
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****     blkCnt--;
 1130              		.loc 14 69 0
 1131 0040 013D     		subs	r5, r5, #1
 1132              	.LVL176:
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
 1133              		.loc 14 66 0
 1134 0042 DA46     		mov	r10, fp
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
 1135              		.loc 14 63 0
 1136 0044 2046     		mov	r0, r4
 1137              	.LVL177:
 1138              	.L60:
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   {
 1139              		.loc 14 58 0
 1140 0046 002D     		cmp	r5, #0
 1141 0048 DFD1     		bne	.L61
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c ****   }
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_f64.c **** }
 1142              		.loc 14 72 0
 1143 004a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1144              		.cfi_endproc
 1145              	.LFE96:
 1146              		.size	arm_cmplx_mag_squared_f64, .-arm_cmplx_mag_squared_f64
 1147 004e 00BF     		.section	.text.arm_cmplx_mag_squared_q15,"ax",%progbits
 1148              		.align	2
 1149              		.global	arm_cmplx_mag_squared_q15
 1150              		.thumb
 1151              		.thumb_func
 1152              		.type	arm_cmplx_mag_squared_q15, %function
 1153              	arm_cmplx_mag_squared_q15:
 1154              	.LFB97:
 1155              		.file 15 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_squared_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Title:        arm_cmplx_mag_squared_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Description:  Q15 complex magnitude squared
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * You may obtain a copy of the License at
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 76


  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @addtogroup cmplx_mag_squared
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @brief         Q15 complex magnitude squared.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****                    The function implements 1.15 by 1.15 multiplications and finally output is conve
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****  */
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** void arm_cmplx_mag_squared_q15(
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   const q15_t * pSrc,
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q15_t * pDst,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         uint32_t numSamples)
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** {
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   int32_t blockSize = numSamples;  /* loop counters */
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   uint32_t  blkCnt;           /* loop counters */
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   q31_t in;
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   q31_t acc0;                                    /* Accumulators */
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   q15x8x2_t vecSrc;
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   q15x8_t vReal, vImag;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   q15x8_t vMagSq;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   blkCnt = blockSize >> 3;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   while (blkCnt > 0U)
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   {
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vecSrc = vld2q(pSrc);
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vReal = vmulhq(vecSrc.val[0], vecSrc.val[0]);
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vImag = vmulhq(vecSrc.val[1], vecSrc.val[1]);
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vMagSq = vqaddq(vReal, vImag);
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vMagSq = vshrq(vMagSq, 1);
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 77


  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     vst1q(pDst, vMagSq);
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     pSrc += 16;
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     pDst += 8;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /*
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****      * Decrement the blkCnt loop counter
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****      * Advance vector source and destination pointers
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****      */
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     blkCnt --;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   }
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   /*
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****    * tail
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****    */
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   blkCnt = blockSize & 7;
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   while (blkCnt > 0U)
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   {
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia ((q15_t **) &pSrc);
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* store result in 3.13 format in destination buffer. */
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* Decrement loop counter */
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     blkCnt--;
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   }
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** }
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #else
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** void arm_cmplx_mag_squared_q15(
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   const q15_t * pSrc,
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q15_t * pDst,
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         uint32_t numSamples)
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** {
 1156              		.loc 15 113 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161              	.LVL178:
 1162 0000 30B4     		push	{r4, r5}
 1163              		.cfi_def_cfa_offset 8
 1164              		.cfi_offset 4, -8
 1165              		.cfi_offset 5, -4
 1166 0002 0D46     		mov	r5, r1
 1167              	.LVL179:
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #if defined (ARM_MATH_DSP)
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q31_t in;
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q31_t acc0;                                    /* Accumulators */
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #else
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q15_t real, imag;                              /* Temporary input variables */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 78


 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****         q31_t acc0, acc1;                              /* Accumulators */
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #endif
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   blkCnt = numSamples >> 2U;
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   while (blkCnt > 0U)
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   {
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #if defined (ARM_MATH_DSP)
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia (&pSrc);
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* store result in 3.13 format in destination buffer. */
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia (&pSrc);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia (&pSrc);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia (&pSrc);
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #else
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     real = *pSrc++;
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     imag = *pSrc++;
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc1 = ((q31_t) imag * imag);
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* store result in 3.13 format in destination buffer. */
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     real = *pSrc++;
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     imag = *pSrc++;
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc1 = ((q31_t) imag * imag);
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     real = *pSrc++;
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     imag = *pSrc++;
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc1 = ((q31_t) imag * imag);
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     real = *pSrc++;
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     imag = *pSrc++;
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc1 = ((q31_t) imag * imag);
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* Decrement loop counter */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 79


 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     blkCnt--;
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   }
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   blkCnt = numSamples % 0x4U;
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #else
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   /* Initialize blkCnt with number of samples */
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   blkCnt = numSamples;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   while (blkCnt > 0U)
 1168              		.loc 15 191 0
 1169 0004 13E0     		b	.L64
 1170              	.LVL180:
 1171              	.L65:
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   {
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #if defined (ARM_MATH_DSP)
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     in = read_q15x2_ia (&pSrc);
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = __SMUAD(in, in);
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* store result in 3.13 format in destination buffer. */
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (acc0 >> 17);
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #else
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     real = *pSrc++;
 1172              		.loc 15 202 0
 1173 0006 0446     		mov	r4, r0
 1174              	.LVL181:
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     imag = *pSrc++;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 1175              		.loc 15 204 0
 1176 0008 34F9043B 		ldrsh	r3, [r4], #4
 1177 000c 03FB03F3 		mul	r3, r3, r3
 1178              	.LVL182:
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc1 = ((q31_t) imag * imag);
 1179              		.loc 15 205 0
 1180 0010 B0F90200 		ldrsh	r0, [r0, #2]
 1181              	.LVL183:
 1182 0014 00FB00F0 		mul	r0, r0, r0
 1183              	.LVL184:
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* store result in 3.13 format in destination buffer. */
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     *pDst++ = (q15_t) (((q63_t) acc0 + acc1) >> 17);
 1184              		.loc 15 208 0
 1185 0018 C117     		asrs	r1, r0, #31
 1186 001a C018     		adds	r0, r0, r3
 1187              	.LVL185:
 1188 001c 41EBE371 		adc	r1, r1, r3, asr #31
 1189 0020 430C     		lsrs	r3, r0, #17
 1190              	.LVL186:
 1191 0022 43EAC133 		orr	r3, r3, r1, lsl #15
 1192 0026 2B80     		strh	r3, [r5]	@ movhi
 1193              	.LVL187:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 80


 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #endif
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     /* Decrement loop counter */
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     blkCnt--;
 1194              		.loc 15 212 0
 1195 0028 013A     		subs	r2, r2, #1
 1196              	.LVL188:
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** #endif
 1197              		.loc 15 208 0
 1198 002a 0235     		adds	r5, r5, #2
 1199              	.LVL189:
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****     acc0 = ((q31_t) real * real);
 1200              		.loc 15 203 0
 1201 002c 2046     		mov	r0, r4
 1202              	.LVL190:
 1203              	.L64:
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   {
 1204              		.loc 15 191 0
 1205 002e 002A     		cmp	r2, #0
 1206 0030 E9D1     		bne	.L65
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c ****   }
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** 
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q15.c **** }
 1207              		.loc 15 215 0
 1208 0032 30BC     		pop	{r4, r5}
 1209              		.cfi_restore 5
 1210              		.cfi_restore 4
 1211              		.cfi_def_cfa_offset 0
 1212              	.LVL191:
 1213 0034 7047     		bx	lr
 1214              		.cfi_endproc
 1215              	.LFE97:
 1216              		.size	arm_cmplx_mag_squared_q15, .-arm_cmplx_mag_squared_q15
 1217 0036 00BF     		.section	.text.arm_cmplx_mag_squared_q31,"ax",%progbits
 1218              		.align	2
 1219              		.global	arm_cmplx_mag_squared_q31
 1220              		.thumb
 1221              		.thumb_func
 1222              		.type	arm_cmplx_mag_squared_q31, %function
 1223              	arm_cmplx_mag_squared_q31:
 1224              	.LFB98:
 1225              		.file 16 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_squared_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Title:        arm_cmplx_mag_squared_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Description:  Q31 complex magnitude squared
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 81


  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @addtogroup cmplx_mag_squared
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @brief         Q31 complex magnitude squared.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @param[in]     pSrc        points to input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @param[out]    pDst        points to output vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @param[in]     numSamples  number of samples in each vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @return        none
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****                    The function implements 1.31 by 1.31 multiplications and finally output is conve
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****                    Input down scaling is not required.
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** void arm_cmplx_mag_squared_q31(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   const q31_t * pSrc,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         q31_t * pDst,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         uint32_t numSamples)
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** {
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     int32_t blockSize = numSamples;  /* loop counters */
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     q31x4x2_t vecSrc;
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     q31x4_t vReal, vImag;
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     q31x4_t vMagSq;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     q31_t real, imag;                              /* Temporary input variables */
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     q31_t acc0, acc1;                              /* Accumulators */
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Compute 4 complex samples at a time */
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt = blockSize >> 2;
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     {
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vecSrc = vld2q(pSrc);
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vReal = vmulhq(vecSrc.val[0], vecSrc.val[0]);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 82


  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vImag = vmulhq(vecSrc.val[1], vecSrc.val[1]);
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vMagSq = vqaddq(vReal, vImag);
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vMagSq = vshrq(vMagSq, 1);
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         vst1q(pDst, vMagSq);
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         pSrc += 8;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         pDst += 4;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         /*
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****          * Decrement the blkCnt loop counter
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****          * Advance vector source and destination pointers
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****          */
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         blkCnt --;
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     } 
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Tail */
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt = blockSize & 3;
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     while (blkCnt > 0U)
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     {
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       real = *pSrc++;
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       imag = *pSrc++;
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       acc0 = (q31_t) (((q63_t) real * real) >> 33);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       /* store result in 3.29 format in destination buffer. */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       *pDst++ = acc0 + acc1;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       /* Decrement loop counter */
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****       blkCnt--;
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     }
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** }
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #else
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** void arm_cmplx_mag_squared_q31(
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   const q31_t * pSrc,
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         q31_t * pDst,
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         uint32_t numSamples)
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** {
 1226              		.loc 16 112 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 1231              	.LVL192:
 1232 0000 2DE97003 		push	{r4, r5, r6, r8, r9}
 1233              		.cfi_def_cfa_offset 20
 1234              		.cfi_offset 4, -20
 1235              		.cfi_offset 5, -16
 1236              		.cfi_offset 6, -12
 1237              		.cfi_offset 8, -8
 1238              		.cfi_offset 9, -4
 1239 0004 0446     		mov	r4, r0
 1240 0006 0E46     		mov	r6, r1
 1241              	.LVL193:
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 83


 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         q31_t real, imag;                              /* Temporary input variables */
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****         q31_t acc0, acc1;                              /* Accumulators */
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   blkCnt = numSamples >> 2U;
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   while (blkCnt > 0U)
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Decrement loop counter */
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt--;
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   }
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   blkCnt = numSamples % 0x4U;
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #else
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* Initialize blkCnt with number of samples */
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   blkCnt = numSamples;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   while (blkCnt > 0U)
 1242              		.loc 16 165 0
 1243 0008 1AE0     		b	.L68
 1244              	.LVL194:
 1245              	.L69:
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 84


 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 1246              		.loc 16 169 0
 1247 000a 2346     		mov	r3, r4
 1248 000c 53F8080B 		ldr	r0, [r3], #8
 1249              	.LVL195:
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 1250              		.loc 16 170 0
 1251 0010 6468     		ldr	r4, [r4, #4]
 1252              	.LVL196:
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 1253              		.loc 16 171 0
 1254 0012 4FEAE079 		asr	r9, r0, #31
 1255 0016 00FB09F5 		mul	r5, r0, r9
 1256 001a A0FB0001 		umull	r0, r1, r0, r0
 1257              	.LVL197:
 1258 001e 01EB4501 		add	r1, r1, r5, lsl #1
 1259              	.LVL198:
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 1260              		.loc 16 172 0
 1261 0022 4FEAE479 		asr	r9, r4, #31
 1262 0026 04FB09F0 		mul	r0, r4, r9
 1263 002a A4FB0445 		umull	r4, r5, r4, r4
 1264              	.LVL199:
 1265 002e 05EB4005 		add	r5, r5, r0, lsl #1
 1266 0032 6810     		asrs	r0, r5, #1
 1267              	.LVL200:
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store result in 3.29 format in destination buffer. */
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 1268              		.loc 16 175 0
 1269 0034 00EB6100 		add	r0, r0, r1, asr #1
 1270              	.LVL201:
 1271 0038 3060     		str	r0, [r6]
 1272              	.LVL202:
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Decrement loop counter */
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt--;
 1273              		.loc 16 178 0
 1274 003a 013A     		subs	r2, r2, #1
 1275              	.LVL203:
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 1276              		.loc 16 175 0
 1277 003c 0436     		adds	r6, r6, #4
 1278              	.LVL204:
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 1279              		.loc 16 170 0
 1280 003e 1C46     		mov	r4, r3
 1281              	.LVL205:
 1282              	.L68:
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 1283              		.loc 16 165 0
 1284 0040 002A     		cmp	r2, #0
 1285 0042 E2D1     		bne	.L69
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   }
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 85


 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** }
 1286              		.loc 16 181 0
 1287 0044 BDE87003 		pop	{r4, r5, r6, r8, r9}
 1288              		.cfi_restore 9
 1289              		.cfi_restore 8
 1290              		.cfi_restore 6
 1291              		.cfi_restore 5
 1292              		.cfi_restore 4
 1293              		.cfi_def_cfa_offset 0
 1294              	.LVL206:
 1295 0048 7047     		bx	lr
 1296              		.cfi_endproc
 1297              	.LFE98:
 1298              		.size	arm_cmplx_mag_squared_q31, .-arm_cmplx_mag_squared_q31
 1299 004a 00BF     		.section	.text.arm_cmplx_mult_cmplx_f32,"ax",%progbits
 1300              		.align	2
 1301              		.global	arm_cmplx_mult_cmplx_f32
 1302              		.thumb
 1303              		.thumb_func
 1304              		.type	arm_cmplx_mult_cmplx_f32, %function
 1305              	arm_cmplx_mult_cmplx_f32:
 1306              	.LFB99:
 1307              		.file 17 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Title:        arm_cmplx_mult_cmplx_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Description:  Floating-point complex-by-complex multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 86


  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @defgroup CmplxByCmplxMult Complex-by-Complex Multiplication
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   Multiplies a complex vector by another complex vector and generates a complex result.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The data in the complex arrays is stored in an interleaved fashion
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   (real, imag, real, imag, ...).
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The parameter <code>numSamples</code> represents the number of complex
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   samples processed.  The complex arrays have a total of <code>2*numSamples</code>
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   real values.
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The underlying algorithm is used:
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   <pre>
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   for (n = 0; n < numSamples; n++) {
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       pDst[(2*n)+0] = pSrcA[(2*n)+0] * pSrcB[(2*n)+0] - pSrcA[(2*n)+1] * pSrcB[(2*n)+1];
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       pDst[(2*n)+1] = pSrcA[(2*n)+0] * pSrcB[(2*n)+1] + pSrcA[(2*n)+1] * pSrcB[(2*n)+0];
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   </pre>
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @addtogroup CmplxByCmplxMult
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @{
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @brief         Floating-point complex-by-complex multiplication.
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     pSrcA       points to first input vector
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     pSrcB       points to second input vector
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[out]    pDst        points to output vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     numSamples  number of samples in each vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @return        none
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** void arm_cmplx_mult_cmplx_f32(
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcA,
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcB,
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         float32_t * pDst,
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         uint32_t numSamples)
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** {
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****      int32_t         blkCnt;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4_t         vecSrcA, vecSrcB;
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4_t         vecSrcC, vecSrcD;
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4_t         vec_acc;
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = numSamples >> 2;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt -= 1;
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     if (blkCnt > 0) {
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         /* should give more freedom to generate stall free code */
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vecSrcA = vld1q(pSrcA);
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vecSrcB = vld1q(pSrcB);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcA += 4;
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcB += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 87


  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         while (blkCnt > 0) {
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmulq(vecSrcA, vecSrcB);
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcC = vld1q(pSrcA);
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcA += 4;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmlaq_rot90(vec_acc, vecSrcA, vecSrcB);
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcD = vld1q(pSrcB);
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcB += 4;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vst1q(pDst, vec_acc);
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pDst += 4;
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmulq(vecSrcC, vecSrcD);
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcA = vld1q(pSrcA);
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcA += 4;
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmlaq_rot90(vec_acc, vecSrcC, vecSrcD);
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcB = vld1q(pSrcB);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcB += 4;
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vst1q(pDst, vec_acc);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pDst += 4;
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             /*
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****              * Decrement the blockSize loop counter
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****              */
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             blkCnt--;
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         }
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vec_acc = vcmulq(vecSrcA, vecSrcB);
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vecSrcC = vld1q(pSrcA);
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vec_acc = vcmlaq_rot90(vec_acc, vecSrcA, vecSrcB);
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vecSrcD = vld1q(pSrcB);
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vst1q(pDst, vec_acc);
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pDst += 4;
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vec_acc = vcmulq(vecSrcC, vecSrcD);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vec_acc = vcmlaq_rot90(vec_acc, vecSrcC, vecSrcD);
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vst1q(pDst, vec_acc);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pDst += 4;
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         /*
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****          * tail
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****          */
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         blkCnt = CMPLX_DIM * (numSamples & 3);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         while (blkCnt > 0) {
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcA += 4;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcB += 4;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcA = vldrwq_z_f32(pSrcA, p);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcB = vldrwq_z_f32(pSrcB, p);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmulq_m(vuninitializedq_f32(),vecSrcA, vecSrcB, p);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmlaq_rot90_m(vec_acc, vecSrcA, vecSrcB, p);
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vstrwq_p_f32(pDst, vec_acc, p);
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pDst += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 88


 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             blkCnt -= 4;
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         }
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     } else {
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         /* small vector */
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         blkCnt = numSamples * CMPLX_DIM;
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vec_acc = vdupq_n_f32(0.0f);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         do {
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcA = vldrwq_z_f32(pSrcA, p);
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecSrcB = vldrwq_z_f32(pSrcB, p);
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmulq_m(vuninitializedq_f32(),vecSrcA, vecSrcB, p);
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vec_acc = vcmlaq_rot90_m(vec_acc, vecSrcA, vecSrcB, p);
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vstrwq_p_f32(pDst, vec_acc, p);
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pDst += 4;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             /*
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****              * Decrement the blkCnt loop counter
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****              * Advance vector source and destination pointers
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****              */
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcA += 4;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcB += 4;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             blkCnt -= 4;
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         }
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         while (blkCnt > 0);
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     }
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** }
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** void arm_cmplx_mult_cmplx_f32(
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcA,
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcB,
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         float32_t * pDst,
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         uint32_t numSamples)
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** {
 1308              		.loc 17 187 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 8
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312              	.LVL207:
 1313 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1314              		.cfi_def_cfa_offset 36
 1315              		.cfi_offset 4, -36
 1316              		.cfi_offset 5, -32
 1317              		.cfi_offset 6, -28
 1318              		.cfi_offset 7, -24
 1319              		.cfi_offset 8, -20
 1320              		.cfi_offset 9, -16
 1321              		.cfi_offset 10, -12
 1322              		.cfi_offset 11, -8
 1323              		.cfi_offset 14, -4
 1324 0004 83B0     		sub	sp, sp, #12
 1325              		.cfi_def_cfa_offset 48
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 89


 1326 0006 9046     		mov	r8, r2
 1327 0008 1F46     		mov	r7, r3
 1328              	.LVL208:
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32_t a, b, c, d;  /* Temporary variables to store real and imaginary values */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32x4x2_t va, vb;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32x4x2_t outCplx;
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Compute 4 outputs at a time */
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = numSamples >> 2U;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     while (blkCnt > 0U)
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     {
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         va = vld2q_f32(pSrcA);  // load & separate real/imag pSrcA (de-interleave 2)
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vb = vld2q_f32(pSrcB);  // load & separate real/imag pSrcB
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Increment pointers */
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcA += 8;
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcB += 8;
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[0] = vmulq_f32(va.val[0], vb.val[0]);
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[0] = vmlsq_f32(outCplx.val[0], va.val[1], vb.val[1]);
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[1] = vmulq_f32(va.val[0], vb.val[1]);
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[1] = vmlaq_f32(outCplx.val[1], va.val[1], vb.val[0]);
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vst2q_f32(pDst, outCplx);
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Increment pointer */
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pDst += 8;
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Decrement the loop counter */
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         blkCnt--;
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     }
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Tail */
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = numSamples & 3;
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples >> 2U;
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while (blkCnt > 0U)
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 90


 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* store result in destination buffer. */
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 256:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 257:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 258:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 260:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 261:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 263:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 264:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 265:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 266:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 267:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement loop counter */
 268:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 269:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 270:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 271:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 272:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples % 0x4U;
 273:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 274:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 275:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 276:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Initialize blkCnt with number of samples */
 277:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples;
 278:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 279:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 280:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 281:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 282:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while (blkCnt > 0U)
 1329              		.loc 17 282 0
 1330 000a 2DE0     		b	.L72
 1331              	.LVL209:
 1332              	.L73:
 283:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 284:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 285:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 286:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 287:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 1333              		.loc 17 287 0
 1334 000c 0446     		mov	r4, r0
 1335 000e 54F808BB 		ldr	fp, [r4], #8	@ float
 1336              	.LVL210:
 288:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 1337              		.loc 17 288 0
 1338 0012 D0F80490 		ldr	r9, [r0, #4]	@ float
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 91


 1339              	.LVL211:
 289:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 1340              		.loc 17 289 0
 1341 0016 0D46     		mov	r5, r1
 1342 0018 55F8083B 		ldr	r3, [r5], #8	@ float
 1343              	.LVL212:
 290:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 1344              		.loc 17 290 0
 1345 001c D1F804A0 		ldr	r10, [r1, #4]	@ float
 1346              	.LVL213:
 291:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 292:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* store result in destination buffer. */
 293:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 1347              		.loc 17 293 0
 1348 0020 5846     		mov	r0, fp
 1349 0022 0193     		str	r3, [sp, #4]	@ float
 1350 0024 1946     		mov	r1, r3
 1351 0026 FFF7FEFF 		bl	__aeabi_fmul
 1352              	.LVL214:
 1353 002a 0646     		mov	r6, r0
 1354 002c 4846     		mov	r0, r9
 1355 002e 5146     		mov	r1, r10
 1356 0030 FFF7FEFF 		bl	__aeabi_fmul
 1357              	.LVL215:
 1358 0034 0146     		mov	r1, r0
 1359 0036 3046     		mov	r0, r6
 1360 0038 FFF7FEFF 		bl	__aeabi_fsub
 1361              	.LVL216:
 1362 003c 4646     		mov	r6, r8
 1363 003e 46F8080B 		str	r0, [r6], #8	@ float
 1364              	.LVL217:
 294:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 1365              		.loc 17 294 0
 1366 0042 5846     		mov	r0, fp
 1367 0044 5146     		mov	r1, r10
 1368 0046 FFF7FEFF 		bl	__aeabi_fmul
 1369              	.LVL218:
 1370 004a 8246     		mov	r10, r0
 1371              	.LVL219:
 1372 004c 4846     		mov	r0, r9
 1373 004e 0199     		ldr	r1, [sp, #4]	@ float
 1374 0050 FFF7FEFF 		bl	__aeabi_fmul
 1375              	.LVL220:
 1376 0054 0146     		mov	r1, r0
 1377 0056 5046     		mov	r0, r10
 1378 0058 FFF7FEFF 		bl	__aeabi_fadd
 1379              	.LVL221:
 1380 005c C8F80400 		str	r0, [r8, #4]	@ float
 295:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 296:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement loop counter */
 297:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 1381              		.loc 17 297 0
 1382 0060 013F     		subs	r7, r7, #1
 1383              	.LVL222:
 294:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 1384              		.loc 17 294 0
 1385 0062 B046     		mov	r8, r6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 92


 290:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 1386              		.loc 17 290 0
 1387 0064 2946     		mov	r1, r5
 288:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 1388              		.loc 17 288 0
 1389 0066 2046     		mov	r0, r4
 1390              	.LVL223:
 1391              	.L72:
 282:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 1392              		.loc 17 282 0
 1393 0068 002F     		cmp	r7, #0
 1394 006a CFD1     		bne	.L73
 298:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 299:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 300:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** }
 1395              		.loc 17 300 0
 1396 006c 03B0     		add	sp, sp, #12
 1397              		.cfi_def_cfa_offset 36
 1398              		@ sp needed
 1399 006e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1400              		.cfi_endproc
 1401              	.LFE99:
 1402              		.size	arm_cmplx_mult_cmplx_f32, .-arm_cmplx_mult_cmplx_f32
 1403              		.global	__aeabi_dsub
 1404 0072 00BF     		.section	.text.arm_cmplx_mult_cmplx_f64,"ax",%progbits
 1405              		.align	2
 1406              		.global	arm_cmplx_mult_cmplx_f64
 1407              		.thumb
 1408              		.thumb_func
 1409              		.type	arm_cmplx_mult_cmplx_f64, %function
 1410              	arm_cmplx_mult_cmplx_f64:
 1411              	.LFB100:
 1412              		.file 18 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_f64.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Title:        arm_cmplx_mult_cmplx_f64.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Description:  Floating-point complex-by-complex multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 93


  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @addtogroup CmplxByCmplxMult
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @brief         Floating-point complex-by-complex multiplication.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @param[in]     pSrcA       points to first input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @param[in]     pSrcB       points to second input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @param[out]    pDst        points to output vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @param[in]     numSamples  number of samples in each vector
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   @return        none
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****  */
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** void arm_cmplx_mult_cmplx_f64(
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   const float64_t * pSrcA,
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   const float64_t * pSrcB,
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****         float64_t * pDst,
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****         uint32_t numSamples)
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** {
 1413              		.loc 18 54 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 32
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 1417              	.LVL224:
 1418 0000 2DE9F04B 		push	{r4, r5, r6, r7, r8, r9, fp, lr}
 1419              		.cfi_def_cfa_offset 32
 1420              		.cfi_offset 4, -32
 1421              		.cfi_offset 5, -28
 1422              		.cfi_offset 6, -24
 1423              		.cfi_offset 7, -20
 1424              		.cfi_offset 8, -16
 1425              		.cfi_offset 9, -12
 1426              		.cfi_offset 11, -8
 1427              		.cfi_offset 14, -4
 1428 0004 88B0     		sub	sp, sp, #32
 1429              		.cfi_def_cfa_offset 64
 1430 0006 9046     		mov	r8, r2
 1431 0008 9B46     		mov	fp, r3
 1432              	.LVL225:
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   float64_t a, b, c, d;  /* Temporary variables to store real and imaginary values */
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   /* Initialize blkCnt with number of samples */
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   blkCnt = numSamples;
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   while (blkCnt > 0U)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 94


 1433              		.loc 18 61 0
 1434 000a 41E0     		b	.L76
 1435              	.LVL226:
 1436              	.L77:
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   {
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     a = *pSrcA++;
 1437              		.loc 18 66 0
 1438 000c 0446     		mov	r4, r0
 1439 000e F4E80423 		ldrd	r2, [r4], #16
 1440              	.LVL227:
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     b = *pSrcA++;
 1441              		.loc 18 67 0
 1442 0012 D0E90267 		ldrd	r6, [r0, #8]
 1443 0016 CDE90067 		strd	r6, [sp]
 1444              	.LVL228:
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     c = *pSrcB++;
 1445              		.loc 18 68 0
 1446 001a 0D46     		mov	r5, r1
 1447 001c F5E80467 		ldrd	r6, [r5], #16
 1448              	.LVL229:
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     d = *pSrcB++;
 1449              		.loc 18 69 0
 1450 0020 D1E90201 		ldrd	r0, [r1, #8]
 1451 0024 CDE90201 		strd	r0, [sp, #8]
 1452              	.LVL230:
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     /* store result in destination buffer. */
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     *pDst++ = (a * c) - (b * d);
 1453              		.loc 18 72 0
 1454 0028 CDE90423 		strd	r2, [sp, #16]
 1455 002c 1046     		mov	r0, r2
 1456              	.LVL231:
 1457 002e 1946     		mov	r1, r3
 1458              	.LVL232:
 1459 0030 3246     		mov	r2, r6
 1460              	.LVL233:
 1461 0032 3B46     		mov	r3, r7
 1462 0034 FFF7FEFF 		bl	__aeabi_dmul
 1463              	.LVL234:
 1464 0038 CDE90601 		strd	r0, [sp, #24]
 1465 003c DDE90001 		ldrd	r0, [sp]
 1466 0040 DDE90223 		ldrd	r2, [sp, #8]
 1467 0044 FFF7FEFF 		bl	__aeabi_dmul
 1468              	.LVL235:
 1469 0048 0246     		mov	r2, r0
 1470 004a 0B46     		mov	r3, r1
 1471 004c DDE90601 		ldrd	r0, [sp, #24]
 1472 0050 FFF7FEFF 		bl	__aeabi_dsub
 1473              	.LVL236:
 1474 0054 C146     		mov	r9, r8
 1475 0056 E9E80401 		strd	r0, [r9], #16
 1476              	.LVL237:
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     *pDst++ = (a * d) + (b * c);
 1477              		.loc 18 73 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 95


 1478 005a DDE90401 		ldrd	r0, [sp, #16]
 1479 005e DDE90223 		ldrd	r2, [sp, #8]
 1480 0062 FFF7FEFF 		bl	__aeabi_dmul
 1481              	.LVL238:
 1482 0066 CDE90201 		strd	r0, [sp, #8]
 1483              	.LVL239:
 1484 006a DDE90001 		ldrd	r0, [sp]
 1485 006e 3246     		mov	r2, r6
 1486 0070 3B46     		mov	r3, r7
 1487 0072 FFF7FEFF 		bl	__aeabi_dmul
 1488              	.LVL240:
 1489 0076 0246     		mov	r2, r0
 1490 0078 0B46     		mov	r3, r1
 1491 007a DDE90201 		ldrd	r0, [sp, #8]
 1492 007e FFF7FEFF 		bl	__aeabi_dadd
 1493              	.LVL241:
 1494 0082 C8E90201 		strd	r0, [r8, #8]
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     /* Decrement loop counter */
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     blkCnt--;
 1495              		.loc 18 76 0
 1496 0086 0BF1FF3B 		add	fp, fp, #-1
 1497              	.LVL242:
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     *pDst++ = (a * d) + (b * c);
 1498              		.loc 18 73 0
 1499 008a C846     		mov	r8, r9
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
 1500              		.loc 18 69 0
 1501 008c 2946     		mov	r1, r5
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****     c = *pSrcB++;
 1502              		.loc 18 67 0
 1503 008e 2046     		mov	r0, r4
 1504              	.LVL243:
 1505              	.L76:
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   {
 1506              		.loc 18 61 0
 1507 0090 BBF1000F 		cmp	fp, #0
 1508 0094 BAD1     		bne	.L77
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c ****   }
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_f64.c **** }
 1509              		.loc 18 79 0
 1510 0096 08B0     		add	sp, sp, #32
 1511              		.cfi_def_cfa_offset 32
 1512              		@ sp needed
 1513 0098 BDE8F08B 		pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 1514              		.cfi_endproc
 1515              	.LFE100:
 1516              		.size	arm_cmplx_mult_cmplx_f64, .-arm_cmplx_mult_cmplx_f64
 1517              		.section	.text.arm_cmplx_mult_cmplx_q15,"ax",%progbits
 1518              		.align	2
 1519              		.global	arm_cmplx_mult_cmplx_q15
 1520              		.thumb
 1521              		.thumb_func
 1522              		.type	arm_cmplx_mult_cmplx_q15, %function
 1523              	arm_cmplx_mult_cmplx_q15:
 1524              	.LFB101:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 96


 1525              		.file 19 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Title:        arm_cmplx_mult_cmplx_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Description:  Q15 complex-by-complex multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @addtogroup CmplxByCmplxMult
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @brief         Q15 complex-by-complex multiplication.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @param[in]     pSrcA       points to first input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @param[in]     pSrcB       points to second input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @param[out]    pDst        points to output vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @param[in]     numSamples  number of samples in each vector
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @return        none
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****                    The function implements 1.15 by 1.15 multiplications and finally output is conve
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****  */
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** void arm_cmplx_mult_cmplx_q15(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   const q15_t * pSrcA,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   const q15_t * pSrcB,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 97


  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         q15_t * pDst,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         uint32_t numSamples)
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** {
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****    int32_t         blkCnt;
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     q15x8_t         vecSrcA, vecSrcB;
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     q15x8_t         vecSrcC, vecSrcD;
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     q15x8_t         vecDst;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     blkCnt = (numSamples >> 3);
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     blkCnt -= 1;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     if (blkCnt > 0) 
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     {
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         /* should give more freedom to generate stall free code */
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecSrcA = vld1q(pSrcA);
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecSrcB = vld1q(pSrcB);
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         pSrcA += 8;
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         pSrcB += 8;
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         while (blkCnt > 0) 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         {
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmlsdhq(vuninitializedq_s16(), vecSrcA, vecSrcB);
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcC = vld1q(pSrcA);
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcA += 8;
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmladhxq(vecDst, vecSrcA, vecSrcB);
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcD = vld1q(pSrcB);
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcB += 8;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vstrhq_s16(pDst, vshrq(vecDst, 2));
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pDst += 8;
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmlsdhq(vuninitializedq_s16(), vecSrcC, vecSrcD);
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcA = vld1q(pSrcA);
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcA += 8;
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmladhxq(vecDst, vecSrcC, vecSrcD);
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcB = vld1q(pSrcB);
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcB += 8;
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vstrhq_s16(pDst, vshrq(vecDst, 2));
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pDst += 8;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             /*
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****              * Decrement the blockSize loop counter
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****              */
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             blkCnt--;
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         }
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecDst = vqdmlsdhq(vuninitializedq_s16(), vecSrcA, vecSrcB);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecSrcC = vld1q(pSrcA);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecDst = vqdmladhxq(vecDst, vecSrcA, vecSrcB);
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecSrcD = vld1q(pSrcB);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 98


 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vstrhq_s16(pDst, vshrq(vecDst, 2));
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         pDst += 8;
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecDst = vqdmlsdhq(vuninitializedq_s16(), vecSrcC, vecSrcD);
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vecDst = vqdmladhxq(vecDst, vecSrcC, vecSrcD);
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         vstrhq_s16(pDst, vshrq(vecDst, 2));
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         pDst += 8;
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         /*
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****          * tail
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****          */
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         blkCnt = CMPLX_DIM * (numSamples & 7);
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         do 
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         {
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             mve_pred16_t    p = vctp16q(blkCnt);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcA += 8;
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcB += 8;
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcA = vldrhq_z_s16(pSrcA, p);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcB = vldrhq_z_s16(pSrcB, p);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmlsdhq_m(vuninitializedq_s16(), vecSrcA, vecSrcB, p);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmladhxq_m(vecDst, vecSrcA, vecSrcB, p);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vshrq_m(vuninitializedq_s16(), vecDst, 2, p);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vstrhq_p_s16(pDst, vecDst, p);
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pDst += 8;
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             blkCnt -= 8;
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         }
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         while ((int32_t) blkCnt > 0);
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     } 
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     else 
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     {
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         blkCnt = numSamples * CMPLX_DIM;
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         while (blkCnt > 0) {
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             mve_pred16_t    p = vctp16q(blkCnt);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcA = vldrhq_z_s16(pSrcA, p);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecSrcB = vldrhq_z_s16(pSrcB, p);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmlsdhq_m(vuninitializedq_s16(), vecSrcA, vecSrcB, p);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vqdmladhxq_m(vecDst, vecSrcA, vecSrcB, p);
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vecDst = vshrq_m(vuninitializedq_s16(), vecDst, 2, p);
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             vstrhq_p_s16(pDst, vecDst, p);
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pDst += 8;
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcA += 8;
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             pSrcB += 8;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****             blkCnt -= 8;
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     }
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 99


 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** }
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #else
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** void arm_cmplx_mult_cmplx_q15(
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   const q15_t * pSrcA,
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   const q15_t * pSrcB,
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         q15_t * pDst,
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         uint32_t numSamples)
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** {
 1526              		.loc 19 178 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530              	.LVL244:
 1531 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1532              		.cfi_def_cfa_offset 24
 1533              		.cfi_offset 4, -24
 1534              		.cfi_offset 5, -20
 1535              		.cfi_offset 6, -16
 1536              		.cfi_offset 7, -12
 1537              		.cfi_offset 8, -8
 1538              		.cfi_offset 14, -4
 1539              	.LVL245:
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****         q15_t a, b, c, d;                              /* Temporary variables */
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   blkCnt = numSamples >> 2U;
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   while (blkCnt > 0U)
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   {
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     a = *pSrcA++;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     b = *pSrcA++;
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     d = *pSrcB++;
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* store result in 3.13 format in destination buffer. */
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17) );
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     a = *pSrcA++;
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     b = *pSrcA++;
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     d = *pSrcB++;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17) );
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     a = *pSrcA++;
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     b = *pSrcA++;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     d = *pSrcB++;
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17) );
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 100


 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     a = *pSrcA++;
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     b = *pSrcA++;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     d = *pSrcB++;
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17) );
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* Decrement loop counter */
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     blkCnt--;
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   }
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   blkCnt = numSamples % 0x4U;
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #else
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   /* Initialize blkCnt with number of samples */
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   blkCnt = numSamples;
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   while (blkCnt > 0U)
 1540              		.loc 19 235 0
 1541 0004 1FE0     		b	.L80
 1542              	.LVL246:
 1543              	.L81:
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   {
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     a = *pSrcA++;
 1544              		.loc 19 240 0
 1545 0006 0546     		mov	r5, r0
 1546              	.LVL247:
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     b = *pSrcA++;
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 1547              		.loc 19 242 0
 1548 0008 0E46     		mov	r6, r1
 1549              	.LVL248:
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     d = *pSrcB++;
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* store result in 3.13 format in destination buffer. */
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * c) >> 17) - (((q31_t) b * d) >> 17) );
 1550              		.loc 19 246 0
 1551 000a 35F904CB 		ldrsh	ip, [r5], #4
 1552 000e 36F904EB 		ldrsh	lr, [r6], #4
 1553 0012 0EFB0CF8 		mul	r8, lr, ip
 1554 0016 B0F90200 		ldrsh	r0, [r0, #2]
 1555              	.LVL249:
 1556 001a B1F90240 		ldrsh	r4, [r1, #2]
 1557 001e 04FB00F1 		mul	r1, r4, r0
 1558              	.LVL250:
 1559 0022 4914     		asrs	r1, r1, #17
 1560 0024 C1EB6841 		rsb	r1, r1, r8, asr #17
 1561 0028 1746     		mov	r7, r2
 1562 002a 27F8041B 		strh	r1, [r7], #4	@ movhi
 1563              	.LVL251:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 101


 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 1564              		.loc 19 247 0
 1565 002e 04FB0CF4 		mul	r4, r4, ip
 1566              	.LVL252:
 1567 0032 00FB0EF0 		mul	r0, r0, lr
 1568              	.LVL253:
 1569 0036 4014     		asrs	r0, r0, #17
 1570 0038 00EB6440 		add	r0, r0, r4, asr #17
 1571 003c 5080     		strh	r0, [r2, #2]	@ movhi
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     /* Decrement loop counter */
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     blkCnt--;
 1572              		.loc 19 250 0
 1573 003e 013B     		subs	r3, r3, #1
 1574              	.LVL254:
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     *pDst++ = (q15_t) ( (((q31_t) a * d) >> 17) + (((q31_t) b * c) >> 17) );
 1575              		.loc 19 247 0
 1576 0040 3A46     		mov	r2, r7
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 1577              		.loc 19 243 0
 1578 0042 3146     		mov	r1, r6
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****     c = *pSrcB++;
 1579              		.loc 19 241 0
 1580 0044 2846     		mov	r0, r5
 1581              	.LVL255:
 1582              	.L80:
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   {
 1583              		.loc 19 235 0
 1584 0046 002B     		cmp	r3, #0
 1585 0048 DDD1     		bne	.L81
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c ****   }
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** 
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c **** }
 1586              		.loc 19 253 0
 1587 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1588              		.cfi_endproc
 1589              	.LFE101:
 1590              		.size	arm_cmplx_mult_cmplx_q15, .-arm_cmplx_mult_cmplx_q15
 1591 004e 00BF     		.section	.text.arm_cmplx_mult_cmplx_q31,"ax",%progbits
 1592              		.align	2
 1593              		.global	arm_cmplx_mult_cmplx_q31
 1594              		.thumb
 1595              		.thumb_func
 1596              		.type	arm_cmplx_mult_cmplx_q31, %function
 1597              	arm_cmplx_mult_cmplx_q31:
 1598              	.LFB102:
 1599              		.file 20 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_cmplx_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Title:        arm_cmplx_mult_cmplx_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Description:  Q31 complex-by-complex multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * -------------------------------------------------------------------- */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 102


  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @addtogroup CmplxByCmplxMult
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @brief         Q31 complex-by-complex multiplication.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @param[in]     pSrcA       points to first input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @param[in]     pSrcB       points to second input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @param[out]    pDst        points to output vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @param[in]     numSamples  number of samples in each vector
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @return        none
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****                    The function implements 1.31 by 1.31 multiplications and finally output is conve
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****                    Input down scaling is not required.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****  */
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** void arm_cmplx_mult_cmplx_q31(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   const q31_t * pSrcA,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   const q31_t * pSrcB,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         q31_t * pDst,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         uint32_t numSamples)
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** {
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     int32_t         blkCnt;
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     q31x4_t         vecSrcA, vecSrcB;
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     q31x4_t         vecSrcC, vecSrcD;
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     q31x4_t         vecDst;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     blkCnt = numSamples >> 2;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     blkCnt -= 1;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     if (blkCnt > 0) {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 103


  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         /* should give more freedom to generate stall free code */
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecSrcA = vld1q(pSrcA);
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecSrcB = vld1q(pSrcB);
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         pSrcA += 4;
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         pSrcB += 4;
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         while (blkCnt > 0) {
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmlsdhq(vuninitializedq_s32(), vecSrcA, vecSrcB);
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcC = vld1q(pSrcA);
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcA += 4;
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmladhxq(vecDst, vecSrcA, vecSrcB);
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcD = vld1q(pSrcB);
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcB += 4;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vst1q(pDst, vshrq(vecDst, 2));
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pDst += 4;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmlsdhq(vuninitializedq_s32(), vecSrcC, vecSrcD);
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcA = vld1q(pSrcA);
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcA += 4;
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmladhxq(vecDst, vecSrcC, vecSrcD);
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcB = vld1q(pSrcB);
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcB += 4;
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vst1q(pDst, vshrq(vecDst, 2));
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pDst += 4;
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             /*
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****              * Decrement the blockSize loop counter
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****              */
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             blkCnt--;
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         }
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         /* process last elements out of the loop avoid the armclang breaking the SW pipeline */
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecDst = vqdmlsdhq(vuninitializedq_s32(), vecSrcA, vecSrcB);
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecSrcC = vld1q(pSrcA);
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecDst = vqdmladhxq(vecDst, vecSrcA, vecSrcB);
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecSrcD = vld1q(pSrcB);
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vst1q(pDst, vshrq(vecDst, 2));
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         pDst += 4;
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecDst = vqdmlsdhq(vuninitializedq_s32(), vecSrcC, vecSrcD);
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vecDst = vqdmladhxq(vecDst, vecSrcC, vecSrcD);
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         vst1q(pDst, vshrq(vecDst, 2));
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         pDst += 4;
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         /*
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****          * tail
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****          */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 104


 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         blkCnt = CMPLX_DIM * (numSamples & 3);
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         do {
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcA += 4;
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcB += 4;
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcA = vldrwq_z_s32(pSrcA, p);
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcB = vldrwq_z_s32(pSrcB, p);
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmlsdhq_m(vuninitializedq_s32(), vecSrcA, vecSrcB, p);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmladhxq_m(vecDst, vecSrcA, vecSrcB, p);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vshrq_m(vuninitializedq_s32(), vecDst, 2, p);
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vstrwq_p_s32(pDst, vecDst, p);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pDst += 4;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             blkCnt -= 4;
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         }
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         while ((int32_t) blkCnt > 0);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     } else {
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         blkCnt = numSamples * CMPLX_DIM;
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         while (blkCnt > 0) {
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             mve_pred16_t    p = vctp32q(blkCnt);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcA = vldrwq_z_s32(pSrcA, p);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecSrcB = vldrwq_z_s32(pSrcB, p);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmlsdhq_m(vuninitializedq_s32(), vecSrcA, vecSrcB, p);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vqdmladhxq_m(vecDst, vecSrcA, vecSrcB, p);
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vecDst = vshrq_m(vuninitializedq_s32(), vecDst, 2, p);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             vstrwq_p_s32(pDst, vecDst, p);
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pDst += 4;
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcA += 4;
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             pSrcB += 4;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****             blkCnt -= 4;
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         }
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     }
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** }
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #else
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** void arm_cmplx_mult_cmplx_q31(
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   const q31_t * pSrcA,
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   const q31_t * pSrcB,
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         q31_t * pDst,
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         uint32_t numSamples)
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** {
 1600              		.loc 20 173 0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 32
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              	.LVL256:
 1605 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1606              		.cfi_def_cfa_offset 36
 1607              		.cfi_offset 4, -36
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 105


 1608              		.cfi_offset 5, -32
 1609              		.cfi_offset 6, -28
 1610              		.cfi_offset 7, -24
 1611              		.cfi_offset 8, -20
 1612              		.cfi_offset 9, -16
 1613              		.cfi_offset 10, -12
 1614              		.cfi_offset 11, -8
 1615              		.cfi_offset 14, -4
 1616 0004 89B0     		sub	sp, sp, #36
 1617              		.cfi_def_cfa_offset 72
 1618 0006 0192     		str	r2, [sp, #4]
 1619              	.LVL257:
 1620 0008 0093     		str	r3, [sp]
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****         q31_t a, b, c, d;                              /* Temporary variables */
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   blkCnt = numSamples >> 2U;
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   while (blkCnt > 0U)
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   {
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     a = *pSrcA++;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     b = *pSrcA++;
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     d = *pSrcB++;
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* store result in 3.29 format in destination buffer. */
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * c) >> 33) - (((q63_t) b * d) >> 33) );
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     a = *pSrcA++;
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     b = *pSrcA++;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     d = *pSrcB++;
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * c) >> 33) - (((q63_t) b * d) >> 33) );
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     a = *pSrcA++;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     b = *pSrcA++;
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     d = *pSrcB++;
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * c) >> 33) - (((q63_t) b * d) >> 33) );
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     a = *pSrcA++;
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     b = *pSrcA++;
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     d = *pSrcB++;
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * c) >> 33) - (((q63_t) b * d) >> 33) );
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* Decrement loop counter */
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     blkCnt--;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 106


 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   }
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   blkCnt = numSamples % 0x4U;
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #else
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   /* Initialize blkCnt with number of samples */
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   blkCnt = numSamples;
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   while (blkCnt > 0U)
 1621              		.loc 20 230 0
 1622 000a 4AE0     		b	.L84
 1623              	.LVL258:
 1624              	.L85:
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   {
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     a = *pSrcA++;
 1625              		.loc 20 235 0
 1626 000c 0746     		mov	r7, r0
 1627 000e 57F8083B 		ldr	r3, [r7], #8
 1628              	.LVL259:
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     b = *pSrcA++;
 1629              		.loc 20 236 0
 1630 0012 4268     		ldr	r2, [r0, #4]
 1631              	.LVL260:
 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 1632              		.loc 20 237 0
 1633 0014 8E46     		mov	lr, r1
 1634 0016 5EF8080B 		ldr	r0, [lr], #8
 1635              	.LVL261:
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     d = *pSrcB++;
 1636              		.loc 20 238 0
 1637 001a 4968     		ldr	r1, [r1, #4]
 1638              	.LVL262:
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* store result in 3.29 format in destination buffer. */
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * c) >> 33) - (((q63_t) b * d) >> 33) );
 1639              		.loc 20 241 0
 1640 001c DD17     		asrs	r5, r3, #31
 1641 001e 9846     		mov	r8, r3
 1642 0020 A946     		mov	r9, r5
 1643 0022 0446     		mov	r4, r0
 1644 0024 C517     		asrs	r5, r0, #31
 1645 0026 CDE90445 		strd	r4, [sp, #16]
 1646 002a 03FB05FC 		mul	ip, r3, r5
 1647 002e CDE90289 		strd	r8, [sp, #8]
 1648 0032 00FB09CC 		mla	ip, r0, r9, ip
 1649 0036 A3FB0045 		umull	r4, r5, r3, r0
 1650 003a 6544     		add	r5, r5, ip
 1651 003c 4FEAE27B 		asr	fp, r2, #31
 1652 0040 9046     		mov	r8, r2
 1653 0042 D946     		mov	r9, fp
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 107


 1654 0044 4FEAE17B 		asr	fp, r1, #31
 1655 0048 02FB0BF4 		mul	r4, r2, fp
 1656 004c CDE90689 		strd	r8, [sp, #24]
 1657 0050 01FB0944 		mla	r4, r1, r9, r4
 1658 0054 A2FB0189 		umull	r8, r9, r2, r1
 1659 0058 A144     		add	r9, r9, r4
 1660 005a 4FEA6904 		asr	r4, r9, #1
 1661 005e C4EB6504 		rsb	r4, r4, r5, asr #1
 1662 0062 019E     		ldr	r6, [sp, #4]
 1663 0064 B446     		mov	ip, r6
 1664 0066 4CF8084B 		str	r4, [ip], #8
 1665              	.LVL263:
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 1666              		.loc 20 242 0
 1667 006a 03FB0BF8 		mul	r8, r3, fp
 1668 006e 039C     		ldr	r4, [sp, #12]
 1669 0070 01FB0488 		mla	r8, r1, r4, r8
 1670 0074 A3FB0145 		umull	r4, r5, r3, r1
 1671 0078 4544     		add	r5, r5, r8
 1672 007a 079B     		ldr	r3, [sp, #28]
 1673              	.LVL264:
 1674 007c 00FB03F1 		mul	r1, r0, r3
 1675              	.LVL265:
 1676 0080 059B     		ldr	r3, [sp, #20]
 1677 0082 02FB0311 		mla	r1, r2, r3, r1
 1678 0086 A0FB0223 		umull	r2, r3, r0, r2
 1679              	.LVL266:
 1680 008a 0B44     		add	r3, r3, r1
 1681 008c 5B10     		asrs	r3, r3, #1
 1682 008e 03EB6503 		add	r3, r3, r5, asr #1
 1683 0092 7360     		str	r3, [r6, #4]
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     /* Decrement loop counter */
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     blkCnt--;
 1684              		.loc 20 245 0
 1685 0094 009B     		ldr	r3, [sp]
 1686 0096 013B     		subs	r3, r3, #1
 1687 0098 0093     		str	r3, [sp]
 1688              	.LVL267:
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     *pDst++ = (q31_t) ( (((q63_t) a * d) >> 33) + (((q63_t) b * c) >> 33) );
 1689              		.loc 20 242 0
 1690 009a CDF804C0 		str	ip, [sp, #4]
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
 1691              		.loc 20 238 0
 1692 009e 7146     		mov	r1, lr
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****     c = *pSrcB++;
 1693              		.loc 20 236 0
 1694 00a0 3846     		mov	r0, r7
 1695              	.LVL268:
 1696              	.L84:
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   {
 1697              		.loc 20 230 0
 1698 00a2 009B     		ldr	r3, [sp]
 1699 00a4 002B     		cmp	r3, #0
 1700 00a6 B1D1     		bne	.L85
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c ****   }
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 108


 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c **** }
 1701              		.loc 20 248 0
 1702 00a8 09B0     		add	sp, sp, #36
 1703              		.cfi_def_cfa_offset 36
 1704              	.LVL269:
 1705              		@ sp needed
 1706 00aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1707              		.cfi_endproc
 1708              	.LFE102:
 1709              		.size	arm_cmplx_mult_cmplx_q31, .-arm_cmplx_mult_cmplx_q31
 1710 00ae 00BF     		.section	.text.arm_cmplx_mult_real_f32,"ax",%progbits
 1711              		.align	2
 1712              		.global	arm_cmplx_mult_real_f32
 1713              		.thumb
 1714              		.thumb_func
 1715              		.type	arm_cmplx_mult_real_f32, %function
 1716              	arm_cmplx_mult_real_f32:
 1717              	.LFB103:
 1718              		.file 21 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_real_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Title:        arm_cmplx_mult_real_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Description:  Floating-point complex by real multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @defgroup CmplxByRealMult Complex-by-Real Multiplication
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   Multiplies a complex vector by a real vector and generates a complex result.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 109


  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The data in the complex arrays is stored in an interleaved fashion
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   (real, imag, real, imag, ...).
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The parameter <code>numSamples</code> represents the number of complex
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   samples processed.  The complex arrays have a total of <code>2*numSamples</code>
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   real values while the real array has a total of <code>numSamples</code>
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   real values.
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The underlying algorithm is used:
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   <pre>
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   for (n = 0; n < numSamples; n++) {
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       pCmplxDst[(2*n)+0] = pSrcCmplx[(2*n)+0] * pSrcReal[n];
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       pCmplxDst[(2*n)+1] = pSrcCmplx[(2*n)+1] * pSrcReal[n];
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   </pre>
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @addtogroup CmplxByRealMult
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @{
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @brief         Floating-point complex-by-real multiplication.
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     pSrcCmplx   points to complex input vector
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     pSrcReal    points to real input vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[out]    pCmplxDst   points to complex output vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @return        none
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** void arm_cmplx_mult_real_f32(
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcCmplx,
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcReal,
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t * pCmplxDst,
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t numSamples)
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** {
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     static const uint32_t stride_cmplx_x_real_32[4] = { 0, 0, 1, 1 };
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32_t blockSizeC = numSamples * CMPLX_DIM;   /* loop counters */
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32_t blkCnt;
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t rVec;
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t cmplxVec;
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t dstVec;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32x4_t strideVec;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32_t in;  
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* stride vector for pairs of real generation */
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     strideVec = vld1q(stride_cmplx_x_real_32);
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Compute 4 complex outputs at a time */
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = blockSizeC >> 2;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 110


  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U) 
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         cmplxVec = vld1q(pSrcCmplx);
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         rVec = vldrwq_gather_shifted_offset_f32(pSrcReal, strideVec);
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         dstVec = vmulq(cmplxVec, rVec);
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         vst1q(pCmplxDst, dstVec);
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcReal += 2;
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcCmplx += 4;
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pCmplxDst += 4;
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         blkCnt--;
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = (blockSizeC & 3) >> 1; 
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U)
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       in = *pSrcReal++;
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* store result in destination buffer. */
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       *pCmplxDst++ = *pSrcCmplx++ * in;
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       *pCmplxDst++ = *pSrcCmplx++ * in;
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* Decrement loop counter */
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       blkCnt--;
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** }
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** void arm_cmplx_mult_real_f32(
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcCmplx,
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcReal,
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t * pCmplxDst,
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t numSamples)
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** {
 1719              		.loc 21 131 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723              	.LVL270:
 1724 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1725              		.cfi_def_cfa_offset 32
 1726              		.cfi_offset 4, -32
 1727              		.cfi_offset 5, -28
 1728              		.cfi_offset 6, -24
 1729              		.cfi_offset 7, -20
 1730              		.cfi_offset 8, -16
 1731              		.cfi_offset 9, -12
 1732              		.cfi_offset 10, -8
 1733              		.cfi_offset 14, -4
 1734 0004 8046     		mov	r8, r0
 1735 0006 1746     		mov	r7, r2
 1736 0008 1E46     		mov	r6, r3
 1737              	.LVL271:
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t in;                                  /* Temporary variable */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 111


 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32x4_t r;
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32x4x2_t ab,outCplx;
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Compute 4 outputs at a time */
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = numSamples >> 2U;
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U)
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         ab = vld2q_f32(pSrcCmplx);  // load & separate real/imag pSrcA (de-interleave 2)
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         r = vld1q_f32(pSrcReal);  // load & separate real/imag pSrcB
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 	/* Increment pointers */
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcCmplx += 8;
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcReal += 4;
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         outCplx.val[0] = vmulq_f32(ab.val[0], r);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         outCplx.val[1] = vmulq_f32(ab.val[1], r);
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         vst2q_f32(pCmplxDst, outCplx);
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pCmplxDst += 8;
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         blkCnt--;
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Tail */
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = numSamples & 3;
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples >> 2U;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   while (blkCnt > 0U)
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* store result in destination buffer. */
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++* in;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Decrement loop counter */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 112


 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt--;
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples % 0x4U;
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Initialize blkCnt with number of samples */
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples;
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   while (blkCnt > 0U)
 1738              		.loc 21 205 0
 1739 000a 16E0     		b	.L88
 1740              	.LVL272:
 1741              	.L89:
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 1742              		.loc 21 210 0
 1743 000c 01F1040A 		add	r10, r1, #4
 1744              	.LVL273:
 1745 0010 D1F80090 		ldr	r9, [r1]	@ float
 1746              	.LVL274:
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* store result in destination buffer. */
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 1747              		.loc 21 212 0
 1748 0014 4446     		mov	r4, r8
 1749 0016 54F8080B 		ldr	r0, [r4], #8	@ float
 1750 001a 4946     		mov	r1, r9
 1751 001c FFF7FEFF 		bl	__aeabi_fmul
 1752              	.LVL275:
 1753 0020 3D46     		mov	r5, r7
 1754 0022 45F8080B 		str	r0, [r5], #8	@ float
 1755              	.LVL276:
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 1756              		.loc 21 213 0
 1757 0026 D8F80400 		ldr	r0, [r8, #4]	@ float
 1758 002a 4946     		mov	r1, r9
 1759 002c FFF7FEFF 		bl	__aeabi_fmul
 1760              	.LVL277:
 1761 0030 7860     		str	r0, [r7, #4]	@ float
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Decrement loop counter */
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt--;
 1762              		.loc 21 216 0
 1763 0032 013E     		subs	r6, r6, #1
 1764              	.LVL278:
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 1765              		.loc 21 213 0
 1766 0034 2F46     		mov	r7, r5
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* store result in destination buffer. */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 113


 1767              		.loc 21 210 0
 1768 0036 5146     		mov	r1, r10
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 1769              		.loc 21 213 0
 1770 0038 A046     		mov	r8, r4
 1771              	.LVL279:
 1772              	.L88:
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
 1773              		.loc 21 205 0
 1774 003a 002E     		cmp	r6, #0
 1775 003c E6D1     		bne	.L89
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** }
 1776              		.loc 21 219 0
 1777 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1778              		.cfi_endproc
 1779              	.LFE103:
 1780              		.size	arm_cmplx_mult_real_f32, .-arm_cmplx_mult_real_f32
 1781 0042 00BF     		.section	.text.arm_cmplx_mult_real_q15,"ax",%progbits
 1782              		.align	2
 1783              		.global	arm_cmplx_mult_real_q15
 1784              		.thumb
 1785              		.thumb_func
 1786              		.type	arm_cmplx_mult_real_q15, %function
 1787              	arm_cmplx_mult_real_q15:
 1788              	.LFB104:
 1789              		.file 22 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q15.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Title:        arm_cmplx_mult_real_q15.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Description:  Q15 complex by real multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #include "dsp/complex_math_functions.h"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 114


  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @addtogroup CmplxByRealMult
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @brief         Q15 complex-by-real multiplication.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @param[in]     pSrcCmplx   points to complex input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @param[in]     pSrcReal    points to real input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @param[out]    pCmplxDst   points to complex output vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @param[in]     numSamples  number of samples in each vector
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @return        none
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** void arm_cmplx_mult_real_q15(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   const q15_t * pSrcCmplx,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   const q15_t * pSrcReal,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q15_t * pCmplxDst,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         uint32_t numSamples)
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** {
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   static const uint16_t stride_cmplx_x_real_16[8] = {
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       0, 0, 1, 1, 2, 2, 3, 3
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       };
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15x8_t rVec;
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15x8_t cmplxVec;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15x8_t dstVec;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   uint16x8_t strideVec;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   uint32_t blockSizeC = numSamples * CMPLX_DIM;   /* loop counters */
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   uint32_t blkCnt;
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t in;  
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /*
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   * stride vector for pairs of real generation
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   */
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   strideVec = vld1q(stride_cmplx_x_real_16);
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = blockSizeC >> 3;
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0U) 
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     cmplxVec = vld1q(pSrcCmplx);
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     rVec = vldrhq_gather_shifted_offset_s16(pSrcReal, strideVec);
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     dstVec = vqdmulhq(cmplxVec, rVec);
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     vst1q(pCmplxDst, dstVec);
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     pSrcReal += 4;
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     pSrcCmplx += 8;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 115


  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     pCmplxDst += 8;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt --;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Tail */
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = (blockSizeC & 7) >> 1;
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0U)
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* store the result in the destination buffer. */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement loop counter */
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt--;
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** }
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** void arm_cmplx_mult_real_q15(
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   const q15_t * pSrcCmplx,
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   const q15_t * pSrcReal,
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q15_t * pCmplxDst,
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         uint32_t numSamples)
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** {
 1790              		.loc 22 113 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              	.LVL280:
 1795 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1796              		.cfi_def_cfa_offset 20
 1797              		.cfi_offset 4, -20
 1798              		.cfi_offset 5, -16
 1799              		.cfi_offset 6, -12
 1800              		.cfi_offset 7, -8
 1801              		.cfi_offset 14, -4
 1802              	.LVL281:
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q15_t in;                                      /* Temporary variable */
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #if defined (ARM_MATH_DSP)
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q31_t inA1, inA2;                              /* Temporary variables to hold input data */
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q31_t inB1;                                    /* Temporary variables to hold input data */
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q15_t out1, out2, out3, out4;                  /* Temporary variables to hold output data *
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****         q31_t mul1, mul2, mul3, mul4;                  /* Temporary variables to hold intermediate 
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = numSamples >> 2U;
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0U)
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 116


 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #if defined (ARM_MATH_DSP)
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* read 2 complex numbers both real and imaginary from complex input buffer */
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA1 = read_q15x2_ia (&pSrcCmplx);
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA2 = read_q15x2_ia (&pSrcCmplx);
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* read 2 real values at a time from real input buffer */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inB1 = read_q15x2_ia (&pSrcReal);
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* multiply complex number with real numbers */
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1)       * (q15_t) (inB1));
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2)       * (q15_t) (inB1 >> 16));
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) inA1         * (q15_t) (inB1 >> 16));
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) inA2         * (q15_t) inB1);
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* saturate the result */
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15U, 16);
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15U, 16);
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15U, 16);
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15U, 16);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* pack real and imaginary outputs and store them to destination */
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     write_q15x2_ia (&pCmplxDst, __PKHBT(out1, out2, 16));
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     write_q15x2_ia (&pCmplxDst, __PKHBT(out3, out4, 16));
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA1 = read_q15x2_ia (&pSrcCmplx);
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA2 = read_q15x2_ia (&pSrcCmplx);
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inB1 = read_q15x2_ia (&pSrcReal);
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1)       * (q15_t) (inB1));
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2)       * (q15_t) (inB1 >> 16));
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) inA1         * (q15_t) (inB1 >> 16));
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) inA2 * (q15_t) inB1);
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15U, 16);
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15U, 16);
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15U, 16);
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15U, 16);
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     write_q15x2_ia (&pCmplxDst, __PKHBT(out1, out2, 16));
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     write_q15x2_ia (&pCmplxDst, __PKHBT(out3, out4, 16));
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 117


 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement loop counter */
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt--;
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = numSamples % 0x4U;
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Initialize blkCnt with number of samples */
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = numSamples;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0U)
 1803              		.loc 22 219 0
 1804 0002 19E0     		b	.L92
 1805              	.LVL282:
 1806              	.L93:
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 1807              		.loc 22 224 0
 1808 0004 8F1C     		adds	r7, r1, #2
 1809              	.LVL283:
 1810              	.LBB10:
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* store the result in the destination buffer. */
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 1811              		.loc 22 226 0
 1812 0006 0546     		mov	r5, r0
 1813 0008 35F9044B 		ldrsh	r4, [r5], #4
 1814 000c B1F900E0 		ldrsh	lr, [r1]
 1815 0010 0EFB04F4 		mul	r4, lr, r4
 1816 0014 E413     		asrs	r4, r4, #15
 1817              	.LVL284:
 1818              	@ 226 ".\DSP\Source\ComplexMathFunctions\arm_cmplx_mult_real_q15.c" 1
 1819 0016 04F30F04 		ssat r4, #16, r4
 1820              	@ 0 "" 2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 118


 1821              	.LVL285:
 1822              		.thumb
 1823              	.LBE10:
 1824 001a 1646     		mov	r6, r2
 1825 001c 26F8044B 		strh	r4, [r6], #4	@ movhi
 1826              	.LVL286:
 1827              	.LBB11:
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 1828              		.loc 22 227 0
 1829 0020 B0F90210 		ldrsh	r1, [r0, #2]
 1830 0024 01FB0EF1 		mul	r1, r1, lr
 1831 0028 C913     		asrs	r1, r1, #15
 1832              	.LVL287:
 1833              	@ 227 ".\DSP\Source\ComplexMathFunctions\arm_cmplx_mult_real_q15.c" 1
 1834 002a 01F30F01 		ssat r1, #16, r1
 1835              	@ 0 "" 2
 1836              	.LVL288:
 1837              		.thumb
 1838              	.LBE11:
 1839 002e 5180     		strh	r1, [r2, #2]	@ movhi
 1840              	.LVL289:
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement loop counter */
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt--;
 1841              		.loc 22 230 0
 1842 0030 013B     		subs	r3, r3, #1
 1843              	.LVL290:
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 1844              		.loc 22 227 0
 1845 0032 3246     		mov	r2, r6
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* store the result in the destination buffer. */
 1846              		.loc 22 224 0
 1847 0034 3946     		mov	r1, r7
 1848              	.LVL291:
 1849              	.LBB12:
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ = (q15_t) __SSAT((((q31_t) *pSrcCmplx++ * in) >> 15), 16);
 1850              		.loc 22 227 0
 1851 0036 2846     		mov	r0, r5
 1852              	.LVL292:
 1853              	.L92:
 1854              	.LBE12:
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
 1855              		.loc 22 219 0
 1856 0038 002B     		cmp	r3, #0
 1857 003a E3D1     		bne	.L93
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** }
 1858              		.loc 22 233 0
 1859 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1860              		.cfi_endproc
 1861              	.LFE104:
 1862              		.size	arm_cmplx_mult_real_q15, .-arm_cmplx_mult_real_q15
 1863 003e 00BF     		.section	.text.arm_cmplx_mult_real_q31,"ax",%progbits
 1864              		.align	2
 1865              		.global	arm_cmplx_mult_real_q31
 1866              		.thumb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 119


 1867              		.thumb_func
 1868              		.type	arm_cmplx_mult_real_q31, %function
 1869              	arm_cmplx_mult_real_q31:
 1870              	.LFB105:
 1871              		.file 23 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q31.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Title:        arm_cmplx_mult_real_q31.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Description:  Q31 complex by real multiplication
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @addtogroup CmplxByRealMult
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @{
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @brief         Q31 complex-by-real multiplication.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @param[in]     pSrcCmplx   points to complex input vector
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @param[in]     pSrcReal    points to real input vector
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @param[out]    pCmplxDst   points to complex output vector
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @param[in]     numSamples  number of samples in each vector
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @return        none
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****                    Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] are saturated.
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 120


  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** void arm_cmplx_mult_real_q31(
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   const q31_t * pSrcCmplx,
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   const q31_t * pSrcReal,
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         q31_t * pCmplxDst,
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         uint32_t numSamples)
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** {
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     static const uint32_t stride_cmplx_x_real_32[4] = {
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         0, 0, 1, 1
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     };
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     q31x4_t rVec;
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     q31x4_t cmplxVec;
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     q31x4_t dstVec;
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     uint32x4_t strideVec;
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     uint32_t blockSizeC = numSamples * CMPLX_DIM;   /* loop counters */
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     uint32_t blkCnt;
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     q31_t in;
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /*
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****      * stride vector for pairs of real generation
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****      */
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     strideVec = vld1q(stride_cmplx_x_real_32);
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Compute 4 complex outputs at a time */
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt = blockSizeC >> 2;
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     while (blkCnt > 0U) 
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     {
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         cmplxVec = vld1q(pSrcCmplx);
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         rVec = vldrwq_gather_shifted_offset_s32(pSrcReal, strideVec);
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         dstVec = vqdmulhq(cmplxVec, rVec);
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         vst1q(pCmplxDst, dstVec);
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         pSrcReal += 2;
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         pSrcCmplx += 4;
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         pCmplxDst += 4;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         blkCnt --;
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     }
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt = (blockSizeC & 3) >> 1; 
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     while (blkCnt > 0U)
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     {
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       /* C[2 * i    ] = A[2 * i    ] * B[i]. */
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       in = *pSrcReal++;
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       /* store saturated result in 1.31 format to destination buffer */
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       /* Decrement loop counter */
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       blkCnt--;
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     }
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** }
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** void arm_cmplx_mult_real_q31(
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   const q31_t * pSrcCmplx,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 121


 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   const q31_t * pSrcReal,
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         q31_t * pCmplxDst,
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         uint32_t numSamples)
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** {
 1872              		.loc 23 113 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL293:
 1877 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1878              		.cfi_def_cfa_offset 36
 1879              		.cfi_offset 4, -36
 1880              		.cfi_offset 5, -32
 1881              		.cfi_offset 6, -28
 1882              		.cfi_offset 7, -24
 1883              		.cfi_offset 8, -20
 1884              		.cfi_offset 9, -16
 1885              		.cfi_offset 10, -12
 1886              		.cfi_offset 11, -8
 1887              		.cfi_offset 14, -4
 1888              	.LVL294:
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****         q31_t in;                                      /* Temporary variable */
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   blkCnt = numSamples >> 2U;
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   while (blkCnt > 0U)
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     in = *pSrcReal++;
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store saturated result in 1.31 format to destination buffer */
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store result in destination buffer. */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     in = *pSrcReal++;
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     in = *pSrcReal++;
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 122


 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     in = *pSrcReal++;
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Decrement loop counter */
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt--;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   }
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   blkCnt = numSamples % 0x4U;
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* Initialize blkCnt with number of samples */
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   blkCnt = numSamples;
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   while (blkCnt > 0U)
 1889              		.loc 23 179 0
 1890 0004 35E0     		b	.L96
 1891              	.LVL295:
 1892              	.L101:
 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     in = *pSrcReal++;
 1893              		.loc 23 184 0
 1894 0006 0F1D     		adds	r7, r1, #4
 1895              	.LVL296:
 1896 0008 0E68     		ldr	r6, [r1]
 1897              	.LVL297:
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store saturated result in 1.31 format to destination buffer */
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (__SSAT((q31_t) (((q63_t) *pSrcCmplx++ * in) >> 32), 31) << 1);
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store result in destination buffer. */
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 1898              		.loc 23 191 0
 1899 000a 0468     		ldr	r4, [r0]
 1900 000c 4FEAE47B 		asr	fp, r4, #31
 1901 0010 4FEAE679 		asr	r9, r6, #31
 1902 0014 04FB09F1 		mul	r1, r4, r9
 1903 0018 06FB0B11 		mla	r1, r6, fp, r1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 123


 1904 001c A4FB0645 		umull	r4, r5, r4, r6
 1905 0020 0D44     		add	r5, r5, r1
 1906 0022 E10F     		lsrs	r1, r4, #31
 1907 0024 41EA4501 		orr	r1, r1, r5, lsl #1
 1908 0028 EC17     		asrs	r4, r5, #31
 1909              	.LVL298:
 1910              	.LBB13:
 1911              	.LBB14:
 1912              		.file 24 ".\\DSP\\Include/dsp/none.h"
   1:.\DSP\Include/dsp/none.h **** /******************************************************************************
   2:.\DSP\Include/dsp/none.h ****  * @file     none.h
   3:.\DSP\Include/dsp/none.h ****  * @brief    Intrinsincs when no DSP extension available
   4:.\DSP\Include/dsp/none.h ****  * @version  V1.9.0
   5:.\DSP\Include/dsp/none.h ****  * @date     20. July 2020
   6:.\DSP\Include/dsp/none.h ****  ******************************************************************************/
   7:.\DSP\Include/dsp/none.h **** /*
   8:.\DSP\Include/dsp/none.h ****  * Copyright (c) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   9:.\DSP\Include/dsp/none.h ****  *
  10:.\DSP\Include/dsp/none.h ****  * SPDX-License-Identifier: Apache-2.0
  11:.\DSP\Include/dsp/none.h ****  *
  12:.\DSP\Include/dsp/none.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:.\DSP\Include/dsp/none.h ****  * not use this file except in compliance with the License.
  14:.\DSP\Include/dsp/none.h ****  * You may obtain a copy of the License at
  15:.\DSP\Include/dsp/none.h ****  *
  16:.\DSP\Include/dsp/none.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:.\DSP\Include/dsp/none.h ****  *
  18:.\DSP\Include/dsp/none.h ****  * Unless required by applicable law or agreed to in writing, software
  19:.\DSP\Include/dsp/none.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:.\DSP\Include/dsp/none.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:.\DSP\Include/dsp/none.h ****  * See the License for the specific language governing permissions and
  22:.\DSP\Include/dsp/none.h ****  * limitations under the License.
  23:.\DSP\Include/dsp/none.h ****  */
  24:.\DSP\Include/dsp/none.h **** 
  25:.\DSP\Include/dsp/none.h **** /*
  26:.\DSP\Include/dsp/none.h **** 
  27:.\DSP\Include/dsp/none.h **** Definitions in this file are allowing to reuse some versions of the
  28:.\DSP\Include/dsp/none.h **** CMSIS-DSP to build on a core (M0 for instance) or a host where
  29:.\DSP\Include/dsp/none.h **** DSP extension are not available.
  30:.\DSP\Include/dsp/none.h **** 
  31:.\DSP\Include/dsp/none.h **** Ideally a pure C version should have been used instead.
  32:.\DSP\Include/dsp/none.h **** But those are not always available or use a restricted set
  33:.\DSP\Include/dsp/none.h **** of intrinsics.
  34:.\DSP\Include/dsp/none.h **** 
  35:.\DSP\Include/dsp/none.h **** */
  36:.\DSP\Include/dsp/none.h ****  
  37:.\DSP\Include/dsp/none.h **** #ifndef _NONE_H_
  38:.\DSP\Include/dsp/none.h **** #define _NONE_H_
  39:.\DSP\Include/dsp/none.h **** 
  40:.\DSP\Include/dsp/none.h **** #include "arm_math_types.h"
  41:.\DSP\Include/dsp/none.h **** 
  42:.\DSP\Include/dsp/none.h **** #ifdef   __cplusplus
  43:.\DSP\Include/dsp/none.h **** extern "C"
  44:.\DSP\Include/dsp/none.h **** {
  45:.\DSP\Include/dsp/none.h **** #endif
  46:.\DSP\Include/dsp/none.h **** 
  47:.\DSP\Include/dsp/none.h ****  
  48:.\DSP\Include/dsp/none.h **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 124


  49:.\DSP\Include/dsp/none.h **** /*
  50:.\DSP\Include/dsp/none.h **** 
  51:.\DSP\Include/dsp/none.h **** Normally those kind of definitions are in a compiler file
  52:.\DSP\Include/dsp/none.h **** in Core or Core_A.
  53:.\DSP\Include/dsp/none.h **** 
  54:.\DSP\Include/dsp/none.h **** But for MSVC compiler it is a bit special. The goal is very specific
  55:.\DSP\Include/dsp/none.h **** to CMSIS-DSP and only to allow the use of this library from other
  56:.\DSP\Include/dsp/none.h **** systems like Python or Matlab.
  57:.\DSP\Include/dsp/none.h **** 
  58:.\DSP\Include/dsp/none.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
  59:.\DSP\Include/dsp/none.h **** compiler file in Core or Core_A would not make sense.
  60:.\DSP\Include/dsp/none.h **** 
  61:.\DSP\Include/dsp/none.h **** */
  62:.\DSP\Include/dsp/none.h **** #if defined ( _MSC_VER ) || defined(__GNUC_PYTHON__) || defined(__APPLE_CC__)
  63:.\DSP\Include/dsp/none.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
  64:.\DSP\Include/dsp/none.h ****     {
  65:.\DSP\Include/dsp/none.h ****       if (data == 0U) { return 32U; }
  66:.\DSP\Include/dsp/none.h **** 
  67:.\DSP\Include/dsp/none.h ****       uint32_t count = 0U;
  68:.\DSP\Include/dsp/none.h ****       uint32_t mask = 0x80000000U;
  69:.\DSP\Include/dsp/none.h **** 
  70:.\DSP\Include/dsp/none.h ****       while ((data & mask) == 0U)
  71:.\DSP\Include/dsp/none.h ****       {
  72:.\DSP\Include/dsp/none.h ****         count += 1U;
  73:.\DSP\Include/dsp/none.h ****         mask = mask >> 1U;
  74:.\DSP\Include/dsp/none.h ****       }
  75:.\DSP\Include/dsp/none.h ****       return count;
  76:.\DSP\Include/dsp/none.h ****     }
  77:.\DSP\Include/dsp/none.h **** 
  78:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
  79:.\DSP\Include/dsp/none.h ****   {
  80:.\DSP\Include/dsp/none.h ****     if ((sat >= 1U) && (sat <= 32U))
  81:.\DSP\Include/dsp/none.h ****     {
  82:.\DSP\Include/dsp/none.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
  83:.\DSP\Include/dsp/none.h ****       const int32_t min = -1 - max ;
  84:.\DSP\Include/dsp/none.h ****       if (val > max)
  85:.\DSP\Include/dsp/none.h ****       {
  86:.\DSP\Include/dsp/none.h ****         return max;
  87:.\DSP\Include/dsp/none.h ****       }
  88:.\DSP\Include/dsp/none.h ****       else if (val < min)
  89:.\DSP\Include/dsp/none.h ****       {
  90:.\DSP\Include/dsp/none.h ****         return min;
  91:.\DSP\Include/dsp/none.h ****       }
  92:.\DSP\Include/dsp/none.h ****     }
  93:.\DSP\Include/dsp/none.h ****     return val;
  94:.\DSP\Include/dsp/none.h ****   }
  95:.\DSP\Include/dsp/none.h **** 
  96:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
  97:.\DSP\Include/dsp/none.h ****   {
  98:.\DSP\Include/dsp/none.h ****     if (sat <= 31U)
  99:.\DSP\Include/dsp/none.h ****     {
 100:.\DSP\Include/dsp/none.h ****       const uint32_t max = ((1U << sat) - 1U);
 101:.\DSP\Include/dsp/none.h ****       if (val > (int32_t)max)
 102:.\DSP\Include/dsp/none.h ****       {
 103:.\DSP\Include/dsp/none.h ****         return max;
 104:.\DSP\Include/dsp/none.h ****       }
 105:.\DSP\Include/dsp/none.h ****       else if (val < 0)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 125


 106:.\DSP\Include/dsp/none.h ****       {
 107:.\DSP\Include/dsp/none.h ****         return 0U;
 108:.\DSP\Include/dsp/none.h ****       }
 109:.\DSP\Include/dsp/none.h ****     }
 110:.\DSP\Include/dsp/none.h ****     return (uint32_t)val;
 111:.\DSP\Include/dsp/none.h ****   }
 112:.\DSP\Include/dsp/none.h **** 
 113:.\DSP\Include/dsp/none.h ****  /**
 114:.\DSP\Include/dsp/none.h ****   \brief   Rotate Right in unsigned value (32 bit)
 115:.\DSP\Include/dsp/none.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 116:.\DSP\Include/dsp/none.h ****   \param [in]    op1  Value to rotate
 117:.\DSP\Include/dsp/none.h ****   \param [in]    op2  Number of Bits to rotate
 118:.\DSP\Include/dsp/none.h ****   \return               Rotated value
 119:.\DSP\Include/dsp/none.h ****  */
 120:.\DSP\Include/dsp/none.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 121:.\DSP\Include/dsp/none.h **** {
 122:.\DSP\Include/dsp/none.h ****   op2 %= 32U;
 123:.\DSP\Include/dsp/none.h ****   if (op2 == 0U)
 124:.\DSP\Include/dsp/none.h ****   {
 125:.\DSP\Include/dsp/none.h ****     return op1;
 126:.\DSP\Include/dsp/none.h ****   }
 127:.\DSP\Include/dsp/none.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 128:.\DSP\Include/dsp/none.h **** }
 129:.\DSP\Include/dsp/none.h **** 
 130:.\DSP\Include/dsp/none.h **** 
 131:.\DSP\Include/dsp/none.h **** #endif
 132:.\DSP\Include/dsp/none.h **** 
 133:.\DSP\Include/dsp/none.h **** /**
 134:.\DSP\Include/dsp/none.h ****    * @brief Clips Q63 to Q31 values.
 135:.\DSP\Include/dsp/none.h ****    */
 136:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
 137:.\DSP\Include/dsp/none.h ****   q63_t x)
 138:.\DSP\Include/dsp/none.h ****   {
 139:.\DSP\Include/dsp/none.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 140:.\DSP\Include/dsp/none.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 1913              		.loc 24 140 0
 1914 002a B4EBE17F 		cmp	r4, r1, asr #31
 1915 002e 02D0     		beq	.L98
 1916 0030 84F00041 		eor	r1, r4, #-2147483648
 1917              	.LVL299:
 1918 0034 C943     		mvns	r1, r1
 1919              	.L98:
 1920              	.LBE14:
 1921              	.LBE13:
 1922              		.loc 23 191 0
 1923 0036 1446     		mov	r4, r2
 1924 0038 44F8081B 		str	r1, [r4], #8
 1925              	.LVL300:
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 1926              		.loc 23 192 0
 1927 003c 00F10805 		add	r5, r0, #8
 1928              	.LVL301:
 1929 0040 4068     		ldr	r0, [r0, #4]
 1930 0042 4FEAE07B 		asr	fp, r0, #31
 1931 0046 06FB0BFE 		mul	lr, r6, fp
 1932 004a 00FB09EE 		mla	lr, r0, r9, lr
 1933 004e A6FB0001 		umull	r0, r1, r6, r0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 126


 1934 0052 7144     		add	r1, r1, lr
 1935 0054 C00F     		lsrs	r0, r0, #31
 1936 0056 40EA4100 		orr	r0, r0, r1, lsl #1
 1937 005a C917     		asrs	r1, r1, #31
 1938              	.LVL302:
 1939              	.LBB15:
 1940              	.LBB16:
 1941              		.loc 24 140 0
 1942 005c B1EBE07F 		cmp	r1, r0, asr #31
 1943 0060 02D0     		beq	.L102
 1944 0062 81F00040 		eor	r0, r1, #-2147483648
 1945              	.LVL303:
 1946 0066 C043     		mvns	r0, r0
 1947              	.L102:
 1948              	.LBE16:
 1949              	.LBE15:
 1950              		.loc 23 192 0
 1951 0068 5060     		str	r0, [r2, #4]
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Decrement loop counter */
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt--;
 1952              		.loc 23 196 0
 1953 006a 013B     		subs	r3, r3, #1
 1954              	.LVL304:
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 1955              		.loc 23 192 0
 1956 006c 2246     		mov	r2, r4
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
 1957              		.loc 23 184 0
 1958 006e 3946     		mov	r1, r7
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = (q31_t) clip_q63_to_q31(((q63_t) *pSrcCmplx++ * in) >> 31);
 1959              		.loc 23 192 0
 1960 0070 2846     		mov	r0, r5
 1961              	.LVL305:
 1962              	.L96:
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 1963              		.loc 23 179 0
 1964 0072 002B     		cmp	r3, #0
 1965 0074 C7D1     		bne	.L101
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   }
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** }
 1966              		.loc 23 199 0
 1967 0076 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1968              		.cfi_endproc
 1969              	.LFE105:
 1970              		.size	arm_cmplx_mult_real_q31, .-arm_cmplx_mult_real_q31
 1971 007a 00BF     		.text
 1972              	.Letext0:
 1973              		.file 25 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9
 1974              		.file 26 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9
 1975              		.file 27 ".\\DSP\\Include/arm_math_types.h"
 1976              		.file 28 ".\\Core\\Include/cmsis_gcc.h"
 1977              		.file 29 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9
 1978              		.section	.debug_info,"",%progbits
 1979              	.Ldebug_info0:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 127


 1980 0000 740F0000 		.4byte	0xf74
 1981 0004 0400     		.2byte	0x4
 1982 0006 00000000 		.4byte	.Ldebug_abbrev0
 1983 000a 04       		.byte	0x4
 1984 000b 01       		.uleb128 0x1
 1985 000c A0050000 		.4byte	.LASF91
 1986 0010 01       		.byte	0x1
 1987 0011 D9020000 		.4byte	.LASF92
 1988 0015 29040000 		.4byte	.LASF93
 1989 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 1990 001d 00000000 		.4byte	0
 1991 0021 00000000 		.4byte	.Ldebug_line0
 1992 0025 02       		.uleb128 0x2
 1993 0026 04       		.byte	0x4
 1994 0027 04       		.byte	0x4
 1995 0028 6F030000 		.4byte	.LASF0
 1996 002c 02       		.uleb128 0x2
 1997 002d 01       		.byte	0x1
 1998 002e 06       		.byte	0x6
 1999 002f 2F010000 		.4byte	.LASF1
 2000 0033 02       		.uleb128 0x2
 2001 0034 01       		.byte	0x1
 2002 0035 08       		.byte	0x8
 2003 0036 C0030000 		.4byte	.LASF2
 2004 003a 03       		.uleb128 0x3
 2005 003b BF010000 		.4byte	.LASF5
 2006 003f 19       		.byte	0x19
 2007 0040 29       		.byte	0x29
 2008 0041 45000000 		.4byte	0x45
 2009 0045 02       		.uleb128 0x2
 2010 0046 02       		.byte	0x2
 2011 0047 05       		.byte	0x5
 2012 0048 D3030000 		.4byte	.LASF3
 2013 004c 02       		.uleb128 0x2
 2014 004d 02       		.byte	0x2
 2015 004e 07       		.byte	0x7
 2016 004f 5E020000 		.4byte	.LASF4
 2017 0053 03       		.uleb128 0x3
 2018 0054 A4040000 		.4byte	.LASF6
 2019 0058 19       		.byte	0x19
 2020 0059 3F       		.byte	0x3f
 2021 005a 5E000000 		.4byte	0x5e
 2022 005e 02       		.uleb128 0x2
 2023 005f 04       		.byte	0x4
 2024 0060 05       		.byte	0x5
 2025 0061 6E010000 		.4byte	.LASF7
 2026 0065 03       		.uleb128 0x3
 2027 0066 A2010000 		.4byte	.LASF8
 2028 006a 19       		.byte	0x19
 2029 006b 41       		.byte	0x41
 2030 006c 70000000 		.4byte	0x70
 2031 0070 02       		.uleb128 0x2
 2032 0071 04       		.byte	0x4
 2033 0072 07       		.byte	0x7
 2034 0073 4C020000 		.4byte	.LASF9
 2035 0077 03       		.uleb128 0x3
 2036 0078 E6000000 		.4byte	.LASF10
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 128


 2037 007c 19       		.byte	0x19
 2038 007d 59       		.byte	0x59
 2039 007e 82000000 		.4byte	0x82
 2040 0082 02       		.uleb128 0x2
 2041 0083 08       		.byte	0x8
 2042 0084 05       		.byte	0x5
 2043 0085 21010000 		.4byte	.LASF11
 2044 0089 02       		.uleb128 0x2
 2045 008a 08       		.byte	0x8
 2046 008b 07       		.byte	0x7
 2047 008c C8000000 		.4byte	.LASF12
 2048 0090 04       		.uleb128 0x4
 2049 0091 04       		.byte	0x4
 2050 0092 05       		.byte	0x5
 2051 0093 696E7400 		.ascii	"int\000"
 2052 0097 02       		.uleb128 0x2
 2053 0098 04       		.byte	0x4
 2054 0099 07       		.byte	0x7
 2055 009a 20020000 		.4byte	.LASF13
 2056 009e 03       		.uleb128 0x3
 2057 009f 19010000 		.4byte	.LASF14
 2058 00a3 1A       		.byte	0x1a
 2059 00a4 20       		.byte	0x20
 2060 00a5 3A000000 		.4byte	0x3a
 2061 00a9 03       		.uleb128 0x3
 2062 00aa B8030000 		.4byte	.LASF15
 2063 00ae 1A       		.byte	0x1a
 2064 00af 2C       		.byte	0x2c
 2065 00b0 53000000 		.4byte	0x53
 2066 00b4 03       		.uleb128 0x3
 2067 00b5 20040000 		.4byte	.LASF16
 2068 00b9 1A       		.byte	0x1a
 2069 00ba 2D       		.byte	0x2d
 2070 00bb 65000000 		.4byte	0x65
 2071 00bf 03       		.uleb128 0x3
 2072 00c0 70050000 		.4byte	.LASF17
 2073 00c4 1A       		.byte	0x1a
 2074 00c5 38       		.byte	0x38
 2075 00c6 77000000 		.4byte	0x77
 2076 00ca 02       		.uleb128 0x2
 2077 00cb 04       		.byte	0x4
 2078 00cc 07       		.byte	0x7
 2079 00cd 17030000 		.4byte	.LASF18
 2080 00d1 02       		.uleb128 0x2
 2081 00d2 01       		.byte	0x1
 2082 00d3 08       		.byte	0x8
 2083 00d4 88040000 		.4byte	.LASF19
 2084 00d8 02       		.uleb128 0x2
 2085 00d9 08       		.byte	0x8
 2086 00da 04       		.byte	0x4
 2087 00db 8F010000 		.4byte	.LASF20
 2088 00df 02       		.uleb128 0x2
 2089 00e0 08       		.byte	0x8
 2090 00e1 04       		.byte	0x4
 2091 00e2 20030000 		.4byte	.LASF21
 2092 00e6 05       		.uleb128 0x5
 2093 00e7 89010000 		.4byte	.LASF22
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 129


 2094 00eb 1B       		.byte	0x1b
 2095 00ec 1F01     		.2byte	0x11f
 2096 00ee 9E000000 		.4byte	0x9e
 2097 00f2 05       		.uleb128 0x5
 2098 00f3 1A040000 		.4byte	.LASF23
 2099 00f7 1B       		.byte	0x1b
 2100 00f8 2401     		.2byte	0x124
 2101 00fa A9000000 		.4byte	0xa9
 2102 00fe 05       		.uleb128 0x5
 2103 00ff 19000000 		.4byte	.LASF24
 2104 0103 1B       		.byte	0x1b
 2105 0104 2901     		.2byte	0x129
 2106 0106 BF000000 		.4byte	0xbf
 2107 010a 05       		.uleb128 0x5
 2108 010b AE040000 		.4byte	.LASF25
 2109 010f 1B       		.byte	0x1b
 2110 0110 2F01     		.2byte	0x12f
 2111 0112 25000000 		.4byte	0x25
 2112 0116 05       		.uleb128 0x5
 2113 0117 FC000000 		.4byte	.LASF26
 2114 011b 1B       		.byte	0x1b
 2115 011c 3501     		.2byte	0x135
 2116 011e D8000000 		.4byte	0xd8
 2117 0122 06       		.uleb128 0x6
 2118 0123 01       		.byte	0x1
 2119 0124 1B       		.byte	0x1b
 2120 0125 5802     		.2byte	0x258
 2121 0127 5C010000 		.4byte	0x15c
 2122 012b 07       		.uleb128 0x7
 2123 012c 9D000000 		.4byte	.LASF27
 2124 0130 00       		.sleb128 0
 2125 0131 07       		.uleb128 0x7
 2126 0132 DD030000 		.4byte	.LASF28
 2127 0136 7F       		.sleb128 -1
 2128 0137 07       		.uleb128 0x7
 2129 0138 59030000 		.4byte	.LASF29
 2130 013c 7E       		.sleb128 -2
 2131 013d 07       		.uleb128 0x7
 2132 013e 8D040000 		.4byte	.LASF30
 2133 0142 7D       		.sleb128 -3
 2134 0143 07       		.uleb128 0x7
 2135 0144 90030000 		.4byte	.LASF31
 2136 0148 7C       		.sleb128 -4
 2137 0149 07       		.uleb128 0x7
 2138 014a 75030000 		.4byte	.LASF32
 2139 014e 7B       		.sleb128 -5
 2140 014f 07       		.uleb128 0x7
 2141 0150 90020000 		.4byte	.LASF33
 2142 0154 7A       		.sleb128 -6
 2143 0155 07       		.uleb128 0x7
 2144 0156 71020000 		.4byte	.LASF34
 2145 015a 79       		.sleb128 -7
 2146 015b 00       		.byte	0
 2147 015c 05       		.uleb128 0x5
 2148 015d 27050000 		.4byte	.LASF35
 2149 0161 1B       		.byte	0x1b
 2150 0162 6102     		.2byte	0x261
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 130


 2151 0164 22010000 		.4byte	0x122
 2152 0168 08       		.uleb128 0x8
 2153 0169 AB030000 		.4byte	.LASF37
 2154 016d 08       		.byte	0x8
 2155 016e 0001     		.2byte	0x100
 2156 0170 5C010000 		.4byte	0x15c
 2157 0174 03       		.byte	0x3
 2158 0175 91010000 		.4byte	0x191
 2159 0179 09       		.uleb128 0x9
 2160 017a 696E00   		.ascii	"in\000"
 2161 017d 08       		.byte	0x8
 2162 017e 0101     		.2byte	0x101
 2163 0180 91010000 		.4byte	0x191
 2164 0184 0A       		.uleb128 0xa
 2165 0185 12030000 		.4byte	.LASF36
 2166 0189 08       		.byte	0x8
 2167 018a 0201     		.2byte	0x102
 2168 018c 96010000 		.4byte	0x196
 2169 0190 00       		.byte	0
 2170 0191 0B       		.uleb128 0xb
 2171 0192 0A010000 		.4byte	0x10a
 2172 0196 0C       		.uleb128 0xc
 2173 0197 04       		.byte	0x4
 2174 0198 0A010000 		.4byte	0x10a
 2175 019c 0D       		.uleb128 0xd
 2176 019d 44030000 		.4byte	.LASF38
 2177 01a1 18       		.byte	0x18
 2178 01a2 88       		.byte	0x88
 2179 01a3 F2000000 		.4byte	0xf2
 2180 01a7 03       		.byte	0x3
 2181 01a8 B6010000 		.4byte	0x1b6
 2182 01ac 0E       		.uleb128 0xe
 2183 01ad 7800     		.ascii	"x\000"
 2184 01af 18       		.byte	0x18
 2185 01b0 89       		.byte	0x89
 2186 01b1 FE000000 		.4byte	0xfe
 2187 01b5 00       		.byte	0
 2188 01b6 0F       		.uleb128 0xf
 2189 01b7 5D050000 		.4byte	.LASF42
 2190 01bb 01       		.byte	0x1
 2191 01bc 7B       		.byte	0x7b
 2192 01bd 00000000 		.4byte	.LFB84
 2193 01c1 26000000 		.4byte	.LFE84-.LFB84
 2194 01c5 01       		.uleb128 0x1
 2195 01c6 9C       		.byte	0x9c
 2196 01c7 06020000 		.4byte	0x206
 2197 01cb 10       		.uleb128 0x10
 2198 01cc 2D020000 		.4byte	.LASF39
 2199 01d0 01       		.byte	0x1
 2200 01d1 7C       		.byte	0x7c
 2201 01d2 06020000 		.4byte	0x206
 2202 01d6 00000000 		.4byte	.LLST0
 2203 01da 10       		.uleb128 0x10
 2204 01db 84010000 		.4byte	.LASF40
 2205 01df 01       		.byte	0x1
 2206 01e0 7D       		.byte	0x7d
 2207 01e1 96010000 		.4byte	0x196
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 131


 2208 01e5 36000000 		.4byte	.LLST1
 2209 01e9 10       		.uleb128 0x10
 2210 01ea 1C050000 		.4byte	.LASF41
 2211 01ee 01       		.byte	0x1
 2212 01ef 7E       		.byte	0x7e
 2213 01f0 B4000000 		.4byte	0xb4
 2214 01f4 6C000000 		.4byte	.LLST2
 2215 01f8 11       		.uleb128 0x11
 2216 01f9 DF000000 		.4byte	.LASF44
 2217 01fd 01       		.byte	0x1
 2218 01fe 80       		.byte	0x80
 2219 01ff B4000000 		.4byte	0xb4
 2220 0203 01       		.uleb128 0x1
 2221 0204 52       		.byte	0x52
 2222 0205 00       		.byte	0
 2223 0206 0C       		.uleb128 0xc
 2224 0207 04       		.byte	0x4
 2225 0208 91010000 		.4byte	0x191
 2226 020c 0F       		.uleb128 0xf
 2227 020d 07040000 		.4byte	.LASF43
 2228 0211 02       		.byte	0x2
 2229 0212 65       		.byte	0x65
 2230 0213 00000000 		.4byte	.LFB85
 2231 0217 34000000 		.4byte	.LFE85-.LFB85
 2232 021b 01       		.uleb128 0x1
 2233 021c 9C       		.byte	0x9c
 2234 021d 6B020000 		.4byte	0x26b
 2235 0221 10       		.uleb128 0x10
 2236 0222 2D020000 		.4byte	.LASF39
 2237 0226 02       		.byte	0x2
 2238 0227 66       		.byte	0x66
 2239 0228 6B020000 		.4byte	0x26b
 2240 022c 8D000000 		.4byte	.LLST3
 2241 0230 10       		.uleb128 0x10
 2242 0231 84010000 		.4byte	.LASF40
 2243 0235 02       		.byte	0x2
 2244 0236 67       		.byte	0x67
 2245 0237 76020000 		.4byte	0x276
 2246 023b C3000000 		.4byte	.LLST4
 2247 023f 10       		.uleb128 0x10
 2248 0240 1C050000 		.4byte	.LASF41
 2249 0244 02       		.byte	0x2
 2250 0245 68       		.byte	0x68
 2251 0246 B4000000 		.4byte	0xb4
 2252 024a F9000000 		.4byte	.LLST5
 2253 024e 11       		.uleb128 0x11
 2254 024f DF000000 		.4byte	.LASF44
 2255 0253 02       		.byte	0x2
 2256 0254 6A       		.byte	0x6a
 2257 0255 B4000000 		.4byte	0xb4
 2258 0259 01       		.uleb128 0x1
 2259 025a 52       		.byte	0x52
 2260 025b 12       		.uleb128 0x12
 2261 025c 696E3100 		.ascii	"in1\000"
 2262 0260 02       		.byte	0x2
 2263 0261 6B       		.byte	0x6b
 2264 0262 F2000000 		.4byte	0xf2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 132


 2265 0266 1A010000 		.4byte	.LLST6
 2266 026a 00       		.byte	0
 2267 026b 0C       		.uleb128 0xc
 2268 026c 04       		.byte	0x4
 2269 026d 71020000 		.4byte	0x271
 2270 0271 0B       		.uleb128 0xb
 2271 0272 E6000000 		.4byte	0xe6
 2272 0276 0C       		.uleb128 0xc
 2273 0277 04       		.byte	0x4
 2274 0278 E6000000 		.4byte	0xe6
 2275 027c 0F       		.uleb128 0xf
 2276 027d 78050000 		.4byte	.LASF45
 2277 0281 03       		.byte	0x3
 2278 0282 6B       		.byte	0x6b
 2279 0283 00000000 		.4byte	.LFB86
 2280 0287 30000000 		.4byte	.LFE86-.LFB86
 2281 028b 01       		.uleb128 0x1
 2282 028c 9C       		.byte	0x9c
 2283 028d DA020000 		.4byte	0x2da
 2284 0291 10       		.uleb128 0x10
 2285 0292 2D020000 		.4byte	.LASF39
 2286 0296 03       		.byte	0x3
 2287 0297 6C       		.byte	0x6c
 2288 0298 DA020000 		.4byte	0x2da
 2289 029c 2D010000 		.4byte	.LLST7
 2290 02a0 10       		.uleb128 0x10
 2291 02a1 84010000 		.4byte	.LASF40
 2292 02a5 03       		.byte	0x3
 2293 02a6 6D       		.byte	0x6d
 2294 02a7 E5020000 		.4byte	0x2e5
 2295 02ab 63010000 		.4byte	.LLST8
 2296 02af 10       		.uleb128 0x10
 2297 02b0 1C050000 		.4byte	.LASF41
 2298 02b4 03       		.byte	0x3
 2299 02b5 6E       		.byte	0x6e
 2300 02b6 B4000000 		.4byte	0xb4
 2301 02ba 99010000 		.4byte	.LLST9
 2302 02be 11       		.uleb128 0x11
 2303 02bf DF000000 		.4byte	.LASF44
 2304 02c3 03       		.byte	0x3
 2305 02c4 70       		.byte	0x70
 2306 02c5 B4000000 		.4byte	0xb4
 2307 02c9 01       		.uleb128 0x1
 2308 02ca 52       		.byte	0x52
 2309 02cb 12       		.uleb128 0x12
 2310 02cc 696E00   		.ascii	"in\000"
 2311 02cf 03       		.byte	0x3
 2312 02d0 71       		.byte	0x71
 2313 02d1 F2000000 		.4byte	0xf2
 2314 02d5 BA010000 		.4byte	.LLST10
 2315 02d9 00       		.byte	0
 2316 02da 0C       		.uleb128 0xc
 2317 02db 04       		.byte	0x4
 2318 02dc E0020000 		.4byte	0x2e0
 2319 02e0 0B       		.uleb128 0xb
 2320 02e1 F2000000 		.4byte	0xf2
 2321 02e5 0C       		.uleb128 0xc
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 133


 2322 02e6 04       		.byte	0x4
 2323 02e7 F2000000 		.4byte	0xf2
 2324 02eb 13       		.uleb128 0x13
 2325 02ec 3B010000 		.4byte	.LASF46
 2326 02f0 04       		.byte	0x4
 2327 02f1 B7       		.byte	0xb7
 2328 02f2 00000000 		.4byte	.LFB87
 2329 02f6 84000000 		.4byte	.LFE87-.LFB87
 2330 02fa 01       		.uleb128 0x1
 2331 02fb 9C       		.byte	0x9c
 2332 02fc B0030000 		.4byte	0x3b0
 2333 0300 10       		.uleb128 0x10
 2334 0301 96010000 		.4byte	.LASF47
 2335 0305 04       		.byte	0x4
 2336 0306 B8       		.byte	0xb8
 2337 0307 06020000 		.4byte	0x206
 2338 030b F0010000 		.4byte	.LLST11
 2339 030f 10       		.uleb128 0x10
 2340 0310 9C010000 		.4byte	.LASF48
 2341 0314 04       		.byte	0x4
 2342 0315 B9       		.byte	0xb9
 2343 0316 06020000 		.4byte	0x206
 2344 031a 26020000 		.4byte	.LLST12
 2345 031e 10       		.uleb128 0x10
 2346 031f 1C050000 		.4byte	.LASF41
 2347 0323 04       		.byte	0x4
 2348 0324 BA       		.byte	0xba
 2349 0325 B4000000 		.4byte	0xb4
 2350 0329 5C020000 		.4byte	.LLST13
 2351 032d 10       		.uleb128 0x10
 2352 032e A0030000 		.4byte	.LASF49
 2353 0332 04       		.byte	0x4
 2354 0333 BB       		.byte	0xbb
 2355 0334 96010000 		.4byte	0x196
 2356 0338 7D020000 		.4byte	.LLST14
 2357 033c 14       		.uleb128 0x14
 2358 033d 2C030000 		.4byte	.LASF50
 2359 0341 04       		.byte	0x4
 2360 0342 BC       		.byte	0xbc
 2361 0343 96010000 		.4byte	0x196
 2362 0347 02       		.uleb128 0x2
 2363 0348 91       		.byte	0x91
 2364 0349 00       		.sleb128 0
 2365 034a 15       		.uleb128 0x15
 2366 034b DF000000 		.4byte	.LASF44
 2367 034f 04       		.byte	0x4
 2368 0350 BE       		.byte	0xbe
 2369 0351 B4000000 		.4byte	0xb4
 2370 0355 9C020000 		.4byte	.LLST15
 2371 0359 15       		.uleb128 0x15
 2372 035a 7F040000 		.4byte	.LASF51
 2373 035e 04       		.byte	0x4
 2374 035f BF       		.byte	0xbf
 2375 0360 0A010000 		.4byte	0x10a
 2376 0364 BA020000 		.4byte	.LLST16
 2377 0368 15       		.uleb128 0x15
 2378 0369 87030000 		.4byte	.LASF52
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 134


 2379 036d 04       		.byte	0x4
 2380 036e BF       		.byte	0xbf
 2381 036f 0A010000 		.4byte	0x10a
 2382 0373 09030000 		.4byte	.LLST17
 2383 0377 12       		.uleb128 0x12
 2384 0378 613000   		.ascii	"a0\000"
 2385 037b 04       		.byte	0x4
 2386 037c C0       		.byte	0xc0
 2387 037d 0A010000 		.4byte	0x10a
 2388 0381 65030000 		.4byte	.LLST18
 2389 0385 12       		.uleb128 0x12
 2390 0386 623000   		.ascii	"b0\000"
 2391 0389 04       		.byte	0x4
 2392 038a C0       		.byte	0xc0
 2393 038b 0A010000 		.4byte	0x10a
 2394 038f 78030000 		.4byte	.LLST19
 2395 0393 12       		.uleb128 0x12
 2396 0394 633000   		.ascii	"c0\000"
 2397 0397 04       		.byte	0x4
 2398 0398 C0       		.byte	0xc0
 2399 0399 0A010000 		.4byte	0x10a
 2400 039d 8B030000 		.4byte	.LLST20
 2401 03a1 12       		.uleb128 0x12
 2402 03a2 643000   		.ascii	"d0\000"
 2403 03a5 04       		.byte	0x4
 2404 03a6 C0       		.byte	0xc0
 2405 03a7 0A010000 		.4byte	0x10a
 2406 03ab 9E030000 		.4byte	.LLST21
 2407 03af 00       		.byte	0
 2408 03b0 0F       		.uleb128 0xf
 2409 03b1 32050000 		.4byte	.LASF53
 2410 03b5 05       		.byte	0x5
 2411 03b6 9F       		.byte	0x9f
 2412 03b7 00000000 		.4byte	.LFB88
 2413 03bb 76000000 		.4byte	.LFE88-.LFB88
 2414 03bf 01       		.uleb128 0x1
 2415 03c0 9C       		.byte	0x9c
 2416 03c1 75040000 		.4byte	0x475
 2417 03c5 10       		.uleb128 0x10
 2418 03c6 96010000 		.4byte	.LASF47
 2419 03ca 05       		.byte	0x5
 2420 03cb A0       		.byte	0xa0
 2421 03cc 6B020000 		.4byte	0x26b
 2422 03d0 B1030000 		.4byte	.LLST22
 2423 03d4 10       		.uleb128 0x10
 2424 03d5 9C010000 		.4byte	.LASF48
 2425 03d9 05       		.byte	0x5
 2426 03da A1       		.byte	0xa1
 2427 03db 6B020000 		.4byte	0x26b
 2428 03df F4030000 		.4byte	.LLST23
 2429 03e3 10       		.uleb128 0x10
 2430 03e4 1C050000 		.4byte	.LASF41
 2431 03e8 05       		.byte	0x5
 2432 03e9 A2       		.byte	0xa2
 2433 03ea B4000000 		.4byte	0xb4
 2434 03ee 37040000 		.4byte	.LLST24
 2435 03f2 10       		.uleb128 0x10
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 135


 2436 03f3 A0030000 		.4byte	.LASF49
 2437 03f7 05       		.byte	0x5
 2438 03f8 A3       		.byte	0xa3
 2439 03f9 E5020000 		.4byte	0x2e5
 2440 03fd 58040000 		.4byte	.LLST25
 2441 0401 14       		.uleb128 0x14
 2442 0402 2C030000 		.4byte	.LASF50
 2443 0406 05       		.byte	0x5
 2444 0407 A4       		.byte	0xa4
 2445 0408 E5020000 		.4byte	0x2e5
 2446 040c 02       		.uleb128 0x2
 2447 040d 91       		.byte	0x91
 2448 040e 00       		.sleb128 0
 2449 040f 15       		.uleb128 0x15
 2450 0410 DF000000 		.4byte	.LASF44
 2451 0414 05       		.byte	0x5
 2452 0415 A6       		.byte	0xa6
 2453 0416 B4000000 		.4byte	0xb4
 2454 041a 76040000 		.4byte	.LLST26
 2455 041e 15       		.uleb128 0x15
 2456 041f 7F040000 		.4byte	.LASF51
 2457 0423 05       		.byte	0x5
 2458 0424 A7       		.byte	0xa7
 2459 0425 FE000000 		.4byte	0xfe
 2460 0429 89040000 		.4byte	.LLST27
 2461 042d 15       		.uleb128 0x15
 2462 042e 87030000 		.4byte	.LASF52
 2463 0432 05       		.byte	0x5
 2464 0433 A7       		.byte	0xa7
 2465 0434 FE000000 		.4byte	0xfe
 2466 0438 D5040000 		.4byte	.LLST28
 2467 043c 12       		.uleb128 0x12
 2468 043d 613000   		.ascii	"a0\000"
 2469 0440 05       		.byte	0x5
 2470 0441 A8       		.byte	0xa8
 2471 0442 E6000000 		.4byte	0xe6
 2472 0446 21050000 		.4byte	.LLST29
 2473 044a 12       		.uleb128 0x12
 2474 044b 623000   		.ascii	"b0\000"
 2475 044e 05       		.byte	0x5
 2476 044f A8       		.byte	0xa8
 2477 0450 E6000000 		.4byte	0xe6
 2478 0454 41050000 		.4byte	.LLST30
 2479 0458 12       		.uleb128 0x12
 2480 0459 633000   		.ascii	"c0\000"
 2481 045c 05       		.byte	0x5
 2482 045d A8       		.byte	0xa8
 2483 045e E6000000 		.4byte	0xe6
 2484 0462 61050000 		.4byte	.LLST31
 2485 0466 12       		.uleb128 0x12
 2486 0467 643000   		.ascii	"d0\000"
 2487 046a 05       		.byte	0x5
 2488 046b A8       		.byte	0xa8
 2489 046c E6000000 		.4byte	0xe6
 2490 0470 81050000 		.4byte	.LLST32
 2491 0474 00       		.byte	0
 2492 0475 0F       		.uleb128 0xf
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 136


 2493 0476 52010000 		.4byte	.LASF54
 2494 047a 06       		.byte	0x6
 2495 047b A3       		.byte	0xa3
 2496 047c 00000000 		.4byte	.LFB89
 2497 0480 22010000 		.4byte	.LFE89-.LFB89
 2498 0484 01       		.uleb128 0x1
 2499 0485 9C       		.byte	0x9c
 2500 0486 3A050000 		.4byte	0x53a
 2501 048a 10       		.uleb128 0x10
 2502 048b 96010000 		.4byte	.LASF47
 2503 048f 06       		.byte	0x6
 2504 0490 A4       		.byte	0xa4
 2505 0491 DA020000 		.4byte	0x2da
 2506 0495 A1050000 		.4byte	.LLST33
 2507 0499 10       		.uleb128 0x10
 2508 049a 9C010000 		.4byte	.LASF48
 2509 049e 06       		.byte	0x6
 2510 049f A5       		.byte	0xa5
 2511 04a0 DA020000 		.4byte	0x2da
 2512 04a4 D7050000 		.4byte	.LLST34
 2513 04a8 10       		.uleb128 0x10
 2514 04a9 1C050000 		.4byte	.LASF41
 2515 04ad 06       		.byte	0x6
 2516 04ae A6       		.byte	0xa6
 2517 04af B4000000 		.4byte	0xb4
 2518 04b3 0D060000 		.4byte	.LLST35
 2519 04b7 10       		.uleb128 0x10
 2520 04b8 A0030000 		.4byte	.LASF49
 2521 04bc 06       		.byte	0x6
 2522 04bd A7       		.byte	0xa7
 2523 04be 3A050000 		.4byte	0x53a
 2524 04c2 39060000 		.4byte	.LLST36
 2525 04c6 14       		.uleb128 0x14
 2526 04c7 2C030000 		.4byte	.LASF50
 2527 04cb 06       		.byte	0x6
 2528 04cc A8       		.byte	0xa8
 2529 04cd 3A050000 		.4byte	0x53a
 2530 04d1 02       		.uleb128 0x2
 2531 04d2 91       		.byte	0x91
 2532 04d3 00       		.sleb128 0
 2533 04d4 15       		.uleb128 0x15
 2534 04d5 DF000000 		.4byte	.LASF44
 2535 04d9 06       		.byte	0x6
 2536 04da AA       		.byte	0xaa
 2537 04db B4000000 		.4byte	0xb4
 2538 04df 58060000 		.4byte	.LLST37
 2539 04e3 15       		.uleb128 0x15
 2540 04e4 7F040000 		.4byte	.LASF51
 2541 04e8 06       		.byte	0x6
 2542 04e9 AB       		.byte	0xab
 2543 04ea FE000000 		.4byte	0xfe
 2544 04ee A4060000 		.4byte	.LLST38
 2545 04f2 15       		.uleb128 0x15
 2546 04f3 87030000 		.4byte	.LASF52
 2547 04f7 06       		.byte	0x6
 2548 04f8 AB       		.byte	0xab
 2549 04f9 FE000000 		.4byte	0xfe
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 137


 2550 04fd 07070000 		.4byte	.LLST39
 2551 0501 12       		.uleb128 0x12
 2552 0502 613000   		.ascii	"a0\000"
 2553 0505 06       		.byte	0x6
 2554 0506 AC       		.byte	0xac
 2555 0507 F2000000 		.4byte	0xf2
 2556 050b 67070000 		.4byte	.LLST40
 2557 050f 12       		.uleb128 0x12
 2558 0510 623000   		.ascii	"b0\000"
 2559 0513 06       		.byte	0x6
 2560 0514 AC       		.byte	0xac
 2561 0515 F2000000 		.4byte	0xf2
 2562 0519 86070000 		.4byte	.LLST41
 2563 051d 12       		.uleb128 0x12
 2564 051e 633000   		.ascii	"c0\000"
 2565 0521 06       		.byte	0x6
 2566 0522 AC       		.byte	0xac
 2567 0523 F2000000 		.4byte	0xf2
 2568 0527 99070000 		.4byte	.LLST42
 2569 052b 12       		.uleb128 0x12
 2570 052c 643000   		.ascii	"d0\000"
 2571 052f 06       		.byte	0x6
 2572 0530 AC       		.byte	0xac
 2573 0531 F2000000 		.4byte	0xf2
 2574 0535 B8070000 		.4byte	.LLST43
 2575 0539 00       		.byte	0
 2576 053a 0C       		.uleb128 0xc
 2577 053b 04       		.byte	0x4
 2578 053c FE000000 		.4byte	0xfe
 2579 0540 13       		.uleb128 0x13
 2580 0541 AD010000 		.4byte	.LASF55
 2581 0545 07       		.byte	0x7
 2582 0546 9C       		.byte	0x9c
 2583 0547 00000000 		.4byte	.LFB90
 2584 054b 52000000 		.4byte	.LFE90-.LFB90
 2585 054f 01       		.uleb128 0x1
 2586 0550 9C       		.byte	0x9c
 2587 0551 E4050000 		.4byte	0x5e4
 2588 0555 10       		.uleb128 0x10
 2589 0556 2D020000 		.4byte	.LASF39
 2590 055a 07       		.byte	0x7
 2591 055b 9D       		.byte	0x9d
 2592 055c 06020000 		.4byte	0x206
 2593 0560 D7070000 		.4byte	.LLST44
 2594 0564 10       		.uleb128 0x10
 2595 0565 84010000 		.4byte	.LASF40
 2596 0569 07       		.byte	0x7
 2597 056a 9E       		.byte	0x9e
 2598 056b 96010000 		.4byte	0x196
 2599 056f 0D080000 		.4byte	.LLST45
 2600 0573 10       		.uleb128 0x10
 2601 0574 1C050000 		.4byte	.LASF41
 2602 0578 07       		.byte	0x7
 2603 0579 9F       		.byte	0x9f
 2604 057a B4000000 		.4byte	0xb4
 2605 057e 41080000 		.4byte	.LLST46
 2606 0582 15       		.uleb128 0x15
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 138


 2607 0583 DF000000 		.4byte	.LASF44
 2608 0587 07       		.byte	0x7
 2609 0588 A1       		.byte	0xa1
 2610 0589 B4000000 		.4byte	0xb4
 2611 058d 62080000 		.4byte	.LLST47
 2612 0591 15       		.uleb128 0x15
 2613 0592 58050000 		.4byte	.LASF56
 2614 0596 07       		.byte	0x7
 2615 0597 A2       		.byte	0xa2
 2616 0598 0A010000 		.4byte	0x10a
 2617 059c 80080000 		.4byte	.LLST48
 2618 05a0 15       		.uleb128 0x15
 2619 05a1 69010000 		.4byte	.LASF57
 2620 05a5 07       		.byte	0x7
 2621 05a6 A2       		.byte	0xa2
 2622 05a7 0A010000 		.4byte	0x10a
 2623 05ab 93080000 		.4byte	.LLST49
 2624 05af 16       		.uleb128 0x16
 2625 05b0 68010000 		.4byte	0x168
 2626 05b4 2E000000 		.4byte	.LBB8
 2627 05b8 16000000 		.4byte	.LBE8-.LBB8
 2628 05bc 07       		.byte	0x7
 2629 05bd 0601     		.2byte	0x106
 2630 05bf 17       		.uleb128 0x17
 2631 05c0 84010000 		.4byte	0x184
 2632 05c4 A6080000 		.4byte	.LLST50
 2633 05c8 17       		.uleb128 0x17
 2634 05c9 79010000 		.4byte	0x179
 2635 05cd C6080000 		.4byte	.LLST51
 2636 05d1 18       		.uleb128 0x18
 2637 05d2 3C000000 		.4byte	.LVL100
 2638 05d6 1A0F0000 		.4byte	0xf1a
 2639 05da 19       		.uleb128 0x19
 2640 05db 01       		.uleb128 0x1
 2641 05dc 50       		.byte	0x50
 2642 05dd 03       		.uleb128 0x3
 2643 05de F5       		.byte	0xf5
 2644 05df 08       		.uleb128 0x8
 2645 05e0 25       		.uleb128 0x25
 2646 05e1 00       		.byte	0
 2647 05e2 00       		.byte	0
 2648 05e3 00       		.byte	0
 2649 05e4 13       		.uleb128 0x13
 2650 05e5 F5030000 		.4byte	.LASF58
 2651 05e9 09       		.byte	0x9
 2652 05ea 47       		.byte	0x47
 2653 05eb 00000000 		.4byte	.LFB91
 2654 05ef 56000000 		.4byte	.LFE91-.LFB91
 2655 05f3 01       		.uleb128 0x1
 2656 05f4 9C       		.byte	0x9c
 2657 05f5 5D060000 		.4byte	0x65d
 2658 05f9 10       		.uleb128 0x10
 2659 05fa 2D020000 		.4byte	.LASF39
 2660 05fe 09       		.byte	0x9
 2661 05ff 48       		.byte	0x48
 2662 0600 5D060000 		.4byte	0x65d
 2663 0604 E4080000 		.4byte	.LLST52
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 139


 2664 0608 10       		.uleb128 0x10
 2665 0609 84010000 		.4byte	.LASF40
 2666 060d 09       		.byte	0x9
 2667 060e 49       		.byte	0x49
 2668 060f 68060000 		.4byte	0x668
 2669 0613 1A090000 		.4byte	.LLST53
 2670 0617 10       		.uleb128 0x10
 2671 0618 1C050000 		.4byte	.LASF41
 2672 061c 09       		.byte	0x9
 2673 061d 4A       		.byte	0x4a
 2674 061e B4000000 		.4byte	0xb4
 2675 0622 4E090000 		.4byte	.LLST54
 2676 0626 15       		.uleb128 0x15
 2677 0627 DF000000 		.4byte	.LASF44
 2678 062b 09       		.byte	0x9
 2679 062c 4C       		.byte	0x4c
 2680 062d B4000000 		.4byte	0xb4
 2681 0631 6F090000 		.4byte	.LLST55
 2682 0635 15       		.uleb128 0x15
 2683 0636 58050000 		.4byte	.LASF56
 2684 063a 09       		.byte	0x9
 2685 063b 4D       		.byte	0x4d
 2686 063c 16010000 		.4byte	0x116
 2687 0640 8D090000 		.4byte	.LLST56
 2688 0644 15       		.uleb128 0x15
 2689 0645 69010000 		.4byte	.LASF57
 2690 0649 09       		.byte	0x9
 2691 064a 4D       		.byte	0x4d
 2692 064b 16010000 		.4byte	0x116
 2693 064f A5090000 		.4byte	.LLST57
 2694 0653 1A       		.uleb128 0x1a
 2695 0654 44000000 		.4byte	.LVL114
 2696 0658 300F0000 		.4byte	0xf30
 2697 065c 00       		.byte	0
 2698 065d 0C       		.uleb128 0xc
 2699 065e 04       		.byte	0x4
 2700 065f 63060000 		.4byte	0x663
 2701 0663 0B       		.uleb128 0xb
 2702 0664 16010000 		.4byte	0x116
 2703 0668 0C       		.uleb128 0xc
 2704 0669 04       		.byte	0x4
 2705 066a 16010000 		.4byte	0x116
 2706 066e 0F       		.uleb128 0xf
 2707 066f 28000000 		.4byte	.LASF59
 2708 0673 0A       		.byte	0xa
 2709 0674 90       		.byte	0x90
 2710 0675 00000000 		.4byte	.LFB92
 2711 0679 38000000 		.4byte	.LFE92-.LFB92
 2712 067d 01       		.uleb128 0x1
 2713 067e 9C       		.byte	0x9c
 2714 067f 1A070000 		.4byte	0x71a
 2715 0683 10       		.uleb128 0x10
 2716 0684 2D020000 		.4byte	.LASF39
 2717 0688 0A       		.byte	0xa
 2718 0689 91       		.byte	0x91
 2719 068a 6B020000 		.4byte	0x26b
 2720 068e BD090000 		.4byte	.LLST58
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 140


 2721 0692 10       		.uleb128 0x10
 2722 0693 84010000 		.4byte	.LASF40
 2723 0697 0A       		.byte	0xa
 2724 0698 92       		.byte	0x92
 2725 0699 76020000 		.4byte	0x276
 2726 069d 000A0000 		.4byte	.LLST59
 2727 06a1 10       		.uleb128 0x10
 2728 06a2 1C050000 		.4byte	.LASF41
 2729 06a6 0A       		.byte	0xa
 2730 06a7 93       		.byte	0x93
 2731 06a8 B4000000 		.4byte	0xb4
 2732 06ac 360A0000 		.4byte	.LLST60
 2733 06b0 1B       		.uleb128 0x1b
 2734 06b1 72657300 		.ascii	"res\000"
 2735 06b5 0A       		.byte	0xa
 2736 06b6 95       		.byte	0x95
 2737 06b7 F2000000 		.4byte	0xf2
 2738 06bb 02       		.uleb128 0x2
 2739 06bc 91       		.byte	0x91
 2740 06bd 6C       		.sleb128 -20
 2741 06be 15       		.uleb128 0x15
 2742 06bf DF000000 		.4byte	.LASF44
 2743 06c3 0A       		.byte	0xa
 2744 06c4 96       		.byte	0x96
 2745 06c5 B4000000 		.4byte	0xb4
 2746 06c9 570A0000 		.4byte	.LLST61
 2747 06cd 15       		.uleb128 0x15
 2748 06ce 58050000 		.4byte	.LASF56
 2749 06d2 0A       		.byte	0xa
 2750 06d3 9C       		.byte	0x9c
 2751 06d4 E6000000 		.4byte	0xe6
 2752 06d8 750A0000 		.4byte	.LLST62
 2753 06dc 15       		.uleb128 0x15
 2754 06dd 69010000 		.4byte	.LASF57
 2755 06e1 0A       		.byte	0xa
 2756 06e2 9C       		.byte	0x9c
 2757 06e3 E6000000 		.4byte	0xe6
 2758 06e7 950A0000 		.4byte	.LLST63
 2759 06eb 15       		.uleb128 0x15
 2760 06ec 00000000 		.4byte	.LASF60
 2761 06f0 0A       		.byte	0xa
 2762 06f1 9D       		.byte	0x9d
 2763 06f2 F2000000 		.4byte	0xf2
 2764 06f6 B50A0000 		.4byte	.LLST64
 2765 06fa 15       		.uleb128 0x15
 2766 06fb 05000000 		.4byte	.LASF61
 2767 06ff 0A       		.byte	0xa
 2768 0700 9D       		.byte	0x9d
 2769 0701 F2000000 		.4byte	0xf2
 2770 0705 CD0A0000 		.4byte	.LLST65
 2771 0709 18       		.uleb128 0x18
 2772 070a 24000000 		.4byte	.LVL125
 2773 070e 450F0000 		.4byte	0xf45
 2774 0712 19       		.uleb128 0x19
 2775 0713 01       		.uleb128 0x1
 2776 0714 51       		.byte	0x51
 2777 0715 02       		.uleb128 0x2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 141


 2778 0716 91       		.byte	0x91
 2779 0717 6C       		.sleb128 -20
 2780 0718 00       		.byte	0
 2781 0719 00       		.byte	0
 2782 071a 0F       		.uleb128 0xf
 2783 071b EB040000 		.4byte	.LASF62
 2784 071f 0B       		.byte	0xb
 2785 0720 6F       		.byte	0x6f
 2786 0721 00000000 		.4byte	.LFB93
 2787 0725 3A000000 		.4byte	.LFE93-.LFB93
 2788 0729 01       		.uleb128 0x1
 2789 072a 9C       		.byte	0x9c
 2790 072b B8070000 		.4byte	0x7b8
 2791 072f 10       		.uleb128 0x10
 2792 0730 2D020000 		.4byte	.LASF39
 2793 0734 0B       		.byte	0xb
 2794 0735 70       		.byte	0x70
 2795 0736 6B020000 		.4byte	0x26b
 2796 073a FC0A0000 		.4byte	.LLST66
 2797 073e 10       		.uleb128 0x10
 2798 073f 84010000 		.4byte	.LASF40
 2799 0743 0B       		.byte	0xb
 2800 0744 71       		.byte	0x71
 2801 0745 76020000 		.4byte	0x276
 2802 0749 3F0B0000 		.4byte	.LLST67
 2803 074d 10       		.uleb128 0x10
 2804 074e 1C050000 		.4byte	.LASF41
 2805 0752 0B       		.byte	0xb
 2806 0753 72       		.byte	0x72
 2807 0754 B4000000 		.4byte	0xb4
 2808 0758 680B0000 		.4byte	.LLST68
 2809 075c 15       		.uleb128 0x15
 2810 075d DF000000 		.4byte	.LASF44
 2811 0761 0B       		.byte	0xb
 2812 0762 74       		.byte	0x74
 2813 0763 B4000000 		.4byte	0xb4
 2814 0767 890B0000 		.4byte	.LLST69
 2815 076b 15       		.uleb128 0x15
 2816 076c 58050000 		.4byte	.LASF56
 2817 0770 0B       		.byte	0xb
 2818 0771 7A       		.byte	0x7a
 2819 0772 E6000000 		.4byte	0xe6
 2820 0776 A70B0000 		.4byte	.LLST70
 2821 077a 15       		.uleb128 0x15
 2822 077b 69010000 		.4byte	.LASF57
 2823 077f 0B       		.byte	0xb
 2824 0780 7A       		.byte	0x7a
 2825 0781 E6000000 		.4byte	0xe6
 2826 0785 C70B0000 		.4byte	.LLST71
 2827 0789 15       		.uleb128 0x15
 2828 078a 00000000 		.4byte	.LASF60
 2829 078e 0B       		.byte	0xb
 2830 078f 7B       		.byte	0x7b
 2831 0790 F2000000 		.4byte	0xf2
 2832 0794 E70B0000 		.4byte	.LLST72
 2833 0798 15       		.uleb128 0x15
 2834 0799 05000000 		.4byte	.LASF61
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 142


 2835 079d 0B       		.byte	0xb
 2836 079e 7B       		.byte	0x7b
 2837 079f F2000000 		.4byte	0xf2
 2838 07a3 160C0000 		.4byte	.LLST73
 2839 07a7 18       		.uleb128 0x18
 2840 07a8 2E000000 		.4byte	.LVL138
 2841 07ac 600F0000 		.4byte	0xf60
 2842 07b0 19       		.uleb128 0x19
 2843 07b1 01       		.uleb128 0x1
 2844 07b2 51       		.byte	0x51
 2845 07b3 02       		.uleb128 0x2
 2846 07b4 76       		.byte	0x76
 2847 07b5 7E       		.sleb128 -2
 2848 07b6 00       		.byte	0
 2849 07b7 00       		.byte	0
 2850 07b8 0F       		.uleb128 0xf
 2851 07b9 C9010000 		.4byte	.LASF63
 2852 07bd 0C       		.byte	0xc
 2853 07be 7A       		.byte	0x7a
 2854 07bf 00000000 		.4byte	.LFB94
 2855 07c3 4E000000 		.4byte	.LFE94-.LFB94
 2856 07c7 01       		.uleb128 0x1
 2857 07c8 9C       		.byte	0x9c
 2858 07c9 56080000 		.4byte	0x856
 2859 07cd 10       		.uleb128 0x10
 2860 07ce 2D020000 		.4byte	.LASF39
 2861 07d2 0C       		.byte	0xc
 2862 07d3 7B       		.byte	0x7b
 2863 07d4 DA020000 		.4byte	0x2da
 2864 07d8 610C0000 		.4byte	.LLST74
 2865 07dc 10       		.uleb128 0x10
 2866 07dd 84010000 		.4byte	.LASF40
 2867 07e1 0C       		.byte	0xc
 2868 07e2 7C       		.byte	0x7c
 2869 07e3 E5020000 		.4byte	0x2e5
 2870 07e7 970C0000 		.4byte	.LLST75
 2871 07eb 10       		.uleb128 0x10
 2872 07ec 1C050000 		.4byte	.LASF41
 2873 07f0 0C       		.byte	0xc
 2874 07f1 7D       		.byte	0x7d
 2875 07f2 B4000000 		.4byte	0xb4
 2876 07f6 CB0C0000 		.4byte	.LLST76
 2877 07fa 15       		.uleb128 0x15
 2878 07fb DF000000 		.4byte	.LASF44
 2879 07ff 0C       		.byte	0xc
 2880 0800 7F       		.byte	0x7f
 2881 0801 B4000000 		.4byte	0xb4
 2882 0805 EC0C0000 		.4byte	.LLST77
 2883 0809 15       		.uleb128 0x15
 2884 080a 58050000 		.4byte	.LASF56
 2885 080e 0C       		.byte	0xc
 2886 080f 80       		.byte	0x80
 2887 0810 F2000000 		.4byte	0xf2
 2888 0814 0A0D0000 		.4byte	.LLST78
 2889 0818 15       		.uleb128 0x15
 2890 0819 69010000 		.4byte	.LASF57
 2891 081d 0C       		.byte	0xc
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 143


 2892 081e 80       		.byte	0x80
 2893 081f F2000000 		.4byte	0xf2
 2894 0823 290D0000 		.4byte	.LLST79
 2895 0827 15       		.uleb128 0x15
 2896 0828 00000000 		.4byte	.LASF60
 2897 082c 0C       		.byte	0xc
 2898 082d 81       		.byte	0x81
 2899 082e F2000000 		.4byte	0xf2
 2900 0832 480D0000 		.4byte	.LLST80
 2901 0836 15       		.uleb128 0x15
 2902 0837 05000000 		.4byte	.LASF61
 2903 083b 0C       		.byte	0xc
 2904 083c 81       		.byte	0x81
 2905 083d F2000000 		.4byte	0xf2
 2906 0841 5F0D0000 		.4byte	.LLST81
 2907 0845 18       		.uleb128 0x18
 2908 0846 40000000 		.4byte	.LVL153
 2909 084a 450F0000 		.4byte	0xf45
 2910 084e 19       		.uleb128 0x19
 2911 084f 01       		.uleb128 0x1
 2912 0850 51       		.byte	0x51
 2913 0851 02       		.uleb128 0x2
 2914 0852 76       		.byte	0x76
 2915 0853 00       		.sleb128 0
 2916 0854 00       		.byte	0
 2917 0855 00       		.byte	0
 2918 0856 13       		.uleb128 0x13
 2919 0857 32020000 		.4byte	.LASF64
 2920 085b 0D       		.byte	0xd
 2921 085c 7A       		.byte	0x7a
 2922 085d 00000000 		.4byte	.LFB95
 2923 0861 3E000000 		.4byte	.LFE95-.LFB95
 2924 0865 01       		.uleb128 0x1
 2925 0866 9C       		.byte	0x9c
 2926 0867 C6080000 		.4byte	0x8c6
 2927 086b 10       		.uleb128 0x10
 2928 086c 2D020000 		.4byte	.LASF39
 2929 0870 0D       		.byte	0xd
 2930 0871 7B       		.byte	0x7b
 2931 0872 06020000 		.4byte	0x206
 2932 0876 9C0D0000 		.4byte	.LLST82
 2933 087a 10       		.uleb128 0x10
 2934 087b 84010000 		.4byte	.LASF40
 2935 087f 0D       		.byte	0xd
 2936 0880 7C       		.byte	0x7c
 2937 0881 96010000 		.4byte	0x196
 2938 0885 D20D0000 		.4byte	.LLST83
 2939 0889 10       		.uleb128 0x10
 2940 088a 1C050000 		.4byte	.LASF41
 2941 088e 0D       		.byte	0xd
 2942 088f 7D       		.byte	0x7d
 2943 0890 B4000000 		.4byte	0xb4
 2944 0894 060E0000 		.4byte	.LLST84
 2945 0898 15       		.uleb128 0x15
 2946 0899 DF000000 		.4byte	.LASF44
 2947 089d 0D       		.byte	0xd
 2948 089e 7F       		.byte	0x7f
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 144


 2949 089f B4000000 		.4byte	0xb4
 2950 08a3 270E0000 		.4byte	.LLST85
 2951 08a7 15       		.uleb128 0x15
 2952 08a8 58050000 		.4byte	.LASF56
 2953 08ac 0D       		.byte	0xd
 2954 08ad 80       		.byte	0x80
 2955 08ae 0A010000 		.4byte	0x10a
 2956 08b2 450E0000 		.4byte	.LLST86
 2957 08b6 15       		.uleb128 0x15
 2958 08b7 69010000 		.4byte	.LASF57
 2959 08bb 0D       		.byte	0xd
 2960 08bc 80       		.byte	0x80
 2961 08bd 0A010000 		.4byte	0x10a
 2962 08c1 580E0000 		.4byte	.LLST87
 2963 08c5 00       		.byte	0
 2964 08c6 13       		.uleb128 0x13
 2965 08c7 BF020000 		.4byte	.LASF65
 2966 08cb 0E       		.byte	0xe
 2967 08cc 2F       		.byte	0x2f
 2968 08cd 00000000 		.4byte	.LFB96
 2969 08d1 4E000000 		.4byte	.LFE96-.LFB96
 2970 08d5 01       		.uleb128 0x1
 2971 08d6 9C       		.byte	0x9c
 2972 08d7 36090000 		.4byte	0x936
 2973 08db 10       		.uleb128 0x10
 2974 08dc 2D020000 		.4byte	.LASF39
 2975 08e0 0E       		.byte	0xe
 2976 08e1 30       		.byte	0x30
 2977 08e2 5D060000 		.4byte	0x65d
 2978 08e6 6B0E0000 		.4byte	.LLST88
 2979 08ea 10       		.uleb128 0x10
 2980 08eb 84010000 		.4byte	.LASF40
 2981 08ef 0E       		.byte	0xe
 2982 08f0 31       		.byte	0x31
 2983 08f1 68060000 		.4byte	0x668
 2984 08f5 A10E0000 		.4byte	.LLST89
 2985 08f9 10       		.uleb128 0x10
 2986 08fa 1C050000 		.4byte	.LASF41
 2987 08fe 0E       		.byte	0xe
 2988 08ff 32       		.byte	0x32
 2989 0900 B4000000 		.4byte	0xb4
 2990 0904 D50E0000 		.4byte	.LLST90
 2991 0908 15       		.uleb128 0x15
 2992 0909 DF000000 		.4byte	.LASF44
 2993 090d 0E       		.byte	0xe
 2994 090e 34       		.byte	0x34
 2995 090f B4000000 		.4byte	0xb4
 2996 0913 F60E0000 		.4byte	.LLST91
 2997 0917 15       		.uleb128 0x15
 2998 0918 58050000 		.4byte	.LASF56
 2999 091c 0E       		.byte	0xe
 3000 091d 35       		.byte	0x35
 3001 091e 16010000 		.4byte	0x116
 3002 0922 140F0000 		.4byte	.LLST92
 3003 0926 15       		.uleb128 0x15
 3004 0927 69010000 		.4byte	.LASF57
 3005 092b 0E       		.byte	0xe
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 145


 3006 092c 35       		.byte	0x35
 3007 092d 16010000 		.4byte	0x116
 3008 0931 2C0F0000 		.4byte	.LLST93
 3009 0935 00       		.byte	0
 3010 0936 0F       		.uleb128 0xf
 3011 0937 D1040000 		.4byte	.LASF66
 3012 093b 0F       		.byte	0xf
 3013 093c 6D       		.byte	0x6d
 3014 093d 00000000 		.4byte	.LFB97
 3015 0941 36000000 		.4byte	.LFE97-.LFB97
 3016 0945 01       		.uleb128 0x1
 3017 0946 9C       		.byte	0x9c
 3018 0947 C2090000 		.4byte	0x9c2
 3019 094b 10       		.uleb128 0x10
 3020 094c 2D020000 		.4byte	.LASF39
 3021 0950 0F       		.byte	0xf
 3022 0951 6E       		.byte	0x6e
 3023 0952 6B020000 		.4byte	0x26b
 3024 0956 440F0000 		.4byte	.LLST94
 3025 095a 10       		.uleb128 0x10
 3026 095b 84010000 		.4byte	.LASF40
 3027 095f 0F       		.byte	0xf
 3028 0960 6F       		.byte	0x6f
 3029 0961 76020000 		.4byte	0x276
 3030 0965 870F0000 		.4byte	.LLST95
 3031 0969 10       		.uleb128 0x10
 3032 096a 1C050000 		.4byte	.LASF41
 3033 096e 0F       		.byte	0xf
 3034 096f 70       		.byte	0x70
 3035 0970 B4000000 		.4byte	0xb4
 3036 0974 BD0F0000 		.4byte	.LLST96
 3037 0978 11       		.uleb128 0x11
 3038 0979 DF000000 		.4byte	.LASF44
 3039 097d 0F       		.byte	0xf
 3040 097e 72       		.byte	0x72
 3041 097f B4000000 		.4byte	0xb4
 3042 0983 01       		.uleb128 0x1
 3043 0984 52       		.byte	0x52
 3044 0985 15       		.uleb128 0x15
 3045 0986 58050000 		.4byte	.LASF56
 3046 098a 0F       		.byte	0xf
 3047 098b 78       		.byte	0x78
 3048 098c E6000000 		.4byte	0xe6
 3049 0990 DE0F0000 		.4byte	.LLST97
 3050 0994 15       		.uleb128 0x15
 3051 0995 69010000 		.4byte	.LASF57
 3052 0999 0F       		.byte	0xf
 3053 099a 78       		.byte	0x78
 3054 099b E6000000 		.4byte	0xe6
 3055 099f FE0F0000 		.4byte	.LLST98
 3056 09a3 15       		.uleb128 0x15
 3057 09a4 00000000 		.4byte	.LASF60
 3058 09a8 0F       		.byte	0xf
 3059 09a9 79       		.byte	0x79
 3060 09aa F2000000 		.4byte	0xf2
 3061 09ae 1E100000 		.4byte	.LLST99
 3062 09b2 15       		.uleb128 0x15
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 146


 3063 09b3 05000000 		.4byte	.LASF61
 3064 09b7 0F       		.byte	0xf
 3065 09b8 79       		.byte	0x79
 3066 09b9 F2000000 		.4byte	0xf2
 3067 09bd 4D100000 		.4byte	.LLST100
 3068 09c1 00       		.byte	0
 3069 09c2 0F       		.uleb128 0xf
 3070 09c3 AE000000 		.4byte	.LASF67
 3071 09c7 10       		.byte	0x10
 3072 09c8 6C       		.byte	0x6c
 3073 09c9 00000000 		.4byte	.LFB98
 3074 09cd 4A000000 		.4byte	.LFE98-.LFB98
 3075 09d1 01       		.uleb128 0x1
 3076 09d2 9C       		.byte	0x9c
 3077 09d3 4E0A0000 		.4byte	0xa4e
 3078 09d7 10       		.uleb128 0x10
 3079 09d8 2D020000 		.4byte	.LASF39
 3080 09dc 10       		.byte	0x10
 3081 09dd 6D       		.byte	0x6d
 3082 09de DA020000 		.4byte	0x2da
 3083 09e2 7C100000 		.4byte	.LLST101
 3084 09e6 10       		.uleb128 0x10
 3085 09e7 84010000 		.4byte	.LASF40
 3086 09eb 10       		.byte	0x10
 3087 09ec 6E       		.byte	0x6e
 3088 09ed E5020000 		.4byte	0x2e5
 3089 09f1 B2100000 		.4byte	.LLST102
 3090 09f5 10       		.uleb128 0x10
 3091 09f6 1C050000 		.4byte	.LASF41
 3092 09fa 10       		.byte	0x10
 3093 09fb 6F       		.byte	0x6f
 3094 09fc B4000000 		.4byte	0xb4
 3095 0a00 E8100000 		.4byte	.LLST103
 3096 0a04 11       		.uleb128 0x11
 3097 0a05 DF000000 		.4byte	.LASF44
 3098 0a09 10       		.byte	0x10
 3099 0a0a 71       		.byte	0x71
 3100 0a0b B4000000 		.4byte	0xb4
 3101 0a0f 01       		.uleb128 0x1
 3102 0a10 52       		.byte	0x52
 3103 0a11 15       		.uleb128 0x15
 3104 0a12 58050000 		.4byte	.LASF56
 3105 0a16 10       		.byte	0x10
 3106 0a17 72       		.byte	0x72
 3107 0a18 F2000000 		.4byte	0xf2
 3108 0a1c 09110000 		.4byte	.LLST104
 3109 0a20 15       		.uleb128 0x15
 3110 0a21 69010000 		.4byte	.LASF57
 3111 0a25 10       		.byte	0x10
 3112 0a26 72       		.byte	0x72
 3113 0a27 F2000000 		.4byte	0xf2
 3114 0a2b 28110000 		.4byte	.LLST105
 3115 0a2f 15       		.uleb128 0x15
 3116 0a30 00000000 		.4byte	.LASF60
 3117 0a34 10       		.byte	0x10
 3118 0a35 73       		.byte	0x73
 3119 0a36 F2000000 		.4byte	0xf2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 147


 3120 0a3a 47110000 		.4byte	.LLST106
 3121 0a3e 15       		.uleb128 0x15
 3122 0a3f 05000000 		.4byte	.LASF61
 3123 0a43 10       		.byte	0x10
 3124 0a44 73       		.byte	0x73
 3125 0a45 F2000000 		.4byte	0xf2
 3126 0a49 5E110000 		.4byte	.LLST107
 3127 0a4d 00       		.byte	0
 3128 0a4e 13       		.uleb128 0x13
 3129 0a4f 62000000 		.4byte	.LASF68
 3130 0a53 11       		.byte	0x11
 3131 0a54 B6       		.byte	0xb6
 3132 0a55 00000000 		.4byte	.LFB99
 3133 0a59 72000000 		.4byte	.LFE99-.LFB99
 3134 0a5d 01       		.uleb128 0x1
 3135 0a5e 9C       		.byte	0x9c
 3136 0a5f E30A0000 		.4byte	0xae3
 3137 0a63 10       		.uleb128 0x10
 3138 0a64 96010000 		.4byte	.LASF47
 3139 0a68 11       		.byte	0x11
 3140 0a69 B7       		.byte	0xb7
 3141 0a6a 06020000 		.4byte	0x206
 3142 0a6e 80110000 		.4byte	.LLST108
 3143 0a72 10       		.uleb128 0x10
 3144 0a73 9C010000 		.4byte	.LASF48
 3145 0a77 11       		.byte	0x11
 3146 0a78 B8       		.byte	0xb8
 3147 0a79 06020000 		.4byte	0x206
 3148 0a7d B6110000 		.4byte	.LLST109
 3149 0a81 10       		.uleb128 0x10
 3150 0a82 84010000 		.4byte	.LASF40
 3151 0a86 11       		.byte	0x11
 3152 0a87 B9       		.byte	0xb9
 3153 0a88 96010000 		.4byte	0x196
 3154 0a8c EC110000 		.4byte	.LLST110
 3155 0a90 10       		.uleb128 0x10
 3156 0a91 1C050000 		.4byte	.LASF41
 3157 0a95 11       		.byte	0x11
 3158 0a96 BA       		.byte	0xba
 3159 0a97 B4000000 		.4byte	0xb4
 3160 0a9b 2D120000 		.4byte	.LLST111
 3161 0a9f 15       		.uleb128 0x15
 3162 0aa0 DF000000 		.4byte	.LASF44
 3163 0aa4 11       		.byte	0x11
 3164 0aa5 BC       		.byte	0xbc
 3165 0aa6 B4000000 		.4byte	0xb4
 3166 0aaa 4E120000 		.4byte	.LLST112
 3167 0aae 12       		.uleb128 0x12
 3168 0aaf 6100     		.ascii	"a\000"
 3169 0ab1 11       		.byte	0x11
 3170 0ab2 BD       		.byte	0xbd
 3171 0ab3 0A010000 		.4byte	0x10a
 3172 0ab7 6C120000 		.4byte	.LLST113
 3173 0abb 12       		.uleb128 0x12
 3174 0abc 6200     		.ascii	"b\000"
 3175 0abe 11       		.byte	0x11
 3176 0abf BD       		.byte	0xbd
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 148


 3177 0ac0 0A010000 		.4byte	0x10a
 3178 0ac4 7F120000 		.4byte	.LLST114
 3179 0ac8 12       		.uleb128 0x12
 3180 0ac9 6300     		.ascii	"c\000"
 3181 0acb 11       		.byte	0x11
 3182 0acc BD       		.byte	0xbd
 3183 0acd 0A010000 		.4byte	0x10a
 3184 0ad1 92120000 		.4byte	.LLST115
 3185 0ad5 12       		.uleb128 0x12
 3186 0ad6 6400     		.ascii	"d\000"
 3187 0ad8 11       		.byte	0x11
 3188 0ad9 BD       		.byte	0xbd
 3189 0ada 0A010000 		.4byte	0x10a
 3190 0ade B1120000 		.4byte	.LLST116
 3191 0ae2 00       		.byte	0
 3192 0ae3 13       		.uleb128 0x13
 3193 0ae4 A6020000 		.4byte	.LASF69
 3194 0ae8 12       		.byte	0x12
 3195 0ae9 31       		.byte	0x31
 3196 0aea 00000000 		.4byte	.LFB100
 3197 0aee 9C000000 		.4byte	.LFE100-.LFB100
 3198 0af2 01       		.uleb128 0x1
 3199 0af3 9C       		.byte	0x9c
 3200 0af4 780B0000 		.4byte	0xb78
 3201 0af8 10       		.uleb128 0x10
 3202 0af9 96010000 		.4byte	.LASF47
 3203 0afd 12       		.byte	0x12
 3204 0afe 32       		.byte	0x32
 3205 0aff 5D060000 		.4byte	0x65d
 3206 0b03 C4120000 		.4byte	.LLST117
 3207 0b07 10       		.uleb128 0x10
 3208 0b08 9C010000 		.4byte	.LASF48
 3209 0b0c 12       		.byte	0x12
 3210 0b0d 33       		.byte	0x33
 3211 0b0e 5D060000 		.4byte	0x65d
 3212 0b12 FA120000 		.4byte	.LLST118
 3213 0b16 10       		.uleb128 0x10
 3214 0b17 84010000 		.4byte	.LASF40
 3215 0b1b 12       		.byte	0x12
 3216 0b1c 34       		.byte	0x34
 3217 0b1d 68060000 		.4byte	0x668
 3218 0b21 30130000 		.4byte	.LLST119
 3219 0b25 10       		.uleb128 0x10
 3220 0b26 1C050000 		.4byte	.LASF41
 3221 0b2a 12       		.byte	0x12
 3222 0b2b 35       		.byte	0x35
 3223 0b2c B4000000 		.4byte	0xb4
 3224 0b30 71130000 		.4byte	.LLST120
 3225 0b34 15       		.uleb128 0x15
 3226 0b35 DF000000 		.4byte	.LASF44
 3227 0b39 12       		.byte	0x12
 3228 0b3a 37       		.byte	0x37
 3229 0b3b B4000000 		.4byte	0xb4
 3230 0b3f 92130000 		.4byte	.LLST121
 3231 0b43 12       		.uleb128 0x12
 3232 0b44 6100     		.ascii	"a\000"
 3233 0b46 12       		.byte	0x12
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 149


 3234 0b47 38       		.byte	0x38
 3235 0b48 16010000 		.4byte	0x116
 3236 0b4c B0130000 		.4byte	.LLST122
 3237 0b50 12       		.uleb128 0x12
 3238 0b51 6200     		.ascii	"b\000"
 3239 0b53 12       		.byte	0x12
 3240 0b54 38       		.byte	0x38
 3241 0b55 16010000 		.4byte	0x116
 3242 0b59 E0130000 		.4byte	.LLST123
 3243 0b5d 12       		.uleb128 0x12
 3244 0b5e 6300     		.ascii	"c\000"
 3245 0b60 12       		.byte	0x12
 3246 0b61 38       		.byte	0x38
 3247 0b62 16010000 		.4byte	0x116
 3248 0b66 04140000 		.4byte	.LLST124
 3249 0b6a 12       		.uleb128 0x12
 3250 0b6b 6400     		.ascii	"d\000"
 3251 0b6d 12       		.byte	0x12
 3252 0b6e 38       		.byte	0x38
 3253 0b6f 16010000 		.4byte	0x116
 3254 0b73 1C140000 		.4byte	.LLST125
 3255 0b77 00       		.byte	0
 3256 0b78 0F       		.uleb128 0xf
 3257 0b79 B8040000 		.4byte	.LASF70
 3258 0b7d 13       		.byte	0x13
 3259 0b7e AD       		.byte	0xad
 3260 0b7f 00000000 		.4byte	.LFB101
 3261 0b83 4E000000 		.4byte	.LFE101-.LFB101
 3262 0b87 01       		.uleb128 0x1
 3263 0b88 9C       		.byte	0x9c
 3264 0b89 0B0C0000 		.4byte	0xc0b
 3265 0b8d 10       		.uleb128 0x10
 3266 0b8e 96010000 		.4byte	.LASF47
 3267 0b92 13       		.byte	0x13
 3268 0b93 AE       		.byte	0xae
 3269 0b94 6B020000 		.4byte	0x26b
 3270 0b98 58140000 		.4byte	.LLST126
 3271 0b9c 10       		.uleb128 0x10
 3272 0b9d 9C010000 		.4byte	.LASF48
 3273 0ba1 13       		.byte	0x13
 3274 0ba2 AF       		.byte	0xaf
 3275 0ba3 6B020000 		.4byte	0x26b
 3276 0ba7 9B140000 		.4byte	.LLST127
 3277 0bab 10       		.uleb128 0x10
 3278 0bac 84010000 		.4byte	.LASF40
 3279 0bb0 13       		.byte	0x13
 3280 0bb1 B0       		.byte	0xb0
 3281 0bb2 76020000 		.4byte	0x276
 3282 0bb6 DE140000 		.4byte	.LLST128
 3283 0bba 10       		.uleb128 0x10
 3284 0bbb 1C050000 		.4byte	.LASF41
 3285 0bbf 13       		.byte	0x13
 3286 0bc0 B1       		.byte	0xb1
 3287 0bc1 B4000000 		.4byte	0xb4
 3288 0bc5 14150000 		.4byte	.LLST129
 3289 0bc9 11       		.uleb128 0x11
 3290 0bca DF000000 		.4byte	.LASF44
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 150


 3291 0bce 13       		.byte	0x13
 3292 0bcf B3       		.byte	0xb3
 3293 0bd0 B4000000 		.4byte	0xb4
 3294 0bd4 01       		.uleb128 0x1
 3295 0bd5 53       		.byte	0x53
 3296 0bd6 12       		.uleb128 0x12
 3297 0bd7 6100     		.ascii	"a\000"
 3298 0bd9 13       		.byte	0x13
 3299 0bda B4       		.byte	0xb4
 3300 0bdb E6000000 		.4byte	0xe6
 3301 0bdf 35150000 		.4byte	.LLST130
 3302 0be3 12       		.uleb128 0x12
 3303 0be4 6200     		.ascii	"b\000"
 3304 0be6 13       		.byte	0x13
 3305 0be7 B4       		.byte	0xb4
 3306 0be8 E6000000 		.4byte	0xe6
 3307 0bec 60150000 		.4byte	.LLST131
 3308 0bf0 12       		.uleb128 0x12
 3309 0bf1 6300     		.ascii	"c\000"
 3310 0bf3 13       		.byte	0x13
 3311 0bf4 B4       		.byte	0xb4
 3312 0bf5 E6000000 		.4byte	0xe6
 3313 0bf9 8B150000 		.4byte	.LLST132
 3314 0bfd 12       		.uleb128 0x12
 3315 0bfe 6400     		.ascii	"d\000"
 3316 0c00 13       		.byte	0x13
 3317 0c01 B4       		.byte	0xb4
 3318 0c02 E6000000 		.4byte	0xe6
 3319 0c06 B6150000 		.4byte	.LLST133
 3320 0c0a 00       		.byte	0
 3321 0c0b 0F       		.uleb128 0xf
 3322 0c0c 49000000 		.4byte	.LASF71
 3323 0c10 14       		.byte	0x14
 3324 0c11 A8       		.byte	0xa8
 3325 0c12 00000000 		.4byte	.LFB102
 3326 0c16 AE000000 		.4byte	.LFE102-.LFB102
 3327 0c1a 01       		.uleb128 0x1
 3328 0c1b 9C       		.byte	0x9c
 3329 0c1c A00C0000 		.4byte	0xca0
 3330 0c20 10       		.uleb128 0x10
 3331 0c21 96010000 		.4byte	.LASF47
 3332 0c25 14       		.byte	0x14
 3333 0c26 A9       		.byte	0xa9
 3334 0c27 DA020000 		.4byte	0x2da
 3335 0c2b E1150000 		.4byte	.LLST134
 3336 0c2f 10       		.uleb128 0x10
 3337 0c30 9C010000 		.4byte	.LASF48
 3338 0c34 14       		.byte	0x14
 3339 0c35 AA       		.byte	0xaa
 3340 0c36 DA020000 		.4byte	0x2da
 3341 0c3a 17160000 		.4byte	.LLST135
 3342 0c3e 10       		.uleb128 0x10
 3343 0c3f 84010000 		.4byte	.LASF40
 3344 0c43 14       		.byte	0x14
 3345 0c44 AB       		.byte	0xab
 3346 0c45 E5020000 		.4byte	0x2e5
 3347 0c49 4D160000 		.4byte	.LLST136
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 151


 3348 0c4d 10       		.uleb128 0x10
 3349 0c4e 1C050000 		.4byte	.LASF41
 3350 0c52 14       		.byte	0x14
 3351 0c53 AC       		.byte	0xac
 3352 0c54 B4000000 		.4byte	0xb4
 3353 0c58 96160000 		.4byte	.LLST137
 3354 0c5c 15       		.uleb128 0x15
 3355 0c5d DF000000 		.4byte	.LASF44
 3356 0c61 14       		.byte	0x14
 3357 0c62 AE       		.byte	0xae
 3358 0c63 B4000000 		.4byte	0xb4
 3359 0c67 B7160000 		.4byte	.LLST138
 3360 0c6b 12       		.uleb128 0x12
 3361 0c6c 6100     		.ascii	"a\000"
 3362 0c6e 14       		.byte	0x14
 3363 0c6f AF       		.byte	0xaf
 3364 0c70 F2000000 		.4byte	0xf2
 3365 0c74 F8160000 		.4byte	.LLST139
 3366 0c78 12       		.uleb128 0x12
 3367 0c79 6200     		.ascii	"b\000"
 3368 0c7b 14       		.byte	0x14
 3369 0c7c AF       		.byte	0xaf
 3370 0c7d F2000000 		.4byte	0xf2
 3371 0c81 0B170000 		.4byte	.LLST140
 3372 0c85 12       		.uleb128 0x12
 3373 0c86 6300     		.ascii	"c\000"
 3374 0c88 14       		.byte	0x14
 3375 0c89 AF       		.byte	0xaf
 3376 0c8a F2000000 		.4byte	0xf2
 3377 0c8e 1E170000 		.4byte	.LLST141
 3378 0c92 12       		.uleb128 0x12
 3379 0c93 6400     		.ascii	"d\000"
 3380 0c95 14       		.byte	0x14
 3381 0c96 AF       		.byte	0xaf
 3382 0c97 F2000000 		.4byte	0xf2
 3383 0c9b 31170000 		.4byte	.LLST142
 3384 0c9f 00       		.byte	0
 3385 0ca0 13       		.uleb128 0x13
 3386 0ca1 F0010000 		.4byte	.LASF72
 3387 0ca5 15       		.byte	0x15
 3388 0ca6 7E       		.byte	0x7e
 3389 0ca7 00000000 		.4byte	.LFB103
 3390 0cab 42000000 		.4byte	.LFE103-.LFB103
 3391 0caf 01       		.uleb128 0x1
 3392 0cb0 9C       		.byte	0x9c
 3393 0cb1 0F0D0000 		.4byte	0xd0f
 3394 0cb5 10       		.uleb128 0x10
 3395 0cb6 93000000 		.4byte	.LASF73
 3396 0cba 15       		.byte	0x15
 3397 0cbb 7F       		.byte	0x7f
 3398 0cbc 06020000 		.4byte	0x206
 3399 0cc0 44170000 		.4byte	.LLST143
 3400 0cc4 10       		.uleb128 0x10
 3401 0cc5 1F000000 		.4byte	.LASF74
 3402 0cc9 15       		.byte	0x15
 3403 0cca 80       		.byte	0x80
 3404 0ccb 06020000 		.4byte	0x206
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 152


 3405 0ccf 85170000 		.4byte	.LLST144
 3406 0cd3 10       		.uleb128 0x10
 3407 0cd4 4E050000 		.4byte	.LASF75
 3408 0cd8 15       		.byte	0x15
 3409 0cd9 81       		.byte	0x81
 3410 0cda 96010000 		.4byte	0x196
 3411 0cde AE170000 		.4byte	.LLST145
 3412 0ce2 10       		.uleb128 0x10
 3413 0ce3 1C050000 		.4byte	.LASF41
 3414 0ce7 15       		.byte	0x15
 3415 0ce8 82       		.byte	0x82
 3416 0ce9 B4000000 		.4byte	0xb4
 3417 0ced EF170000 		.4byte	.LLST146
 3418 0cf1 15       		.uleb128 0x15
 3419 0cf2 DF000000 		.4byte	.LASF44
 3420 0cf6 15       		.byte	0x15
 3421 0cf7 84       		.byte	0x84
 3422 0cf8 B4000000 		.4byte	0xb4
 3423 0cfc 10180000 		.4byte	.LLST147
 3424 0d00 12       		.uleb128 0x12
 3425 0d01 696E00   		.ascii	"in\000"
 3426 0d04 15       		.byte	0x15
 3427 0d05 85       		.byte	0x85
 3428 0d06 0A010000 		.4byte	0x10a
 3429 0d0a 2E180000 		.4byte	.LLST148
 3430 0d0e 00       		.byte	0
 3431 0d0f 0F       		.uleb128 0xf
 3432 0d10 7B000000 		.4byte	.LASF76
 3433 0d14 16       		.byte	0x16
 3434 0d15 6C       		.byte	0x6c
 3435 0d16 00000000 		.4byte	.LFB104
 3436 0d1a 3E000000 		.4byte	.LFE104-.LFB104
 3437 0d1e 01       		.uleb128 0x1
 3438 0d1f 9C       		.byte	0x9c
 3439 0d20 CC0D0000 		.4byte	0xdcc
 3440 0d24 10       		.uleb128 0x10
 3441 0d25 93000000 		.4byte	.LASF73
 3442 0d29 16       		.byte	0x16
 3443 0d2a 6D       		.byte	0x6d
 3444 0d2b 6B020000 		.4byte	0x26b
 3445 0d2f 41180000 		.4byte	.LLST149
 3446 0d33 10       		.uleb128 0x10
 3447 0d34 1F000000 		.4byte	.LASF74
 3448 0d38 16       		.byte	0x16
 3449 0d39 6E       		.byte	0x6e
 3450 0d3a 6B020000 		.4byte	0x26b
 3451 0d3e 77180000 		.4byte	.LLST150
 3452 0d42 10       		.uleb128 0x10
 3453 0d43 4E050000 		.4byte	.LASF75
 3454 0d47 16       		.byte	0x16
 3455 0d48 6F       		.byte	0x6f
 3456 0d49 76020000 		.4byte	0x276
 3457 0d4d A0180000 		.4byte	.LLST151
 3458 0d51 10       		.uleb128 0x10
 3459 0d52 1C050000 		.4byte	.LASF41
 3460 0d56 16       		.byte	0x16
 3461 0d57 70       		.byte	0x70
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 153


 3462 0d58 B4000000 		.4byte	0xb4
 3463 0d5c D6180000 		.4byte	.LLST152
 3464 0d60 11       		.uleb128 0x11
 3465 0d61 DF000000 		.4byte	.LASF44
 3466 0d65 16       		.byte	0x16
 3467 0d66 72       		.byte	0x72
 3468 0d67 B4000000 		.4byte	0xb4
 3469 0d6b 01       		.uleb128 0x1
 3470 0d6c 53       		.byte	0x53
 3471 0d6d 12       		.uleb128 0x12
 3472 0d6e 696E00   		.ascii	"in\000"
 3473 0d71 16       		.byte	0x16
 3474 0d72 73       		.byte	0x73
 3475 0d73 E6000000 		.4byte	0xe6
 3476 0d77 F7180000 		.4byte	.LLST153
 3477 0d7b 1C       		.uleb128 0x1c
 3478 0d7c 06000000 		.4byte	.LBB10
 3479 0d80 14000000 		.4byte	.LBE10-.LBB10
 3480 0d84 A70D0000 		.4byte	0xda7
 3481 0d88 15       		.uleb128 0x15
 3482 0d89 F6000000 		.4byte	.LASF77
 3483 0d8d 16       		.byte	0x16
 3484 0d8e E2       		.byte	0xe2
 3485 0d8f A9000000 		.4byte	0xa9
 3486 0d93 16190000 		.4byte	.LLST154
 3487 0d97 15       		.uleb128 0x15
 3488 0d98 15050000 		.4byte	.LASF78
 3489 0d9c 16       		.byte	0x16
 3490 0d9d E2       		.byte	0xe2
 3491 0d9e A9000000 		.4byte	0xa9
 3492 0da2 29190000 		.4byte	.LLST155
 3493 0da6 00       		.byte	0
 3494 0da7 1D       		.uleb128 0x1d
 3495 0da8 00000000 		.4byte	.Ldebug_ranges0+0
 3496 0dac 15       		.uleb128 0x15
 3497 0dad F6000000 		.4byte	.LASF77
 3498 0db1 16       		.byte	0x16
 3499 0db2 E3       		.byte	0xe3
 3500 0db3 A9000000 		.4byte	0xa9
 3501 0db7 54190000 		.4byte	.LLST156
 3502 0dbb 15       		.uleb128 0x15
 3503 0dbc 15050000 		.4byte	.LASF78
 3504 0dc0 16       		.byte	0x16
 3505 0dc1 E3       		.byte	0xe3
 3506 0dc2 A9000000 		.4byte	0xa9
 3507 0dc6 67190000 		.4byte	.LLST157
 3508 0dca 00       		.byte	0
 3509 0dcb 00       		.byte	0
 3510 0dcc 0F       		.uleb128 0xf
 3511 0dcd 08020000 		.4byte	.LASF79
 3512 0dd1 17       		.byte	0x17
 3513 0dd2 6C       		.byte	0x6c
 3514 0dd3 00000000 		.4byte	.LFB105
 3515 0dd7 7A000000 		.4byte	.LFE105-.LFB105
 3516 0ddb 01       		.uleb128 0x1
 3517 0ddc 9C       		.byte	0x9c
 3518 0ddd 6F0E0000 		.4byte	0xe6f
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 154


 3519 0de1 10       		.uleb128 0x10
 3520 0de2 93000000 		.4byte	.LASF73
 3521 0de6 17       		.byte	0x17
 3522 0de7 6D       		.byte	0x6d
 3523 0de8 DA020000 		.4byte	0x2da
 3524 0dec 92190000 		.4byte	.LLST158
 3525 0df0 10       		.uleb128 0x10
 3526 0df1 1F000000 		.4byte	.LASF74
 3527 0df5 17       		.byte	0x17
 3528 0df6 6E       		.byte	0x6e
 3529 0df7 DA020000 		.4byte	0x2da
 3530 0dfb C8190000 		.4byte	.LLST159
 3531 0dff 10       		.uleb128 0x10
 3532 0e00 4E050000 		.4byte	.LASF75
 3533 0e04 17       		.byte	0x17
 3534 0e05 6F       		.byte	0x6f
 3535 0e06 E5020000 		.4byte	0x2e5
 3536 0e0a F1190000 		.4byte	.LLST160
 3537 0e0e 10       		.uleb128 0x10
 3538 0e0f 1C050000 		.4byte	.LASF41
 3539 0e13 17       		.byte	0x17
 3540 0e14 70       		.byte	0x70
 3541 0e15 B4000000 		.4byte	0xb4
 3542 0e19 271A0000 		.4byte	.LLST161
 3543 0e1d 11       		.uleb128 0x11
 3544 0e1e DF000000 		.4byte	.LASF44
 3545 0e22 17       		.byte	0x17
 3546 0e23 72       		.byte	0x72
 3547 0e24 B4000000 		.4byte	0xb4
 3548 0e28 01       		.uleb128 0x1
 3549 0e29 53       		.byte	0x53
 3550 0e2a 12       		.uleb128 0x12
 3551 0e2b 696E00   		.ascii	"in\000"
 3552 0e2e 17       		.byte	0x17
 3553 0e2f 73       		.byte	0x73
 3554 0e30 F2000000 		.4byte	0xf2
 3555 0e34 481A0000 		.4byte	.LLST162
 3556 0e38 1E       		.uleb128 0x1e
 3557 0e39 9C010000 		.4byte	0x19c
 3558 0e3d 2A000000 		.4byte	.LBB13
 3559 0e41 0C000000 		.4byte	.LBE13-.LBB13
 3560 0e45 17       		.byte	0x17
 3561 0e46 BF       		.byte	0xbf
 3562 0e47 550E0000 		.4byte	0xe55
 3563 0e4b 17       		.uleb128 0x17
 3564 0e4c AC010000 		.4byte	0x1ac
 3565 0e50 5B1A0000 		.4byte	.LLST163
 3566 0e54 00       		.byte	0
 3567 0e55 1F       		.uleb128 0x1f
 3568 0e56 9C010000 		.4byte	0x19c
 3569 0e5a 5C000000 		.4byte	.LBB15
 3570 0e5e 0C000000 		.4byte	.LBE15-.LBB15
 3571 0e62 17       		.byte	0x17
 3572 0e63 C0       		.byte	0xc0
 3573 0e64 17       		.uleb128 0x17
 3574 0e65 AC010000 		.4byte	0x1ac
 3575 0e69 731A0000 		.4byte	.LLST164
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 155


 3576 0e6d 00       		.byte	0
 3577 0e6e 00       		.byte	0
 3578 0e6f 03       		.uleb128 0x3
 3579 0e70 0A000000 		.4byte	.LASF80
 3580 0e74 1C       		.byte	0x1c
 3581 0e75 8B       		.byte	0x8b
 3582 0e76 ED0E0000 		.4byte	0xeed
 3583 0e7a 0C       		.uleb128 0xc
 3584 0e7b 04       		.byte	0x4
 3585 0e7c 800E0000 		.4byte	0xe80
 3586 0e80 0B       		.uleb128 0xb
 3587 0e81 B4000000 		.4byte	0xb4
 3588 0e85 0C       		.uleb128 0xc
 3589 0e86 04       		.byte	0x4
 3590 0e87 B4000000 		.4byte	0xb4
 3591 0e8b 20       		.uleb128 0x20
 3592 0e8c DB010000 		.4byte	.LASF81
 3593 0e90 1C       		.byte	0x1c
 3594 0e91 92       		.byte	0x92
 3595 0e92 960E0000 		.4byte	0xe96
 3596 0e96 0B       		.uleb128 0xb
 3597 0e97 6F0E0000 		.4byte	0xe6f
 3598 0e9b 20       		.uleb128 0x20
 3599 0e9c 06010000 		.4byte	.LASF82
 3600 0ea0 1C       		.byte	0x1c
 3601 0ea1 93       		.byte	0x93
 3602 0ea2 960E0000 		.4byte	0xe96
 3603 0ea6 03       		.uleb128 0x3
 3604 0ea7 3A000000 		.4byte	.LASF83
 3605 0eab 1C       		.byte	0x1c
 3606 0eac 90       		.byte	0x90
 3607 0ead CC0E0000 		.4byte	0xecc
 3608 0eb1 20       		.uleb128 0x20
 3609 0eb2 8B050000 		.4byte	.LASF84
 3610 0eb6 1C       		.byte	0x1c
 3611 0eb7 94       		.byte	0x94
 3612 0eb8 BC0E0000 		.4byte	0xebc
 3613 0ebc 0B       		.uleb128 0xb
 3614 0ebd A60E0000 		.4byte	0xea6
 3615 0ec1 20       		.uleb128 0x20
 3616 0ec2 02050000 		.4byte	.LASF85
 3617 0ec6 1C       		.byte	0x1c
 3618 0ec7 95       		.byte	0x95
 3619 0ec8 BC0E0000 		.4byte	0xebc
 3620 0ecc 21       		.uleb128 0x21
 3621 0ecd 08       		.byte	0x8
 3622 0ece 1C       		.byte	0x1c
 3623 0ecf 8D       		.byte	0x8d
 3624 0ed0 ED0E0000 		.4byte	0xeed
 3625 0ed4 22       		.uleb128 0x22
 3626 0ed5 54030000 		.4byte	.LASF86
 3627 0ed9 1C       		.byte	0x1c
 3628 0eda 8E       		.byte	0x8e
 3629 0edb 850E0000 		.4byte	0xe85
 3630 0edf 00       		.byte	0
 3631 0ee0 22       		.uleb128 0x22
 3632 0ee1 CE030000 		.4byte	.LASF87
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 156


 3633 0ee5 1C       		.byte	0x1c
 3634 0ee6 8F       		.byte	0x8f
 3635 0ee7 B4000000 		.4byte	0xb4
 3636 0eeb 04       		.byte	0x4
 3637 0eec 00       		.byte	0
 3638 0eed 21       		.uleb128 0x21
 3639 0eee 0C       		.byte	0xc
 3640 0eef 1C       		.byte	0x1c
 3641 0ef0 87       		.byte	0x87
 3642 0ef1 1A0F0000 		.4byte	0xf1a
 3643 0ef5 23       		.uleb128 0x23
 3644 0ef6 73726300 		.ascii	"src\000"
 3645 0efa 1C       		.byte	0x1c
 3646 0efb 88       		.byte	0x88
 3647 0efc 7A0E0000 		.4byte	0xe7a
 3648 0f00 00       		.byte	0
 3649 0f01 22       		.uleb128 0x22
 3650 0f02 54030000 		.4byte	.LASF86
 3651 0f06 1C       		.byte	0x1c
 3652 0f07 89       		.byte	0x89
 3653 0f08 850E0000 		.4byte	0xe85
 3654 0f0c 04       		.byte	0x4
 3655 0f0d 22       		.uleb128 0x22
 3656 0f0e CE030000 		.4byte	.LASF87
 3657 0f12 1C       		.byte	0x1c
 3658 0f13 8A       		.byte	0x8a
 3659 0f14 B4000000 		.4byte	0xb4
 3660 0f18 08       		.byte	0x8
 3661 0f19 00       		.byte	0
 3662 0f1a 24       		.uleb128 0x24
 3663 0f1b F0000000 		.4byte	.LASF88
 3664 0f1f 1D       		.byte	0x1d
 3665 0f20 5401     		.2byte	0x154
 3666 0f22 25000000 		.4byte	0x25
 3667 0f26 300F0000 		.4byte	0xf30
 3668 0f2a 25       		.uleb128 0x25
 3669 0f2b 25000000 		.4byte	0x25
 3670 0f2f 00       		.byte	0
 3671 0f30 26       		.uleb128 0x26
 3672 0f31 49050000 		.4byte	.LASF89
 3673 0f35 1D       		.byte	0x1d
 3674 0f36 86       		.byte	0x86
 3675 0f37 D8000000 		.4byte	0xd8
 3676 0f3b 450F0000 		.4byte	0xf45
 3677 0f3f 25       		.uleb128 0x25
 3678 0f40 D8000000 		.4byte	0xd8
 3679 0f44 00       		.byte	0
 3680 0f45 24       		.uleb128 0x24
 3681 0f46 77010000 		.4byte	.LASF90
 3682 0f4a 08       		.byte	0x8
 3683 0f4b 2A01     		.2byte	0x12a
 3684 0f4d 5C010000 		.4byte	0x15c
 3685 0f51 600F0000 		.4byte	0xf60
 3686 0f55 25       		.uleb128 0x25
 3687 0f56 F2000000 		.4byte	0xf2
 3688 0f5a 25       		.uleb128 0x25
 3689 0f5b E5020000 		.4byte	0x2e5
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 157


 3690 0f5f 00       		.byte	0
 3691 0f60 27       		.uleb128 0x27
 3692 0f61 37030000 		.4byte	.LASF94
 3693 0f65 08       		.byte	0x8
 3694 0f66 3701     		.2byte	0x137
 3695 0f68 5C010000 		.4byte	0x15c
 3696 0f6c 25       		.uleb128 0x25
 3697 0f6d E6000000 		.4byte	0xe6
 3698 0f71 25       		.uleb128 0x25
 3699 0f72 76020000 		.4byte	0x276
 3700 0f76 00       		.byte	0
 3701 0f77 00       		.byte	0
 3702              		.section	.debug_abbrev,"",%progbits
 3703              	.Ldebug_abbrev0:
 3704 0000 01       		.uleb128 0x1
 3705 0001 11       		.uleb128 0x11
 3706 0002 01       		.byte	0x1
 3707 0003 25       		.uleb128 0x25
 3708 0004 0E       		.uleb128 0xe
 3709 0005 13       		.uleb128 0x13
 3710 0006 0B       		.uleb128 0xb
 3711 0007 03       		.uleb128 0x3
 3712 0008 0E       		.uleb128 0xe
 3713 0009 1B       		.uleb128 0x1b
 3714 000a 0E       		.uleb128 0xe
 3715 000b 55       		.uleb128 0x55
 3716 000c 17       		.uleb128 0x17
 3717 000d 11       		.uleb128 0x11
 3718 000e 01       		.uleb128 0x1
 3719 000f 10       		.uleb128 0x10
 3720 0010 17       		.uleb128 0x17
 3721 0011 00       		.byte	0
 3722 0012 00       		.byte	0
 3723 0013 02       		.uleb128 0x2
 3724 0014 24       		.uleb128 0x24
 3725 0015 00       		.byte	0
 3726 0016 0B       		.uleb128 0xb
 3727 0017 0B       		.uleb128 0xb
 3728 0018 3E       		.uleb128 0x3e
 3729 0019 0B       		.uleb128 0xb
 3730 001a 03       		.uleb128 0x3
 3731 001b 0E       		.uleb128 0xe
 3732 001c 00       		.byte	0
 3733 001d 00       		.byte	0
 3734 001e 03       		.uleb128 0x3
 3735 001f 16       		.uleb128 0x16
 3736 0020 00       		.byte	0
 3737 0021 03       		.uleb128 0x3
 3738 0022 0E       		.uleb128 0xe
 3739 0023 3A       		.uleb128 0x3a
 3740 0024 0B       		.uleb128 0xb
 3741 0025 3B       		.uleb128 0x3b
 3742 0026 0B       		.uleb128 0xb
 3743 0027 49       		.uleb128 0x49
 3744 0028 13       		.uleb128 0x13
 3745 0029 00       		.byte	0
 3746 002a 00       		.byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 158


 3747 002b 04       		.uleb128 0x4
 3748 002c 24       		.uleb128 0x24
 3749 002d 00       		.byte	0
 3750 002e 0B       		.uleb128 0xb
 3751 002f 0B       		.uleb128 0xb
 3752 0030 3E       		.uleb128 0x3e
 3753 0031 0B       		.uleb128 0xb
 3754 0032 03       		.uleb128 0x3
 3755 0033 08       		.uleb128 0x8
 3756 0034 00       		.byte	0
 3757 0035 00       		.byte	0
 3758 0036 05       		.uleb128 0x5
 3759 0037 16       		.uleb128 0x16
 3760 0038 00       		.byte	0
 3761 0039 03       		.uleb128 0x3
 3762 003a 0E       		.uleb128 0xe
 3763 003b 3A       		.uleb128 0x3a
 3764 003c 0B       		.uleb128 0xb
 3765 003d 3B       		.uleb128 0x3b
 3766 003e 05       		.uleb128 0x5
 3767 003f 49       		.uleb128 0x49
 3768 0040 13       		.uleb128 0x13
 3769 0041 00       		.byte	0
 3770 0042 00       		.byte	0
 3771 0043 06       		.uleb128 0x6
 3772 0044 04       		.uleb128 0x4
 3773 0045 01       		.byte	0x1
 3774 0046 0B       		.uleb128 0xb
 3775 0047 0B       		.uleb128 0xb
 3776 0048 3A       		.uleb128 0x3a
 3777 0049 0B       		.uleb128 0xb
 3778 004a 3B       		.uleb128 0x3b
 3779 004b 05       		.uleb128 0x5
 3780 004c 01       		.uleb128 0x1
 3781 004d 13       		.uleb128 0x13
 3782 004e 00       		.byte	0
 3783 004f 00       		.byte	0
 3784 0050 07       		.uleb128 0x7
 3785 0051 28       		.uleb128 0x28
 3786 0052 00       		.byte	0
 3787 0053 03       		.uleb128 0x3
 3788 0054 0E       		.uleb128 0xe
 3789 0055 1C       		.uleb128 0x1c
 3790 0056 0D       		.uleb128 0xd
 3791 0057 00       		.byte	0
 3792 0058 00       		.byte	0
 3793 0059 08       		.uleb128 0x8
 3794 005a 2E       		.uleb128 0x2e
 3795 005b 01       		.byte	0x1
 3796 005c 03       		.uleb128 0x3
 3797 005d 0E       		.uleb128 0xe
 3798 005e 3A       		.uleb128 0x3a
 3799 005f 0B       		.uleb128 0xb
 3800 0060 3B       		.uleb128 0x3b
 3801 0061 05       		.uleb128 0x5
 3802 0062 27       		.uleb128 0x27
 3803 0063 19       		.uleb128 0x19
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 159


 3804 0064 49       		.uleb128 0x49
 3805 0065 13       		.uleb128 0x13
 3806 0066 20       		.uleb128 0x20
 3807 0067 0B       		.uleb128 0xb
 3808 0068 01       		.uleb128 0x1
 3809 0069 13       		.uleb128 0x13
 3810 006a 00       		.byte	0
 3811 006b 00       		.byte	0
 3812 006c 09       		.uleb128 0x9
 3813 006d 05       		.uleb128 0x5
 3814 006e 00       		.byte	0
 3815 006f 03       		.uleb128 0x3
 3816 0070 08       		.uleb128 0x8
 3817 0071 3A       		.uleb128 0x3a
 3818 0072 0B       		.uleb128 0xb
 3819 0073 3B       		.uleb128 0x3b
 3820 0074 05       		.uleb128 0x5
 3821 0075 49       		.uleb128 0x49
 3822 0076 13       		.uleb128 0x13
 3823 0077 00       		.byte	0
 3824 0078 00       		.byte	0
 3825 0079 0A       		.uleb128 0xa
 3826 007a 05       		.uleb128 0x5
 3827 007b 00       		.byte	0
 3828 007c 03       		.uleb128 0x3
 3829 007d 0E       		.uleb128 0xe
 3830 007e 3A       		.uleb128 0x3a
 3831 007f 0B       		.uleb128 0xb
 3832 0080 3B       		.uleb128 0x3b
 3833 0081 05       		.uleb128 0x5
 3834 0082 49       		.uleb128 0x49
 3835 0083 13       		.uleb128 0x13
 3836 0084 00       		.byte	0
 3837 0085 00       		.byte	0
 3838 0086 0B       		.uleb128 0xb
 3839 0087 26       		.uleb128 0x26
 3840 0088 00       		.byte	0
 3841 0089 49       		.uleb128 0x49
 3842 008a 13       		.uleb128 0x13
 3843 008b 00       		.byte	0
 3844 008c 00       		.byte	0
 3845 008d 0C       		.uleb128 0xc
 3846 008e 0F       		.uleb128 0xf
 3847 008f 00       		.byte	0
 3848 0090 0B       		.uleb128 0xb
 3849 0091 0B       		.uleb128 0xb
 3850 0092 49       		.uleb128 0x49
 3851 0093 13       		.uleb128 0x13
 3852 0094 00       		.byte	0
 3853 0095 00       		.byte	0
 3854 0096 0D       		.uleb128 0xd
 3855 0097 2E       		.uleb128 0x2e
 3856 0098 01       		.byte	0x1
 3857 0099 03       		.uleb128 0x3
 3858 009a 0E       		.uleb128 0xe
 3859 009b 3A       		.uleb128 0x3a
 3860 009c 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 160


 3861 009d 3B       		.uleb128 0x3b
 3862 009e 0B       		.uleb128 0xb
 3863 009f 27       		.uleb128 0x27
 3864 00a0 19       		.uleb128 0x19
 3865 00a1 49       		.uleb128 0x49
 3866 00a2 13       		.uleb128 0x13
 3867 00a3 20       		.uleb128 0x20
 3868 00a4 0B       		.uleb128 0xb
 3869 00a5 01       		.uleb128 0x1
 3870 00a6 13       		.uleb128 0x13
 3871 00a7 00       		.byte	0
 3872 00a8 00       		.byte	0
 3873 00a9 0E       		.uleb128 0xe
 3874 00aa 05       		.uleb128 0x5
 3875 00ab 00       		.byte	0
 3876 00ac 03       		.uleb128 0x3
 3877 00ad 08       		.uleb128 0x8
 3878 00ae 3A       		.uleb128 0x3a
 3879 00af 0B       		.uleb128 0xb
 3880 00b0 3B       		.uleb128 0x3b
 3881 00b1 0B       		.uleb128 0xb
 3882 00b2 49       		.uleb128 0x49
 3883 00b3 13       		.uleb128 0x13
 3884 00b4 00       		.byte	0
 3885 00b5 00       		.byte	0
 3886 00b6 0F       		.uleb128 0xf
 3887 00b7 2E       		.uleb128 0x2e
 3888 00b8 01       		.byte	0x1
 3889 00b9 3F       		.uleb128 0x3f
 3890 00ba 19       		.uleb128 0x19
 3891 00bb 03       		.uleb128 0x3
 3892 00bc 0E       		.uleb128 0xe
 3893 00bd 3A       		.uleb128 0x3a
 3894 00be 0B       		.uleb128 0xb
 3895 00bf 3B       		.uleb128 0x3b
 3896 00c0 0B       		.uleb128 0xb
 3897 00c1 27       		.uleb128 0x27
 3898 00c2 19       		.uleb128 0x19
 3899 00c3 11       		.uleb128 0x11
 3900 00c4 01       		.uleb128 0x1
 3901 00c5 12       		.uleb128 0x12
 3902 00c6 06       		.uleb128 0x6
 3903 00c7 40       		.uleb128 0x40
 3904 00c8 18       		.uleb128 0x18
 3905 00c9 9742     		.uleb128 0x2117
 3906 00cb 19       		.uleb128 0x19
 3907 00cc 01       		.uleb128 0x1
 3908 00cd 13       		.uleb128 0x13
 3909 00ce 00       		.byte	0
 3910 00cf 00       		.byte	0
 3911 00d0 10       		.uleb128 0x10
 3912 00d1 05       		.uleb128 0x5
 3913 00d2 00       		.byte	0
 3914 00d3 03       		.uleb128 0x3
 3915 00d4 0E       		.uleb128 0xe
 3916 00d5 3A       		.uleb128 0x3a
 3917 00d6 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 161


 3918 00d7 3B       		.uleb128 0x3b
 3919 00d8 0B       		.uleb128 0xb
 3920 00d9 49       		.uleb128 0x49
 3921 00da 13       		.uleb128 0x13
 3922 00db 02       		.uleb128 0x2
 3923 00dc 17       		.uleb128 0x17
 3924 00dd 00       		.byte	0
 3925 00de 00       		.byte	0
 3926 00df 11       		.uleb128 0x11
 3927 00e0 34       		.uleb128 0x34
 3928 00e1 00       		.byte	0
 3929 00e2 03       		.uleb128 0x3
 3930 00e3 0E       		.uleb128 0xe
 3931 00e4 3A       		.uleb128 0x3a
 3932 00e5 0B       		.uleb128 0xb
 3933 00e6 3B       		.uleb128 0x3b
 3934 00e7 0B       		.uleb128 0xb
 3935 00e8 49       		.uleb128 0x49
 3936 00e9 13       		.uleb128 0x13
 3937 00ea 02       		.uleb128 0x2
 3938 00eb 18       		.uleb128 0x18
 3939 00ec 00       		.byte	0
 3940 00ed 00       		.byte	0
 3941 00ee 12       		.uleb128 0x12
 3942 00ef 34       		.uleb128 0x34
 3943 00f0 00       		.byte	0
 3944 00f1 03       		.uleb128 0x3
 3945 00f2 08       		.uleb128 0x8
 3946 00f3 3A       		.uleb128 0x3a
 3947 00f4 0B       		.uleb128 0xb
 3948 00f5 3B       		.uleb128 0x3b
 3949 00f6 0B       		.uleb128 0xb
 3950 00f7 49       		.uleb128 0x49
 3951 00f8 13       		.uleb128 0x13
 3952 00f9 02       		.uleb128 0x2
 3953 00fa 17       		.uleb128 0x17
 3954 00fb 00       		.byte	0
 3955 00fc 00       		.byte	0
 3956 00fd 13       		.uleb128 0x13
 3957 00fe 2E       		.uleb128 0x2e
 3958 00ff 01       		.byte	0x1
 3959 0100 3F       		.uleb128 0x3f
 3960 0101 19       		.uleb128 0x19
 3961 0102 03       		.uleb128 0x3
 3962 0103 0E       		.uleb128 0xe
 3963 0104 3A       		.uleb128 0x3a
 3964 0105 0B       		.uleb128 0xb
 3965 0106 3B       		.uleb128 0x3b
 3966 0107 0B       		.uleb128 0xb
 3967 0108 27       		.uleb128 0x27
 3968 0109 19       		.uleb128 0x19
 3969 010a 11       		.uleb128 0x11
 3970 010b 01       		.uleb128 0x1
 3971 010c 12       		.uleb128 0x12
 3972 010d 06       		.uleb128 0x6
 3973 010e 40       		.uleb128 0x40
 3974 010f 18       		.uleb128 0x18
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 162


 3975 0110 9642     		.uleb128 0x2116
 3976 0112 19       		.uleb128 0x19
 3977 0113 01       		.uleb128 0x1
 3978 0114 13       		.uleb128 0x13
 3979 0115 00       		.byte	0
 3980 0116 00       		.byte	0
 3981 0117 14       		.uleb128 0x14
 3982 0118 05       		.uleb128 0x5
 3983 0119 00       		.byte	0
 3984 011a 03       		.uleb128 0x3
 3985 011b 0E       		.uleb128 0xe
 3986 011c 3A       		.uleb128 0x3a
 3987 011d 0B       		.uleb128 0xb
 3988 011e 3B       		.uleb128 0x3b
 3989 011f 0B       		.uleb128 0xb
 3990 0120 49       		.uleb128 0x49
 3991 0121 13       		.uleb128 0x13
 3992 0122 02       		.uleb128 0x2
 3993 0123 18       		.uleb128 0x18
 3994 0124 00       		.byte	0
 3995 0125 00       		.byte	0
 3996 0126 15       		.uleb128 0x15
 3997 0127 34       		.uleb128 0x34
 3998 0128 00       		.byte	0
 3999 0129 03       		.uleb128 0x3
 4000 012a 0E       		.uleb128 0xe
 4001 012b 3A       		.uleb128 0x3a
 4002 012c 0B       		.uleb128 0xb
 4003 012d 3B       		.uleb128 0x3b
 4004 012e 0B       		.uleb128 0xb
 4005 012f 49       		.uleb128 0x49
 4006 0130 13       		.uleb128 0x13
 4007 0131 02       		.uleb128 0x2
 4008 0132 17       		.uleb128 0x17
 4009 0133 00       		.byte	0
 4010 0134 00       		.byte	0
 4011 0135 16       		.uleb128 0x16
 4012 0136 1D       		.uleb128 0x1d
 4013 0137 01       		.byte	0x1
 4014 0138 31       		.uleb128 0x31
 4015 0139 13       		.uleb128 0x13
 4016 013a 11       		.uleb128 0x11
 4017 013b 01       		.uleb128 0x1
 4018 013c 12       		.uleb128 0x12
 4019 013d 06       		.uleb128 0x6
 4020 013e 58       		.uleb128 0x58
 4021 013f 0B       		.uleb128 0xb
 4022 0140 59       		.uleb128 0x59
 4023 0141 05       		.uleb128 0x5
 4024 0142 00       		.byte	0
 4025 0143 00       		.byte	0
 4026 0144 17       		.uleb128 0x17
 4027 0145 05       		.uleb128 0x5
 4028 0146 00       		.byte	0
 4029 0147 31       		.uleb128 0x31
 4030 0148 13       		.uleb128 0x13
 4031 0149 02       		.uleb128 0x2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 163


 4032 014a 17       		.uleb128 0x17
 4033 014b 00       		.byte	0
 4034 014c 00       		.byte	0
 4035 014d 18       		.uleb128 0x18
 4036 014e 898201   		.uleb128 0x4109
 4037 0151 01       		.byte	0x1
 4038 0152 11       		.uleb128 0x11
 4039 0153 01       		.uleb128 0x1
 4040 0154 31       		.uleb128 0x31
 4041 0155 13       		.uleb128 0x13
 4042 0156 00       		.byte	0
 4043 0157 00       		.byte	0
 4044 0158 19       		.uleb128 0x19
 4045 0159 8A8201   		.uleb128 0x410a
 4046 015c 00       		.byte	0
 4047 015d 02       		.uleb128 0x2
 4048 015e 18       		.uleb128 0x18
 4049 015f 9142     		.uleb128 0x2111
 4050 0161 18       		.uleb128 0x18
 4051 0162 00       		.byte	0
 4052 0163 00       		.byte	0
 4053 0164 1A       		.uleb128 0x1a
 4054 0165 898201   		.uleb128 0x4109
 4055 0168 00       		.byte	0
 4056 0169 11       		.uleb128 0x11
 4057 016a 01       		.uleb128 0x1
 4058 016b 31       		.uleb128 0x31
 4059 016c 13       		.uleb128 0x13
 4060 016d 00       		.byte	0
 4061 016e 00       		.byte	0
 4062 016f 1B       		.uleb128 0x1b
 4063 0170 34       		.uleb128 0x34
 4064 0171 00       		.byte	0
 4065 0172 03       		.uleb128 0x3
 4066 0173 08       		.uleb128 0x8
 4067 0174 3A       		.uleb128 0x3a
 4068 0175 0B       		.uleb128 0xb
 4069 0176 3B       		.uleb128 0x3b
 4070 0177 0B       		.uleb128 0xb
 4071 0178 49       		.uleb128 0x49
 4072 0179 13       		.uleb128 0x13
 4073 017a 02       		.uleb128 0x2
 4074 017b 18       		.uleb128 0x18
 4075 017c 00       		.byte	0
 4076 017d 00       		.byte	0
 4077 017e 1C       		.uleb128 0x1c
 4078 017f 0B       		.uleb128 0xb
 4079 0180 01       		.byte	0x1
 4080 0181 11       		.uleb128 0x11
 4081 0182 01       		.uleb128 0x1
 4082 0183 12       		.uleb128 0x12
 4083 0184 06       		.uleb128 0x6
 4084 0185 01       		.uleb128 0x1
 4085 0186 13       		.uleb128 0x13
 4086 0187 00       		.byte	0
 4087 0188 00       		.byte	0
 4088 0189 1D       		.uleb128 0x1d
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 164


 4089 018a 0B       		.uleb128 0xb
 4090 018b 01       		.byte	0x1
 4091 018c 55       		.uleb128 0x55
 4092 018d 17       		.uleb128 0x17
 4093 018e 00       		.byte	0
 4094 018f 00       		.byte	0
 4095 0190 1E       		.uleb128 0x1e
 4096 0191 1D       		.uleb128 0x1d
 4097 0192 01       		.byte	0x1
 4098 0193 31       		.uleb128 0x31
 4099 0194 13       		.uleb128 0x13
 4100 0195 11       		.uleb128 0x11
 4101 0196 01       		.uleb128 0x1
 4102 0197 12       		.uleb128 0x12
 4103 0198 06       		.uleb128 0x6
 4104 0199 58       		.uleb128 0x58
 4105 019a 0B       		.uleb128 0xb
 4106 019b 59       		.uleb128 0x59
 4107 019c 0B       		.uleb128 0xb
 4108 019d 01       		.uleb128 0x1
 4109 019e 13       		.uleb128 0x13
 4110 019f 00       		.byte	0
 4111 01a0 00       		.byte	0
 4112 01a1 1F       		.uleb128 0x1f
 4113 01a2 1D       		.uleb128 0x1d
 4114 01a3 01       		.byte	0x1
 4115 01a4 31       		.uleb128 0x31
 4116 01a5 13       		.uleb128 0x13
 4117 01a6 11       		.uleb128 0x11
 4118 01a7 01       		.uleb128 0x1
 4119 01a8 12       		.uleb128 0x12
 4120 01a9 06       		.uleb128 0x6
 4121 01aa 58       		.uleb128 0x58
 4122 01ab 0B       		.uleb128 0xb
 4123 01ac 59       		.uleb128 0x59
 4124 01ad 0B       		.uleb128 0xb
 4125 01ae 00       		.byte	0
 4126 01af 00       		.byte	0
 4127 01b0 20       		.uleb128 0x20
 4128 01b1 34       		.uleb128 0x34
 4129 01b2 00       		.byte	0
 4130 01b3 03       		.uleb128 0x3
 4131 01b4 0E       		.uleb128 0xe
 4132 01b5 3A       		.uleb128 0x3a
 4133 01b6 0B       		.uleb128 0xb
 4134 01b7 3B       		.uleb128 0x3b
 4135 01b8 0B       		.uleb128 0xb
 4136 01b9 49       		.uleb128 0x49
 4137 01ba 13       		.uleb128 0x13
 4138 01bb 3F       		.uleb128 0x3f
 4139 01bc 19       		.uleb128 0x19
 4140 01bd 3C       		.uleb128 0x3c
 4141 01be 19       		.uleb128 0x19
 4142 01bf 00       		.byte	0
 4143 01c0 00       		.byte	0
 4144 01c1 21       		.uleb128 0x21
 4145 01c2 13       		.uleb128 0x13
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 165


 4146 01c3 01       		.byte	0x1
 4147 01c4 0B       		.uleb128 0xb
 4148 01c5 0B       		.uleb128 0xb
 4149 01c6 3A       		.uleb128 0x3a
 4150 01c7 0B       		.uleb128 0xb
 4151 01c8 3B       		.uleb128 0x3b
 4152 01c9 0B       		.uleb128 0xb
 4153 01ca 01       		.uleb128 0x1
 4154 01cb 13       		.uleb128 0x13
 4155 01cc 00       		.byte	0
 4156 01cd 00       		.byte	0
 4157 01ce 22       		.uleb128 0x22
 4158 01cf 0D       		.uleb128 0xd
 4159 01d0 00       		.byte	0
 4160 01d1 03       		.uleb128 0x3
 4161 01d2 0E       		.uleb128 0xe
 4162 01d3 3A       		.uleb128 0x3a
 4163 01d4 0B       		.uleb128 0xb
 4164 01d5 3B       		.uleb128 0x3b
 4165 01d6 0B       		.uleb128 0xb
 4166 01d7 49       		.uleb128 0x49
 4167 01d8 13       		.uleb128 0x13
 4168 01d9 38       		.uleb128 0x38
 4169 01da 0B       		.uleb128 0xb
 4170 01db 00       		.byte	0
 4171 01dc 00       		.byte	0
 4172 01dd 23       		.uleb128 0x23
 4173 01de 0D       		.uleb128 0xd
 4174 01df 00       		.byte	0
 4175 01e0 03       		.uleb128 0x3
 4176 01e1 08       		.uleb128 0x8
 4177 01e2 3A       		.uleb128 0x3a
 4178 01e3 0B       		.uleb128 0xb
 4179 01e4 3B       		.uleb128 0x3b
 4180 01e5 0B       		.uleb128 0xb
 4181 01e6 49       		.uleb128 0x49
 4182 01e7 13       		.uleb128 0x13
 4183 01e8 38       		.uleb128 0x38
 4184 01e9 0B       		.uleb128 0xb
 4185 01ea 00       		.byte	0
 4186 01eb 00       		.byte	0
 4187 01ec 24       		.uleb128 0x24
 4188 01ed 2E       		.uleb128 0x2e
 4189 01ee 01       		.byte	0x1
 4190 01ef 3F       		.uleb128 0x3f
 4191 01f0 19       		.uleb128 0x19
 4192 01f1 03       		.uleb128 0x3
 4193 01f2 0E       		.uleb128 0xe
 4194 01f3 3A       		.uleb128 0x3a
 4195 01f4 0B       		.uleb128 0xb
 4196 01f5 3B       		.uleb128 0x3b
 4197 01f6 05       		.uleb128 0x5
 4198 01f7 27       		.uleb128 0x27
 4199 01f8 19       		.uleb128 0x19
 4200 01f9 49       		.uleb128 0x49
 4201 01fa 13       		.uleb128 0x13
 4202 01fb 3C       		.uleb128 0x3c
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 166


 4203 01fc 19       		.uleb128 0x19
 4204 01fd 01       		.uleb128 0x1
 4205 01fe 13       		.uleb128 0x13
 4206 01ff 00       		.byte	0
 4207 0200 00       		.byte	0
 4208 0201 25       		.uleb128 0x25
 4209 0202 05       		.uleb128 0x5
 4210 0203 00       		.byte	0
 4211 0204 49       		.uleb128 0x49
 4212 0205 13       		.uleb128 0x13
 4213 0206 00       		.byte	0
 4214 0207 00       		.byte	0
 4215 0208 26       		.uleb128 0x26
 4216 0209 2E       		.uleb128 0x2e
 4217 020a 01       		.byte	0x1
 4218 020b 3F       		.uleb128 0x3f
 4219 020c 19       		.uleb128 0x19
 4220 020d 03       		.uleb128 0x3
 4221 020e 0E       		.uleb128 0xe
 4222 020f 3A       		.uleb128 0x3a
 4223 0210 0B       		.uleb128 0xb
 4224 0211 3B       		.uleb128 0x3b
 4225 0212 0B       		.uleb128 0xb
 4226 0213 27       		.uleb128 0x27
 4227 0214 19       		.uleb128 0x19
 4228 0215 49       		.uleb128 0x49
 4229 0216 13       		.uleb128 0x13
 4230 0217 3C       		.uleb128 0x3c
 4231 0218 19       		.uleb128 0x19
 4232 0219 01       		.uleb128 0x1
 4233 021a 13       		.uleb128 0x13
 4234 021b 00       		.byte	0
 4235 021c 00       		.byte	0
 4236 021d 27       		.uleb128 0x27
 4237 021e 2E       		.uleb128 0x2e
 4238 021f 01       		.byte	0x1
 4239 0220 3F       		.uleb128 0x3f
 4240 0221 19       		.uleb128 0x19
 4241 0222 03       		.uleb128 0x3
 4242 0223 0E       		.uleb128 0xe
 4243 0224 3A       		.uleb128 0x3a
 4244 0225 0B       		.uleb128 0xb
 4245 0226 3B       		.uleb128 0x3b
 4246 0227 05       		.uleb128 0x5
 4247 0228 27       		.uleb128 0x27
 4248 0229 19       		.uleb128 0x19
 4249 022a 49       		.uleb128 0x49
 4250 022b 13       		.uleb128 0x13
 4251 022c 3C       		.uleb128 0x3c
 4252 022d 19       		.uleb128 0x19
 4253 022e 00       		.byte	0
 4254 022f 00       		.byte	0
 4255 0230 00       		.byte	0
 4256              		.section	.debug_loc,"",%progbits
 4257              	.Ldebug_loc0:
 4258              	.LLST0:
 4259 0000 00000000 		.4byte	.LVL0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 167


 4260 0004 04000000 		.4byte	.LVL2
 4261 0008 0100     		.2byte	0x1
 4262 000a 50       		.byte	0x50
 4263 000b 04000000 		.4byte	.LVL2
 4264 000f 10000000 		.4byte	.LVL3
 4265 0013 0300     		.2byte	0x3
 4266 0015 70       		.byte	0x70
 4267 0016 04       		.sleb128 4
 4268 0017 9F       		.byte	0x9f
 4269 0018 10000000 		.4byte	.LVL3
 4270 001c 1E000000 		.4byte	.LVL5
 4271 0020 0100     		.2byte	0x1
 4272 0022 53       		.byte	0x53
 4273 0023 1E000000 		.4byte	.LVL5
 4274 0027 26000000 		.4byte	.LFE84
 4275 002b 0100     		.2byte	0x1
 4276 002d 50       		.byte	0x50
 4277 002e 00000000 		.4byte	0
 4278 0032 00000000 		.4byte	0
 4279              	.LLST1:
 4280 0036 00000000 		.4byte	.LVL0
 4281 003a 04000000 		.4byte	.LVL2
 4282 003e 0100     		.2byte	0x1
 4283 0040 51       		.byte	0x51
 4284 0041 04000000 		.4byte	.LVL2
 4285 0045 10000000 		.4byte	.LVL3
 4286 0049 0300     		.2byte	0x3
 4287 004b 71       		.byte	0x71
 4288 004c 04       		.sleb128 4
 4289 004d 9F       		.byte	0x9f
 4290 004e 10000000 		.4byte	.LVL3
 4291 0052 1E000000 		.4byte	.LVL5
 4292 0056 0100     		.2byte	0x1
 4293 0058 54       		.byte	0x54
 4294 0059 1E000000 		.4byte	.LVL5
 4295 005d 26000000 		.4byte	.LFE84
 4296 0061 0100     		.2byte	0x1
 4297 0063 51       		.byte	0x51
 4298 0064 00000000 		.4byte	0
 4299 0068 00000000 		.4byte	0
 4300              	.LLST2:
 4301 006c 00000000 		.4byte	.LVL0
 4302 0070 04000000 		.4byte	.LVL2
 4303 0074 0100     		.2byte	0x1
 4304 0076 52       		.byte	0x52
 4305 0077 04000000 		.4byte	.LVL2
 4306 007b 26000000 		.4byte	.LFE84
 4307 007f 0400     		.2byte	0x4
 4308 0081 F3       		.byte	0xf3
 4309 0082 01       		.uleb128 0x1
 4310 0083 52       		.byte	0x52
 4311 0084 9F       		.byte	0x9f
 4312 0085 00000000 		.4byte	0
 4313 0089 00000000 		.4byte	0
 4314              	.LLST3:
 4315 008d 00000000 		.4byte	.LVL6
 4316 0091 04000000 		.4byte	.LVL8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 168


 4317 0095 0100     		.2byte	0x1
 4318 0097 50       		.byte	0x50
 4319 0098 04000000 		.4byte	.LVL8
 4320 009c 10000000 		.4byte	.LVL9
 4321 00a0 0300     		.2byte	0x3
 4322 00a2 70       		.byte	0x70
 4323 00a3 02       		.sleb128 2
 4324 00a4 9F       		.byte	0x9f
 4325 00a5 10000000 		.4byte	.LVL9
 4326 00a9 2C000000 		.4byte	.LVL12
 4327 00ad 0100     		.2byte	0x1
 4328 00af 54       		.byte	0x54
 4329 00b0 2C000000 		.4byte	.LVL12
 4330 00b4 34000000 		.4byte	.LFE85
 4331 00b8 0100     		.2byte	0x1
 4332 00ba 50       		.byte	0x50
 4333 00bb 00000000 		.4byte	0
 4334 00bf 00000000 		.4byte	0
 4335              	.LLST4:
 4336 00c3 00000000 		.4byte	.LVL6
 4337 00c7 04000000 		.4byte	.LVL8
 4338 00cb 0100     		.2byte	0x1
 4339 00cd 51       		.byte	0x51
 4340 00ce 04000000 		.4byte	.LVL8
 4341 00d2 14000000 		.4byte	.LVL10
 4342 00d6 0300     		.2byte	0x3
 4343 00d8 71       		.byte	0x71
 4344 00d9 02       		.sleb128 2
 4345 00da 9F       		.byte	0x9f
 4346 00db 14000000 		.4byte	.LVL10
 4347 00df 2C000000 		.4byte	.LVL12
 4348 00e3 0100     		.2byte	0x1
 4349 00e5 55       		.byte	0x55
 4350 00e6 2C000000 		.4byte	.LVL12
 4351 00ea 34000000 		.4byte	.LFE85
 4352 00ee 0100     		.2byte	0x1
 4353 00f0 51       		.byte	0x51
 4354 00f1 00000000 		.4byte	0
 4355 00f5 00000000 		.4byte	0
 4356              	.LLST5:
 4357 00f9 00000000 		.4byte	.LVL6
 4358 00fd 04000000 		.4byte	.LVL8
 4359 0101 0100     		.2byte	0x1
 4360 0103 52       		.byte	0x52
 4361 0104 04000000 		.4byte	.LVL8
 4362 0108 34000000 		.4byte	.LFE85
 4363 010c 0400     		.2byte	0x4
 4364 010e F3       		.byte	0xf3
 4365 010f 01       		.uleb128 0x1
 4366 0110 52       		.byte	0x52
 4367 0111 9F       		.byte	0x9f
 4368 0112 00000000 		.4byte	0
 4369 0116 00000000 		.4byte	0
 4370              	.LLST6:
 4371 011a 14000000 		.4byte	.LVL10
 4372 011e 2C000000 		.4byte	.LVL12
 4373 0122 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 169


 4374 0124 50       		.byte	0x50
 4375 0125 00000000 		.4byte	0
 4376 0129 00000000 		.4byte	0
 4377              	.LLST7:
 4378 012d 00000000 		.4byte	.LVL13
 4379 0131 04000000 		.4byte	.LVL15
 4380 0135 0100     		.2byte	0x1
 4381 0137 50       		.byte	0x50
 4382 0138 04000000 		.4byte	.LVL15
 4383 013c 10000000 		.4byte	.LVL16
 4384 0140 0300     		.2byte	0x3
 4385 0142 70       		.byte	0x70
 4386 0143 04       		.sleb128 4
 4387 0144 9F       		.byte	0x9f
 4388 0145 10000000 		.4byte	.LVL16
 4389 0149 28000000 		.4byte	.LVL23
 4390 014d 0100     		.2byte	0x1
 4391 014f 54       		.byte	0x54
 4392 0150 28000000 		.4byte	.LVL23
 4393 0154 30000000 		.4byte	.LFE86
 4394 0158 0100     		.2byte	0x1
 4395 015a 50       		.byte	0x50
 4396 015b 00000000 		.4byte	0
 4397 015f 00000000 		.4byte	0
 4398              	.LLST8:
 4399 0163 00000000 		.4byte	.LVL13
 4400 0167 04000000 		.4byte	.LVL15
 4401 016b 0100     		.2byte	0x1
 4402 016d 51       		.byte	0x51
 4403 016e 04000000 		.4byte	.LVL15
 4404 0172 12000000 		.4byte	.LVL17
 4405 0176 0300     		.2byte	0x3
 4406 0178 71       		.byte	0x71
 4407 0179 04       		.sleb128 4
 4408 017a 9F       		.byte	0x9f
 4409 017b 12000000 		.4byte	.LVL17
 4410 017f 28000000 		.4byte	.LVL23
 4411 0183 0100     		.2byte	0x1
 4412 0185 55       		.byte	0x55
 4413 0186 28000000 		.4byte	.LVL23
 4414 018a 30000000 		.4byte	.LFE86
 4415 018e 0100     		.2byte	0x1
 4416 0190 51       		.byte	0x51
 4417 0191 00000000 		.4byte	0
 4418 0195 00000000 		.4byte	0
 4419              	.LLST9:
 4420 0199 00000000 		.4byte	.LVL13
 4421 019d 04000000 		.4byte	.LVL15
 4422 01a1 0100     		.2byte	0x1
 4423 01a3 52       		.byte	0x52
 4424 01a4 04000000 		.4byte	.LVL15
 4425 01a8 30000000 		.4byte	.LFE86
 4426 01ac 0400     		.2byte	0x4
 4427 01ae F3       		.byte	0xf3
 4428 01af 01       		.uleb128 0x1
 4429 01b0 52       		.byte	0x52
 4430 01b1 9F       		.byte	0x9f
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 170


 4431 01b2 00000000 		.4byte	0
 4432 01b6 00000000 		.4byte	0
 4433              	.LLST10:
 4434 01ba 12000000 		.4byte	.LVL17
 4435 01be 1A000000 		.4byte	.LVL18
 4436 01c2 0100     		.2byte	0x1
 4437 01c4 53       		.byte	0x53
 4438 01c5 1A000000 		.4byte	.LVL18
 4439 01c9 1C000000 		.4byte	.LVL19
 4440 01cd 0200     		.2byte	0x2
 4441 01cf 70       		.byte	0x70
 4442 01d0 04       		.sleb128 4
 4443 01d1 1C000000 		.4byte	.LVL19
 4444 01d5 20000000 		.4byte	.LVL20
 4445 01d9 0100     		.2byte	0x1
 4446 01db 53       		.byte	0x53
 4447 01dc 20000000 		.4byte	.LVL20
 4448 01e0 22000000 		.4byte	.LVL21
 4449 01e4 0200     		.2byte	0x2
 4450 01e6 70       		.byte	0x70
 4451 01e7 04       		.sleb128 4
 4452 01e8 00000000 		.4byte	0
 4453 01ec 00000000 		.4byte	0
 4454              	.LLST11:
 4455 01f0 00000000 		.4byte	.LVL24
 4456 01f4 12000000 		.4byte	.LVL27
 4457 01f8 0100     		.2byte	0x1
 4458 01fa 50       		.byte	0x50
 4459 01fb 12000000 		.4byte	.LVL27
 4460 01ff 18000000 		.4byte	.LVL28
 4461 0203 0300     		.2byte	0x3
 4462 0205 70       		.byte	0x70
 4463 0206 04       		.sleb128 4
 4464 0207 9F       		.byte	0x9f
 4465 0208 18000000 		.4byte	.LVL28
 4466 020c 6E000000 		.4byte	.LVL48
 4467 0210 0100     		.2byte	0x1
 4468 0212 54       		.byte	0x54
 4469 0213 6E000000 		.4byte	.LVL48
 4470 0217 84000000 		.4byte	.LFE87
 4471 021b 0100     		.2byte	0x1
 4472 021d 50       		.byte	0x50
 4473 021e 00000000 		.4byte	0
 4474 0222 00000000 		.4byte	0
 4475              	.LLST12:
 4476 0226 00000000 		.4byte	.LVL24
 4477 022a 1C000000 		.4byte	.LVL29
 4478 022e 0100     		.2byte	0x1
 4479 0230 51       		.byte	0x51
 4480 0231 1C000000 		.4byte	.LVL29
 4481 0235 22000000 		.4byte	.LVL30
 4482 0239 0300     		.2byte	0x3
 4483 023b 71       		.byte	0x71
 4484 023c 04       		.sleb128 4
 4485 023d 9F       		.byte	0x9f
 4486 023e 22000000 		.4byte	.LVL30
 4487 0242 6E000000 		.4byte	.LVL48
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 171


 4488 0246 0100     		.2byte	0x1
 4489 0248 55       		.byte	0x55
 4490 0249 6E000000 		.4byte	.LVL48
 4491 024d 84000000 		.4byte	.LFE87
 4492 0251 0100     		.2byte	0x1
 4493 0253 51       		.byte	0x51
 4494 0254 00000000 		.4byte	0
 4495 0258 00000000 		.4byte	0
 4496              	.LLST13:
 4497 025c 00000000 		.4byte	.LVL24
 4498 0260 12000000 		.4byte	.LVL27
 4499 0264 0100     		.2byte	0x1
 4500 0266 52       		.byte	0x52
 4501 0267 12000000 		.4byte	.LVL27
 4502 026b 84000000 		.4byte	.LFE87
 4503 026f 0400     		.2byte	0x4
 4504 0271 F3       		.byte	0xf3
 4505 0272 01       		.uleb128 0x1
 4506 0273 52       		.byte	0x52
 4507 0274 9F       		.byte	0x9f
 4508 0275 00000000 		.4byte	0
 4509 0279 00000000 		.4byte	0
 4510              	.LLST14:
 4511 027d 00000000 		.4byte	.LVL24
 4512 0281 0C000000 		.4byte	.LVL26
 4513 0285 0100     		.2byte	0x1
 4514 0287 53       		.byte	0x53
 4515 0288 0C000000 		.4byte	.LVL26
 4516 028c 84000000 		.4byte	.LFE87
 4517 0290 0200     		.2byte	0x2
 4518 0292 91       		.byte	0x91
 4519 0293 54       		.sleb128 -44
 4520 0294 00000000 		.4byte	0
 4521 0298 00000000 		.4byte	0
 4522              	.LLST15:
 4523 029c 0A000000 		.4byte	.LVL25
 4524 02a0 12000000 		.4byte	.LVL27
 4525 02a4 0100     		.2byte	0x1
 4526 02a6 52       		.byte	0x52
 4527 02a7 12000000 		.4byte	.LVL27
 4528 02ab 84000000 		.4byte	.LFE87
 4529 02af 0100     		.2byte	0x1
 4530 02b1 56       		.byte	0x56
 4531 02b2 00000000 		.4byte	0
 4532 02b6 00000000 		.4byte	0
 4533              	.LLST16:
 4534 02ba 0A000000 		.4byte	.LVL25
 4535 02be 12000000 		.4byte	.LVL27
 4536 02c2 0600     		.2byte	0x6
 4537 02c4 9E       		.byte	0x9e
 4538 02c5 04       		.uleb128 0x4
 4539 02c6 00000000 		.4byte	0
 4540 02ca 12000000 		.4byte	.LVL27
 4541 02ce 36000000 		.4byte	.LVL34
 4542 02d2 0100     		.2byte	0x1
 4543 02d4 5B       		.byte	0x5b
 4544 02d5 36000000 		.4byte	.LVL34
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 172


 4545 02d9 38000000 		.4byte	.LVL35
 4546 02dd 0100     		.2byte	0x1
 4547 02df 50       		.byte	0x50
 4548 02e0 38000000 		.4byte	.LVL35
 4549 02e4 58000000 		.4byte	.LVL42
 4550 02e8 0100     		.2byte	0x1
 4551 02ea 5B       		.byte	0x5b
 4552 02eb 58000000 		.4byte	.LVL42
 4553 02ef 5A000000 		.4byte	.LVL43
 4554 02f3 0100     		.2byte	0x1
 4555 02f5 50       		.byte	0x50
 4556 02f6 5A000000 		.4byte	.LVL43
 4557 02fa 84000000 		.4byte	.LFE87
 4558 02fe 0100     		.2byte	0x1
 4559 0300 5B       		.byte	0x5b
 4560 0301 00000000 		.4byte	0
 4561 0305 00000000 		.4byte	0
 4562              	.LLST17:
 4563 0309 0A000000 		.4byte	.LVL25
 4564 030d 12000000 		.4byte	.LVL27
 4565 0311 0600     		.2byte	0x6
 4566 0313 9E       		.byte	0x9e
 4567 0314 04       		.uleb128 0x4
 4568 0315 00000000 		.4byte	0
 4569 0319 12000000 		.4byte	.LVL27
 4570 031d 46000000 		.4byte	.LVL38
 4571 0321 0200     		.2byte	0x2
 4572 0323 7D       		.byte	0x7d
 4573 0324 00       		.sleb128 0
 4574 0325 46000000 		.4byte	.LVL38
 4575 0329 48000000 		.4byte	.LVL39
 4576 032d 0100     		.2byte	0x1
 4577 032f 50       		.byte	0x50
 4578 0330 48000000 		.4byte	.LVL39
 4579 0334 68000000 		.4byte	.LVL46
 4580 0338 0100     		.2byte	0x1
 4581 033a 5A       		.byte	0x5a
 4582 033b 68000000 		.4byte	.LVL46
 4583 033f 6E000000 		.4byte	.LVL48
 4584 0343 0100     		.2byte	0x1
 4585 0345 50       		.byte	0x50
 4586 0346 6E000000 		.4byte	.LVL48
 4587 034a 80000000 		.4byte	.LVL49
 4588 034e 0200     		.2byte	0x2
 4589 0350 7D       		.byte	0x7d
 4590 0351 00       		.sleb128 0
 4591 0352 80000000 		.4byte	.LVL49
 4592 0356 84000000 		.4byte	.LFE87
 4593 035a 0100     		.2byte	0x1
 4594 035c 52       		.byte	0x52
 4595 035d 00000000 		.4byte	0
 4596 0361 00000000 		.4byte	0
 4597              	.LLST18:
 4598 0365 18000000 		.4byte	.LVL28
 4599 0369 46000000 		.4byte	.LVL38
 4600 036d 0100     		.2byte	0x1
 4601 036f 5A       		.byte	0x5a
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 173


 4602 0370 00000000 		.4byte	0
 4603 0374 00000000 		.4byte	0
 4604              	.LLST19:
 4605 0378 1C000000 		.4byte	.LVL29
 4606 037c 6E000000 		.4byte	.LVL48
 4607 0380 0100     		.2byte	0x1
 4608 0382 58       		.byte	0x58
 4609 0383 00000000 		.4byte	0
 4610 0387 00000000 		.4byte	0
 4611              	.LLST20:
 4612 038b 22000000 		.4byte	.LVL30
 4613 038f 6E000000 		.4byte	.LVL48
 4614 0393 0100     		.2byte	0x1
 4615 0395 57       		.byte	0x57
 4616 0396 00000000 		.4byte	0
 4617 039a 00000000 		.4byte	0
 4618              	.LLST21:
 4619 039e 26000000 		.4byte	.LVL31
 4620 03a2 6E000000 		.4byte	.LVL48
 4621 03a6 0100     		.2byte	0x1
 4622 03a8 59       		.byte	0x59
 4623 03a9 00000000 		.4byte	0
 4624 03ad 00000000 		.4byte	0
 4625              	.LLST22:
 4626 03b1 00000000 		.4byte	.LVL50
 4627 03b5 10000000 		.4byte	.LVL52
 4628 03b9 0100     		.2byte	0x1
 4629 03bb 50       		.byte	0x50
 4630 03bc 10000000 		.4byte	.LVL52
 4631 03c0 12000000 		.4byte	.LVL53
 4632 03c4 0300     		.2byte	0x3
 4633 03c6 70       		.byte	0x70
 4634 03c7 02       		.sleb128 2
 4635 03c8 9F       		.byte	0x9f
 4636 03c9 12000000 		.4byte	.LVL53
 4637 03cd 3C000000 		.4byte	.LVL60
 4638 03d1 0100     		.2byte	0x1
 4639 03d3 50       		.byte	0x50
 4640 03d4 3C000000 		.4byte	.LVL60
 4641 03d8 58000000 		.4byte	.LVL66
 4642 03dc 0300     		.2byte	0x3
 4643 03de 73       		.byte	0x73
 4644 03df 7C       		.sleb128 -4
 4645 03e0 9F       		.byte	0x9f
 4646 03e1 58000000 		.4byte	.LVL66
 4647 03e5 76000000 		.4byte	.LFE88
 4648 03e9 0100     		.2byte	0x1
 4649 03eb 50       		.byte	0x50
 4650 03ec 00000000 		.4byte	0
 4651 03f0 00000000 		.4byte	0
 4652              	.LLST23:
 4653 03f4 00000000 		.4byte	.LVL50
 4654 03f8 12000000 		.4byte	.LVL53
 4655 03fc 0100     		.2byte	0x1
 4656 03fe 51       		.byte	0x51
 4657 03ff 12000000 		.4byte	.LVL53
 4658 0403 14000000 		.4byte	.LVL54
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 174


 4659 0407 0300     		.2byte	0x3
 4660 0409 71       		.byte	0x71
 4661 040a 02       		.sleb128 2
 4662 040b 9F       		.byte	0x9f
 4663 040c 14000000 		.4byte	.LVL54
 4664 0410 2C000000 		.4byte	.LVL57
 4665 0414 0100     		.2byte	0x1
 4666 0416 51       		.byte	0x51
 4667 0417 2C000000 		.4byte	.LVL57
 4668 041b 58000000 		.4byte	.LVL66
 4669 041f 0300     		.2byte	0x3
 4670 0421 74       		.byte	0x74
 4671 0422 7C       		.sleb128 -4
 4672 0423 9F       		.byte	0x9f
 4673 0424 58000000 		.4byte	.LVL66
 4674 0428 76000000 		.4byte	.LFE88
 4675 042c 0100     		.2byte	0x1
 4676 042e 51       		.byte	0x51
 4677 042f 00000000 		.4byte	0
 4678 0433 00000000 		.4byte	0
 4679              	.LLST24:
 4680 0437 00000000 		.4byte	.LVL50
 4681 043b 10000000 		.4byte	.LVL52
 4682 043f 0100     		.2byte	0x1
 4683 0441 52       		.byte	0x52
 4684 0442 10000000 		.4byte	.LVL52
 4685 0446 76000000 		.4byte	.LFE88
 4686 044a 0400     		.2byte	0x4
 4687 044c F3       		.byte	0xf3
 4688 044d 01       		.uleb128 0x1
 4689 044e 52       		.byte	0x52
 4690 044f 9F       		.byte	0x9f
 4691 0450 00000000 		.4byte	0
 4692 0454 00000000 		.4byte	0
 4693              	.LLST25:
 4694 0458 00000000 		.4byte	.LVL50
 4695 045c 10000000 		.4byte	.LVL52
 4696 0460 0100     		.2byte	0x1
 4697 0462 53       		.byte	0x53
 4698 0463 10000000 		.4byte	.LVL52
 4699 0467 76000000 		.4byte	.LFE88
 4700 046b 0100     		.2byte	0x1
 4701 046d 5A       		.byte	0x5a
 4702 046e 00000000 		.4byte	0
 4703 0472 00000000 		.4byte	0
 4704              	.LLST26:
 4705 0476 06000000 		.4byte	.LVL51
 4706 047a 70000000 		.4byte	.LVL67
 4707 047e 0100     		.2byte	0x1
 4708 0480 52       		.byte	0x52
 4709 0481 00000000 		.4byte	0
 4710 0485 00000000 		.4byte	0
 4711              	.LLST27:
 4712 0489 06000000 		.4byte	.LVL51
 4713 048d 10000000 		.4byte	.LVL52
 4714 0491 0A00     		.2byte	0xa
 4715 0493 9E       		.byte	0x9e
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 175


 4716 0494 08       		.uleb128 0x8
 4717 0495 00000000 		.8byte	0
 4717      00000000 
 4718 049d 10000000 		.4byte	.LVL52
 4719 04a1 24000000 		.4byte	.LVL55
 4720 04a5 0600     		.2byte	0x6
 4721 04a7 58       		.byte	0x58
 4722 04a8 93       		.byte	0x93
 4723 04a9 04       		.uleb128 0x4
 4724 04aa 59       		.byte	0x59
 4725 04ab 93       		.byte	0x93
 4726 04ac 04       		.uleb128 0x4
 4727 04ad 28000000 		.4byte	.LVL56
 4728 04b1 44000000 		.4byte	.LVL61
 4729 04b5 0600     		.2byte	0x6
 4730 04b7 58       		.byte	0x58
 4731 04b8 93       		.byte	0x93
 4732 04b9 04       		.uleb128 0x4
 4733 04ba 59       		.byte	0x59
 4734 04bb 93       		.byte	0x93
 4735 04bc 04       		.uleb128 0x4
 4736 04bd 48000000 		.4byte	.LVL62
 4737 04c1 76000000 		.4byte	.LFE88
 4738 04c5 0600     		.2byte	0x6
 4739 04c7 58       		.byte	0x58
 4740 04c8 93       		.byte	0x93
 4741 04c9 04       		.uleb128 0x4
 4742 04ca 59       		.byte	0x59
 4743 04cb 93       		.byte	0x93
 4744 04cc 04       		.uleb128 0x4
 4745 04cd 00000000 		.4byte	0
 4746 04d1 00000000 		.4byte	0
 4747              	.LLST28:
 4748 04d5 06000000 		.4byte	.LVL51
 4749 04d9 10000000 		.4byte	.LVL52
 4750 04dd 0A00     		.2byte	0xa
 4751 04df 9E       		.byte	0x9e
 4752 04e0 08       		.uleb128 0x8
 4753 04e1 00000000 		.8byte	0
 4753      00000000 
 4754 04e9 10000000 		.4byte	.LVL52
 4755 04ed 34000000 		.4byte	.LVL58
 4756 04f1 0600     		.2byte	0x6
 4757 04f3 56       		.byte	0x56
 4758 04f4 93       		.byte	0x93
 4759 04f5 04       		.uleb128 0x4
 4760 04f6 57       		.byte	0x57
 4761 04f7 93       		.byte	0x93
 4762 04f8 04       		.uleb128 0x4
 4763 04f9 38000000 		.4byte	.LVL59
 4764 04fd 4E000000 		.4byte	.LVL63
 4765 0501 0600     		.2byte	0x6
 4766 0503 56       		.byte	0x56
 4767 0504 93       		.byte	0x93
 4768 0505 04       		.uleb128 0x4
 4769 0506 57       		.byte	0x57
 4770 0507 93       		.byte	0x93
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 176


 4771 0508 04       		.uleb128 0x4
 4772 0509 52000000 		.4byte	.LVL64
 4773 050d 76000000 		.4byte	.LFE88
 4774 0511 0600     		.2byte	0x6
 4775 0513 56       		.byte	0x56
 4776 0514 93       		.byte	0x93
 4777 0515 04       		.uleb128 0x4
 4778 0516 57       		.byte	0x57
 4779 0517 93       		.byte	0x93
 4780 0518 04       		.uleb128 0x4
 4781 0519 00000000 		.4byte	0
 4782 051d 00000000 		.4byte	0
 4783              	.LLST29:
 4784 0521 12000000 		.4byte	.LVL53
 4785 0525 3C000000 		.4byte	.LVL60
 4786 0529 0200     		.2byte	0x2
 4787 052b 70       		.byte	0x70
 4788 052c 00       		.sleb128 0
 4789 052d 3C000000 		.4byte	.LVL60
 4790 0531 58000000 		.4byte	.LVL66
 4791 0535 0200     		.2byte	0x2
 4792 0537 73       		.byte	0x73
 4793 0538 7C       		.sleb128 -4
 4794 0539 00000000 		.4byte	0
 4795 053d 00000000 		.4byte	0
 4796              	.LLST30:
 4797 0541 12000000 		.4byte	.LVL53
 4798 0545 3C000000 		.4byte	.LVL60
 4799 0549 0200     		.2byte	0x2
 4800 054b 70       		.byte	0x70
 4801 054c 02       		.sleb128 2
 4802 054d 3C000000 		.4byte	.LVL60
 4803 0551 58000000 		.4byte	.LVL66
 4804 0555 0200     		.2byte	0x2
 4805 0557 73       		.byte	0x73
 4806 0558 7E       		.sleb128 -2
 4807 0559 00000000 		.4byte	0
 4808 055d 00000000 		.4byte	0
 4809              	.LLST31:
 4810 0561 14000000 		.4byte	.LVL54
 4811 0565 2C000000 		.4byte	.LVL57
 4812 0569 0200     		.2byte	0x2
 4813 056b 71       		.byte	0x71
 4814 056c 00       		.sleb128 0
 4815 056d 2C000000 		.4byte	.LVL57
 4816 0571 58000000 		.4byte	.LVL66
 4817 0575 0200     		.2byte	0x2
 4818 0577 74       		.byte	0x74
 4819 0578 7C       		.sleb128 -4
 4820 0579 00000000 		.4byte	0
 4821 057d 00000000 		.4byte	0
 4822              	.LLST32:
 4823 0581 14000000 		.4byte	.LVL54
 4824 0585 2C000000 		.4byte	.LVL57
 4825 0589 0200     		.2byte	0x2
 4826 058b 71       		.byte	0x71
 4827 058c 02       		.sleb128 2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 177


 4828 058d 2C000000 		.4byte	.LVL57
 4829 0591 58000000 		.4byte	.LVL66
 4830 0595 0200     		.2byte	0x2
 4831 0597 74       		.byte	0x74
 4832 0598 7E       		.sleb128 -2
 4833 0599 00000000 		.4byte	0
 4834 059d 00000000 		.4byte	0
 4835              	.LLST33:
 4836 05a1 00000000 		.4byte	.LVL68
 4837 05a5 1E000000 		.4byte	.LVL72
 4838 05a9 0100     		.2byte	0x1
 4839 05ab 50       		.byte	0x50
 4840 05ac 1E000000 		.4byte	.LVL72
 4841 05b0 24000000 		.4byte	.LVL73
 4842 05b4 0300     		.2byte	0x3
 4843 05b6 73       		.byte	0x73
 4844 05b7 04       		.sleb128 4
 4845 05b8 9F       		.byte	0x9f
 4846 05b9 24000000 		.4byte	.LVL73
 4847 05bd 00010000 		.4byte	.LVL87
 4848 05c1 0100     		.2byte	0x1
 4849 05c3 5C       		.byte	0x5c
 4850 05c4 00010000 		.4byte	.LVL87
 4851 05c8 08010000 		.4byte	.LVL88
 4852 05cc 0100     		.2byte	0x1
 4853 05ce 53       		.byte	0x53
 4854 05cf 00000000 		.4byte	0
 4855 05d3 00000000 		.4byte	0
 4856              	.LLST34:
 4857 05d7 00000000 		.4byte	.LVL68
 4858 05db 26000000 		.4byte	.LVL74
 4859 05df 0100     		.2byte	0x1
 4860 05e1 51       		.byte	0x51
 4861 05e2 26000000 		.4byte	.LVL74
 4862 05e6 2C000000 		.4byte	.LVL75
 4863 05ea 0300     		.2byte	0x3
 4864 05ec 71       		.byte	0x71
 4865 05ed 04       		.sleb128 4
 4866 05ee 9F       		.byte	0x9f
 4867 05ef 2C000000 		.4byte	.LVL75
 4868 05f3 00010000 		.4byte	.LVL87
 4869 05f7 0100     		.2byte	0x1
 4870 05f9 5E       		.byte	0x5e
 4871 05fa 00010000 		.4byte	.LVL87
 4872 05fe 0A010000 		.4byte	.LVL89
 4873 0602 0100     		.2byte	0x1
 4874 0604 51       		.byte	0x51
 4875 0605 00000000 		.4byte	0
 4876 0609 00000000 		.4byte	0
 4877              	.LLST35:
 4878 060d 00000000 		.4byte	.LVL68
 4879 0611 0C000000 		.4byte	.LVL70
 4880 0615 0100     		.2byte	0x1
 4881 0617 52       		.byte	0x52
 4882 0618 0C000000 		.4byte	.LVL70
 4883 061c 1E000000 		.4byte	.LVL72
 4884 0620 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 178


 4885 0622 5C       		.byte	0x5c
 4886 0623 1E000000 		.4byte	.LVL72
 4887 0627 22010000 		.4byte	.LFE89
 4888 062b 0400     		.2byte	0x4
 4889 062d F3       		.byte	0xf3
 4890 062e 01       		.uleb128 0x1
 4891 062f 52       		.byte	0x52
 4892 0630 9F       		.byte	0x9f
 4893 0631 00000000 		.4byte	0
 4894 0635 00000000 		.4byte	0
 4895              	.LLST36:
 4896 0639 00000000 		.4byte	.LVL68
 4897 063d 0E000000 		.4byte	.LVL71
 4898 0641 0100     		.2byte	0x1
 4899 0643 53       		.byte	0x53
 4900 0644 0E000000 		.4byte	.LVL71
 4901 0648 22010000 		.4byte	.LFE89
 4902 064c 0200     		.2byte	0x2
 4903 064e 91       		.byte	0x91
 4904 064f 54       		.sleb128 -44
 4905 0650 00000000 		.4byte	0
 4906 0654 00000000 		.4byte	0
 4907              	.LLST37:
 4908 0658 0A000000 		.4byte	.LVL69
 4909 065c 0C000000 		.4byte	.LVL70
 4910 0660 0100     		.2byte	0x1
 4911 0662 52       		.byte	0x52
 4912 0663 0C000000 		.4byte	.LVL70
 4913 0667 1E000000 		.4byte	.LVL72
 4914 066b 0100     		.2byte	0x1
 4915 066d 5C       		.byte	0x5c
 4916 066e 1E000000 		.4byte	.LVL72
 4917 0672 2E000000 		.4byte	.LVL76
 4918 0676 0100     		.2byte	0x1
 4919 0678 52       		.byte	0x52
 4920 0679 2E000000 		.4byte	.LVL76
 4921 067d FC000000 		.4byte	.LVL86
 4922 0681 0200     		.2byte	0x2
 4923 0683 91       		.byte	0x91
 4924 0684 50       		.sleb128 -48
 4925 0685 FC000000 		.4byte	.LVL86
 4926 0689 00010000 		.4byte	.LVL87
 4927 068d 0100     		.2byte	0x1
 4928 068f 53       		.byte	0x53
 4929 0690 00010000 		.4byte	.LVL87
 4930 0694 22010000 		.4byte	.LFE89
 4931 0698 0200     		.2byte	0x2
 4932 069a 91       		.byte	0x91
 4933 069b 50       		.sleb128 -48
 4934 069c 00000000 		.4byte	0
 4935 06a0 00000000 		.4byte	0
 4936              	.LLST38:
 4937 06a4 0A000000 		.4byte	.LVL69
 4938 06a8 1E000000 		.4byte	.LVL72
 4939 06ac 0A00     		.2byte	0xa
 4940 06ae 9E       		.byte	0x9e
 4941 06af 08       		.uleb128 0x8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 179


 4942 06b0 00000000 		.8byte	0
 4942      00000000 
 4943 06b8 1E000000 		.4byte	.LVL72
 4944 06bc 66000000 		.4byte	.LVL77
 4945 06c0 0300     		.2byte	0x3
 4946 06c2 91       		.byte	0x91
 4947 06c3 B87F     		.sleb128 -72
 4948 06c5 66000000 		.4byte	.LVL77
 4949 06c9 6C000000 		.4byte	.LVL78
 4950 06cd 0600     		.2byte	0x6
 4951 06cf 56       		.byte	0x56
 4952 06d0 93       		.byte	0x93
 4953 06d1 04       		.uleb128 0x4
 4954 06d2 57       		.byte	0x57
 4955 06d3 93       		.byte	0x93
 4956 06d4 04       		.uleb128 0x4
 4957 06d5 6C000000 		.4byte	.LVL78
 4958 06d9 C6000000 		.4byte	.LVL83
 4959 06dd 0300     		.2byte	0x3
 4960 06df 91       		.byte	0x91
 4961 06e0 B87F     		.sleb128 -72
 4962 06e2 C6000000 		.4byte	.LVL83
 4963 06e6 00010000 		.4byte	.LVL87
 4964 06ea 0600     		.2byte	0x6
 4965 06ec 5A       		.byte	0x5a
 4966 06ed 93       		.byte	0x93
 4967 06ee 04       		.uleb128 0x4
 4968 06ef 5B       		.byte	0x5b
 4969 06f0 93       		.byte	0x93
 4970 06f1 04       		.uleb128 0x4
 4971 06f2 00010000 		.4byte	.LVL87
 4972 06f6 22010000 		.4byte	.LFE89
 4973 06fa 0300     		.2byte	0x3
 4974 06fc 91       		.byte	0x91
 4975 06fd B87F     		.sleb128 -72
 4976 06ff 00000000 		.4byte	0
 4977 0703 00000000 		.4byte	0
 4978              	.LLST39:
 4979 0707 0A000000 		.4byte	.LVL69
 4980 070b 1E000000 		.4byte	.LVL72
 4981 070f 0A00     		.2byte	0xa
 4982 0711 9E       		.byte	0x9e
 4983 0712 08       		.uleb128 0x8
 4984 0713 00000000 		.8byte	0
 4984      00000000 
 4985 071b 1E000000 		.4byte	.LVL72
 4986 071f 96000000 		.4byte	.LVL80
 4987 0723 0200     		.2byte	0x2
 4988 0725 91       		.byte	0x91
 4989 0726 40       		.sleb128 -64
 4990 0727 96000000 		.4byte	.LVL80
 4991 072b B6000000 		.4byte	.LVL82
 4992 072f 0600     		.2byte	0x6
 4993 0731 5A       		.byte	0x5a
 4994 0732 93       		.byte	0x93
 4995 0733 04       		.uleb128 0x4
 4996 0734 5B       		.byte	0x5b
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 180


 4997 0735 93       		.byte	0x93
 4998 0736 04       		.uleb128 0x4
 4999 0737 B6000000 		.4byte	.LVL82
 5000 073b F6000000 		.4byte	.LVL85
 5001 073f 0200     		.2byte	0x2
 5002 0741 91       		.byte	0x91
 5003 0742 40       		.sleb128 -64
 5004 0743 F6000000 		.4byte	.LVL85
 5005 0747 00010000 		.4byte	.LVL87
 5006 074b 0600     		.2byte	0x6
 5007 074d 52       		.byte	0x52
 5008 074e 93       		.byte	0x93
 5009 074f 04       		.uleb128 0x4
 5010 0750 53       		.byte	0x53
 5011 0751 93       		.byte	0x93
 5012 0752 04       		.uleb128 0x4
 5013 0753 00010000 		.4byte	.LVL87
 5014 0757 22010000 		.4byte	.LFE89
 5015 075b 0200     		.2byte	0x2
 5016 075d 91       		.byte	0x91
 5017 075e 40       		.sleb128 -64
 5018 075f 00000000 		.4byte	0
 5019 0763 00000000 		.4byte	0
 5020              	.LLST40:
 5021 0767 24000000 		.4byte	.LVL73
 5022 076b 74000000 		.4byte	.LVL79
 5023 076f 0100     		.2byte	0x1
 5024 0771 50       		.byte	0x50
 5025 0772 74000000 		.4byte	.LVL79
 5026 0776 00010000 		.4byte	.LVL87
 5027 077a 0200     		.2byte	0x2
 5028 077c 7C       		.byte	0x7c
 5029 077d 78       		.sleb128 -8
 5030 077e 00000000 		.4byte	0
 5031 0782 00000000 		.4byte	0
 5032              	.LLST41:
 5033 0786 26000000 		.4byte	.LVL74
 5034 078a 00010000 		.4byte	.LVL87
 5035 078e 0100     		.2byte	0x1
 5036 0790 54       		.byte	0x54
 5037 0791 00000000 		.4byte	0
 5038 0795 00000000 		.4byte	0
 5039              	.LLST42:
 5040 0799 2C000000 		.4byte	.LVL75
 5041 079d D6000000 		.4byte	.LVL84
 5042 07a1 0100     		.2byte	0x1
 5043 07a3 53       		.byte	0x53
 5044 07a4 D6000000 		.4byte	.LVL84
 5045 07a8 00010000 		.4byte	.LVL87
 5046 07ac 0200     		.2byte	0x2
 5047 07ae 7E       		.byte	0x7e
 5048 07af 78       		.sleb128 -8
 5049 07b0 00000000 		.4byte	0
 5050 07b4 00000000 		.4byte	0
 5051              	.LLST43:
 5052 07b8 2E000000 		.4byte	.LVL76
 5053 07bc A8000000 		.4byte	.LVL81
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 181


 5054 07c0 0100     		.2byte	0x1
 5055 07c2 52       		.byte	0x52
 5056 07c3 A8000000 		.4byte	.LVL81
 5057 07c7 00010000 		.4byte	.LVL87
 5058 07cb 0200     		.2byte	0x2
 5059 07cd 7E       		.byte	0x7e
 5060 07ce 7C       		.sleb128 -4
 5061 07cf 00000000 		.4byte	0
 5062 07d3 00000000 		.4byte	0
 5063              	.LLST44:
 5064 07d7 00000000 		.4byte	.LVL90
 5065 07db 0A000000 		.4byte	.LVL92
 5066 07df 0100     		.2byte	0x1
 5067 07e1 50       		.byte	0x50
 5068 07e2 0A000000 		.4byte	.LVL92
 5069 07e6 10000000 		.4byte	.LVL93
 5070 07ea 0300     		.2byte	0x3
 5071 07ec 70       		.byte	0x70
 5072 07ed 04       		.sleb128 4
 5073 07ee 9F       		.byte	0x9f
 5074 07ef 10000000 		.4byte	.LVL93
 5075 07f3 4A000000 		.4byte	.LVL103
 5076 07f7 0100     		.2byte	0x1
 5077 07f9 54       		.byte	0x54
 5078 07fa 4A000000 		.4byte	.LVL103
 5079 07fe 52000000 		.4byte	.LFE90
 5080 0802 0100     		.2byte	0x1
 5081 0804 50       		.byte	0x50
 5082 0805 00000000 		.4byte	0
 5083 0809 00000000 		.4byte	0
 5084              	.LLST45:
 5085 080d 00000000 		.4byte	.LVL90
 5086 0811 0A000000 		.4byte	.LVL92
 5087 0815 0100     		.2byte	0x1
 5088 0817 51       		.byte	0x51
 5089 0818 0A000000 		.4byte	.LVL92
 5090 081c 2E000000 		.4byte	.LVL98
 5091 0820 0100     		.2byte	0x1
 5092 0822 56       		.byte	0x56
 5093 0823 2E000000 		.4byte	.LVL98
 5094 0827 4A000000 		.4byte	.LVL103
 5095 082b 0100     		.2byte	0x1
 5096 082d 57       		.byte	0x57
 5097 082e 4A000000 		.4byte	.LVL103
 5098 0832 52000000 		.4byte	.LFE90
 5099 0836 0100     		.2byte	0x1
 5100 0838 56       		.byte	0x56
 5101 0839 00000000 		.4byte	0
 5102 083d 00000000 		.4byte	0
 5103              	.LLST46:
 5104 0841 00000000 		.4byte	.LVL90
 5105 0845 0A000000 		.4byte	.LVL92
 5106 0849 0100     		.2byte	0x1
 5107 084b 52       		.byte	0x52
 5108 084c 0A000000 		.4byte	.LVL92
 5109 0850 52000000 		.4byte	.LFE90
 5110 0854 0400     		.2byte	0x4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 182


 5111 0856 F3       		.byte	0xf3
 5112 0857 01       		.uleb128 0x1
 5113 0858 52       		.byte	0x52
 5114 0859 9F       		.byte	0x9f
 5115 085a 00000000 		.4byte	0
 5116 085e 00000000 		.4byte	0
 5117              	.LLST47:
 5118 0862 08000000 		.4byte	.LVL91
 5119 0866 0A000000 		.4byte	.LVL92
 5120 086a 0100     		.2byte	0x1
 5121 086c 52       		.byte	0x52
 5122 086d 0A000000 		.4byte	.LVL92
 5123 0871 52000000 		.4byte	.LFE90
 5124 0875 0100     		.2byte	0x1
 5125 0877 55       		.byte	0x55
 5126 0878 00000000 		.4byte	0
 5127 087c 00000000 		.4byte	0
 5128              	.LLST48:
 5129 0880 10000000 		.4byte	.LVL93
 5130 0884 17000000 		.4byte	.LVL95-1
 5131 0888 0100     		.2byte	0x1
 5132 088a 51       		.byte	0x51
 5133 088b 00000000 		.4byte	0
 5134 088f 00000000 		.4byte	0
 5135              	.LLST49:
 5136 0893 12000000 		.4byte	.LVL94
 5137 0897 2E000000 		.4byte	.LVL98
 5138 089b 0100     		.2byte	0x1
 5139 089d 57       		.byte	0x57
 5140 089e 00000000 		.4byte	0
 5141 08a2 00000000 		.4byte	0
 5142              	.LLST50:
 5143 08a6 2E000000 		.4byte	.LVL98
 5144 08aa 48000000 		.4byte	.LVL102
 5145 08ae 0100     		.2byte	0x1
 5146 08b0 56       		.byte	0x56
 5147 08b1 48000000 		.4byte	.LVL102
 5148 08b5 4A000000 		.4byte	.LVL103
 5149 08b9 0300     		.2byte	0x3
 5150 08bb 77       		.byte	0x77
 5151 08bc 7C       		.sleb128 -4
 5152 08bd 9F       		.byte	0x9f
 5153 08be 00000000 		.4byte	0
 5154 08c2 00000000 		.4byte	0
 5155              	.LLST51:
 5156 08c6 2E000000 		.4byte	.LVL98
 5157 08ca 33000000 		.4byte	.LVL99-1
 5158 08ce 0100     		.2byte	0x1
 5159 08d0 50       		.byte	0x50
 5160 08d1 33000000 		.4byte	.LVL99-1
 5161 08d5 4A000000 		.4byte	.LVL103
 5162 08d9 0100     		.2byte	0x1
 5163 08db 58       		.byte	0x58
 5164 08dc 00000000 		.4byte	0
 5165 08e0 00000000 		.4byte	0
 5166              	.LLST52:
 5167 08e4 00000000 		.4byte	.LVL104
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 183


 5168 08e8 0A000000 		.4byte	.LVL106
 5169 08ec 0100     		.2byte	0x1
 5170 08ee 50       		.byte	0x50
 5171 08ef 0A000000 		.4byte	.LVL106
 5172 08f3 10000000 		.4byte	.LVL107
 5173 08f7 0300     		.2byte	0x3
 5174 08f9 70       		.byte	0x70
 5175 08fa 08       		.sleb128 8
 5176 08fb 9F       		.byte	0x9f
 5177 08fc 10000000 		.4byte	.LVL107
 5178 0900 4E000000 		.4byte	.LVL116
 5179 0904 0100     		.2byte	0x1
 5180 0906 54       		.byte	0x54
 5181 0907 4E000000 		.4byte	.LVL116
 5182 090b 56000000 		.4byte	.LFE91
 5183 090f 0100     		.2byte	0x1
 5184 0911 50       		.byte	0x50
 5185 0912 00000000 		.4byte	0
 5186 0916 00000000 		.4byte	0
 5187              	.LLST53:
 5188 091a 00000000 		.4byte	.LVL104
 5189 091e 0A000000 		.4byte	.LVL106
 5190 0922 0100     		.2byte	0x1
 5191 0924 51       		.byte	0x51
 5192 0925 0A000000 		.4byte	.LVL106
 5193 0929 18000000 		.4byte	.LVL109
 5194 092d 0100     		.2byte	0x1
 5195 092f 5A       		.byte	0x5a
 5196 0930 18000000 		.4byte	.LVL109
 5197 0934 4E000000 		.4byte	.LVL116
 5198 0938 0100     		.2byte	0x1
 5199 093a 5B       		.byte	0x5b
 5200 093b 4E000000 		.4byte	.LVL116
 5201 093f 56000000 		.4byte	.LFE91
 5202 0943 0100     		.2byte	0x1
 5203 0945 5A       		.byte	0x5a
 5204 0946 00000000 		.4byte	0
 5205 094a 00000000 		.4byte	0
 5206              	.LLST54:
 5207 094e 00000000 		.4byte	.LVL104
 5208 0952 0A000000 		.4byte	.LVL106
 5209 0956 0100     		.2byte	0x1
 5210 0958 52       		.byte	0x52
 5211 0959 0A000000 		.4byte	.LVL106
 5212 095d 56000000 		.4byte	.LFE91
 5213 0961 0400     		.2byte	0x4
 5214 0963 F3       		.byte	0xf3
 5215 0964 01       		.uleb128 0x1
 5216 0965 52       		.byte	0x52
 5217 0966 9F       		.byte	0x9f
 5218 0967 00000000 		.4byte	0
 5219 096b 00000000 		.4byte	0
 5220              	.LLST55:
 5221 096f 08000000 		.4byte	.LVL105
 5222 0973 0A000000 		.4byte	.LVL106
 5223 0977 0100     		.2byte	0x1
 5224 0979 52       		.byte	0x52
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 184


 5225 097a 0A000000 		.4byte	.LVL106
 5226 097e 56000000 		.4byte	.LFE91
 5227 0982 0100     		.2byte	0x1
 5228 0984 55       		.byte	0x55
 5229 0985 00000000 		.4byte	0
 5230 0989 00000000 		.4byte	0
 5231              	.LLST56:
 5232 098d 10000000 		.4byte	.LVL107
 5233 0991 1F000000 		.4byte	.LVL110-1
 5234 0995 0600     		.2byte	0x6
 5235 0997 52       		.byte	0x52
 5236 0998 93       		.byte	0x93
 5237 0999 04       		.uleb128 0x4
 5238 099a 53       		.byte	0x53
 5239 099b 93       		.byte	0x93
 5240 099c 04       		.uleb128 0x4
 5241 099d 00000000 		.4byte	0
 5242 09a1 00000000 		.4byte	0
 5243              	.LLST57:
 5244 09a5 14000000 		.4byte	.LVL108
 5245 09a9 32000000 		.4byte	.LVL112
 5246 09ad 0600     		.2byte	0x6
 5247 09af 58       		.byte	0x58
 5248 09b0 93       		.byte	0x93
 5249 09b1 04       		.uleb128 0x4
 5250 09b2 59       		.byte	0x59
 5251 09b3 93       		.byte	0x93
 5252 09b4 04       		.uleb128 0x4
 5253 09b5 00000000 		.4byte	0
 5254 09b9 00000000 		.4byte	0
 5255              	.LLST58:
 5256 09bd 00000000 		.4byte	.LVL117
 5257 09c1 0A000000 		.4byte	.LVL119
 5258 09c5 0100     		.2byte	0x1
 5259 09c7 50       		.byte	0x50
 5260 09c8 0A000000 		.4byte	.LVL119
 5261 09cc 0C000000 		.4byte	.LVL120
 5262 09d0 0300     		.2byte	0x3
 5263 09d2 70       		.byte	0x70
 5264 09d3 02       		.sleb128 2
 5265 09d4 9F       		.byte	0x9f
 5266 09d5 0C000000 		.4byte	.LVL120
 5267 09d9 14000000 		.4byte	.LVL122
 5268 09dd 0100     		.2byte	0x1
 5269 09df 50       		.byte	0x50
 5270 09e0 14000000 		.4byte	.LVL122
 5271 09e4 30000000 		.4byte	.LVL128
 5272 09e8 0300     		.2byte	0x3
 5273 09ea 74       		.byte	0x74
 5274 09eb 7C       		.sleb128 -4
 5275 09ec 9F       		.byte	0x9f
 5276 09ed 30000000 		.4byte	.LVL128
 5277 09f1 38000000 		.4byte	.LFE92
 5278 09f5 0100     		.2byte	0x1
 5279 09f7 50       		.byte	0x50
 5280 09f8 00000000 		.4byte	0
 5281 09fc 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 185


 5282              	.LLST59:
 5283 0a00 00000000 		.4byte	.LVL117
 5284 0a04 0A000000 		.4byte	.LVL119
 5285 0a08 0100     		.2byte	0x1
 5286 0a0a 51       		.byte	0x51
 5287 0a0b 0A000000 		.4byte	.LVL119
 5288 0a0f 24000000 		.4byte	.LVL125
 5289 0a13 0100     		.2byte	0x1
 5290 0a15 56       		.byte	0x56
 5291 0a16 24000000 		.4byte	.LVL125
 5292 0a1a 2E000000 		.4byte	.LVL127
 5293 0a1e 0300     		.2byte	0x3
 5294 0a20 76       		.byte	0x76
 5295 0a21 02       		.sleb128 2
 5296 0a22 9F       		.byte	0x9f
 5297 0a23 2E000000 		.4byte	.LVL127
 5298 0a27 38000000 		.4byte	.LFE92
 5299 0a2b 0100     		.2byte	0x1
 5300 0a2d 56       		.byte	0x56
 5301 0a2e 00000000 		.4byte	0
 5302 0a32 00000000 		.4byte	0
 5303              	.LLST60:
 5304 0a36 00000000 		.4byte	.LVL117
 5305 0a3a 0A000000 		.4byte	.LVL119
 5306 0a3e 0100     		.2byte	0x1
 5307 0a40 52       		.byte	0x52
 5308 0a41 0A000000 		.4byte	.LVL119
 5309 0a45 38000000 		.4byte	.LFE92
 5310 0a49 0400     		.2byte	0x4
 5311 0a4b F3       		.byte	0xf3
 5312 0a4c 01       		.uleb128 0x1
 5313 0a4d 52       		.byte	0x52
 5314 0a4e 9F       		.byte	0x9f
 5315 0a4f 00000000 		.4byte	0
 5316 0a53 00000000 		.4byte	0
 5317              	.LLST61:
 5318 0a57 08000000 		.4byte	.LVL118
 5319 0a5b 0A000000 		.4byte	.LVL119
 5320 0a5f 0100     		.2byte	0x1
 5321 0a61 52       		.byte	0x52
 5322 0a62 0A000000 		.4byte	.LVL119
 5323 0a66 38000000 		.4byte	.LFE92
 5324 0a6a 0100     		.2byte	0x1
 5325 0a6c 55       		.byte	0x55
 5326 0a6d 00000000 		.4byte	0
 5327 0a71 00000000 		.4byte	0
 5328              	.LLST62:
 5329 0a75 0C000000 		.4byte	.LVL120
 5330 0a79 14000000 		.4byte	.LVL122
 5331 0a7d 0200     		.2byte	0x2
 5332 0a7f 70       		.byte	0x70
 5333 0a80 00       		.sleb128 0
 5334 0a81 14000000 		.4byte	.LVL122
 5335 0a85 23000000 		.4byte	.LVL125-1
 5336 0a89 0200     		.2byte	0x2
 5337 0a8b 74       		.byte	0x74
 5338 0a8c 7C       		.sleb128 -4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 186


 5339 0a8d 00000000 		.4byte	0
 5340 0a91 00000000 		.4byte	0
 5341              	.LLST63:
 5342 0a95 0C000000 		.4byte	.LVL120
 5343 0a99 14000000 		.4byte	.LVL122
 5344 0a9d 0200     		.2byte	0x2
 5345 0a9f 70       		.byte	0x70
 5346 0aa0 02       		.sleb128 2
 5347 0aa1 14000000 		.4byte	.LVL122
 5348 0aa5 23000000 		.4byte	.LVL125-1
 5349 0aa9 0200     		.2byte	0x2
 5350 0aab 74       		.byte	0x74
 5351 0aac 7E       		.sleb128 -2
 5352 0aad 00000000 		.4byte	0
 5353 0ab1 00000000 		.4byte	0
 5354              	.LLST64:
 5355 0ab5 10000000 		.4byte	.LVL121
 5356 0ab9 23000000 		.4byte	.LVL125-1
 5357 0abd 0600     		.2byte	0x6
 5358 0abf 73       		.byte	0x73
 5359 0ac0 00       		.sleb128 0
 5360 0ac1 73       		.byte	0x73
 5361 0ac2 00       		.sleb128 0
 5362 0ac3 1E       		.byte	0x1e
 5363 0ac4 9F       		.byte	0x9f
 5364 0ac5 00000000 		.4byte	0
 5365 0ac9 00000000 		.4byte	0
 5366              	.LLST65:
 5367 0acd 18000000 		.4byte	.LVL123
 5368 0ad1 1C000000 		.4byte	.LVL124
 5369 0ad5 0100     		.2byte	0x1
 5370 0ad7 50       		.byte	0x50
 5371 0ad8 1C000000 		.4byte	.LVL124
 5372 0adc 23000000 		.4byte	.LVL125-1
 5373 0ae0 1200     		.2byte	0x12
 5374 0ae2 74       		.byte	0x74
 5375 0ae3 7E       		.sleb128 -2
 5376 0ae4 94       		.byte	0x94
 5377 0ae5 02       		.byte	0x2
 5378 0ae6 40       		.byte	0x40
 5379 0ae7 24       		.byte	0x24
 5380 0ae8 40       		.byte	0x40
 5381 0ae9 26       		.byte	0x26
 5382 0aea 74       		.byte	0x74
 5383 0aeb 7E       		.sleb128 -2
 5384 0aec 94       		.byte	0x94
 5385 0aed 02       		.byte	0x2
 5386 0aee 40       		.byte	0x40
 5387 0aef 24       		.byte	0x24
 5388 0af0 40       		.byte	0x40
 5389 0af1 26       		.byte	0x26
 5390 0af2 1E       		.byte	0x1e
 5391 0af3 9F       		.byte	0x9f
 5392 0af4 00000000 		.4byte	0
 5393 0af8 00000000 		.4byte	0
 5394              	.LLST66:
 5395 0afc 00000000 		.4byte	.LVL129
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 187


 5396 0b00 06000000 		.4byte	.LVL131
 5397 0b04 0100     		.2byte	0x1
 5398 0b06 50       		.byte	0x50
 5399 0b07 06000000 		.4byte	.LVL131
 5400 0b0b 08000000 		.4byte	.LVL132
 5401 0b0f 0300     		.2byte	0x3
 5402 0b11 70       		.byte	0x70
 5403 0b12 02       		.sleb128 2
 5404 0b13 9F       		.byte	0x9f
 5405 0b14 08000000 		.4byte	.LVL132
 5406 0b18 22000000 		.4byte	.LVL136
 5407 0b1c 0100     		.2byte	0x1
 5408 0b1e 50       		.byte	0x50
 5409 0b1f 22000000 		.4byte	.LVL136
 5410 0b23 34000000 		.4byte	.LVL140
 5411 0b27 0300     		.2byte	0x3
 5412 0b29 74       		.byte	0x74
 5413 0b2a 7C       		.sleb128 -4
 5414 0b2b 9F       		.byte	0x9f
 5415 0b2c 34000000 		.4byte	.LVL140
 5416 0b30 3A000000 		.4byte	.LFE93
 5417 0b34 0100     		.2byte	0x1
 5418 0b36 50       		.byte	0x50
 5419 0b37 00000000 		.4byte	0
 5420 0b3b 00000000 		.4byte	0
 5421              	.LLST67:
 5422 0b3f 00000000 		.4byte	.LVL129
 5423 0b43 28000000 		.4byte	.LVL137
 5424 0b47 0100     		.2byte	0x1
 5425 0b49 51       		.byte	0x51
 5426 0b4a 28000000 		.4byte	.LVL137
 5427 0b4e 34000000 		.4byte	.LVL140
 5428 0b52 0100     		.2byte	0x1
 5429 0b54 56       		.byte	0x56
 5430 0b55 34000000 		.4byte	.LVL140
 5431 0b59 3A000000 		.4byte	.LFE93
 5432 0b5d 0100     		.2byte	0x1
 5433 0b5f 51       		.byte	0x51
 5434 0b60 00000000 		.4byte	0
 5435 0b64 00000000 		.4byte	0
 5436              	.LLST68:
 5437 0b68 00000000 		.4byte	.LVL129
 5438 0b6c 06000000 		.4byte	.LVL131
 5439 0b70 0100     		.2byte	0x1
 5440 0b72 52       		.byte	0x52
 5441 0b73 06000000 		.4byte	.LVL131
 5442 0b77 3A000000 		.4byte	.LFE93
 5443 0b7b 0400     		.2byte	0x4
 5444 0b7d F3       		.byte	0xf3
 5445 0b7e 01       		.uleb128 0x1
 5446 0b7f 52       		.byte	0x52
 5447 0b80 9F       		.byte	0x9f
 5448 0b81 00000000 		.4byte	0
 5449 0b85 00000000 		.4byte	0
 5450              	.LLST69:
 5451 0b89 04000000 		.4byte	.LVL130
 5452 0b8d 06000000 		.4byte	.LVL131
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 188


 5453 0b91 0100     		.2byte	0x1
 5454 0b93 52       		.byte	0x52
 5455 0b94 06000000 		.4byte	.LVL131
 5456 0b98 3A000000 		.4byte	.LFE93
 5457 0b9c 0100     		.2byte	0x1
 5458 0b9e 55       		.byte	0x55
 5459 0b9f 00000000 		.4byte	0
 5460 0ba3 00000000 		.4byte	0
 5461              	.LLST70:
 5462 0ba7 08000000 		.4byte	.LVL132
 5463 0bab 22000000 		.4byte	.LVL136
 5464 0baf 0200     		.2byte	0x2
 5465 0bb1 70       		.byte	0x70
 5466 0bb2 00       		.sleb128 0
 5467 0bb3 22000000 		.4byte	.LVL136
 5468 0bb7 2D000000 		.4byte	.LVL138-1
 5469 0bbb 0200     		.2byte	0x2
 5470 0bbd 74       		.byte	0x74
 5471 0bbe 7C       		.sleb128 -4
 5472 0bbf 00000000 		.4byte	0
 5473 0bc3 00000000 		.4byte	0
 5474              	.LLST71:
 5475 0bc7 08000000 		.4byte	.LVL132
 5476 0bcb 22000000 		.4byte	.LVL136
 5477 0bcf 0200     		.2byte	0x2
 5478 0bd1 70       		.byte	0x70
 5479 0bd2 02       		.sleb128 2
 5480 0bd3 22000000 		.4byte	.LVL136
 5481 0bd7 2D000000 		.4byte	.LVL138-1
 5482 0bdb 0200     		.2byte	0x2
 5483 0bdd 74       		.byte	0x74
 5484 0bde 7E       		.sleb128 -2
 5485 0bdf 00000000 		.4byte	0
 5486 0be3 00000000 		.4byte	0
 5487              	.LLST72:
 5488 0be7 10000000 		.4byte	.LVL133
 5489 0beb 28000000 		.4byte	.LVL137
 5490 0bef 0100     		.2byte	0x1
 5491 0bf1 56       		.byte	0x56
 5492 0bf2 28000000 		.4byte	.LVL137
 5493 0bf6 2D000000 		.4byte	.LVL138-1
 5494 0bfa 1200     		.2byte	0x12
 5495 0bfc 74       		.byte	0x74
 5496 0bfd 7C       		.sleb128 -4
 5497 0bfe 94       		.byte	0x94
 5498 0bff 02       		.byte	0x2
 5499 0c00 40       		.byte	0x40
 5500 0c01 24       		.byte	0x24
 5501 0c02 40       		.byte	0x40
 5502 0c03 26       		.byte	0x26
 5503 0c04 74       		.byte	0x74
 5504 0c05 7C       		.sleb128 -4
 5505 0c06 94       		.byte	0x94
 5506 0c07 02       		.byte	0x2
 5507 0c08 40       		.byte	0x40
 5508 0c09 24       		.byte	0x24
 5509 0c0a 40       		.byte	0x40
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 189


 5510 0c0b 26       		.byte	0x26
 5511 0c0c 1E       		.byte	0x1e
 5512 0c0d 9F       		.byte	0x9f
 5513 0c0e 00000000 		.4byte	0
 5514 0c12 00000000 		.4byte	0
 5515              	.LLST73:
 5516 0c16 18000000 		.4byte	.LVL134
 5517 0c1a 1C000000 		.4byte	.LVL135
 5518 0c1e 0100     		.2byte	0x1
 5519 0c20 52       		.byte	0x52
 5520 0c21 1C000000 		.4byte	.LVL135
 5521 0c25 22000000 		.4byte	.LVL136
 5522 0c29 1200     		.2byte	0x12
 5523 0c2b 70       		.byte	0x70
 5524 0c2c 02       		.sleb128 2
 5525 0c2d 94       		.byte	0x94
 5526 0c2e 02       		.byte	0x2
 5527 0c2f 40       		.byte	0x40
 5528 0c30 24       		.byte	0x24
 5529 0c31 40       		.byte	0x40
 5530 0c32 26       		.byte	0x26
 5531 0c33 70       		.byte	0x70
 5532 0c34 02       		.sleb128 2
 5533 0c35 94       		.byte	0x94
 5534 0c36 02       		.byte	0x2
 5535 0c37 40       		.byte	0x40
 5536 0c38 24       		.byte	0x24
 5537 0c39 40       		.byte	0x40
 5538 0c3a 26       		.byte	0x26
 5539 0c3b 1E       		.byte	0x1e
 5540 0c3c 9F       		.byte	0x9f
 5541 0c3d 22000000 		.4byte	.LVL136
 5542 0c41 2D000000 		.4byte	.LVL138-1
 5543 0c45 1200     		.2byte	0x12
 5544 0c47 74       		.byte	0x74
 5545 0c48 7E       		.sleb128 -2
 5546 0c49 94       		.byte	0x94
 5547 0c4a 02       		.byte	0x2
 5548 0c4b 40       		.byte	0x40
 5549 0c4c 24       		.byte	0x24
 5550 0c4d 40       		.byte	0x40
 5551 0c4e 26       		.byte	0x26
 5552 0c4f 74       		.byte	0x74
 5553 0c50 7E       		.sleb128 -2
 5554 0c51 94       		.byte	0x94
 5555 0c52 02       		.byte	0x2
 5556 0c53 40       		.byte	0x40
 5557 0c54 24       		.byte	0x24
 5558 0c55 40       		.byte	0x40
 5559 0c56 26       		.byte	0x26
 5560 0c57 1E       		.byte	0x1e
 5561 0c58 9F       		.byte	0x9f
 5562 0c59 00000000 		.4byte	0
 5563 0c5d 00000000 		.4byte	0
 5564              	.LLST74:
 5565 0c61 00000000 		.4byte	.LVL141
 5566 0c65 0A000000 		.4byte	.LVL143
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 190


 5567 0c69 0100     		.2byte	0x1
 5568 0c6b 50       		.byte	0x50
 5569 0c6c 0A000000 		.4byte	.LVL143
 5570 0c70 10000000 		.4byte	.LVL144
 5571 0c74 0300     		.2byte	0x3
 5572 0c76 70       		.byte	0x70
 5573 0c77 04       		.sleb128 4
 5574 0c78 9F       		.byte	0x9f
 5575 0c79 10000000 		.4byte	.LVL144
 5576 0c7d 46000000 		.4byte	.LVL155
 5577 0c81 0100     		.2byte	0x1
 5578 0c83 54       		.byte	0x54
 5579 0c84 46000000 		.4byte	.LVL155
 5580 0c88 4E000000 		.4byte	.LFE94
 5581 0c8c 0100     		.2byte	0x1
 5582 0c8e 50       		.byte	0x50
 5583 0c8f 00000000 		.4byte	0
 5584 0c93 00000000 		.4byte	0
 5585              	.LLST75:
 5586 0c97 00000000 		.4byte	.LVL141
 5587 0c9b 0A000000 		.4byte	.LVL143
 5588 0c9f 0100     		.2byte	0x1
 5589 0ca1 51       		.byte	0x51
 5590 0ca2 0A000000 		.4byte	.LVL143
 5591 0ca6 36000000 		.4byte	.LVL150
 5592 0caa 0100     		.2byte	0x1
 5593 0cac 56       		.byte	0x56
 5594 0cad 36000000 		.4byte	.LVL150
 5595 0cb1 46000000 		.4byte	.LVL155
 5596 0cb5 0100     		.2byte	0x1
 5597 0cb7 57       		.byte	0x57
 5598 0cb8 46000000 		.4byte	.LVL155
 5599 0cbc 4E000000 		.4byte	.LFE94
 5600 0cc0 0100     		.2byte	0x1
 5601 0cc2 56       		.byte	0x56
 5602 0cc3 00000000 		.4byte	0
 5603 0cc7 00000000 		.4byte	0
 5604              	.LLST76:
 5605 0ccb 00000000 		.4byte	.LVL141
 5606 0ccf 0A000000 		.4byte	.LVL143
 5607 0cd3 0100     		.2byte	0x1
 5608 0cd5 52       		.byte	0x52
 5609 0cd6 0A000000 		.4byte	.LVL143
 5610 0cda 4E000000 		.4byte	.LFE94
 5611 0cde 0400     		.2byte	0x4
 5612 0ce0 F3       		.byte	0xf3
 5613 0ce1 01       		.uleb128 0x1
 5614 0ce2 52       		.byte	0x52
 5615 0ce3 9F       		.byte	0x9f
 5616 0ce4 00000000 		.4byte	0
 5617 0ce8 00000000 		.4byte	0
 5618              	.LLST77:
 5619 0cec 08000000 		.4byte	.LVL142
 5620 0cf0 0A000000 		.4byte	.LVL143
 5621 0cf4 0100     		.2byte	0x1
 5622 0cf6 52       		.byte	0x52
 5623 0cf7 0A000000 		.4byte	.LVL143
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 191


 5624 0cfb 4E000000 		.4byte	.LFE94
 5625 0cff 0100     		.2byte	0x1
 5626 0d01 55       		.byte	0x55
 5627 0d02 00000000 		.4byte	0
 5628 0d06 00000000 		.4byte	0
 5629              	.LLST78:
 5630 0d0a 10000000 		.4byte	.LVL144
 5631 0d0e 1E000000 		.4byte	.LVL146
 5632 0d12 0100     		.2byte	0x1
 5633 0d14 52       		.byte	0x52
 5634 0d15 1E000000 		.4byte	.LVL146
 5635 0d19 3F000000 		.4byte	.LVL153-1
 5636 0d1d 0200     		.2byte	0x2
 5637 0d1f 74       		.byte	0x74
 5638 0d20 78       		.sleb128 -8
 5639 0d21 00000000 		.4byte	0
 5640 0d25 00000000 		.4byte	0
 5641              	.LLST79:
 5642 0d29 12000000 		.4byte	.LVL145
 5643 0d2d 2E000000 		.4byte	.LVL148
 5644 0d31 0100     		.2byte	0x1
 5645 0d33 50       		.byte	0x50
 5646 0d34 2E000000 		.4byte	.LVL148
 5647 0d38 3F000000 		.4byte	.LVL153-1
 5648 0d3c 0200     		.2byte	0x2
 5649 0d3e 74       		.byte	0x74
 5650 0d3f 7C       		.sleb128 -4
 5651 0d40 00000000 		.4byte	0
 5652 0d44 00000000 		.4byte	0
 5653              	.LLST80:
 5654 0d48 22000000 		.4byte	.LVL147
 5655 0d4c 3F000000 		.4byte	.LVL153-1
 5656 0d50 0500     		.2byte	0x5
 5657 0d52 73       		.byte	0x73
 5658 0d53 00       		.sleb128 0
 5659 0d54 31       		.byte	0x31
 5660 0d55 26       		.byte	0x26
 5661 0d56 9F       		.byte	0x9f
 5662 0d57 00000000 		.4byte	0
 5663 0d5b 00000000 		.4byte	0
 5664              	.LLST81:
 5665 0d5f 34000000 		.4byte	.LVL149
 5666 0d63 3A000000 		.4byte	.LVL151
 5667 0d67 0100     		.2byte	0x1
 5668 0d69 50       		.byte	0x50
 5669 0d6a 3A000000 		.4byte	.LVL151
 5670 0d6e 3C000000 		.4byte	.LVL152
 5671 0d72 0500     		.2byte	0x5
 5672 0d74 71       		.byte	0x71
 5673 0d75 00       		.sleb128 0
 5674 0d76 31       		.byte	0x31
 5675 0d77 26       		.byte	0x26
 5676 0d78 9F       		.byte	0x9f
 5677 0d79 3C000000 		.4byte	.LVL152
 5678 0d7d 3F000000 		.4byte	.LVL153-1
 5679 0d81 1100     		.2byte	0x11
 5680 0d83 74       		.byte	0x74
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 192


 5681 0d84 78       		.sleb128 -8
 5682 0d85 06       		.byte	0x6
 5683 0d86 4F       		.byte	0x4f
 5684 0d87 26       		.byte	0x26
 5685 0d88 74       		.byte	0x74
 5686 0d89 78       		.sleb128 -8
 5687 0d8a 06       		.byte	0x6
 5688 0d8b 1E       		.byte	0x1e
 5689 0d8c 72       		.byte	0x72
 5690 0d8d 00       		.sleb128 0
 5691 0d8e 31       		.byte	0x31
 5692 0d8f 24       		.byte	0x24
 5693 0d90 22       		.byte	0x22
 5694 0d91 31       		.byte	0x31
 5695 0d92 26       		.byte	0x26
 5696 0d93 9F       		.byte	0x9f
 5697 0d94 00000000 		.4byte	0
 5698 0d98 00000000 		.4byte	0
 5699              	.LLST82:
 5700 0d9c 00000000 		.4byte	.LVL156
 5701 0da0 0A000000 		.4byte	.LVL158
 5702 0da4 0100     		.2byte	0x1
 5703 0da6 50       		.byte	0x50
 5704 0da7 0A000000 		.4byte	.LVL158
 5705 0dab 10000000 		.4byte	.LVL159
 5706 0daf 0300     		.2byte	0x3
 5707 0db1 70       		.byte	0x70
 5708 0db2 04       		.sleb128 4
 5709 0db3 9F       		.byte	0x9f
 5710 0db4 10000000 		.4byte	.LVL159
 5711 0db8 36000000 		.4byte	.LVL166
 5712 0dbc 0100     		.2byte	0x1
 5713 0dbe 54       		.byte	0x54
 5714 0dbf 36000000 		.4byte	.LVL166
 5715 0dc3 3E000000 		.4byte	.LFE95
 5716 0dc7 0100     		.2byte	0x1
 5717 0dc9 50       		.byte	0x50
 5718 0dca 00000000 		.4byte	0
 5719 0dce 00000000 		.4byte	0
 5720              	.LLST83:
 5721 0dd2 00000000 		.4byte	.LVL156
 5722 0dd6 0A000000 		.4byte	.LVL158
 5723 0dda 0100     		.2byte	0x1
 5724 0ddc 51       		.byte	0x51
 5725 0ddd 0A000000 		.4byte	.LVL158
 5726 0de1 16000000 		.4byte	.LVL161
 5727 0de5 0100     		.2byte	0x1
 5728 0de7 56       		.byte	0x56
 5729 0de8 16000000 		.4byte	.LVL161
 5730 0dec 36000000 		.4byte	.LVL166
 5731 0df0 0100     		.2byte	0x1
 5732 0df2 58       		.byte	0x58
 5733 0df3 36000000 		.4byte	.LVL166
 5734 0df7 3E000000 		.4byte	.LFE95
 5735 0dfb 0100     		.2byte	0x1
 5736 0dfd 56       		.byte	0x56
 5737 0dfe 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 193


 5738 0e02 00000000 		.4byte	0
 5739              	.LLST84:
 5740 0e06 00000000 		.4byte	.LVL156
 5741 0e0a 0A000000 		.4byte	.LVL158
 5742 0e0e 0100     		.2byte	0x1
 5743 0e10 52       		.byte	0x52
 5744 0e11 0A000000 		.4byte	.LVL158
 5745 0e15 3E000000 		.4byte	.LFE95
 5746 0e19 0400     		.2byte	0x4
 5747 0e1b F3       		.byte	0xf3
 5748 0e1c 01       		.uleb128 0x1
 5749 0e1d 52       		.byte	0x52
 5750 0e1e 9F       		.byte	0x9f
 5751 0e1f 00000000 		.4byte	0
 5752 0e23 00000000 		.4byte	0
 5753              	.LLST85:
 5754 0e27 08000000 		.4byte	.LVL157
 5755 0e2b 0A000000 		.4byte	.LVL158
 5756 0e2f 0100     		.2byte	0x1
 5757 0e31 52       		.byte	0x52
 5758 0e32 0A000000 		.4byte	.LVL158
 5759 0e36 3E000000 		.4byte	.LFE95
 5760 0e3a 0100     		.2byte	0x1
 5761 0e3c 55       		.byte	0x55
 5762 0e3d 00000000 		.4byte	0
 5763 0e41 00000000 		.4byte	0
 5764              	.LLST86:
 5765 0e45 10000000 		.4byte	.LVL159
 5766 0e49 1B000000 		.4byte	.LVL162-1
 5767 0e4d 0100     		.2byte	0x1
 5768 0e4f 51       		.byte	0x51
 5769 0e50 00000000 		.4byte	0
 5770 0e54 00000000 		.4byte	0
 5771              	.LLST87:
 5772 0e58 12000000 		.4byte	.LVL160
 5773 0e5c 36000000 		.4byte	.LVL166
 5774 0e60 0100     		.2byte	0x1
 5775 0e62 57       		.byte	0x57
 5776 0e63 00000000 		.4byte	0
 5777 0e67 00000000 		.4byte	0
 5778              	.LLST88:
 5779 0e6b 00000000 		.4byte	.LVL167
 5780 0e6f 0A000000 		.4byte	.LVL169
 5781 0e73 0100     		.2byte	0x1
 5782 0e75 50       		.byte	0x50
 5783 0e76 0A000000 		.4byte	.LVL169
 5784 0e7a 10000000 		.4byte	.LVL170
 5785 0e7e 0300     		.2byte	0x3
 5786 0e80 70       		.byte	0x70
 5787 0e81 08       		.sleb128 8
 5788 0e82 9F       		.byte	0x9f
 5789 0e83 10000000 		.4byte	.LVL170
 5790 0e87 46000000 		.4byte	.LVL177
 5791 0e8b 0100     		.2byte	0x1
 5792 0e8d 54       		.byte	0x54
 5793 0e8e 46000000 		.4byte	.LVL177
 5794 0e92 4E000000 		.4byte	.LFE96
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 194


 5795 0e96 0100     		.2byte	0x1
 5796 0e98 50       		.byte	0x50
 5797 0e99 00000000 		.4byte	0
 5798 0e9d 00000000 		.4byte	0
 5799              	.LLST89:
 5800 0ea1 00000000 		.4byte	.LVL167
 5801 0ea5 0A000000 		.4byte	.LVL169
 5802 0ea9 0100     		.2byte	0x1
 5803 0eab 51       		.byte	0x51
 5804 0eac 0A000000 		.4byte	.LVL169
 5805 0eb0 18000000 		.4byte	.LVL172
 5806 0eb4 0100     		.2byte	0x1
 5807 0eb6 5A       		.byte	0x5a
 5808 0eb7 18000000 		.4byte	.LVL172
 5809 0ebb 46000000 		.4byte	.LVL177
 5810 0ebf 0100     		.2byte	0x1
 5811 0ec1 5B       		.byte	0x5b
 5812 0ec2 46000000 		.4byte	.LVL177
 5813 0ec6 4E000000 		.4byte	.LFE96
 5814 0eca 0100     		.2byte	0x1
 5815 0ecc 5A       		.byte	0x5a
 5816 0ecd 00000000 		.4byte	0
 5817 0ed1 00000000 		.4byte	0
 5818              	.LLST90:
 5819 0ed5 00000000 		.4byte	.LVL167
 5820 0ed9 0A000000 		.4byte	.LVL169
 5821 0edd 0100     		.2byte	0x1
 5822 0edf 52       		.byte	0x52
 5823 0ee0 0A000000 		.4byte	.LVL169
 5824 0ee4 4E000000 		.4byte	.LFE96
 5825 0ee8 0400     		.2byte	0x4
 5826 0eea F3       		.byte	0xf3
 5827 0eeb 01       		.uleb128 0x1
 5828 0eec 52       		.byte	0x52
 5829 0eed 9F       		.byte	0x9f
 5830 0eee 00000000 		.4byte	0
 5831 0ef2 00000000 		.4byte	0
 5832              	.LLST91:
 5833 0ef6 08000000 		.4byte	.LVL168
 5834 0efa 0A000000 		.4byte	.LVL169
 5835 0efe 0100     		.2byte	0x1
 5836 0f00 52       		.byte	0x52
 5837 0f01 0A000000 		.4byte	.LVL169
 5838 0f05 4E000000 		.4byte	.LFE96
 5839 0f09 0100     		.2byte	0x1
 5840 0f0b 55       		.byte	0x55
 5841 0f0c 00000000 		.4byte	0
 5842 0f10 00000000 		.4byte	0
 5843              	.LLST92:
 5844 0f14 10000000 		.4byte	.LVL170
 5845 0f18 1F000000 		.4byte	.LVL173-1
 5846 0f1c 0600     		.2byte	0x6
 5847 0f1e 52       		.byte	0x52
 5848 0f1f 93       		.byte	0x93
 5849 0f20 04       		.uleb128 0x4
 5850 0f21 53       		.byte	0x53
 5851 0f22 93       		.byte	0x93
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 195


 5852 0f23 04       		.uleb128 0x4
 5853 0f24 00000000 		.4byte	0
 5854 0f28 00000000 		.4byte	0
 5855              	.LLST93:
 5856 0f2c 14000000 		.4byte	.LVL171
 5857 0f30 46000000 		.4byte	.LVL177
 5858 0f34 0600     		.2byte	0x6
 5859 0f36 56       		.byte	0x56
 5860 0f37 93       		.byte	0x93
 5861 0f38 04       		.uleb128 0x4
 5862 0f39 57       		.byte	0x57
 5863 0f3a 93       		.byte	0x93
 5864 0f3b 04       		.uleb128 0x4
 5865 0f3c 00000000 		.4byte	0
 5866 0f40 00000000 		.4byte	0
 5867              	.LLST94:
 5868 0f44 00000000 		.4byte	.LVL178
 5869 0f48 06000000 		.4byte	.LVL180
 5870 0f4c 0100     		.2byte	0x1
 5871 0f4e 50       		.byte	0x50
 5872 0f4f 06000000 		.4byte	.LVL180
 5873 0f53 08000000 		.4byte	.LVL181
 5874 0f57 0300     		.2byte	0x3
 5875 0f59 70       		.byte	0x70
 5876 0f5a 02       		.sleb128 2
 5877 0f5b 9F       		.byte	0x9f
 5878 0f5c 08000000 		.4byte	.LVL181
 5879 0f60 14000000 		.4byte	.LVL183
 5880 0f64 0100     		.2byte	0x1
 5881 0f66 50       		.byte	0x50
 5882 0f67 14000000 		.4byte	.LVL183
 5883 0f6b 2E000000 		.4byte	.LVL190
 5884 0f6f 0300     		.2byte	0x3
 5885 0f71 74       		.byte	0x74
 5886 0f72 7C       		.sleb128 -4
 5887 0f73 9F       		.byte	0x9f
 5888 0f74 2E000000 		.4byte	.LVL190
 5889 0f78 36000000 		.4byte	.LFE97
 5890 0f7c 0100     		.2byte	0x1
 5891 0f7e 50       		.byte	0x50
 5892 0f7f 00000000 		.4byte	0
 5893 0f83 00000000 		.4byte	0
 5894              	.LLST95:
 5895 0f87 00000000 		.4byte	.LVL178
 5896 0f8b 06000000 		.4byte	.LVL180
 5897 0f8f 0100     		.2byte	0x1
 5898 0f91 51       		.byte	0x51
 5899 0f92 06000000 		.4byte	.LVL180
 5900 0f96 18000000 		.4byte	.LVL184
 5901 0f9a 0100     		.2byte	0x1
 5902 0f9c 55       		.byte	0x55
 5903 0f9d 18000000 		.4byte	.LVL184
 5904 0fa1 2C000000 		.4byte	.LVL189
 5905 0fa5 0300     		.2byte	0x3
 5906 0fa7 75       		.byte	0x75
 5907 0fa8 02       		.sleb128 2
 5908 0fa9 9F       		.byte	0x9f
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 196


 5909 0faa 2C000000 		.4byte	.LVL189
 5910 0fae 34000000 		.4byte	.LVL191
 5911 0fb2 0100     		.2byte	0x1
 5912 0fb4 55       		.byte	0x55
 5913 0fb5 00000000 		.4byte	0
 5914 0fb9 00000000 		.4byte	0
 5915              	.LLST96:
 5916 0fbd 00000000 		.4byte	.LVL178
 5917 0fc1 06000000 		.4byte	.LVL180
 5918 0fc5 0100     		.2byte	0x1
 5919 0fc7 52       		.byte	0x52
 5920 0fc8 06000000 		.4byte	.LVL180
 5921 0fcc 36000000 		.4byte	.LFE97
 5922 0fd0 0400     		.2byte	0x4
 5923 0fd2 F3       		.byte	0xf3
 5924 0fd3 01       		.uleb128 0x1
 5925 0fd4 52       		.byte	0x52
 5926 0fd5 9F       		.byte	0x9f
 5927 0fd6 00000000 		.4byte	0
 5928 0fda 00000000 		.4byte	0
 5929              	.LLST97:
 5930 0fde 08000000 		.4byte	.LVL181
 5931 0fe2 14000000 		.4byte	.LVL183
 5932 0fe6 0200     		.2byte	0x2
 5933 0fe8 70       		.byte	0x70
 5934 0fe9 00       		.sleb128 0
 5935 0fea 14000000 		.4byte	.LVL183
 5936 0fee 28000000 		.4byte	.LVL187
 5937 0ff2 0200     		.2byte	0x2
 5938 0ff4 74       		.byte	0x74
 5939 0ff5 7C       		.sleb128 -4
 5940 0ff6 00000000 		.4byte	0
 5941 0ffa 00000000 		.4byte	0
 5942              	.LLST98:
 5943 0ffe 08000000 		.4byte	.LVL181
 5944 1002 14000000 		.4byte	.LVL183
 5945 1006 0200     		.2byte	0x2
 5946 1008 70       		.byte	0x70
 5947 1009 02       		.sleb128 2
 5948 100a 14000000 		.4byte	.LVL183
 5949 100e 28000000 		.4byte	.LVL187
 5950 1012 0200     		.2byte	0x2
 5951 1014 74       		.byte	0x74
 5952 1015 7E       		.sleb128 -2
 5953 1016 00000000 		.4byte	0
 5954 101a 00000000 		.4byte	0
 5955              	.LLST99:
 5956 101e 10000000 		.4byte	.LVL182
 5957 1022 22000000 		.4byte	.LVL186
 5958 1026 0100     		.2byte	0x1
 5959 1028 53       		.byte	0x53
 5960 1029 22000000 		.4byte	.LVL186
 5961 102d 28000000 		.4byte	.LVL187
 5962 1031 1200     		.2byte	0x12
 5963 1033 74       		.byte	0x74
 5964 1034 7C       		.sleb128 -4
 5965 1035 94       		.byte	0x94
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 197


 5966 1036 02       		.byte	0x2
 5967 1037 40       		.byte	0x40
 5968 1038 24       		.byte	0x24
 5969 1039 40       		.byte	0x40
 5970 103a 26       		.byte	0x26
 5971 103b 74       		.byte	0x74
 5972 103c 7C       		.sleb128 -4
 5973 103d 94       		.byte	0x94
 5974 103e 02       		.byte	0x2
 5975 103f 40       		.byte	0x40
 5976 1040 24       		.byte	0x24
 5977 1041 40       		.byte	0x40
 5978 1042 26       		.byte	0x26
 5979 1043 1E       		.byte	0x1e
 5980 1044 9F       		.byte	0x9f
 5981 1045 00000000 		.4byte	0
 5982 1049 00000000 		.4byte	0
 5983              	.LLST100:
 5984 104d 18000000 		.4byte	.LVL184
 5985 1051 1C000000 		.4byte	.LVL185
 5986 1055 0100     		.2byte	0x1
 5987 1057 50       		.byte	0x50
 5988 1058 1C000000 		.4byte	.LVL185
 5989 105c 28000000 		.4byte	.LVL187
 5990 1060 1200     		.2byte	0x12
 5991 1062 74       		.byte	0x74
 5992 1063 7E       		.sleb128 -2
 5993 1064 94       		.byte	0x94
 5994 1065 02       		.byte	0x2
 5995 1066 40       		.byte	0x40
 5996 1067 24       		.byte	0x24
 5997 1068 40       		.byte	0x40
 5998 1069 26       		.byte	0x26
 5999 106a 74       		.byte	0x74
 6000 106b 7E       		.sleb128 -2
 6001 106c 94       		.byte	0x94
 6002 106d 02       		.byte	0x2
 6003 106e 40       		.byte	0x40
 6004 106f 24       		.byte	0x24
 6005 1070 40       		.byte	0x40
 6006 1071 26       		.byte	0x26
 6007 1072 1E       		.byte	0x1e
 6008 1073 9F       		.byte	0x9f
 6009 1074 00000000 		.4byte	0
 6010 1078 00000000 		.4byte	0
 6011              	.LLST101:
 6012 107c 00000000 		.4byte	.LVL192
 6013 1080 0A000000 		.4byte	.LVL194
 6014 1084 0100     		.2byte	0x1
 6015 1086 50       		.byte	0x50
 6016 1087 0A000000 		.4byte	.LVL194
 6017 108b 10000000 		.4byte	.LVL195
 6018 108f 0300     		.2byte	0x3
 6019 1091 74       		.byte	0x74
 6020 1092 04       		.sleb128 4
 6021 1093 9F       		.byte	0x9f
 6022 1094 10000000 		.4byte	.LVL195
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 198


 6023 1098 40000000 		.4byte	.LVL205
 6024 109c 0100     		.2byte	0x1
 6025 109e 53       		.byte	0x53
 6026 109f 40000000 		.4byte	.LVL205
 6027 10a3 48000000 		.4byte	.LVL206
 6028 10a7 0100     		.2byte	0x1
 6029 10a9 54       		.byte	0x54
 6030 10aa 00000000 		.4byte	0
 6031 10ae 00000000 		.4byte	0
 6032              	.LLST102:
 6033 10b2 00000000 		.4byte	.LVL192
 6034 10b6 0A000000 		.4byte	.LVL194
 6035 10ba 0100     		.2byte	0x1
 6036 10bc 51       		.byte	0x51
 6037 10bd 0A000000 		.4byte	.LVL194
 6038 10c1 34000000 		.4byte	.LVL200
 6039 10c5 0100     		.2byte	0x1
 6040 10c7 56       		.byte	0x56
 6041 10c8 34000000 		.4byte	.LVL200
 6042 10cc 3E000000 		.4byte	.LVL204
 6043 10d0 0300     		.2byte	0x3
 6044 10d2 76       		.byte	0x76
 6045 10d3 04       		.sleb128 4
 6046 10d4 9F       		.byte	0x9f
 6047 10d5 3E000000 		.4byte	.LVL204
 6048 10d9 48000000 		.4byte	.LVL206
 6049 10dd 0100     		.2byte	0x1
 6050 10df 56       		.byte	0x56
 6051 10e0 00000000 		.4byte	0
 6052 10e4 00000000 		.4byte	0
 6053              	.LLST103:
 6054 10e8 00000000 		.4byte	.LVL192
 6055 10ec 0A000000 		.4byte	.LVL194
 6056 10f0 0100     		.2byte	0x1
 6057 10f2 52       		.byte	0x52
 6058 10f3 0A000000 		.4byte	.LVL194
 6059 10f7 4A000000 		.4byte	.LFE98
 6060 10fb 0400     		.2byte	0x4
 6061 10fd F3       		.byte	0xf3
 6062 10fe 01       		.uleb128 0x1
 6063 10ff 52       		.byte	0x52
 6064 1100 9F       		.byte	0x9f
 6065 1101 00000000 		.4byte	0
 6066 1105 00000000 		.4byte	0
 6067              	.LLST104:
 6068 1109 10000000 		.4byte	.LVL195
 6069 110d 1E000000 		.4byte	.LVL197
 6070 1111 0100     		.2byte	0x1
 6071 1113 50       		.byte	0x50
 6072 1114 1E000000 		.4byte	.LVL197
 6073 1118 3A000000 		.4byte	.LVL202
 6074 111c 0200     		.2byte	0x2
 6075 111e 73       		.byte	0x73
 6076 111f 78       		.sleb128 -8
 6077 1120 00000000 		.4byte	0
 6078 1124 00000000 		.4byte	0
 6079              	.LLST105:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 199


 6080 1128 12000000 		.4byte	.LVL196
 6081 112c 2E000000 		.4byte	.LVL199
 6082 1130 0100     		.2byte	0x1
 6083 1132 54       		.byte	0x54
 6084 1133 2E000000 		.4byte	.LVL199
 6085 1137 3A000000 		.4byte	.LVL202
 6086 113b 0200     		.2byte	0x2
 6087 113d 73       		.byte	0x73
 6088 113e 7C       		.sleb128 -4
 6089 113f 00000000 		.4byte	0
 6090 1143 00000000 		.4byte	0
 6091              	.LLST106:
 6092 1147 22000000 		.4byte	.LVL198
 6093 114b 40000000 		.4byte	.LVL205
 6094 114f 0500     		.2byte	0x5
 6095 1151 71       		.byte	0x71
 6096 1152 00       		.sleb128 0
 6097 1153 31       		.byte	0x31
 6098 1154 26       		.byte	0x26
 6099 1155 9F       		.byte	0x9f
 6100 1156 00000000 		.4byte	0
 6101 115a 00000000 		.4byte	0
 6102              	.LLST107:
 6103 115e 34000000 		.4byte	.LVL200
 6104 1162 38000000 		.4byte	.LVL201
 6105 1166 0100     		.2byte	0x1
 6106 1168 50       		.byte	0x50
 6107 1169 38000000 		.4byte	.LVL201
 6108 116d 40000000 		.4byte	.LVL205
 6109 1171 0500     		.2byte	0x5
 6110 1173 75       		.byte	0x75
 6111 1174 00       		.sleb128 0
 6112 1175 31       		.byte	0x31
 6113 1176 26       		.byte	0x26
 6114 1177 9F       		.byte	0x9f
 6115 1178 00000000 		.4byte	0
 6116 117c 00000000 		.4byte	0
 6117              	.LLST108:
 6118 1180 00000000 		.4byte	.LVL207
 6119 1184 0C000000 		.4byte	.LVL209
 6120 1188 0100     		.2byte	0x1
 6121 118a 50       		.byte	0x50
 6122 118b 0C000000 		.4byte	.LVL209
 6123 118f 12000000 		.4byte	.LVL210
 6124 1193 0300     		.2byte	0x3
 6125 1195 70       		.byte	0x70
 6126 1196 04       		.sleb128 4
 6127 1197 9F       		.byte	0x9f
 6128 1198 12000000 		.4byte	.LVL210
 6129 119c 68000000 		.4byte	.LVL223
 6130 11a0 0100     		.2byte	0x1
 6131 11a2 54       		.byte	0x54
 6132 11a3 68000000 		.4byte	.LVL223
 6133 11a7 72000000 		.4byte	.LFE99
 6134 11ab 0100     		.2byte	0x1
 6135 11ad 50       		.byte	0x50
 6136 11ae 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 200


 6137 11b2 00000000 		.4byte	0
 6138              	.LLST109:
 6139 11b6 00000000 		.4byte	.LVL207
 6140 11ba 16000000 		.4byte	.LVL211
 6141 11be 0100     		.2byte	0x1
 6142 11c0 51       		.byte	0x51
 6143 11c1 16000000 		.4byte	.LVL211
 6144 11c5 1C000000 		.4byte	.LVL212
 6145 11c9 0300     		.2byte	0x3
 6146 11cb 71       		.byte	0x71
 6147 11cc 04       		.sleb128 4
 6148 11cd 9F       		.byte	0x9f
 6149 11ce 1C000000 		.4byte	.LVL212
 6150 11d2 68000000 		.4byte	.LVL223
 6151 11d6 0100     		.2byte	0x1
 6152 11d8 55       		.byte	0x55
 6153 11d9 68000000 		.4byte	.LVL223
 6154 11dd 72000000 		.4byte	.LFE99
 6155 11e1 0100     		.2byte	0x1
 6156 11e3 51       		.byte	0x51
 6157 11e4 00000000 		.4byte	0
 6158 11e8 00000000 		.4byte	0
 6159              	.LLST110:
 6160 11ec 00000000 		.4byte	.LVL207
 6161 11f0 0C000000 		.4byte	.LVL209
 6162 11f4 0100     		.2byte	0x1
 6163 11f6 52       		.byte	0x52
 6164 11f7 0C000000 		.4byte	.LVL209
 6165 11fb 20000000 		.4byte	.LVL213
 6166 11ff 0100     		.2byte	0x1
 6167 1201 58       		.byte	0x58
 6168 1202 20000000 		.4byte	.LVL213
 6169 1206 42000000 		.4byte	.LVL217
 6170 120a 0300     		.2byte	0x3
 6171 120c 78       		.byte	0x78
 6172 120d 04       		.sleb128 4
 6173 120e 9F       		.byte	0x9f
 6174 120f 42000000 		.4byte	.LVL217
 6175 1213 68000000 		.4byte	.LVL223
 6176 1217 0100     		.2byte	0x1
 6177 1219 56       		.byte	0x56
 6178 121a 68000000 		.4byte	.LVL223
 6179 121e 72000000 		.4byte	.LFE99
 6180 1222 0100     		.2byte	0x1
 6181 1224 58       		.byte	0x58
 6182 1225 00000000 		.4byte	0
 6183 1229 00000000 		.4byte	0
 6184              	.LLST111:
 6185 122d 00000000 		.4byte	.LVL207
 6186 1231 0C000000 		.4byte	.LVL209
 6187 1235 0100     		.2byte	0x1
 6188 1237 53       		.byte	0x53
 6189 1238 0C000000 		.4byte	.LVL209
 6190 123c 72000000 		.4byte	.LFE99
 6191 1240 0400     		.2byte	0x4
 6192 1242 F3       		.byte	0xf3
 6193 1243 01       		.uleb128 0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 201


 6194 1244 53       		.byte	0x53
 6195 1245 9F       		.byte	0x9f
 6196 1246 00000000 		.4byte	0
 6197 124a 00000000 		.4byte	0
 6198              	.LLST112:
 6199 124e 0A000000 		.4byte	.LVL208
 6200 1252 0C000000 		.4byte	.LVL209
 6201 1256 0100     		.2byte	0x1
 6202 1258 53       		.byte	0x53
 6203 1259 0C000000 		.4byte	.LVL209
 6204 125d 72000000 		.4byte	.LFE99
 6205 1261 0100     		.2byte	0x1
 6206 1263 57       		.byte	0x57
 6207 1264 00000000 		.4byte	0
 6208 1268 00000000 		.4byte	0
 6209              	.LLST113:
 6210 126c 12000000 		.4byte	.LVL210
 6211 1270 68000000 		.4byte	.LVL223
 6212 1274 0100     		.2byte	0x1
 6213 1276 5B       		.byte	0x5b
 6214 1277 00000000 		.4byte	0
 6215 127b 00000000 		.4byte	0
 6216              	.LLST114:
 6217 127f 16000000 		.4byte	.LVL211
 6218 1283 68000000 		.4byte	.LVL223
 6219 1287 0100     		.2byte	0x1
 6220 1289 59       		.byte	0x59
 6221 128a 00000000 		.4byte	0
 6222 128e 00000000 		.4byte	0
 6223              	.LLST115:
 6224 1292 1C000000 		.4byte	.LVL212
 6225 1296 29000000 		.4byte	.LVL214-1
 6226 129a 0100     		.2byte	0x1
 6227 129c 53       		.byte	0x53
 6228 129d 29000000 		.4byte	.LVL214-1
 6229 12a1 68000000 		.4byte	.LVL223
 6230 12a5 0200     		.2byte	0x2
 6231 12a7 91       		.byte	0x91
 6232 12a8 54       		.sleb128 -44
 6233 12a9 00000000 		.4byte	0
 6234 12ad 00000000 		.4byte	0
 6235              	.LLST116:
 6236 12b1 20000000 		.4byte	.LVL213
 6237 12b5 4C000000 		.4byte	.LVL219
 6238 12b9 0100     		.2byte	0x1
 6239 12bb 5A       		.byte	0x5a
 6240 12bc 00000000 		.4byte	0
 6241 12c0 00000000 		.4byte	0
 6242              	.LLST117:
 6243 12c4 00000000 		.4byte	.LVL224
 6244 12c8 0C000000 		.4byte	.LVL226
 6245 12cc 0100     		.2byte	0x1
 6246 12ce 50       		.byte	0x50
 6247 12cf 0C000000 		.4byte	.LVL226
 6248 12d3 12000000 		.4byte	.LVL227
 6249 12d7 0300     		.2byte	0x3
 6250 12d9 70       		.byte	0x70
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 202


 6251 12da 08       		.sleb128 8
 6252 12db 9F       		.byte	0x9f
 6253 12dc 12000000 		.4byte	.LVL227
 6254 12e0 90000000 		.4byte	.LVL243
 6255 12e4 0100     		.2byte	0x1
 6256 12e6 54       		.byte	0x54
 6257 12e7 90000000 		.4byte	.LVL243
 6258 12eb 9C000000 		.4byte	.LFE100
 6259 12ef 0100     		.2byte	0x1
 6260 12f1 50       		.byte	0x50
 6261 12f2 00000000 		.4byte	0
 6262 12f6 00000000 		.4byte	0
 6263              	.LLST118:
 6264 12fa 00000000 		.4byte	.LVL224
 6265 12fe 1A000000 		.4byte	.LVL228
 6266 1302 0100     		.2byte	0x1
 6267 1304 51       		.byte	0x51
 6268 1305 1A000000 		.4byte	.LVL228
 6269 1309 20000000 		.4byte	.LVL229
 6270 130d 0300     		.2byte	0x3
 6271 130f 71       		.byte	0x71
 6272 1310 08       		.sleb128 8
 6273 1311 9F       		.byte	0x9f
 6274 1312 20000000 		.4byte	.LVL229
 6275 1316 90000000 		.4byte	.LVL243
 6276 131a 0100     		.2byte	0x1
 6277 131c 55       		.byte	0x55
 6278 131d 90000000 		.4byte	.LVL243
 6279 1321 9C000000 		.4byte	.LFE100
 6280 1325 0100     		.2byte	0x1
 6281 1327 51       		.byte	0x51
 6282 1328 00000000 		.4byte	0
 6283 132c 00000000 		.4byte	0
 6284              	.LLST119:
 6285 1330 00000000 		.4byte	.LVL224
 6286 1334 0C000000 		.4byte	.LVL226
 6287 1338 0100     		.2byte	0x1
 6288 133a 52       		.byte	0x52
 6289 133b 0C000000 		.4byte	.LVL226
 6290 133f 28000000 		.4byte	.LVL230
 6291 1343 0100     		.2byte	0x1
 6292 1345 58       		.byte	0x58
 6293 1346 28000000 		.4byte	.LVL230
 6294 134a 5A000000 		.4byte	.LVL237
 6295 134e 0300     		.2byte	0x3
 6296 1350 78       		.byte	0x78
 6297 1351 08       		.sleb128 8
 6298 1352 9F       		.byte	0x9f
 6299 1353 5A000000 		.4byte	.LVL237
 6300 1357 90000000 		.4byte	.LVL243
 6301 135b 0100     		.2byte	0x1
 6302 135d 59       		.byte	0x59
 6303 135e 90000000 		.4byte	.LVL243
 6304 1362 9C000000 		.4byte	.LFE100
 6305 1366 0100     		.2byte	0x1
 6306 1368 58       		.byte	0x58
 6307 1369 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 203


 6308 136d 00000000 		.4byte	0
 6309              	.LLST120:
 6310 1371 00000000 		.4byte	.LVL224
 6311 1375 0C000000 		.4byte	.LVL226
 6312 1379 0100     		.2byte	0x1
 6313 137b 53       		.byte	0x53
 6314 137c 0C000000 		.4byte	.LVL226
 6315 1380 9C000000 		.4byte	.LFE100
 6316 1384 0400     		.2byte	0x4
 6317 1386 F3       		.byte	0xf3
 6318 1387 01       		.uleb128 0x1
 6319 1388 53       		.byte	0x53
 6320 1389 9F       		.byte	0x9f
 6321 138a 00000000 		.4byte	0
 6322 138e 00000000 		.4byte	0
 6323              	.LLST121:
 6324 1392 0A000000 		.4byte	.LVL225
 6325 1396 0C000000 		.4byte	.LVL226
 6326 139a 0100     		.2byte	0x1
 6327 139c 53       		.byte	0x53
 6328 139d 0C000000 		.4byte	.LVL226
 6329 13a1 9C000000 		.4byte	.LFE100
 6330 13a5 0100     		.2byte	0x1
 6331 13a7 5B       		.byte	0x5b
 6332 13a8 00000000 		.4byte	0
 6333 13ac 00000000 		.4byte	0
 6334              	.LLST122:
 6335 13b0 12000000 		.4byte	.LVL227
 6336 13b4 32000000 		.4byte	.LVL233
 6337 13b8 0600     		.2byte	0x6
 6338 13ba 52       		.byte	0x52
 6339 13bb 93       		.byte	0x93
 6340 13bc 04       		.uleb128 0x4
 6341 13bd 53       		.byte	0x53
 6342 13be 93       		.byte	0x93
 6343 13bf 04       		.uleb128 0x4
 6344 13c0 32000000 		.4byte	.LVL233
 6345 13c4 37000000 		.4byte	.LVL234-1
 6346 13c8 0200     		.2byte	0x2
 6347 13ca 74       		.byte	0x74
 6348 13cb 70       		.sleb128 -16
 6349 13cc 37000000 		.4byte	.LVL234-1
 6350 13d0 90000000 		.4byte	.LVL243
 6351 13d4 0200     		.2byte	0x2
 6352 13d6 91       		.byte	0x91
 6353 13d7 50       		.sleb128 -48
 6354 13d8 00000000 		.4byte	0
 6355 13dc 00000000 		.4byte	0
 6356              	.LLST123:
 6357 13e0 1A000000 		.4byte	.LVL228
 6358 13e4 20000000 		.4byte	.LVL229
 6359 13e8 0600     		.2byte	0x6
 6360 13ea 56       		.byte	0x56
 6361 13eb 93       		.byte	0x93
 6362 13ec 04       		.uleb128 0x4
 6363 13ed 57       		.byte	0x57
 6364 13ee 93       		.byte	0x93
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 204


 6365 13ef 04       		.uleb128 0x4
 6366 13f0 20000000 		.4byte	.LVL229
 6367 13f4 90000000 		.4byte	.LVL243
 6368 13f8 0200     		.2byte	0x2
 6369 13fa 7D       		.byte	0x7d
 6370 13fb 00       		.sleb128 0
 6371 13fc 00000000 		.4byte	0
 6372 1400 00000000 		.4byte	0
 6373              	.LLST124:
 6374 1404 20000000 		.4byte	.LVL229
 6375 1408 90000000 		.4byte	.LVL243
 6376 140c 0600     		.2byte	0x6
 6377 140e 56       		.byte	0x56
 6378 140f 93       		.byte	0x93
 6379 1410 04       		.uleb128 0x4
 6380 1411 57       		.byte	0x57
 6381 1412 93       		.byte	0x93
 6382 1413 04       		.uleb128 0x4
 6383 1414 00000000 		.4byte	0
 6384 1418 00000000 		.4byte	0
 6385              	.LLST125:
 6386 141c 28000000 		.4byte	.LVL230
 6387 1420 2E000000 		.4byte	.LVL231
 6388 1424 0600     		.2byte	0x6
 6389 1426 50       		.byte	0x50
 6390 1427 93       		.byte	0x93
 6391 1428 04       		.uleb128 0x4
 6392 1429 51       		.byte	0x51
 6393 142a 93       		.byte	0x93
 6394 142b 04       		.uleb128 0x4
 6395 142c 2E000000 		.4byte	.LVL231
 6396 1430 30000000 		.4byte	.LVL232
 6397 1434 0200     		.2byte	0x2
 6398 1436 71       		.byte	0x71
 6399 1437 08       		.sleb128 8
 6400 1438 30000000 		.4byte	.LVL232
 6401 143c 37000000 		.4byte	.LVL234-1
 6402 1440 0200     		.2byte	0x2
 6403 1442 75       		.byte	0x75
 6404 1443 78       		.sleb128 -8
 6405 1444 37000000 		.4byte	.LVL234-1
 6406 1448 6A000000 		.4byte	.LVL239
 6407 144c 0200     		.2byte	0x2
 6408 144e 91       		.byte	0x91
 6409 144f 48       		.sleb128 -56
 6410 1450 00000000 		.4byte	0
 6411 1454 00000000 		.4byte	0
 6412              	.LLST126:
 6413 1458 00000000 		.4byte	.LVL244
 6414 145c 06000000 		.4byte	.LVL246
 6415 1460 0100     		.2byte	0x1
 6416 1462 50       		.byte	0x50
 6417 1463 06000000 		.4byte	.LVL246
 6418 1467 08000000 		.4byte	.LVL247
 6419 146b 0300     		.2byte	0x3
 6420 146d 70       		.byte	0x70
 6421 146e 02       		.sleb128 2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 205


 6422 146f 9F       		.byte	0x9f
 6423 1470 08000000 		.4byte	.LVL247
 6424 1474 1A000000 		.4byte	.LVL249
 6425 1478 0100     		.2byte	0x1
 6426 147a 50       		.byte	0x50
 6427 147b 1A000000 		.4byte	.LVL249
 6428 147f 46000000 		.4byte	.LVL255
 6429 1483 0300     		.2byte	0x3
 6430 1485 75       		.byte	0x75
 6431 1486 7C       		.sleb128 -4
 6432 1487 9F       		.byte	0x9f
 6433 1488 46000000 		.4byte	.LVL255
 6434 148c 4E000000 		.4byte	.LFE101
 6435 1490 0100     		.2byte	0x1
 6436 1492 50       		.byte	0x50
 6437 1493 00000000 		.4byte	0
 6438 1497 00000000 		.4byte	0
 6439              	.LLST127:
 6440 149b 00000000 		.4byte	.LVL244
 6441 149f 08000000 		.4byte	.LVL247
 6442 14a3 0100     		.2byte	0x1
 6443 14a5 51       		.byte	0x51
 6444 14a6 08000000 		.4byte	.LVL247
 6445 14aa 0A000000 		.4byte	.LVL248
 6446 14ae 0300     		.2byte	0x3
 6447 14b0 71       		.byte	0x71
 6448 14b1 02       		.sleb128 2
 6449 14b2 9F       		.byte	0x9f
 6450 14b3 0A000000 		.4byte	.LVL248
 6451 14b7 22000000 		.4byte	.LVL250
 6452 14bb 0100     		.2byte	0x1
 6453 14bd 51       		.byte	0x51
 6454 14be 22000000 		.4byte	.LVL250
 6455 14c2 46000000 		.4byte	.LVL255
 6456 14c6 0300     		.2byte	0x3
 6457 14c8 76       		.byte	0x76
 6458 14c9 7C       		.sleb128 -4
 6459 14ca 9F       		.byte	0x9f
 6460 14cb 46000000 		.4byte	.LVL255
 6461 14cf 4E000000 		.4byte	.LFE101
 6462 14d3 0100     		.2byte	0x1
 6463 14d5 51       		.byte	0x51
 6464 14d6 00000000 		.4byte	0
 6465 14da 00000000 		.4byte	0
 6466              	.LLST128:
 6467 14de 00000000 		.4byte	.LVL244
 6468 14e2 0A000000 		.4byte	.LVL248
 6469 14e6 0100     		.2byte	0x1
 6470 14e8 52       		.byte	0x52
 6471 14e9 0A000000 		.4byte	.LVL248
 6472 14ed 2E000000 		.4byte	.LVL251
 6473 14f1 0300     		.2byte	0x3
 6474 14f3 72       		.byte	0x72
 6475 14f4 02       		.sleb128 2
 6476 14f5 9F       		.byte	0x9f
 6477 14f6 2E000000 		.4byte	.LVL251
 6478 14fa 46000000 		.4byte	.LVL255
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 206


 6479 14fe 0100     		.2byte	0x1
 6480 1500 57       		.byte	0x57
 6481 1501 46000000 		.4byte	.LVL255
 6482 1505 4E000000 		.4byte	.LFE101
 6483 1509 0100     		.2byte	0x1
 6484 150b 52       		.byte	0x52
 6485 150c 00000000 		.4byte	0
 6486 1510 00000000 		.4byte	0
 6487              	.LLST129:
 6488 1514 00000000 		.4byte	.LVL244
 6489 1518 06000000 		.4byte	.LVL246
 6490 151c 0100     		.2byte	0x1
 6491 151e 53       		.byte	0x53
 6492 151f 06000000 		.4byte	.LVL246
 6493 1523 4E000000 		.4byte	.LFE101
 6494 1527 0400     		.2byte	0x4
 6495 1529 F3       		.byte	0xf3
 6496 152a 01       		.uleb128 0x1
 6497 152b 53       		.byte	0x53
 6498 152c 9F       		.byte	0x9f
 6499 152d 00000000 		.4byte	0
 6500 1531 00000000 		.4byte	0
 6501              	.LLST130:
 6502 1535 08000000 		.4byte	.LVL247
 6503 1539 1A000000 		.4byte	.LVL249
 6504 153d 0200     		.2byte	0x2
 6505 153f 70       		.byte	0x70
 6506 1540 00       		.sleb128 0
 6507 1541 1A000000 		.4byte	.LVL249
 6508 1545 2E000000 		.4byte	.LVL251
 6509 1549 0200     		.2byte	0x2
 6510 154b 75       		.byte	0x75
 6511 154c 7C       		.sleb128 -4
 6512 154d 2E000000 		.4byte	.LVL251
 6513 1551 46000000 		.4byte	.LVL255
 6514 1555 0100     		.2byte	0x1
 6515 1557 5C       		.byte	0x5c
 6516 1558 00000000 		.4byte	0
 6517 155c 00000000 		.4byte	0
 6518              	.LLST131:
 6519 1560 08000000 		.4byte	.LVL247
 6520 1564 1A000000 		.4byte	.LVL249
 6521 1568 0200     		.2byte	0x2
 6522 156a 70       		.byte	0x70
 6523 156b 02       		.sleb128 2
 6524 156c 1A000000 		.4byte	.LVL249
 6525 1570 2E000000 		.4byte	.LVL251
 6526 1574 0200     		.2byte	0x2
 6527 1576 75       		.byte	0x75
 6528 1577 7E       		.sleb128 -2
 6529 1578 2E000000 		.4byte	.LVL251
 6530 157c 36000000 		.4byte	.LVL253
 6531 1580 0100     		.2byte	0x1
 6532 1582 50       		.byte	0x50
 6533 1583 00000000 		.4byte	0
 6534 1587 00000000 		.4byte	0
 6535              	.LLST132:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 207


 6536 158b 0A000000 		.4byte	.LVL248
 6537 158f 22000000 		.4byte	.LVL250
 6538 1593 0200     		.2byte	0x2
 6539 1595 71       		.byte	0x71
 6540 1596 00       		.sleb128 0
 6541 1597 22000000 		.4byte	.LVL250
 6542 159b 2E000000 		.4byte	.LVL251
 6543 159f 0200     		.2byte	0x2
 6544 15a1 76       		.byte	0x76
 6545 15a2 7C       		.sleb128 -4
 6546 15a3 2E000000 		.4byte	.LVL251
 6547 15a7 46000000 		.4byte	.LVL255
 6548 15ab 0100     		.2byte	0x1
 6549 15ad 5E       		.byte	0x5e
 6550 15ae 00000000 		.4byte	0
 6551 15b2 00000000 		.4byte	0
 6552              	.LLST133:
 6553 15b6 0A000000 		.4byte	.LVL248
 6554 15ba 22000000 		.4byte	.LVL250
 6555 15be 0200     		.2byte	0x2
 6556 15c0 71       		.byte	0x71
 6557 15c1 02       		.sleb128 2
 6558 15c2 22000000 		.4byte	.LVL250
 6559 15c6 2E000000 		.4byte	.LVL251
 6560 15ca 0200     		.2byte	0x2
 6561 15cc 76       		.byte	0x76
 6562 15cd 7E       		.sleb128 -2
 6563 15ce 2E000000 		.4byte	.LVL251
 6564 15d2 32000000 		.4byte	.LVL252
 6565 15d6 0100     		.2byte	0x1
 6566 15d8 54       		.byte	0x54
 6567 15d9 00000000 		.4byte	0
 6568 15dd 00000000 		.4byte	0
 6569              	.LLST134:
 6570 15e1 00000000 		.4byte	.LVL256
 6571 15e5 0C000000 		.4byte	.LVL258
 6572 15e9 0100     		.2byte	0x1
 6573 15eb 50       		.byte	0x50
 6574 15ec 0C000000 		.4byte	.LVL258
 6575 15f0 12000000 		.4byte	.LVL259
 6576 15f4 0300     		.2byte	0x3
 6577 15f6 70       		.byte	0x70
 6578 15f7 04       		.sleb128 4
 6579 15f8 9F       		.byte	0x9f
 6580 15f9 12000000 		.4byte	.LVL259
 6581 15fd A2000000 		.4byte	.LVL268
 6582 1601 0100     		.2byte	0x1
 6583 1603 57       		.byte	0x57
 6584 1604 A2000000 		.4byte	.LVL268
 6585 1608 AE000000 		.4byte	.LFE102
 6586 160c 0100     		.2byte	0x1
 6587 160e 50       		.byte	0x50
 6588 160f 00000000 		.4byte	0
 6589 1613 00000000 		.4byte	0
 6590              	.LLST135:
 6591 1617 00000000 		.4byte	.LVL256
 6592 161b 14000000 		.4byte	.LVL260
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 208


 6593 161f 0100     		.2byte	0x1
 6594 1621 51       		.byte	0x51
 6595 1622 14000000 		.4byte	.LVL260
 6596 1626 1A000000 		.4byte	.LVL261
 6597 162a 0300     		.2byte	0x3
 6598 162c 71       		.byte	0x71
 6599 162d 04       		.sleb128 4
 6600 162e 9F       		.byte	0x9f
 6601 162f 1A000000 		.4byte	.LVL261
 6602 1633 A2000000 		.4byte	.LVL268
 6603 1637 0100     		.2byte	0x1
 6604 1639 5E       		.byte	0x5e
 6605 163a A2000000 		.4byte	.LVL268
 6606 163e AE000000 		.4byte	.LFE102
 6607 1642 0100     		.2byte	0x1
 6608 1644 51       		.byte	0x51
 6609 1645 00000000 		.4byte	0
 6610 1649 00000000 		.4byte	0
 6611              	.LLST136:
 6612 164d 00000000 		.4byte	.LVL256
 6613 1651 0C000000 		.4byte	.LVL258
 6614 1655 0100     		.2byte	0x1
 6615 1657 52       		.byte	0x52
 6616 1658 0C000000 		.4byte	.LVL258
 6617 165c 1C000000 		.4byte	.LVL262
 6618 1660 0300     		.2byte	0x3
 6619 1662 91       		.byte	0x91
 6620 1663 BC7F     		.sleb128 -68
 6621 1665 1C000000 		.4byte	.LVL262
 6622 1669 6A000000 		.4byte	.LVL263
 6623 166d 0700     		.2byte	0x7
 6624 166f 91       		.byte	0x91
 6625 1670 BC7F     		.sleb128 -68
 6626 1672 06       		.byte	0x6
 6627 1673 23       		.byte	0x23
 6628 1674 04       		.uleb128 0x4
 6629 1675 9F       		.byte	0x9f
 6630 1676 6A000000 		.4byte	.LVL263
 6631 167a A2000000 		.4byte	.LVL268
 6632 167e 0100     		.2byte	0x1
 6633 1680 5C       		.byte	0x5c
 6634 1681 A2000000 		.4byte	.LVL268
 6635 1685 AE000000 		.4byte	.LFE102
 6636 1689 0300     		.2byte	0x3
 6637 168b 91       		.byte	0x91
 6638 168c BC7F     		.sleb128 -68
 6639 168e 00000000 		.4byte	0
 6640 1692 00000000 		.4byte	0
 6641              	.LLST137:
 6642 1696 00000000 		.4byte	.LVL256
 6643 169a 0C000000 		.4byte	.LVL258
 6644 169e 0100     		.2byte	0x1
 6645 16a0 53       		.byte	0x53
 6646 16a1 0C000000 		.4byte	.LVL258
 6647 16a5 AE000000 		.4byte	.LFE102
 6648 16a9 0400     		.2byte	0x4
 6649 16ab F3       		.byte	0xf3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 209


 6650 16ac 01       		.uleb128 0x1
 6651 16ad 53       		.byte	0x53
 6652 16ae 9F       		.byte	0x9f
 6653 16af 00000000 		.4byte	0
 6654 16b3 00000000 		.4byte	0
 6655              	.LLST138:
 6656 16b7 08000000 		.4byte	.LVL257
 6657 16bb 12000000 		.4byte	.LVL259
 6658 16bf 0100     		.2byte	0x1
 6659 16c1 53       		.byte	0x53
 6660 16c2 12000000 		.4byte	.LVL259
 6661 16c6 9A000000 		.4byte	.LVL267
 6662 16ca 0200     		.2byte	0x2
 6663 16cc 7D       		.byte	0x7d
 6664 16cd 00       		.sleb128 0
 6665 16ce 9A000000 		.4byte	.LVL267
 6666 16d2 A2000000 		.4byte	.LVL268
 6667 16d6 0100     		.2byte	0x1
 6668 16d8 53       		.byte	0x53
 6669 16d9 A2000000 		.4byte	.LVL268
 6670 16dd AA000000 		.4byte	.LVL269
 6671 16e1 0200     		.2byte	0x2
 6672 16e3 7D       		.byte	0x7d
 6673 16e4 00       		.sleb128 0
 6674 16e5 AA000000 		.4byte	.LVL269
 6675 16e9 AE000000 		.4byte	.LFE102
 6676 16ed 0100     		.2byte	0x1
 6677 16ef 53       		.byte	0x53
 6678 16f0 00000000 		.4byte	0
 6679 16f4 00000000 		.4byte	0
 6680              	.LLST139:
 6681 16f8 12000000 		.4byte	.LVL259
 6682 16fc 7C000000 		.4byte	.LVL264
 6683 1700 0100     		.2byte	0x1
 6684 1702 53       		.byte	0x53
 6685 1703 00000000 		.4byte	0
 6686 1707 00000000 		.4byte	0
 6687              	.LLST140:
 6688 170b 14000000 		.4byte	.LVL260
 6689 170f 8A000000 		.4byte	.LVL266
 6690 1713 0100     		.2byte	0x1
 6691 1715 52       		.byte	0x52
 6692 1716 00000000 		.4byte	0
 6693 171a 00000000 		.4byte	0
 6694              	.LLST141:
 6695 171e 1A000000 		.4byte	.LVL261
 6696 1722 A2000000 		.4byte	.LVL268
 6697 1726 0100     		.2byte	0x1
 6698 1728 50       		.byte	0x50
 6699 1729 00000000 		.4byte	0
 6700 172d 00000000 		.4byte	0
 6701              	.LLST142:
 6702 1731 1C000000 		.4byte	.LVL262
 6703 1735 80000000 		.4byte	.LVL265
 6704 1739 0100     		.2byte	0x1
 6705 173b 51       		.byte	0x51
 6706 173c 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 210


 6707 1740 00000000 		.4byte	0
 6708              	.LLST143:
 6709 1744 00000000 		.4byte	.LVL270
 6710 1748 0C000000 		.4byte	.LVL272
 6711 174c 0100     		.2byte	0x1
 6712 174e 50       		.byte	0x50
 6713 174f 0C000000 		.4byte	.LVL272
 6714 1753 14000000 		.4byte	.LVL274
 6715 1757 0100     		.2byte	0x1
 6716 1759 58       		.byte	0x58
 6717 175a 14000000 		.4byte	.LVL274
 6718 175e 26000000 		.4byte	.LVL276
 6719 1762 0300     		.2byte	0x3
 6720 1764 78       		.byte	0x78
 6721 1765 04       		.sleb128 4
 6722 1766 9F       		.byte	0x9f
 6723 1767 26000000 		.4byte	.LVL276
 6724 176b 3A000000 		.4byte	.LVL279
 6725 176f 0100     		.2byte	0x1
 6726 1771 54       		.byte	0x54
 6727 1772 3A000000 		.4byte	.LVL279
 6728 1776 42000000 		.4byte	.LFE103
 6729 177a 0100     		.2byte	0x1
 6730 177c 58       		.byte	0x58
 6731 177d 00000000 		.4byte	0
 6732 1781 00000000 		.4byte	0
 6733              	.LLST144:
 6734 1785 00000000 		.4byte	.LVL270
 6735 1789 10000000 		.4byte	.LVL273
 6736 178d 0100     		.2byte	0x1
 6737 178f 51       		.byte	0x51
 6738 1790 10000000 		.4byte	.LVL273
 6739 1794 3A000000 		.4byte	.LVL279
 6740 1798 0100     		.2byte	0x1
 6741 179a 5A       		.byte	0x5a
 6742 179b 3A000000 		.4byte	.LVL279
 6743 179f 42000000 		.4byte	.LFE103
 6744 17a3 0100     		.2byte	0x1
 6745 17a5 51       		.byte	0x51
 6746 17a6 00000000 		.4byte	0
 6747 17aa 00000000 		.4byte	0
 6748              	.LLST145:
 6749 17ae 00000000 		.4byte	.LVL270
 6750 17b2 0C000000 		.4byte	.LVL272
 6751 17b6 0100     		.2byte	0x1
 6752 17b8 52       		.byte	0x52
 6753 17b9 0C000000 		.4byte	.LVL272
 6754 17bd 14000000 		.4byte	.LVL274
 6755 17c1 0100     		.2byte	0x1
 6756 17c3 57       		.byte	0x57
 6757 17c4 14000000 		.4byte	.LVL274
 6758 17c8 26000000 		.4byte	.LVL276
 6759 17cc 0300     		.2byte	0x3
 6760 17ce 77       		.byte	0x77
 6761 17cf 04       		.sleb128 4
 6762 17d0 9F       		.byte	0x9f
 6763 17d1 26000000 		.4byte	.LVL276
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 211


 6764 17d5 3A000000 		.4byte	.LVL279
 6765 17d9 0100     		.2byte	0x1
 6766 17db 55       		.byte	0x55
 6767 17dc 3A000000 		.4byte	.LVL279
 6768 17e0 42000000 		.4byte	.LFE103
 6769 17e4 0100     		.2byte	0x1
 6770 17e6 57       		.byte	0x57
 6771 17e7 00000000 		.4byte	0
 6772 17eb 00000000 		.4byte	0
 6773              	.LLST146:
 6774 17ef 00000000 		.4byte	.LVL270
 6775 17f3 0C000000 		.4byte	.LVL272
 6776 17f7 0100     		.2byte	0x1
 6777 17f9 53       		.byte	0x53
 6778 17fa 0C000000 		.4byte	.LVL272
 6779 17fe 42000000 		.4byte	.LFE103
 6780 1802 0400     		.2byte	0x4
 6781 1804 F3       		.byte	0xf3
 6782 1805 01       		.uleb128 0x1
 6783 1806 53       		.byte	0x53
 6784 1807 9F       		.byte	0x9f
 6785 1808 00000000 		.4byte	0
 6786 180c 00000000 		.4byte	0
 6787              	.LLST147:
 6788 1810 0A000000 		.4byte	.LVL271
 6789 1814 0C000000 		.4byte	.LVL272
 6790 1818 0100     		.2byte	0x1
 6791 181a 53       		.byte	0x53
 6792 181b 0C000000 		.4byte	.LVL272
 6793 181f 42000000 		.4byte	.LFE103
 6794 1823 0100     		.2byte	0x1
 6795 1825 56       		.byte	0x56
 6796 1826 00000000 		.4byte	0
 6797 182a 00000000 		.4byte	0
 6798              	.LLST148:
 6799 182e 14000000 		.4byte	.LVL274
 6800 1832 3A000000 		.4byte	.LVL279
 6801 1836 0100     		.2byte	0x1
 6802 1838 59       		.byte	0x59
 6803 1839 00000000 		.4byte	0
 6804 183d 00000000 		.4byte	0
 6805              	.LLST149:
 6806 1841 00000000 		.4byte	.LVL280
 6807 1845 06000000 		.4byte	.LVL283
 6808 1849 0100     		.2byte	0x1
 6809 184b 50       		.byte	0x50
 6810 184c 06000000 		.4byte	.LVL283
 6811 1850 20000000 		.4byte	.LVL286
 6812 1854 0300     		.2byte	0x3
 6813 1856 70       		.byte	0x70
 6814 1857 02       		.sleb128 2
 6815 1858 9F       		.byte	0x9f
 6816 1859 20000000 		.4byte	.LVL286
 6817 185d 38000000 		.4byte	.LVL292
 6818 1861 0100     		.2byte	0x1
 6819 1863 55       		.byte	0x55
 6820 1864 38000000 		.4byte	.LVL292
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 212


 6821 1868 3E000000 		.4byte	.LFE104
 6822 186c 0100     		.2byte	0x1
 6823 186e 50       		.byte	0x50
 6824 186f 00000000 		.4byte	0
 6825 1873 00000000 		.4byte	0
 6826              	.LLST150:
 6827 1877 00000000 		.4byte	.LVL280
 6828 187b 06000000 		.4byte	.LVL283
 6829 187f 0100     		.2byte	0x1
 6830 1881 51       		.byte	0x51
 6831 1882 06000000 		.4byte	.LVL283
 6832 1886 38000000 		.4byte	.LVL292
 6833 188a 0100     		.2byte	0x1
 6834 188c 57       		.byte	0x57
 6835 188d 38000000 		.4byte	.LVL292
 6836 1891 3E000000 		.4byte	.LFE104
 6837 1895 0100     		.2byte	0x1
 6838 1897 51       		.byte	0x51
 6839 1898 00000000 		.4byte	0
 6840 189c 00000000 		.4byte	0
 6841              	.LLST151:
 6842 18a0 00000000 		.4byte	.LVL280
 6843 18a4 06000000 		.4byte	.LVL283
 6844 18a8 0100     		.2byte	0x1
 6845 18aa 52       		.byte	0x52
 6846 18ab 06000000 		.4byte	.LVL283
 6847 18af 20000000 		.4byte	.LVL286
 6848 18b3 0300     		.2byte	0x3
 6849 18b5 72       		.byte	0x72
 6850 18b6 02       		.sleb128 2
 6851 18b7 9F       		.byte	0x9f
 6852 18b8 20000000 		.4byte	.LVL286
 6853 18bc 38000000 		.4byte	.LVL292
 6854 18c0 0100     		.2byte	0x1
 6855 18c2 56       		.byte	0x56
 6856 18c3 38000000 		.4byte	.LVL292
 6857 18c7 3E000000 		.4byte	.LFE104
 6858 18cb 0100     		.2byte	0x1
 6859 18cd 52       		.byte	0x52
 6860 18ce 00000000 		.4byte	0
 6861 18d2 00000000 		.4byte	0
 6862              	.LLST152:
 6863 18d6 00000000 		.4byte	.LVL280
 6864 18da 04000000 		.4byte	.LVL282
 6865 18de 0100     		.2byte	0x1
 6866 18e0 53       		.byte	0x53
 6867 18e1 04000000 		.4byte	.LVL282
 6868 18e5 3E000000 		.4byte	.LFE104
 6869 18e9 0400     		.2byte	0x4
 6870 18eb F3       		.byte	0xf3
 6871 18ec 01       		.uleb128 0x1
 6872 18ed 53       		.byte	0x53
 6873 18ee 9F       		.byte	0x9f
 6874 18ef 00000000 		.4byte	0
 6875 18f3 00000000 		.4byte	0
 6876              	.LLST153:
 6877 18f7 06000000 		.4byte	.LVL283
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 213


 6878 18fb 20000000 		.4byte	.LVL286
 6879 18ff 0200     		.2byte	0x2
 6880 1901 71       		.byte	0x71
 6881 1902 00       		.sleb128 0
 6882 1903 20000000 		.4byte	.LVL286
 6883 1907 38000000 		.4byte	.LVL292
 6884 190b 0100     		.2byte	0x1
 6885 190d 5E       		.byte	0x5e
 6886 190e 00000000 		.4byte	0
 6887 1912 00000000 		.4byte	0
 6888              	.LLST154:
 6889 1916 1A000000 		.4byte	.LVL285
 6890 191a 38000000 		.4byte	.LVL292
 6891 191e 0100     		.2byte	0x1
 6892 1920 54       		.byte	0x54
 6893 1921 00000000 		.4byte	0
 6894 1925 00000000 		.4byte	0
 6895              	.LLST155:
 6896 1929 16000000 		.4byte	.LVL284
 6897 192d 1A000000 		.4byte	.LVL285
 6898 1931 0100     		.2byte	0x1
 6899 1933 54       		.byte	0x54
 6900 1934 1A000000 		.4byte	.LVL285
 6901 1938 20000000 		.4byte	.LVL286
 6902 193c 0E00     		.2byte	0xe
 6903 193e 70       		.byte	0x70
 6904 193f 00       		.sleb128 0
 6905 1940 94       		.byte	0x94
 6906 1941 02       		.byte	0x2
 6907 1942 40       		.byte	0x40
 6908 1943 24       		.byte	0x24
 6909 1944 40       		.byte	0x40
 6910 1945 26       		.byte	0x26
 6911 1946 7E       		.byte	0x7e
 6912 1947 00       		.sleb128 0
 6913 1948 1E       		.byte	0x1e
 6914 1949 3F       		.byte	0x3f
 6915 194a 26       		.byte	0x26
 6916 194b 9F       		.byte	0x9f
 6917 194c 00000000 		.4byte	0
 6918 1950 00000000 		.4byte	0
 6919              	.LLST156:
 6920 1954 2E000000 		.4byte	.LVL288
 6921 1958 36000000 		.4byte	.LVL291
 6922 195c 0100     		.2byte	0x1
 6923 195e 51       		.byte	0x51
 6924 195f 00000000 		.4byte	0
 6925 1963 00000000 		.4byte	0
 6926              	.LLST157:
 6927 1967 2A000000 		.4byte	.LVL287
 6928 196b 2E000000 		.4byte	.LVL288
 6929 196f 0100     		.2byte	0x1
 6930 1971 51       		.byte	0x51
 6931 1972 2E000000 		.4byte	.LVL288
 6932 1976 30000000 		.4byte	.LVL289
 6933 197a 0E00     		.2byte	0xe
 6934 197c 70       		.byte	0x70
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 214


 6935 197d 02       		.sleb128 2
 6936 197e 94       		.byte	0x94
 6937 197f 02       		.byte	0x2
 6938 1980 40       		.byte	0x40
 6939 1981 24       		.byte	0x24
 6940 1982 40       		.byte	0x40
 6941 1983 26       		.byte	0x26
 6942 1984 7E       		.byte	0x7e
 6943 1985 00       		.sleb128 0
 6944 1986 1E       		.byte	0x1e
 6945 1987 3F       		.byte	0x3f
 6946 1988 26       		.byte	0x26
 6947 1989 9F       		.byte	0x9f
 6948 198a 00000000 		.4byte	0
 6949 198e 00000000 		.4byte	0
 6950              	.LLST158:
 6951 1992 00000000 		.4byte	.LVL293
 6952 1996 0A000000 		.4byte	.LVL297
 6953 199a 0100     		.2byte	0x1
 6954 199c 50       		.byte	0x50
 6955 199d 0A000000 		.4byte	.LVL297
 6956 19a1 40000000 		.4byte	.LVL301
 6957 19a5 0300     		.2byte	0x3
 6958 19a7 70       		.byte	0x70
 6959 19a8 04       		.sleb128 4
 6960 19a9 9F       		.byte	0x9f
 6961 19aa 40000000 		.4byte	.LVL301
 6962 19ae 72000000 		.4byte	.LVL305
 6963 19b2 0100     		.2byte	0x1
 6964 19b4 55       		.byte	0x55
 6965 19b5 72000000 		.4byte	.LVL305
 6966 19b9 7A000000 		.4byte	.LFE105
 6967 19bd 0100     		.2byte	0x1
 6968 19bf 50       		.byte	0x50
 6969 19c0 00000000 		.4byte	0
 6970 19c4 00000000 		.4byte	0
 6971              	.LLST159:
 6972 19c8 00000000 		.4byte	.LVL293
 6973 19cc 08000000 		.4byte	.LVL296
 6974 19d0 0100     		.2byte	0x1
 6975 19d2 51       		.byte	0x51
 6976 19d3 08000000 		.4byte	.LVL296
 6977 19d7 72000000 		.4byte	.LVL305
 6978 19db 0100     		.2byte	0x1
 6979 19dd 57       		.byte	0x57
 6980 19de 72000000 		.4byte	.LVL305
 6981 19e2 7A000000 		.4byte	.LFE105
 6982 19e6 0100     		.2byte	0x1
 6983 19e8 51       		.byte	0x51
 6984 19e9 00000000 		.4byte	0
 6985 19ed 00000000 		.4byte	0
 6986              	.LLST160:
 6987 19f1 00000000 		.4byte	.LVL293
 6988 19f5 0A000000 		.4byte	.LVL297
 6989 19f9 0100     		.2byte	0x1
 6990 19fb 52       		.byte	0x52
 6991 19fc 0A000000 		.4byte	.LVL297
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 215


 6992 1a00 3C000000 		.4byte	.LVL300
 6993 1a04 0300     		.2byte	0x3
 6994 1a06 72       		.byte	0x72
 6995 1a07 04       		.sleb128 4
 6996 1a08 9F       		.byte	0x9f
 6997 1a09 3C000000 		.4byte	.LVL300
 6998 1a0d 72000000 		.4byte	.LVL305
 6999 1a11 0100     		.2byte	0x1
 7000 1a13 54       		.byte	0x54
 7001 1a14 72000000 		.4byte	.LVL305
 7002 1a18 7A000000 		.4byte	.LFE105
 7003 1a1c 0100     		.2byte	0x1
 7004 1a1e 52       		.byte	0x52
 7005 1a1f 00000000 		.4byte	0
 7006 1a23 00000000 		.4byte	0
 7007              	.LLST161:
 7008 1a27 00000000 		.4byte	.LVL293
 7009 1a2b 06000000 		.4byte	.LVL295
 7010 1a2f 0100     		.2byte	0x1
 7011 1a31 53       		.byte	0x53
 7012 1a32 06000000 		.4byte	.LVL295
 7013 1a36 7A000000 		.4byte	.LFE105
 7014 1a3a 0400     		.2byte	0x4
 7015 1a3c F3       		.byte	0xf3
 7016 1a3d 01       		.uleb128 0x1
 7017 1a3e 53       		.byte	0x53
 7018 1a3f 9F       		.byte	0x9f
 7019 1a40 00000000 		.4byte	0
 7020 1a44 00000000 		.4byte	0
 7021              	.LLST162:
 7022 1a48 0A000000 		.4byte	.LVL297
 7023 1a4c 72000000 		.4byte	.LVL305
 7024 1a50 0100     		.2byte	0x1
 7025 1a52 56       		.byte	0x56
 7026 1a53 00000000 		.4byte	0
 7027 1a57 00000000 		.4byte	0
 7028              	.LLST163:
 7029 1a5b 2A000000 		.4byte	.LVL298
 7030 1a5f 34000000 		.4byte	.LVL299
 7031 1a63 0600     		.2byte	0x6
 7032 1a65 51       		.byte	0x51
 7033 1a66 93       		.byte	0x93
 7034 1a67 04       		.uleb128 0x4
 7035 1a68 54       		.byte	0x54
 7036 1a69 93       		.byte	0x93
 7037 1a6a 04       		.uleb128 0x4
 7038 1a6b 00000000 		.4byte	0
 7039 1a6f 00000000 		.4byte	0
 7040              	.LLST164:
 7041 1a73 5C000000 		.4byte	.LVL302
 7042 1a77 66000000 		.4byte	.LVL303
 7043 1a7b 0600     		.2byte	0x6
 7044 1a7d 50       		.byte	0x50
 7045 1a7e 93       		.byte	0x93
 7046 1a7f 04       		.uleb128 0x4
 7047 1a80 51       		.byte	0x51
 7048 1a81 93       		.byte	0x93
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 216


 7049 1a82 04       		.uleb128 0x4
 7050 1a83 00000000 		.4byte	0
 7051 1a87 00000000 		.4byte	0
 7052              		.section	.debug_aranges,"",%progbits
 7053 0000 C4000000 		.4byte	0xc4
 7054 0004 0200     		.2byte	0x2
 7055 0006 00000000 		.4byte	.Ldebug_info0
 7056 000a 04       		.byte	0x4
 7057 000b 00       		.byte	0
 7058 000c 0000     		.2byte	0
 7059 000e 0000     		.2byte	0
 7060 0010 00000000 		.4byte	.LFB84
 7061 0014 26000000 		.4byte	.LFE84-.LFB84
 7062 0018 00000000 		.4byte	.LFB85
 7063 001c 34000000 		.4byte	.LFE85-.LFB85
 7064 0020 00000000 		.4byte	.LFB86
 7065 0024 30000000 		.4byte	.LFE86-.LFB86
 7066 0028 00000000 		.4byte	.LFB87
 7067 002c 84000000 		.4byte	.LFE87-.LFB87
 7068 0030 00000000 		.4byte	.LFB88
 7069 0034 76000000 		.4byte	.LFE88-.LFB88
 7070 0038 00000000 		.4byte	.LFB89
 7071 003c 22010000 		.4byte	.LFE89-.LFB89
 7072 0040 00000000 		.4byte	.LFB90
 7073 0044 52000000 		.4byte	.LFE90-.LFB90
 7074 0048 00000000 		.4byte	.LFB91
 7075 004c 56000000 		.4byte	.LFE91-.LFB91
 7076 0050 00000000 		.4byte	.LFB92
 7077 0054 38000000 		.4byte	.LFE92-.LFB92
 7078 0058 00000000 		.4byte	.LFB93
 7079 005c 3A000000 		.4byte	.LFE93-.LFB93
 7080 0060 00000000 		.4byte	.LFB94
 7081 0064 4E000000 		.4byte	.LFE94-.LFB94
 7082 0068 00000000 		.4byte	.LFB95
 7083 006c 3E000000 		.4byte	.LFE95-.LFB95
 7084 0070 00000000 		.4byte	.LFB96
 7085 0074 4E000000 		.4byte	.LFE96-.LFB96
 7086 0078 00000000 		.4byte	.LFB97
 7087 007c 36000000 		.4byte	.LFE97-.LFB97
 7088 0080 00000000 		.4byte	.LFB98
 7089 0084 4A000000 		.4byte	.LFE98-.LFB98
 7090 0088 00000000 		.4byte	.LFB99
 7091 008c 72000000 		.4byte	.LFE99-.LFB99
 7092 0090 00000000 		.4byte	.LFB100
 7093 0094 9C000000 		.4byte	.LFE100-.LFB100
 7094 0098 00000000 		.4byte	.LFB101
 7095 009c 4E000000 		.4byte	.LFE101-.LFB101
 7096 00a0 00000000 		.4byte	.LFB102
 7097 00a4 AE000000 		.4byte	.LFE102-.LFB102
 7098 00a8 00000000 		.4byte	.LFB103
 7099 00ac 42000000 		.4byte	.LFE103-.LFB103
 7100 00b0 00000000 		.4byte	.LFB104
 7101 00b4 3E000000 		.4byte	.LFE104-.LFB104
 7102 00b8 00000000 		.4byte	.LFB105
 7103 00bc 7A000000 		.4byte	.LFE105-.LFB105
 7104 00c0 00000000 		.4byte	0
 7105 00c4 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 217


 7106              		.section	.debug_ranges,"",%progbits
 7107              	.Ldebug_ranges0:
 7108 0000 20000000 		.4byte	.LBB11
 7109 0004 2E000000 		.4byte	.LBE11
 7110 0008 36000000 		.4byte	.LBB12
 7111 000c 38000000 		.4byte	.LBE12
 7112 0010 00000000 		.4byte	0
 7113 0014 00000000 		.4byte	0
 7114 0018 00000000 		.4byte	.LFB84
 7115 001c 26000000 		.4byte	.LFE84
 7116 0020 00000000 		.4byte	.LFB85
 7117 0024 34000000 		.4byte	.LFE85
 7118 0028 00000000 		.4byte	.LFB86
 7119 002c 30000000 		.4byte	.LFE86
 7120 0030 00000000 		.4byte	.LFB87
 7121 0034 84000000 		.4byte	.LFE87
 7122 0038 00000000 		.4byte	.LFB88
 7123 003c 76000000 		.4byte	.LFE88
 7124 0040 00000000 		.4byte	.LFB89
 7125 0044 22010000 		.4byte	.LFE89
 7126 0048 00000000 		.4byte	.LFB90
 7127 004c 52000000 		.4byte	.LFE90
 7128 0050 00000000 		.4byte	.LFB91
 7129 0054 56000000 		.4byte	.LFE91
 7130 0058 00000000 		.4byte	.LFB92
 7131 005c 38000000 		.4byte	.LFE92
 7132 0060 00000000 		.4byte	.LFB93
 7133 0064 3A000000 		.4byte	.LFE93
 7134 0068 00000000 		.4byte	.LFB94
 7135 006c 4E000000 		.4byte	.LFE94
 7136 0070 00000000 		.4byte	.LFB95
 7137 0074 3E000000 		.4byte	.LFE95
 7138 0078 00000000 		.4byte	.LFB96
 7139 007c 4E000000 		.4byte	.LFE96
 7140 0080 00000000 		.4byte	.LFB97
 7141 0084 36000000 		.4byte	.LFE97
 7142 0088 00000000 		.4byte	.LFB98
 7143 008c 4A000000 		.4byte	.LFE98
 7144 0090 00000000 		.4byte	.LFB99
 7145 0094 72000000 		.4byte	.LFE99
 7146 0098 00000000 		.4byte	.LFB100
 7147 009c 9C000000 		.4byte	.LFE100
 7148 00a0 00000000 		.4byte	.LFB101
 7149 00a4 4E000000 		.4byte	.LFE101
 7150 00a8 00000000 		.4byte	.LFB102
 7151 00ac AE000000 		.4byte	.LFE102
 7152 00b0 00000000 		.4byte	.LFB103
 7153 00b4 42000000 		.4byte	.LFE103
 7154 00b8 00000000 		.4byte	.LFB104
 7155 00bc 3E000000 		.4byte	.LFE104
 7156 00c0 00000000 		.4byte	.LFB105
 7157 00c4 7A000000 		.4byte	.LFE105
 7158 00c8 00000000 		.4byte	0
 7159 00cc 00000000 		.4byte	0
 7160              		.section	.debug_line,"",%progbits
 7161              	.Ldebug_line0:
 7162 0000 72070000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 218


 7162      02000B04 
 7162      00000201 
 7162      FB0E0D00 
 7162      01010101 
 7163              	.LASF60:
 7164 0000 61636330 		.ascii	"acc0\000"
 7164      00
 7165              	.LASF61:
 7166 0005 61636331 		.ascii	"acc1\000"
 7166      00
 7167              	.LASF80:
 7168 000a 5F5F636F 		.ascii	"__copy_table_t\000"
 7168      70795F74 
 7168      61626C65 
 7168      5F7400
 7169              	.LASF24:
 7170 0019 7136335F 		.ascii	"q63_t\000"
 7170      7400
 7171              	.LASF74:
 7172 001f 70537263 		.ascii	"pSrcReal\000"
 7172      5265616C 
 7172      00
 7173              	.LASF59:
 7174 0028 61726D5F 		.ascii	"arm_cmplx_mag_q15\000"
 7174      636D706C 
 7174      785F6D61 
 7174      675F7131 
 7174      3500
 7175              	.LASF83:
 7176 003a 5F5F7A65 		.ascii	"__zero_table_t\000"
 7176      726F5F74 
 7176      61626C65 
 7176      5F7400
 7177              	.LASF71:
 7178 0049 61726D5F 		.ascii	"arm_cmplx_mult_cmplx_q31\000"
 7178      636D706C 
 7178      785F6D75 
 7178      6C745F63 
 7178      6D706C78 
 7179              	.LASF68:
 7180 0062 61726D5F 		.ascii	"arm_cmplx_mult_cmplx_f32\000"
 7180      636D706C 
 7180      785F6D75 
 7180      6C745F63 
 7180      6D706C78 
 7181              	.LASF76:
 7182 007b 61726D5F 		.ascii	"arm_cmplx_mult_real_q15\000"
 7182      636D706C 
 7182      785F6D75 
 7182      6C745F72 
 7182      65616C5F 
 7183              	.LASF73:
 7184 0093 70537263 		.ascii	"pSrcCmplx\000"
 7184      436D706C 
 7184      7800
 7185              	.LASF27:
 7186 009d 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 219


 7186      4D415448 
 7186      5F535543 
 7186      43455353 
 7186      00
 7187              	.LASF67:
 7188 00ae 61726D5F 		.ascii	"arm_cmplx_mag_squared_q31\000"
 7188      636D706C 
 7188      785F6D61 
 7188      675F7371 
 7188      75617265 
 7189              	.LASF12:
 7190 00c8 6C6F6E67 		.ascii	"long long unsigned int\000"
 7190      206C6F6E 
 7190      6720756E 
 7190      7369676E 
 7190      65642069 
 7191              	.LASF44:
 7192 00df 626C6B43 		.ascii	"blkCnt\000"
 7192      6E7400
 7193              	.LASF10:
 7194 00e6 5F5F696E 		.ascii	"__int64_t\000"
 7194      7436345F 
 7194      7400
 7195              	.LASF88:
 7196 00f0 73717274 		.ascii	"sqrtf\000"
 7196      6600
 7197              	.LASF77:
 7198 00f6 5F5F5245 		.ascii	"__RES\000"
 7198      5300
 7199              	.LASF26:
 7200 00fc 666C6F61 		.ascii	"float64_t\000"
 7200      7436345F 
 7200      7400
 7201              	.LASF82:
 7202 0106 5F5F636F 		.ascii	"__copy_table_end__\000"
 7202      70795F74 
 7202      61626C65 
 7202      5F656E64 
 7202      5F5F00
 7203              	.LASF14:
 7204 0119 696E7431 		.ascii	"int16_t\000"
 7204      365F7400 
 7205              	.LASF11:
 7206 0121 6C6F6E67 		.ascii	"long long int\000"
 7206      206C6F6E 
 7206      6720696E 
 7206      7400
 7207              	.LASF1:
 7208 012f 7369676E 		.ascii	"signed char\000"
 7208      65642063 
 7208      68617200 
 7209              	.LASF46:
 7210 013b 61726D5F 		.ascii	"arm_cmplx_dot_prod_f32\000"
 7210      636D706C 
 7210      785F646F 
 7210      745F7072 
 7210      6F645F66 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 220


 7211              	.LASF54:
 7212 0152 61726D5F 		.ascii	"arm_cmplx_dot_prod_q31\000"
 7212      636D706C 
 7212      785F646F 
 7212      745F7072 
 7212      6F645F71 
 7213              	.LASF57:
 7214 0169 696D6167 		.ascii	"imag\000"
 7214      00
 7215              	.LASF7:
 7216 016e 6C6F6E67 		.ascii	"long int\000"
 7216      20696E74 
 7216      00
 7217              	.LASF90:
 7218 0177 61726D5F 		.ascii	"arm_sqrt_q31\000"
 7218      73717274 
 7218      5F713331 
 7218      00
 7219              	.LASF40:
 7220 0184 70447374 		.ascii	"pDst\000"
 7220      00
 7221              	.LASF22:
 7222 0189 7131355F 		.ascii	"q15_t\000"
 7222      7400
 7223              	.LASF20:
 7224 018f 646F7562 		.ascii	"double\000"
 7224      6C6500
 7225              	.LASF47:
 7226 0196 70537263 		.ascii	"pSrcA\000"
 7226      4100
 7227              	.LASF48:
 7228 019c 70537263 		.ascii	"pSrcB\000"
 7228      4200
 7229              	.LASF8:
 7230 01a2 5F5F7569 		.ascii	"__uint32_t\000"
 7230      6E743332 
 7230      5F7400
 7231              	.LASF55:
 7232 01ad 61726D5F 		.ascii	"arm_cmplx_mag_f32\000"
 7232      636D706C 
 7232      785F6D61 
 7232      675F6633 
 7232      3200
 7233              	.LASF5:
 7234 01bf 5F5F696E 		.ascii	"__int16_t\000"
 7234      7431365F 
 7234      7400
 7235              	.LASF63:
 7236 01c9 61726D5F 		.ascii	"arm_cmplx_mag_q31\000"
 7236      636D706C 
 7236      785F6D61 
 7236      675F7133 
 7236      3100
 7237              	.LASF81:
 7238 01db 5F5F636F 		.ascii	"__copy_table_start__\000"
 7238      70795F74 
 7238      61626C65 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 221


 7238      5F737461 
 7238      72745F5F 
 7239              	.LASF72:
 7240 01f0 61726D5F 		.ascii	"arm_cmplx_mult_real_f32\000"
 7240      636D706C 
 7240      785F6D75 
 7240      6C745F72 
 7240      65616C5F 
 7241              	.LASF79:
 7242 0208 61726D5F 		.ascii	"arm_cmplx_mult_real_q31\000"
 7242      636D706C 
 7242      785F6D75 
 7242      6C745F72 
 7242      65616C5F 
 7243              	.LASF13:
 7244 0220 756E7369 		.ascii	"unsigned int\000"
 7244      676E6564 
 7244      20696E74 
 7244      00
 7245              	.LASF39:
 7246 022d 70537263 		.ascii	"pSrc\000"
 7246      00
 7247              	.LASF64:
 7248 0232 61726D5F 		.ascii	"arm_cmplx_mag_squared_f32\000"
 7248      636D706C 
 7248      785F6D61 
 7248      675F7371 
 7248      75617265 
 7249              	.LASF9:
 7250 024c 6C6F6E67 		.ascii	"long unsigned int\000"
 7250      20756E73 
 7250      69676E65 
 7250      6420696E 
 7250      7400
 7251              	.LASF4:
 7252 025e 73686F72 		.ascii	"short unsigned int\000"
 7252      7420756E 
 7252      7369676E 
 7252      65642069 
 7252      6E7400
 7253              	.LASF34:
 7254 0271 41524D5F 		.ascii	"ARM_MATH_DECOMPOSITION_FAILURE\000"
 7254      4D415448 
 7254      5F444543 
 7254      4F4D504F 
 7254      53495449 
 7255              	.LASF33:
 7256 0290 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 7256      4D415448 
 7256      5F544553 
 7256      545F4641 
 7256      494C5552 
 7257              	.LASF69:
 7258 02a6 61726D5F 		.ascii	"arm_cmplx_mult_cmplx_f64\000"
 7258      636D706C 
 7258      785F6D75 
 7258      6C745F63 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 222


 7258      6D706C78 
 7259              	.LASF65:
 7260 02bf 61726D5F 		.ascii	"arm_cmplx_mag_squared_f64\000"
 7260      636D706C 
 7260      785F6D61 
 7260      675F7371 
 7260      75617265 
 7261              	.LASF92:
 7262 02d9 2E5C4453 		.ascii	".\\DSP\\Source\\ComplexMathFunctions\\ComplexMathFu"
 7262      505C536F 
 7262      75726365 
 7262      5C436F6D 
 7262      706C6578 
 7263 0308 6E637469 		.ascii	"nctions.c\000"
 7263      6F6E732E 
 7263      6300
 7264              	.LASF36:
 7265 0312 704F7574 		.ascii	"pOut\000"
 7265      00
 7266              	.LASF18:
 7267 0317 73697A65 		.ascii	"sizetype\000"
 7267      74797065 
 7267      00
 7268              	.LASF21:
 7269 0320 6C6F6E67 		.ascii	"long double\000"
 7269      20646F75 
 7269      626C6500 
 7270              	.LASF50:
 7271 032c 696D6167 		.ascii	"imagResult\000"
 7271      52657375 
 7271      6C7400
 7272              	.LASF94:
 7273 0337 61726D5F 		.ascii	"arm_sqrt_q15\000"
 7273      73717274 
 7273      5F713135 
 7273      00
 7274              	.LASF38:
 7275 0344 636C6970 		.ascii	"clip_q63_to_q31\000"
 7275      5F713633 
 7275      5F746F5F 
 7275      71333100 
 7276              	.LASF86:
 7277 0354 64657374 		.ascii	"dest\000"
 7277      00
 7278              	.LASF29:
 7279 0359 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 7279      4D415448 
 7279      5F4C454E 
 7279      4754485F 
 7279      4552524F 
 7280              	.LASF0:
 7281 036f 666C6F61 		.ascii	"float\000"
 7281      7400
 7282              	.LASF32:
 7283 0375 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 7283      4D415448 
 7283      5F53494E 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 223


 7283      47554C41 
 7283      5200
 7284              	.LASF52:
 7285 0387 696D6167 		.ascii	"imag_sum\000"
 7285      5F73756D 
 7285      00
 7286              	.LASF31:
 7287 0390 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 7287      4D415448 
 7287      5F4E414E 
 7287      494E4600 
 7288              	.LASF49:
 7289 03a0 7265616C 		.ascii	"realResult\000"
 7289      52657375 
 7289      6C7400
 7290              	.LASF37:
 7291 03ab 61726D5F 		.ascii	"arm_sqrt_f32\000"
 7291      73717274 
 7291      5F663332 
 7291      00
 7292              	.LASF15:
 7293 03b8 696E7433 		.ascii	"int32_t\000"
 7293      325F7400 
 7294              	.LASF2:
 7295 03c0 756E7369 		.ascii	"unsigned char\000"
 7295      676E6564 
 7295      20636861 
 7295      7200
 7296              	.LASF87:
 7297 03ce 776C656E 		.ascii	"wlen\000"
 7297      00
 7298              	.LASF3:
 7299 03d3 73686F72 		.ascii	"short int\000"
 7299      7420696E 
 7299      7400
 7300              	.LASF28:
 7301 03dd 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 7301      4D415448 
 7301      5F415247 
 7301      554D454E 
 7301      545F4552 
 7302              	.LASF58:
 7303 03f5 61726D5F 		.ascii	"arm_cmplx_mag_f64\000"
 7303      636D706C 
 7303      785F6D61 
 7303      675F6636 
 7303      3400
 7304              	.LASF43:
 7305 0407 61726D5F 		.ascii	"arm_cmplx_conj_q15\000"
 7305      636D706C 
 7305      785F636F 
 7305      6E6A5F71 
 7305      313500
 7306              	.LASF23:
 7307 041a 7133315F 		.ascii	"q31_t\000"
 7307      7400
 7308              	.LASF16:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 224


 7309 0420 75696E74 		.ascii	"uint32_t\000"
 7309      33325F74 
 7309      00
 7310              	.LASF93:
 7311 0429 5C5C766D 		.ascii	"\\\\vmware-host\\Shared Folders\\Documents\\PSoC Cr"
 7311      77617265 
 7311      2D686F73 
 7311      745C5368 
 7311      61726564 
 7312 0457 6561746F 		.ascii	"eator\\FinalProject\\SoundDetection.cydsn\000"
 7312      725C4669 
 7312      6E616C50 
 7312      726F6A65 
 7312      63745C53 
 7313              	.LASF51:
 7314 047f 7265616C 		.ascii	"real_sum\000"
 7314      5F73756D 
 7314      00
 7315              	.LASF19:
 7316 0488 63686172 		.ascii	"char\000"
 7316      00
 7317              	.LASF30:
 7318 048d 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 7318      4D415448 
 7318      5F53495A 
 7318      455F4D49 
 7318      534D4154 
 7319              	.LASF6:
 7320 04a4 5F5F696E 		.ascii	"__int32_t\000"
 7320      7433325F 
 7320      7400
 7321              	.LASF25:
 7322 04ae 666C6F61 		.ascii	"float32_t\000"
 7322      7433325F 
 7322      7400
 7323              	.LASF70:
 7324 04b8 61726D5F 		.ascii	"arm_cmplx_mult_cmplx_q15\000"
 7324      636D706C 
 7324      785F6D75 
 7324      6C745F63 
 7324      6D706C78 
 7325              	.LASF66:
 7326 04d1 61726D5F 		.ascii	"arm_cmplx_mag_squared_q15\000"
 7326      636D706C 
 7326      785F6D61 
 7326      675F7371 
 7326      75617265 
 7327              	.LASF62:
 7328 04eb 61726D5F 		.ascii	"arm_cmplx_mag_fast_q15\000"
 7328      636D706C 
 7328      785F6D61 
 7328      675F6661 
 7328      73745F71 
 7329              	.LASF85:
 7330 0502 5F5F7A65 		.ascii	"__zero_table_end__\000"
 7330      726F5F74 
 7330      61626C65 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 225


 7330      5F656E64 
 7330      5F5F00
 7331              	.LASF78:
 7332 0515 5F5F4152 		.ascii	"__ARG1\000"
 7332      473100
 7333              	.LASF41:
 7334 051c 6E756D53 		.ascii	"numSamples\000"
 7334      616D706C 
 7334      657300
 7335              	.LASF35:
 7336 0527 61726D5F 		.ascii	"arm_status\000"
 7336      73746174 
 7336      757300
 7337              	.LASF53:
 7338 0532 61726D5F 		.ascii	"arm_cmplx_dot_prod_q15\000"
 7338      636D706C 
 7338      785F646F 
 7338      745F7072 
 7338      6F645F71 
 7339              	.LASF89:
 7340 0549 73717274 		.ascii	"sqrt\000"
 7340      00
 7341              	.LASF75:
 7342 054e 70436D70 		.ascii	"pCmplxDst\000"
 7342      6C784473 
 7342      7400
 7343              	.LASF56:
 7344 0558 7265616C 		.ascii	"real\000"
 7344      00
 7345              	.LASF42:
 7346 055d 61726D5F 		.ascii	"arm_cmplx_conj_f32\000"
 7346      636D706C 
 7346      785F636F 
 7346      6E6A5F66 
 7346      333200
 7347              	.LASF17:
 7348 0570 696E7436 		.ascii	"int64_t\000"
 7348      345F7400 
 7349              	.LASF45:
 7350 0578 61726D5F 		.ascii	"arm_cmplx_conj_q31\000"
 7350      636D706C 
 7350      785F636F 
 7350      6E6A5F71 
 7350      333100
 7351              	.LASF84:
 7352 058b 5F5F7A65 		.ascii	"__zero_table_start__\000"
 7352      726F5F74 
 7352      61626C65 
 7352      5F737461 
 7352      72745F5F 
 7353              	.LASF91:
 7354 05a0 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 7354      4320342E 
 7354      392E3320 
 7354      32303135 
 7354      30333033 
 7355 05d3 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccnpFvRb.s 			page 226


 7355      20726576 
 7355      6973696F 
 7355      6E203232 
 7355      31323230 
 7356 0606 67202D73 		.ascii	"g -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 7356      74643D67 
 7356      6E753939 
 7356      202D6666 
 7356      756E6374 
 7357              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
