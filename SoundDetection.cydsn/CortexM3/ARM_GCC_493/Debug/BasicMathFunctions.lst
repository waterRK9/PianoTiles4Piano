ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"BasicMathFunctions.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.arm_abs_f32,"ax",%progbits
  19              		.align	2
  20              		.global	arm_abs_f32
  21              		.thumb
  22              		.thumb_func
  23              		.type	arm_abs_f32, %function
  24              	arm_abs_f32:
  25              	.LFB83:
  26              		.file 1 ".\\DSP\\Source\\BasicMathFunctions\\arm_abs_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Title:        arm_abs_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Description:  Floating-point vector absolute value
   5:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #include <math.h>
  31:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 2


  32:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /**
  33:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @ingroup groupMath
  34:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  */
  35:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @defgroup BasicAbs Vector Absolute Value
  38:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  39:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   Computes the absolute value of a vector on an element-by-element basis.
  40:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   <pre>
  42:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****       pDst[n] = abs(pSrc[n]),   0 <= n < blockSize.
  43:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   </pre>
  44:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  45:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   The functions support in-place computation allowing the source and
  46:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   destination pointers to reference the same memory buffer.
  47:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  48:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  */
  49:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  50:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /**
  51:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @addtogroup BasicAbs
  52:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @{
  53:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  */
  54:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** /**
  56:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @brief         Floating-point vector absolute value.
  57:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @param[in]     pSrc       points to the input vector
  58:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @param[out]    pDst       points to the output vector
  59:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @param[in]     blockSize  number of samples in each vector
  60:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   @return        none
  61:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****  */
  62:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  65:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #include "arm_helium_utils.h"
  67:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** void arm_abs_f32(
  69:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   const float32_t * pSrc,
  70:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         float32_t * pDst,
  71:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         uint32_t blockSize)
  72:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** {
  73:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  74:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     f32x4_t vec1;
  75:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     f32x4_t res;
  76:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Compute 4 outputs at a time */
  79:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt = blockSize >> 2U;
  80:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     while (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* C = |A| */
  84:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  85:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* Calculate absolute values and then store the results in the destination buffer. */
  86:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         vec1 = vld1q(pSrc);
  87:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         res = vabsq(vec1);
  88:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         vst1q(pDst, res);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 3


  89:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* Increment pointers */
  91:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         pSrc += 4;
  92:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         pDst += 4;
  93:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         
  94:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* Decrement the loop counter */
  95:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         blkCnt--;
  96:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     }
  97:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Tail */
  99:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt = blockSize & 0x3;
 100:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 101:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     if (blkCnt > 0U)
 103:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     {
 104:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****       /* C = |A| */
 105:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 106:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****       vec1 = vld1q(pSrc);
 107:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****       vstrwq_p(pDst, vabsq(vec1), p0);
 108:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** }
 111:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** void arm_abs_f32(
 114:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   const float32_t * pSrc,
 115:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         float32_t * pDst,
 116:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         uint32_t blockSize)
 117:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** {
  27              		.loc 1 117 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 118:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 119:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 121:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     f32x4_t vec1;
 122:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     f32x4_t res;
 123:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Compute 4 outputs at a time */
 125:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt = blockSize >> 2U;
 126:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     while (blkCnt > 0U)
 128:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     {
 129:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* C = |A| */
 130:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     	/* Calculate absolute values and then store the results in the destination buffer. */
 132:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         vec1 = vld1q_f32(pSrc);
 133:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         res = vabsq_f32(vec1);
 134:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         vst1q_f32(pDst, res);
 135:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* Increment pointers */
 137:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         pSrc += 4;
 138:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         pDst += 4;
 139:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 4


 140:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         /* Decrement the loop counter */
 141:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****         blkCnt--;
 142:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     }
 143:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Tail */
 145:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt = blockSize & 0x3;
 146:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #else
 148:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 149:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 151:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   blkCnt = blockSize >> 2U;
 152:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   while (blkCnt > 0U)
 154:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   {
 155:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* C = |A| */
 156:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Calculate absolute and store result in destination buffer. */
 158:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     *pDst++ = fabsf(*pSrc++);
 159:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 160:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     *pDst++ = fabsf(*pSrc++);
 161:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     *pDst++ = fabsf(*pSrc++);
 163:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 164:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     *pDst++ = fabsf(*pSrc++);
 165:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 166:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Decrement loop counter */
 167:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt--;
 168:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   }
 169:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 170:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 171:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   blkCnt = blockSize % 0x4U;
 172:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #else
 174:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   /* Initialize blkCnt with number of samples */
 176:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   blkCnt = blockSize;
 177:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 179:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 180:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 181:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   while (blkCnt > 0U)
  33              		.loc 1 181 0
  34 0000 06E0     		b	.L2
  35              	.LVL1:
  36              	.L3:
 182:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   {
 183:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* C = |A| */
 184:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 185:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Calculate absolute and store result in destination buffer. */
 186:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     *pDst++ = fabsf(*pSrc++);
  37              		.loc 1 186 0
  38 0002 0368     		ldr	r3, [r0]
  39 0004 23F00043 		bic	r3, r3, #-2147483648
  40 0008 0B60     		str	r3, [r1]	@ float
 187:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 188:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     /* Decrement loop counter */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 5


 189:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****     blkCnt--;
  41              		.loc 1 189 0
  42 000a 013A     		subs	r2, r2, #1
  43              	.LVL2:
 186:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
  44              		.loc 1 186 0
  45 000c 0431     		adds	r1, r1, #4
  46              	.LVL3:
  47 000e 0430     		adds	r0, r0, #4
  48              	.LVL4:
  49              	.L2:
 181:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   {
  50              		.loc 1 181 0
  51 0010 002A     		cmp	r2, #0
  52 0012 F6D1     		bne	.L3
 190:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c ****   }
 191:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_abs_f32.c **** }
  53              		.loc 1 192 0
  54 0014 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE83:
  57              		.size	arm_abs_f32, .-arm_abs_f32
  58 0016 00BF     		.section	.text.arm_abs_f64,"ax",%progbits
  59              		.align	2
  60              		.global	arm_abs_f64
  61              		.thumb
  62              		.thumb_func
  63              		.type	arm_abs_f64, %function
  64              	arm_abs_f64:
  65              	.LFB84:
  66              		.file 2 ".\\DSP\\Source\\BasicMathFunctions\\arm_abs_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Title:        arm_abs_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Description:  Floating-point vector absolute value
   5:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * See the License for the specific language governing permissions and
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 6


  26:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** #include <math.h>
  31:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  32:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** /**
  33:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @ingroup groupMath
  34:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  */
  35:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @addtogroup BasicAbs
  38:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @brief         Floating-point vector absolute value.
  43:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @param[in]     pSrc       points to the input vector
  44:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** void arm_abs_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   const float64_t * pSrc,
  51:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****         float64_t * pDst,
  52:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****         uint32_t blockSize)
  53:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** {
  67              		.loc 2 53 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.LVL5:
  73 0000 30B4     		push	{r4, r5}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 4, -8
  76              		.cfi_offset 5, -4
  77              	.LVL6:
  54:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  55:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   /* Initialize blkCnt with number of samples */
  57:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   blkCnt = blockSize;
  58:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  59:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   while (blkCnt > 0U)
  78              		.loc 2 59 0
  79 0002 08E0     		b	.L5
  80              	.LVL7:
  81              	.L6:
  60:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   {
  61:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****     /* C = |A| */
  62:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****     /* Calculate absolute and store result in destination buffer. */
  64:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****     *pDst++ = fabs(*pSrc++);
  82              		.loc 2 64 0
  83 0004 4368     		ldr	r3, [r0, #4]
  84 0006 0468     		ldr	r4, [r0]
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 7


  85 0008 23F00045 		bic	r5, r3, #-2147483648
  86 000c C1E90045 		strd	r4, [r1]
  65:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****     /* Decrement loop counter */
  67:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****     blkCnt--;
  87              		.loc 2 67 0
  88 0010 013A     		subs	r2, r2, #1
  89              	.LVL8:
  64:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  90              		.loc 2 64 0
  91 0012 0831     		adds	r1, r1, #8
  92              	.LVL9:
  93 0014 0830     		adds	r0, r0, #8
  94              	.LVL10:
  95              	.L5:
  59:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   {
  96              		.loc 2 59 0
  97 0016 002A     		cmp	r2, #0
  98 0018 F4D1     		bne	.L6
  68:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c ****   }
  69:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_abs_f64.c **** }
  99              		.loc 2 70 0
 100 001a 30BC     		pop	{r4, r5}
 101              		.cfi_restore 5
 102              		.cfi_restore 4
 103              		.cfi_def_cfa_offset 0
 104 001c 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE84:
 107              		.size	arm_abs_f64, .-arm_abs_f64
 108 001e 00BF     		.section	.text.arm_abs_q15,"ax",%progbits
 109              		.align	2
 110              		.global	arm_abs_q15
 111              		.thumb
 112              		.thumb_func
 113              		.type	arm_abs_q15, %function
 114              	arm_abs_q15:
 115              	.LFB85:
 116              		.file 3 ".\\DSP\\Source\\BasicMathFunctions\\arm_abs_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Title:        arm_abs_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Description:  Q15 vector absolute value
   5:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * not use this file except in compliance with the License.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 8


  18:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @addtogroup BasicAbs
  37:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @brief         Q15 vector absolute value.
  42:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @param[out]    pDst       points to the output vector
  44:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****                    The Q15 value -1 (0x8000) will be saturated to the maximum allowable positive va
  50:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** void arm_abs_q15(
  57:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     const q15_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     q15_t * pDst,
  59:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     uint32_t blockSize)
  60:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** {
  61:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  62:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     q15x8_t vecSrc;
  63:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* Compute 8 outputs at a time */
  65:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     blkCnt = blockSize >> 3;
  66:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     while (blkCnt > 0U)
  67:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     {
  68:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         /*
  69:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          * C = |A|
  70:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          * Calculate absolute and then store the results in the destination buffer.
  71:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          */
  72:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         vecSrc = vld1q(pSrc);
  73:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         vst1q(pDst, vqabsq(vecSrc));
  74:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         /*
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 9


  75:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          * Decrement the blockSize loop counter
  76:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          */
  77:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         blkCnt--;
  78:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          * advance vector source and destination pointers
  80:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         pSrc += 8;
  82:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         pDst += 8;
  83:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     }
  84:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /*
  85:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****      * tail
  86:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****      */
  87:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     blkCnt = blockSize & 7;
  88:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     if (blkCnt > 0U)
  89:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     {
  90:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  91:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         vecSrc = vld1q(pSrc);
  92:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         vstrhq_p(pDst, vqabsq(vecSrc), p0);
  93:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     }
  94:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** }
  95:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
  96:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
  97:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** void arm_abs_q15(
  98:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   const q15_t * pSrc,
  99:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         q15_t * pDst,
 100:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         uint32_t blockSize)
 101:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** {
 117              		.loc 3 101 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.LVL11:
 123 0000 30B4     		push	{r4, r5}
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 5, -4
 127              	.LVL12:
 102:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 103:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****         q15_t in;                                      /* Temporary input variable */
 104:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 105:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 106:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 108:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   blkCnt = blockSize >> 2U;
 109:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   while (blkCnt > 0U)
 111:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   {
 112:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* C = |A| */
 113:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination
 115:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     in = *pSrc++;
 116:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 117:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 118:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 119:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
 120:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 10


 121:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     in = *pSrc++;
 123:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 124:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 125:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 126:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
 127:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
 128:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     in = *pSrc++;
 130:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 131:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 132:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 133:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
 134:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
 135:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     in = *pSrc++;
 137:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 138:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 139:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 140:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
 141:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
 142:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* Decrement loop counter */
 144:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     blkCnt--;
 145:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   }
 146:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 148:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   blkCnt = blockSize % 0x4U;
 149:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 151:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   /* Initialize blkCnt with number of samples */
 153:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   blkCnt = blockSize;
 154:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 156:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   while (blkCnt > 0U)
 128              		.loc 3 157 0
 129 0002 11E0     		b	.L9
 130              	.LVL13:
 131              	.L12:
 158:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   {
 159:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* C = |A| */
 160:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination
 162:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     in = *pSrc++;
 132              		.loc 3 162 0
 133 0004 841C     		adds	r4, r0, #2
 134              	.LVL14:
 135 0006 0388     		ldrh	r3, [r0]
 136              	.LVL15:
 163:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 164:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 165:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #else
 166:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
 137              		.loc 3 166 0
 138 0008 881C     		adds	r0, r1, #2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 11


 139              	.LVL16:
 140 000a 1DB2     		sxth	r5, r3
 141 000c 002D     		cmp	r5, #0
 142 000e 07DC     		bgt	.L10
 143              		.loc 3 166 0 is_stmt 0 discriminator 1
 144 0010 15F5004F 		cmn	r5, #32768
 145 0014 02D0     		beq	.L14
 146              		.loc 3 166 0 discriminator 3
 147 0016 5B42     		negs	r3, r3
 148              	.LVL17:
 149 0018 9BB2     		uxth	r3, r3
 150 001a 01E0     		b	.L10
 151              	.LVL18:
 152              	.L14:
 153              		.loc 3 166 0
 154 001c 47F6FF73 		movw	r3, #32767
 155              	.LVL19:
 156              	.L10:
 157              		.loc 3 166 0 discriminator 8
 158 0020 0B80     		strh	r3, [r1]	@ movhi
 167:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
 168:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     /* Decrement loop counter */
 170:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****     blkCnt--;
 159              		.loc 3 170 0 is_stmt 1 discriminator 8
 160 0022 013A     		subs	r2, r2, #1
 161              	.LVL20:
 166:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #endif
 162              		.loc 3 166 0 discriminator 8
 163 0024 0146     		mov	r1, r0
 162:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** #if defined (ARM_MATH_DSP)
 164              		.loc 3 162 0 discriminator 8
 165 0026 2046     		mov	r0, r4
 166              	.LVL21:
 167              	.L9:
 157:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   {
 168              		.loc 3 157 0
 169 0028 002A     		cmp	r2, #0
 170 002a EBD1     		bne	.L12
 171:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c ****   }
 172:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_abs_q15.c **** }
 171              		.loc 3 173 0
 172 002c 30BC     		pop	{r4, r5}
 173              		.cfi_restore 5
 174              		.cfi_restore 4
 175              		.cfi_def_cfa_offset 0
 176 002e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE85:
 179              		.size	arm_abs_q15, .-arm_abs_q15
 180              		.section	.text.arm_abs_q31,"ax",%progbits
 181              		.align	2
 182              		.global	arm_abs_q31
 183              		.thumb
 184              		.thumb_func
 185              		.type	arm_abs_q31, %function
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 12


 186              	arm_abs_q31:
 187              	.LFB86:
 188              		.file 4 ".\\DSP\\Source\\BasicMathFunctions\\arm_abs_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Title:        arm_abs_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Description:  Q31 vector absolute value
   5:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @addtogroup BasicAbs
  37:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @brief         Q31 vector absolute value.
  42:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @param[out]    pDst       points to the output vector
  44:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****                    The Q31 value -1 (0x80000000) will be saturated to the maximum allowable positiv
  50:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #include "arm_helium_utils.h"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 13


  55:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** void arm_abs_q31(
  57:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     const q31_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     q31_t * pDst,
  59:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     uint32_t blockSize)
  60:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** {
  61:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     uint32_t  blkCnt;           /* Loop counters */
  62:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     q31x4_t vecSrc;
  63:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Compute 4 outputs at a time */
  65:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt = blockSize >> 2;
  66:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          * C = |A|
  71:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          * Calculate absolute and then store the results in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vecSrc = vld1q(pSrc);
  74:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vst1q(pDst, vqabsq(vecSrc));
  75:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          * Decrement the blockSize loop counter
  77:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          */
  78:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         blkCnt--;
  79:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /*
  80:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          * Advance vector source and destination pointers
  81:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****          */
  82:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         pSrc += 4;
  83:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         pDst += 4;
  84:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /*
  86:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****      * Tail
  87:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****      */
  88:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt = blockSize & 3;
  89:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     if (blkCnt > 0U)
  91:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     {
  92:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  93:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vecSrc = vld1q(pSrc);
  94:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vstrwq_p(pDst, vqabsq(vecSrc), p0);
  95:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** }
  97:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
  99:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** void arm_abs_q31(
 100:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   const q31_t * pSrc,
 101:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         q31_t * pDst,
 102:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         uint32_t blockSize)
 103:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** {
 189              		.loc 4 103 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194              	.LVL22:
 195 0000 10B4     		push	{r4}
 196              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 14


 197              		.cfi_offset 4, -4
 198              	.LVL23:
 104:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 105:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         q31_t in;                                      /* Temporary variable */
 106:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined(ARM_MATH_NEON)
 108:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     int32x4_t vec1;
 109:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     int32x4_t res;
 110:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Compute 4 outputs at a time */  
 112:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt = blockSize >> 2U;
 113:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     while (blkCnt > 0U)
 115:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     {
 116:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /* C = |A| */
 117:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /* Calculate absolute and then store the results in the destination buffer. */
 118:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vec1 = vld1q_s32(pSrc);
 120:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         res = vqabsq_s32(vec1);
 121:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         vst1q_s32(pDst, res);
 122:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /* Increment pointers */
 124:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         pSrc += 4;
 125:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         pDst += 4;
 126:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         
 127:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         /* Decrement the blockSize loop counter */
 128:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****         blkCnt--;
 129:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     }
 130:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Tail */
 132:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt = blockSize & 0x3;
 133:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 135:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 136:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 138:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   blkCnt = blockSize >> 2U;
 139:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   while (blkCnt > 0U)
 141:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   {
 142:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* C = |A| */
 143:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7fffffff) and store result in destina
 145:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     in = *pSrc++;
 146:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 147:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : (q31_t)__QSUB(0, in);
 148:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 149:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
 150:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 151:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     in = *pSrc++;
 153:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 154:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : (q31_t)__QSUB(0, in);
 155:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 156:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
 157:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 158:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 15


 159:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     in = *pSrc++;
 160:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 161:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : (q31_t)__QSUB(0, in);
 162:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 163:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
 164:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 165:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 166:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     in = *pSrc++;
 167:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 168:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : (q31_t)__QSUB(0, in);
 169:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 170:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
 171:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 172:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Decrement loop counter */
 174:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt--;
 175:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   }
 176:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 178:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   blkCnt = blockSize % 0x4U;
 179:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 181:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 182:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   /* Initialize blkCnt with number of samples */
 183:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   blkCnt = blockSize;
 184:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 185:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 186:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif /* #if defined (ARM_MATH_NEON) */
 187:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 188:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   while (blkCnt > 0U)
 199              		.loc 4 188 0
 200 0002 0FE0     		b	.L17
 201              	.LVL24:
 202              	.L20:
 189:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   {
 190:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* C = |A| */
 191:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7fffffff) and store result in destina
 193:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     in = *pSrc++;
 203              		.loc 4 193 0
 204 0004 041D     		adds	r4, r0, #4
 205              	.LVL25:
 206 0006 0368     		ldr	r3, [r0]
 207              	.LVL26:
 194:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 195:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : (q31_t)__QSUB(0, in);
 196:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #else
 197:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);
 208              		.loc 4 197 0
 209 0008 081D     		adds	r0, r1, #4
 210              	.LVL27:
 211 000a 002B     		cmp	r3, #0
 212 000c 06DC     		bgt	.L18
 213              		.loc 4 197 0 is_stmt 0 discriminator 1
 214 000e B3F1004F 		cmp	r3, #-2147483648
 215 0012 01D0     		beq	.L22
 216              		.loc 4 197 0 discriminator 3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 16


 217 0014 5B42     		negs	r3, r3
 218              	.LVL28:
 219 0016 01E0     		b	.L18
 220              	.LVL29:
 221              	.L22:
 222              		.loc 4 197 0
 223 0018 6FF00043 		mvn	r3, #-2147483648
 224              	.LVL30:
 225              	.L18:
 226              		.loc 4 197 0 discriminator 8
 227 001c 0B60     		str	r3, [r1]
 228              	.LVL31:
 198:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 199:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 200:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     /* Decrement loop counter */
 201:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****     blkCnt--;
 229              		.loc 4 201 0 is_stmt 1 discriminator 8
 230 001e 013A     		subs	r2, r2, #1
 231              	.LVL32:
 197:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #endif
 232              		.loc 4 197 0 discriminator 8
 233 0020 0146     		mov	r1, r0
 193:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** #if defined (ARM_MATH_DSP)
 234              		.loc 4 193 0 discriminator 8
 235 0022 2046     		mov	r0, r4
 236              	.LVL33:
 237              	.L17:
 188:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   {
 238              		.loc 4 188 0
 239 0024 002A     		cmp	r2, #0
 240 0026 EDD1     		bne	.L20
 202:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c ****   }
 203:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** 
 204:.\DSP\Source\BasicMathFunctions/arm_abs_q31.c **** }
 241              		.loc 4 204 0
 242 0028 5DF8044B 		ldr	r4, [sp], #4
 243              		.cfi_restore 4
 244              		.cfi_def_cfa_offset 0
 245 002c 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE86:
 248              		.size	arm_abs_q31, .-arm_abs_q31
 249 002e 00BF     		.section	.text.arm_abs_q7,"ax",%progbits
 250              		.align	2
 251              		.global	arm_abs_q7
 252              		.thumb
 253              		.thumb_func
 254              		.type	arm_abs_q7, %function
 255              	arm_abs_q7:
 256              	.LFB87:
 257              		.file 5 ".\\DSP\\Source\\BasicMathFunctions\\arm_abs_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Title:        arm_abs_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Description:  Q7 vector absolute value
   5:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * $Date:        23 April 2021
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 17


   7:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @addtogroup BasicAbs
  37:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @brief         Q7 vector absolute value.
  42:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @param[out]    pDst       points to the output vector
  44:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @par           Conditions for optimum performance
  48:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****                    Input and output buffers should be aligned by 32-bit
  49:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****                    The function uses saturating arithmetic.
  51:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****                    The Q7 value -1 (0x80) will be saturated to the maximum allowable positive value
  52:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  55:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #include "arm_helium_utils.h"
  57:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** void arm_abs_q7(
  59:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     const q7_t * pSrc,
  60:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     q7_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     uint32_t  blkCnt;           /* loop counters */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 18


  64:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     q7x16_t vecSrc;
  65:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* Compute 16 outputs at a time */
  67:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     blkCnt = blockSize >> 4;
  68:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     while (blkCnt > 0U)
  69:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     {
  70:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         /*
  71:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          * C = |A|
  72:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          * Calculate absolute and then store the results in the destination buffer.
  73:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          */
  74:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         vecSrc = vld1q(pSrc);
  75:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         vst1q(pDst, vqabsq(vecSrc));
  76:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          * Decrement the blockSize loop counter
  78:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          * advance vector source and destination pointers
  82:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         pSrc += 16;
  84:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         pDst += 16;
  85:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     }
  86:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /*
  87:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****      * tail
  88:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****      */
  89:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     blkCnt = blockSize & 0xF;
  90:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     if (blkCnt > 0U)
  91:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     {
  92:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  93:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         vecSrc = vld1q(pSrc);
  94:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         vstrbq_p(pDst, vqabsq(vecSrc), p0);
  95:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** }
  97:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
  99:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** void arm_abs_q7(
 100:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   const q7_t * pSrc,
 101:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         q7_t * pDst,
 102:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         uint32_t blockSize)
 103:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** {
 258              		.loc 5 103 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL34:
 264 0000 30B4     		push	{r4, r5}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 5, -4
 268              	.LVL35:
 104:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 105:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****         q7_t in;                                       /* Temporary input variable */
 106:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 108:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 19


 110:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   blkCnt = blockSize >> 2U;
 111:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   while (blkCnt > 0U)
 113:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   {
 114:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* C = |A| */
 115:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7f) and store result in destination b
 117:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     in = *pSrc++;
 118:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 119:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : (q7_t)__QSUB8(0, in);
 120:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 121:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? (q7_t) 0x7f : -in);
 122:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 123:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     in = *pSrc++;
 125:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 126:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : (q7_t)__QSUB8(0, in);
 127:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 128:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? (q7_t) 0x7f : -in);
 129:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 130:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     in = *pSrc++;
 132:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 133:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : (q7_t)__QSUB8(0, in);
 134:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 135:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? (q7_t) 0x7f : -in);
 136:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 137:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     in = *pSrc++;
 139:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 140:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : (q7_t)__QSUB8(0, in);
 141:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 142:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? (q7_t) 0x7f : -in);
 143:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 144:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* Decrement loop counter */
 146:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     blkCnt--;
 147:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   }
 148:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 150:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   blkCnt = blockSize % 0x4U;
 151:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 153:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   /* Initialize blkCnt with number of samples */
 155:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   blkCnt = blockSize;
 156:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 158:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   while (blkCnt > 0U)
 269              		.loc 5 159 0
 270 0002 10E0     		b	.L25
 271              	.LVL36:
 272              	.L28:
 160:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   {
 161:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* C = |A| */
 162:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 20


 163:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* Calculate absolute of input (if -1 then saturated to 0x7f) and store result in destination b
 164:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     in = *pSrc++;
 273              		.loc 5 164 0
 274 0004 441C     		adds	r4, r0, #1
 275              	.LVL37:
 276 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 277              	.LVL38:
 165:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 166:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : (q7_t) __QSUB8(0, in);
 167:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #else
 168:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     *pDst++ = (in > 0) ? in : ((in == (q7_t) 0x80) ? (q7_t) 0x7f : -in);
 278              		.loc 5 168 0
 279 0008 481C     		adds	r0, r1, #1
 280              	.LVL39:
 281 000a 5DB2     		sxtb	r5, r3
 282 000c 002D     		cmp	r5, #0
 283 000e 06DC     		bgt	.L26
 284              		.loc 5 168 0 is_stmt 0 discriminator 1
 285 0010 15F1800F 		cmn	r5, #128
 286 0014 02D0     		beq	.L30
 287              		.loc 5 168 0 discriminator 3
 288 0016 5B42     		negs	r3, r3
 289              	.LVL40:
 290 0018 DBB2     		uxtb	r3, r3
 291 001a 00E0     		b	.L26
 292              	.LVL41:
 293              	.L30:
 294              		.loc 5 168 0
 295 001c 7F23     		movs	r3, #127
 296              	.LVL42:
 297              	.L26:
 298              		.loc 5 168 0 discriminator 8
 299 001e 0B70     		strb	r3, [r1]
 169:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 170:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 171:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     /* Decrement loop counter */
 172:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****     blkCnt--;
 300              		.loc 5 172 0 is_stmt 1 discriminator 8
 301 0020 013A     		subs	r2, r2, #1
 302              	.LVL43:
 168:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #endif
 303              		.loc 5 168 0 discriminator 8
 304 0022 0146     		mov	r1, r0
 164:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** #if defined (ARM_MATH_DSP)
 305              		.loc 5 164 0 discriminator 8
 306 0024 2046     		mov	r0, r4
 307              	.LVL44:
 308              	.L25:
 159:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   {
 309              		.loc 5 159 0
 310 0026 002A     		cmp	r2, #0
 311 0028 ECD1     		bne	.L28
 173:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c ****   }
 174:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_abs_q7.c **** }
 312              		.loc 5 175 0
 313 002a 30BC     		pop	{r4, r5}
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 21


 314              		.cfi_restore 5
 315              		.cfi_restore 4
 316              		.cfi_def_cfa_offset 0
 317 002c 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE87:
 320              		.size	arm_abs_q7, .-arm_abs_q7
 321              		.global	__aeabi_fadd
 322 002e 00BF     		.section	.text.arm_add_f32,"ax",%progbits
 323              		.align	2
 324              		.global	arm_add_f32
 325              		.thumb
 326              		.thumb_func
 327              		.type	arm_add_f32, %function
 328              	arm_add_f32:
 329              	.LFB88:
 330              		.file 6 ".\\DSP\\Source\\BasicMathFunctions\\arm_add_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Title:        arm_add_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @defgroup BasicAdd Vector Addition
  37:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   Element-by-element addition of two vectors.
  39:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   <pre>
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 22


  41:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       pDst[n] = pSrcA[n] + pSrcB[n],   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  */
  46:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /**
  48:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @addtogroup BasicAdd
  49:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @{
  50:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** /**
  53:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @brief         Floating-point vector addition.
  54:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @param[in]     pSrcA      points to first input vector
  55:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @param[in]     pSrcB      points to second input vector
  56:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @param[out]    pDst       points to output vector
  57:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @param[in]     blockSize  number of samples in each vector
  58:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   @return        none
  59:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****  */
  60:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  62:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #include "arm_helium_utils.h"
  64:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** void arm_add_f32(
  66:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   const float32_t * pSrcA,
  67:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   const float32_t * pSrcB,
  68:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         float32_t * pDst,
  69:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         uint32_t blockSize)
  70:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** {
  71:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  72:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t vec1;
  74:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t vec2;
  75:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t res;
  76:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Compute 4 outputs at a time */
  78:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt = blockSize >> 2U;
  79:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  80:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     while (blkCnt > 0U)
  81:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     {
  82:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* C = A + B */
  83:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  84:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* Add and then store the results in the destination buffer. */
  85:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vec1 = vld1q(pSrcA);
  86:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vec2 = vld1q(pSrcB);
  87:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         res = vaddq(vec1, vec2);
  88:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vst1q(pDst, res);
  89:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* Increment pointers */
  91:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pSrcA += 4;
  92:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pSrcB += 4; 
  93:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pDst += 4;
  94:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         
  95:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* Decrement the loop counter */
  96:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         blkCnt--;
  97:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 23


  98:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
  99:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Tail */
 100:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt = blockSize & 0x3;
 101:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     if (blkCnt > 0U)
 103:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     {
 104:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       /* C = A + B */
 105:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 106:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       vec1 = vld1q(pSrcA);
 107:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       vec2 = vld1q(pSrcB);
 108:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****       vstrwq_p(pDst, vaddq(vec1,vec2), p0);
 109:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** }
 112:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #else
 114:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** void arm_add_f32(
 115:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   const float32_t * pSrcA,
 116:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   const float32_t * pSrcB,
 117:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         float32_t * pDst,
 118:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         uint32_t blockSize)
 119:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** {
 331              		.loc 6 119 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL45:
 336 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 337              		.cfi_def_cfa_offset 24
 338              		.cfi_offset 4, -24
 339              		.cfi_offset 5, -20
 340              		.cfi_offset 6, -16
 341              		.cfi_offset 7, -12
 342              		.cfi_offset 8, -8
 343              		.cfi_offset 14, -4
 344 0004 1546     		mov	r5, r2
 345 0006 1C46     		mov	r4, r3
 346              	.LVL46:
 120:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 121:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 123:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t vec1;
 124:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t vec2;
 125:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     f32x4_t res;
 126:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Compute 4 outputs at a time */
 128:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt = blockSize >> 2U;
 129:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     while (blkCnt > 0U)
 131:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     {
 132:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* C = A + B */
 133:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     	/* Add and then store the results in the destination buffer. */
 135:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vec1 = vld1q_f32(pSrcA);
 136:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vec2 = vld1q_f32(pSrcB);
 137:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         res = vaddq_f32(vec1, vec2);
 138:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         vst1q_f32(pDst, res);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 24


 139:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* Increment pointers */
 141:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pSrcA += 4;
 142:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pSrcB += 4; 
 143:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         pDst += 4;
 144:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         
 145:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         /* Decrement the loop counter */
 146:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****         blkCnt--;
 147:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     }
 148:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Tail */
 150:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt = blockSize & 0x3;
 151:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #else
 153:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 154:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 156:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize >> 2U;
 157:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0U)
 159:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   {
 160:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
 161:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Add and store result in destination buffer. */
 163:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 164:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 165:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 166:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 167:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Decrement loop counter */
 169:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt--;
 170:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   }
 171:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 172:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 173:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize % 0x4U;
 174:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #else
 176:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   /* Initialize blkCnt with number of samples */
 178:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize;
 179:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 181:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 182:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 183:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0U)
 347              		.loc 6 183 0
 348 0008 0CE0     		b	.L33
 349              	.LVL47:
 350              	.L34:
 184:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   {
 185:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
 186:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 187:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Add and store result in destination buffer. */
 188:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 351              		.loc 6 188 0
 352 000a 05F10408 		add	r8, r5, #4
 353              	.LVL48:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 25


 354 000e 061D     		adds	r6, r0, #4
 355              	.LVL49:
 356 0010 0F1D     		adds	r7, r1, #4
 357              	.LVL50:
 358 0012 0068     		ldr	r0, [r0]	@ float
 359 0014 0968     		ldr	r1, [r1]	@ float
 360 0016 FFF7FEFF 		bl	__aeabi_fadd
 361              	.LVL51:
 362 001a 2860     		str	r0, [r5]	@ float
 189:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 190:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     /* Decrement loop counter */
 191:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****     blkCnt--;
 363              		.loc 6 191 0
 364 001c 013C     		subs	r4, r4, #1
 365              	.LVL52:
 188:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 366              		.loc 6 188 0
 367 001e 4546     		mov	r5, r8
 368 0020 3946     		mov	r1, r7
 369 0022 3046     		mov	r0, r6
 370              	.LVL53:
 371              	.L33:
 183:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   {
 372              		.loc 6 183 0
 373 0024 002C     		cmp	r4, #0
 374 0026 F0D1     		bne	.L34
 192:.\DSP\Source\BasicMathFunctions/arm_add_f32.c ****   }
 193:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** 
 194:.\DSP\Source\BasicMathFunctions/arm_add_f32.c **** }
 375              		.loc 6 194 0
 376 0028 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 377              		.cfi_endproc
 378              	.LFE88:
 379              		.size	arm_add_f32, .-arm_add_f32
 380              		.global	__aeabi_dadd
 381              		.section	.text.arm_add_f64,"ax",%progbits
 382              		.align	2
 383              		.global	arm_add_f64
 384              		.thumb
 385              		.thumb_func
 386              		.type	arm_add_f64, %function
 387              	arm_add_f64:
 388              	.LFB89:
 389              		.file 7 ".\\DSP\\Source\\BasicMathFunctions\\arm_add_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Title:        arm_add_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 26


  14:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @addtogroup BasicAdd
  37:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @brief         Floating-point vector addition.
  42:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @param[in]     pSrcA      points to first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @param[in]     pSrcB      points to second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** void arm_add_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   const float64_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   const float64_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****         float64_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****         uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** {
 390              		.loc 7 54 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              	.LVL54:
 395 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 396              		.cfi_def_cfa_offset 32
 397              		.cfi_offset 3, -32
 398              		.cfi_offset 4, -28
 399              		.cfi_offset 5, -24
 400              		.cfi_offset 6, -20
 401              		.cfi_offset 7, -16
 402              		.cfi_offset 8, -12
 403              		.cfi_offset 9, -8
 404              		.cfi_offset 14, -4
 405 0004 0E46     		mov	r6, r1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 27


 406 0006 1546     		mov	r5, r2
 407 0008 1C46     		mov	r4, r3
 408              	.LVL55:
  55:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   /* Initialize blkCnt with number of samples */
  58:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   blkCnt = blockSize;
  59:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   while (blkCnt > 0U)
 409              		.loc 7 60 0
 410 000a 10E0     		b	.L37
 411              	.LVL56:
 412              	.L38:
  61:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   {
  62:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****     /* C = A + B */
  63:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****     /* Add and store result in destination buffer. */
  65:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 413              		.loc 7 65 0
 414 000c 05F10809 		add	r9, r5, #8
 415              	.LVL57:
 416 0010 00F10807 		add	r7, r0, #8
 417              	.LVL58:
 418 0014 06F10808 		add	r8, r6, #8
 419              	.LVL59:
 420 0018 03C8     		ldmia	r0, {r0-r1}
 421 001a D6E90023 		ldrd	r2, [r6]
 422 001e FFF7FEFF 		bl	__aeabi_dadd
 423              	.LVL60:
 424 0022 C5E90001 		strd	r0, [r5]
  66:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****     /* Decrement loop counter */
  68:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****     blkCnt--;
 425              		.loc 7 68 0
 426 0026 013C     		subs	r4, r4, #1
 427              	.LVL61:
  65:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
 428              		.loc 7 65 0
 429 0028 4D46     		mov	r5, r9
 430 002a 4646     		mov	r6, r8
 431 002c 3846     		mov	r0, r7
 432              	.LVL62:
 433              	.L37:
  60:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   {
 434              		.loc 7 60 0
 435 002e 002C     		cmp	r4, #0
 436 0030 ECD1     		bne	.L38
  69:.\DSP\Source\BasicMathFunctions/arm_add_f64.c ****   }
  70:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_add_f64.c **** }
 437              		.loc 7 71 0
 438 0032 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 439              		.cfi_endproc
 440              	.LFE89:
 441              		.size	arm_add_f64, .-arm_add_f64
 442 0036 00BF     		.section	.text.arm_add_q15,"ax",%progbits
 443              		.align	2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 28


 444              		.global	arm_add_q15
 445              		.thumb
 446              		.thumb_func
 447              		.type	arm_add_q15, %function
 448              	arm_add_q15:
 449              	.LFB90:
 450              		.file 8 ".\\DSP\\Source\\BasicMathFunctions\\arm_add_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Title:        arm_add_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Description:  Q15 vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @addtogroup BasicAdd
  37:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @brief         Q15 vector addition.
  42:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 29


  51:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** void arm_add_q15(
  58:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     const q15_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     const q15_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     q15_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  64:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     q15x8_t vecA;
  65:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     q15x8_t vecB;
  66:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* Compute 8 outputs at a time */
  68:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     blkCnt = blockSize >> 3;
  69:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         /*
  72:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          * C = A + B
  73:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          * Add and then store the results in the destination buffer.
  74:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          */
  75:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vecA = vld1q(pSrcA);
  76:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vecB = vld1q(pSrcB);
  77:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vst1q(pDst, vqaddq(vecA, vecB));
  78:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          * Decrement the blockSize loop counter
  80:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         blkCnt--;
  82:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         /*
  83:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          * advance vector source and destination pointers
  84:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         pSrcA  += 8;
  86:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         pSrcB  += 8;
  87:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         pDst   += 8;
  88:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****      * tail
  91:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****      */
  92:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     blkCnt = blockSize & 7;
  93:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     if (blkCnt > 0U)
  94:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  96:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vecA = vld1q(pSrcA);
  97:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vecB = vld1q(pSrcB);
  98:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         vstrhq_p(pDst, vqaddq(vecA, vecB), p0);
  99:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     }
 100:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** }
 101:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #else
 103:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** void arm_add_q15(
 104:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   const q15_t * pSrcA,
 105:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   const q15_t * pSrcB,
 106:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         q15_t * pDst,
 107:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         uint32_t blockSize)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 30


 108:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** {
 451              		.loc 8 108 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 456              	.LVL63:
 457 0000 E0B4     		push	{r5, r6, r7}
 458              		.cfi_def_cfa_offset 12
 459              		.cfi_offset 5, -12
 460              		.cfi_offset 6, -8
 461              		.cfi_offset 7, -4
 462              	.LVL64:
 109:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 110:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #if defined (ARM_MATH_DSP)
 114:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   q31_t inA1, inA2;
 115:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   q31_t inB1, inB2;
 116:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #endif
 117:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 119:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   blkCnt = blockSize >> 2U;
 120:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   while (blkCnt > 0U)
 122:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   {
 123:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* C = A + B */
 124:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #if defined (ARM_MATH_DSP)
 126:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* read 2 times 2 samples at a time from sourceA */
 127:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     inA1 = read_q15x2_ia (&pSrcA);
 128:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     inA2 = read_q15x2_ia (&pSrcA);
 129:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* read 2 times 2 samples at a time from sourceB */
 130:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     inB1 = read_q15x2_ia (&pSrcB);
 131:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     inB2 = read_q15x2_ia (&pSrcB);
 132:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* Add and store 2 times 2 samples at a time */
 134:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     write_q15x2_ia (&pDst, __QADD16(inA1, inB1));
 135:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     write_q15x2_ia (&pDst, __QADD16(inA2, inB2));
 136:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #else
 137:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ + *pSrcB++), 16);
 138:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ + *pSrcB++), 16);
 139:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ + *pSrcB++), 16);
 140:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ + *pSrcB++), 16);
 141:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #endif
 142:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* Decrement loop counter */
 144:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     blkCnt--;
 145:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   }
 146:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 148:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   blkCnt = blockSize % 0x4U;
 149:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #else
 151:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   /* Initialize blkCnt with number of samples */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 31


 153:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   blkCnt = blockSize;
 154:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 156:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   while (blkCnt > 0U)
 463              		.loc 8 157 0
 464 0002 0EE0     		b	.L41
 465              	.LVL65:
 466              	.L42:
 158:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   {
 159:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* C = A + B */
 160:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* Add and store result in destination buffer. */
 162:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #if defined (ARM_MATH_DSP)
 163:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __QADD16(*pSrcA++, *pSrcB++);
 164:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #else
 165:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ + *pSrcB++), 16);
 467              		.loc 8 165 0
 468 0004 961C     		adds	r6, r2, #2
 469              	.LVL66:
 470              	.LBB18:
 471 0006 851C     		adds	r5, r0, #2
 472              	.LVL67:
 473 0008 B0F90070 		ldrsh	r7, [r0]
 474 000c 881C     		adds	r0, r1, #2
 475              	.LVL68:
 476 000e B1F90010 		ldrsh	r1, [r1]
 477 0012 3944     		add	r1, r1, r7
 478              	.LVL69:
 479              	@ 165 ".\DSP\Source\BasicMathFunctions\arm_add_q15.c" 1
 480 0014 01F30F01 		ssat r1, #16, r1
 481              	@ 0 "" 2
 482              	.LVL70:
 483              		.thumb
 484              	.LBE18:
 485 0018 1180     		strh	r1, [r2]	@ movhi
 486              	.LVL71:
 166:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #endif
 167:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     /* Decrement loop counter */
 169:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****     blkCnt--;
 487              		.loc 8 169 0
 488 001a 013B     		subs	r3, r3, #1
 489              	.LVL72:
 165:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** #endif
 490              		.loc 8 165 0
 491 001c 3246     		mov	r2, r6
 492              	.LBB19:
 493 001e 0146     		mov	r1, r0
 494              	.LVL73:
 495 0020 2846     		mov	r0, r5
 496              	.LVL74:
 497              	.L41:
 498              	.LBE19:
 157:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   {
 499              		.loc 8 157 0
 500 0022 002B     		cmp	r3, #0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 32


 501 0024 EED1     		bne	.L42
 170:.\DSP\Source\BasicMathFunctions/arm_add_q15.c ****   }
 171:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** 
 172:.\DSP\Source\BasicMathFunctions/arm_add_q15.c **** }
 502              		.loc 8 172 0
 503 0026 E0BC     		pop	{r5, r6, r7}
 504              		.cfi_restore 7
 505              		.cfi_restore 6
 506              		.cfi_restore 5
 507              		.cfi_def_cfa_offset 0
 508 0028 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE90:
 511              		.size	arm_add_q15, .-arm_add_q15
 512 002a 00BF     		.section	.text.arm_add_q31,"ax",%progbits
 513              		.align	2
 514              		.global	arm_add_q31
 515              		.thumb
 516              		.thumb_func
 517              		.type	arm_add_q31, %function
 518              	arm_add_q31:
 519              	.LFB91:
 520              		.file 9 ".\\DSP\\Source\\BasicMathFunctions\\arm_add_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Title:        arm_add_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Description:  Q31 vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 33


  35:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @addtogroup BasicAdd
  37:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @brief         Q31 vector addition.
  42:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****                    Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated
  51:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** void arm_add_q31(
  58:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   const q31_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   const q31_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         q31_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     uint32_t blkCnt;   
  64:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     q31x4_t vecA;
  65:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     q31x4_t vecB;
  66:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* Compute 4 outputs at a time */
  68:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt = blockSize >> 2;
  69:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         /*
  72:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          * C = A + B
  73:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          * Add and then store the results in the destination buffer.
  74:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          */
  75:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vecA = vld1q(pSrcA);
  76:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vecB = vld1q(pSrcB);
  77:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vst1q(pDst, vqaddq(vecA, vecB));
  78:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          * Decrement the blockSize loop counter
  80:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         blkCnt--;
  82:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         /*
  83:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          * advance vector source and destination pointers
  84:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         pSrcA  += 4;
  86:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         pSrcB  += 4;
  87:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         pDst   += 4;
  88:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****      * tail
  91:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****      */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 34


  92:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt = blockSize & 3;
  93:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     if (blkCnt > 0U)
  94:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  96:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vecA = vld1q(pSrcA);
  97:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vecB = vld1q(pSrcB);
  98:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         vstrwq_p(pDst, vqaddq(vecA, vecB), p0);
  99:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     }
 100:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** }
 101:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #else
 103:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** void arm_add_q31(
 104:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   const q31_t * pSrcA,
 105:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   const q31_t * pSrcB,
 106:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         q31_t * pDst,
 107:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         uint32_t blockSize)
 108:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** {
 521              		.loc 9 108 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526              	.LVL75:
 527 0000 F0B4     		push	{r4, r5, r6, r7}
 528              		.cfi_def_cfa_offset 16
 529              		.cfi_offset 4, -16
 530              		.cfi_offset 5, -12
 531              		.cfi_offset 6, -8
 532              		.cfi_offset 7, -4
 533              	.LVL76:
 109:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 110:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize >> 2U;
 115:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   while (blkCnt > 0U)
 117:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   {
 118:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* C = A + B */
 119:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* Add and store result in destination buffer. */
 121:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 122:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 124:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 126:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 128:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* Decrement loop counter */
 130:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt--;
 131:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   }
 132:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 134:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize % 0x4U;
 135:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 35


 136:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #else
 137:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   /* Initialize blkCnt with number of samples */
 139:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize;
 140:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 142:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   while (blkCnt > 0U)
 534              		.loc 9 143 0
 535 0002 14E0     		b	.L45
 536              	.LVL77:
 537              	.L48:
 144:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   {
 145:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* C = A + B */
 146:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* Add and store result in destination buffer. */
 148:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 538              		.loc 9 148 0
 539 0004 161D     		adds	r6, r2, #4
 540              	.LVL78:
 541 0006 041D     		adds	r4, r0, #4
 542              	.LVL79:
 543 0008 0768     		ldr	r7, [r0]
 544 000a 0D1D     		adds	r5, r1, #4
 545              	.LVL80:
 546 000c 0868     		ldr	r0, [r1]
 547              	.LVL81:
 548              	.LBB20:
 549              	.LBB21:
 550              		.file 10 ".\\DSP\\Include/dsp/none.h"
   1:.\DSP\Include/dsp/none.h **** /******************************************************************************
   2:.\DSP\Include/dsp/none.h ****  * @file     none.h
   3:.\DSP\Include/dsp/none.h ****  * @brief    Intrinsincs when no DSP extension available
   4:.\DSP\Include/dsp/none.h ****  * @version  V1.9.0
   5:.\DSP\Include/dsp/none.h ****  * @date     20. July 2020
   6:.\DSP\Include/dsp/none.h ****  ******************************************************************************/
   7:.\DSP\Include/dsp/none.h **** /*
   8:.\DSP\Include/dsp/none.h ****  * Copyright (c) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   9:.\DSP\Include/dsp/none.h ****  *
  10:.\DSP\Include/dsp/none.h ****  * SPDX-License-Identifier: Apache-2.0
  11:.\DSP\Include/dsp/none.h ****  *
  12:.\DSP\Include/dsp/none.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:.\DSP\Include/dsp/none.h ****  * not use this file except in compliance with the License.
  14:.\DSP\Include/dsp/none.h ****  * You may obtain a copy of the License at
  15:.\DSP\Include/dsp/none.h ****  *
  16:.\DSP\Include/dsp/none.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:.\DSP\Include/dsp/none.h ****  *
  18:.\DSP\Include/dsp/none.h ****  * Unless required by applicable law or agreed to in writing, software
  19:.\DSP\Include/dsp/none.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:.\DSP\Include/dsp/none.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:.\DSP\Include/dsp/none.h ****  * See the License for the specific language governing permissions and
  22:.\DSP\Include/dsp/none.h ****  * limitations under the License.
  23:.\DSP\Include/dsp/none.h ****  */
  24:.\DSP\Include/dsp/none.h **** 
  25:.\DSP\Include/dsp/none.h **** /*
  26:.\DSP\Include/dsp/none.h **** 
  27:.\DSP\Include/dsp/none.h **** Definitions in this file are allowing to reuse some versions of the
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 36


  28:.\DSP\Include/dsp/none.h **** CMSIS-DSP to build on a core (M0 for instance) or a host where
  29:.\DSP\Include/dsp/none.h **** DSP extension are not available.
  30:.\DSP\Include/dsp/none.h **** 
  31:.\DSP\Include/dsp/none.h **** Ideally a pure C version should have been used instead.
  32:.\DSP\Include/dsp/none.h **** But those are not always available or use a restricted set
  33:.\DSP\Include/dsp/none.h **** of intrinsics.
  34:.\DSP\Include/dsp/none.h **** 
  35:.\DSP\Include/dsp/none.h **** */
  36:.\DSP\Include/dsp/none.h ****  
  37:.\DSP\Include/dsp/none.h **** #ifndef _NONE_H_
  38:.\DSP\Include/dsp/none.h **** #define _NONE_H_
  39:.\DSP\Include/dsp/none.h **** 
  40:.\DSP\Include/dsp/none.h **** #include "arm_math_types.h"
  41:.\DSP\Include/dsp/none.h **** 
  42:.\DSP\Include/dsp/none.h **** #ifdef   __cplusplus
  43:.\DSP\Include/dsp/none.h **** extern "C"
  44:.\DSP\Include/dsp/none.h **** {
  45:.\DSP\Include/dsp/none.h **** #endif
  46:.\DSP\Include/dsp/none.h **** 
  47:.\DSP\Include/dsp/none.h ****  
  48:.\DSP\Include/dsp/none.h **** 
  49:.\DSP\Include/dsp/none.h **** /*
  50:.\DSP\Include/dsp/none.h **** 
  51:.\DSP\Include/dsp/none.h **** Normally those kind of definitions are in a compiler file
  52:.\DSP\Include/dsp/none.h **** in Core or Core_A.
  53:.\DSP\Include/dsp/none.h **** 
  54:.\DSP\Include/dsp/none.h **** But for MSVC compiler it is a bit special. The goal is very specific
  55:.\DSP\Include/dsp/none.h **** to CMSIS-DSP and only to allow the use of this library from other
  56:.\DSP\Include/dsp/none.h **** systems like Python or Matlab.
  57:.\DSP\Include/dsp/none.h **** 
  58:.\DSP\Include/dsp/none.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
  59:.\DSP\Include/dsp/none.h **** compiler file in Core or Core_A would not make sense.
  60:.\DSP\Include/dsp/none.h **** 
  61:.\DSP\Include/dsp/none.h **** */
  62:.\DSP\Include/dsp/none.h **** #if defined ( _MSC_VER ) || defined(__GNUC_PYTHON__) || defined(__APPLE_CC__)
  63:.\DSP\Include/dsp/none.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
  64:.\DSP\Include/dsp/none.h ****     {
  65:.\DSP\Include/dsp/none.h ****       if (data == 0U) { return 32U; }
  66:.\DSP\Include/dsp/none.h **** 
  67:.\DSP\Include/dsp/none.h ****       uint32_t count = 0U;
  68:.\DSP\Include/dsp/none.h ****       uint32_t mask = 0x80000000U;
  69:.\DSP\Include/dsp/none.h **** 
  70:.\DSP\Include/dsp/none.h ****       while ((data & mask) == 0U)
  71:.\DSP\Include/dsp/none.h ****       {
  72:.\DSP\Include/dsp/none.h ****         count += 1U;
  73:.\DSP\Include/dsp/none.h ****         mask = mask >> 1U;
  74:.\DSP\Include/dsp/none.h ****       }
  75:.\DSP\Include/dsp/none.h ****       return count;
  76:.\DSP\Include/dsp/none.h ****     }
  77:.\DSP\Include/dsp/none.h **** 
  78:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
  79:.\DSP\Include/dsp/none.h ****   {
  80:.\DSP\Include/dsp/none.h ****     if ((sat >= 1U) && (sat <= 32U))
  81:.\DSP\Include/dsp/none.h ****     {
  82:.\DSP\Include/dsp/none.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
  83:.\DSP\Include/dsp/none.h ****       const int32_t min = -1 - max ;
  84:.\DSP\Include/dsp/none.h ****       if (val > max)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 37


  85:.\DSP\Include/dsp/none.h ****       {
  86:.\DSP\Include/dsp/none.h ****         return max;
  87:.\DSP\Include/dsp/none.h ****       }
  88:.\DSP\Include/dsp/none.h ****       else if (val < min)
  89:.\DSP\Include/dsp/none.h ****       {
  90:.\DSP\Include/dsp/none.h ****         return min;
  91:.\DSP\Include/dsp/none.h ****       }
  92:.\DSP\Include/dsp/none.h ****     }
  93:.\DSP\Include/dsp/none.h ****     return val;
  94:.\DSP\Include/dsp/none.h ****   }
  95:.\DSP\Include/dsp/none.h **** 
  96:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
  97:.\DSP\Include/dsp/none.h ****   {
  98:.\DSP\Include/dsp/none.h ****     if (sat <= 31U)
  99:.\DSP\Include/dsp/none.h ****     {
 100:.\DSP\Include/dsp/none.h ****       const uint32_t max = ((1U << sat) - 1U);
 101:.\DSP\Include/dsp/none.h ****       if (val > (int32_t)max)
 102:.\DSP\Include/dsp/none.h ****       {
 103:.\DSP\Include/dsp/none.h ****         return max;
 104:.\DSP\Include/dsp/none.h ****       }
 105:.\DSP\Include/dsp/none.h ****       else if (val < 0)
 106:.\DSP\Include/dsp/none.h ****       {
 107:.\DSP\Include/dsp/none.h ****         return 0U;
 108:.\DSP\Include/dsp/none.h ****       }
 109:.\DSP\Include/dsp/none.h ****     }
 110:.\DSP\Include/dsp/none.h ****     return (uint32_t)val;
 111:.\DSP\Include/dsp/none.h ****   }
 112:.\DSP\Include/dsp/none.h **** 
 113:.\DSP\Include/dsp/none.h ****  /**
 114:.\DSP\Include/dsp/none.h ****   \brief   Rotate Right in unsigned value (32 bit)
 115:.\DSP\Include/dsp/none.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 116:.\DSP\Include/dsp/none.h ****   \param [in]    op1  Value to rotate
 117:.\DSP\Include/dsp/none.h ****   \param [in]    op2  Number of Bits to rotate
 118:.\DSP\Include/dsp/none.h ****   \return               Rotated value
 119:.\DSP\Include/dsp/none.h ****  */
 120:.\DSP\Include/dsp/none.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 121:.\DSP\Include/dsp/none.h **** {
 122:.\DSP\Include/dsp/none.h ****   op2 %= 32U;
 123:.\DSP\Include/dsp/none.h ****   if (op2 == 0U)
 124:.\DSP\Include/dsp/none.h ****   {
 125:.\DSP\Include/dsp/none.h ****     return op1;
 126:.\DSP\Include/dsp/none.h ****   }
 127:.\DSP\Include/dsp/none.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 128:.\DSP\Include/dsp/none.h **** }
 129:.\DSP\Include/dsp/none.h **** 
 130:.\DSP\Include/dsp/none.h **** 
 131:.\DSP\Include/dsp/none.h **** #endif
 132:.\DSP\Include/dsp/none.h **** 
 133:.\DSP\Include/dsp/none.h **** /**
 134:.\DSP\Include/dsp/none.h ****    * @brief Clips Q63 to Q31 values.
 135:.\DSP\Include/dsp/none.h ****    */
 136:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
 137:.\DSP\Include/dsp/none.h ****   q63_t x)
 138:.\DSP\Include/dsp/none.h ****   {
 139:.\DSP\Include/dsp/none.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 140:.\DSP\Include/dsp/none.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 141:.\DSP\Include/dsp/none.h ****   }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 38


 142:.\DSP\Include/dsp/none.h **** 
 143:.\DSP\Include/dsp/none.h ****   /**
 144:.\DSP\Include/dsp/none.h ****    * @brief Clips Q63 to Q15 values.
 145:.\DSP\Include/dsp/none.h ****    */
 146:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
 147:.\DSP\Include/dsp/none.h ****   q63_t x)
 148:.\DSP\Include/dsp/none.h ****   {
 149:.\DSP\Include/dsp/none.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 150:.\DSP\Include/dsp/none.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 151:.\DSP\Include/dsp/none.h ****   }
 152:.\DSP\Include/dsp/none.h **** 
 153:.\DSP\Include/dsp/none.h ****   /**
 154:.\DSP\Include/dsp/none.h ****    * @brief Clips Q31 to Q7 values.
 155:.\DSP\Include/dsp/none.h ****    */
 156:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q7_t clip_q31_to_q7(
 157:.\DSP\Include/dsp/none.h ****   q31_t x)
 158:.\DSP\Include/dsp/none.h ****   {
 159:.\DSP\Include/dsp/none.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 160:.\DSP\Include/dsp/none.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 161:.\DSP\Include/dsp/none.h ****   }
 162:.\DSP\Include/dsp/none.h **** 
 163:.\DSP\Include/dsp/none.h ****   /**
 164:.\DSP\Include/dsp/none.h ****    * @brief Clips Q31 to Q15 values.
 165:.\DSP\Include/dsp/none.h ****    */
 166:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q15_t clip_q31_to_q15(
 167:.\DSP\Include/dsp/none.h ****   q31_t x)
 168:.\DSP\Include/dsp/none.h ****   {
 169:.\DSP\Include/dsp/none.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 170:.\DSP\Include/dsp/none.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 171:.\DSP\Include/dsp/none.h ****   }
 172:.\DSP\Include/dsp/none.h **** 
 173:.\DSP\Include/dsp/none.h ****   /**
 174:.\DSP\Include/dsp/none.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 175:.\DSP\Include/dsp/none.h ****    */
 176:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE q63_t mult32x64(
 177:.\DSP\Include/dsp/none.h ****   q63_t x,
 178:.\DSP\Include/dsp/none.h ****   q31_t y)
 179:.\DSP\Include/dsp/none.h ****   {
 180:.\DSP\Include/dsp/none.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 181:.\DSP\Include/dsp/none.h ****             (((q63_t) (x >> 32)                * y)      )  );
 182:.\DSP\Include/dsp/none.h ****   }
 183:.\DSP\Include/dsp/none.h **** 
 184:.\DSP\Include/dsp/none.h **** /* SMMLAR */
 185:.\DSP\Include/dsp/none.h **** #define multAcc_32x32_keep32_R(a, x, y) \
 186:.\DSP\Include/dsp/none.h ****     a = (q31_t) (((((q63_t) a) << 32) + ((q63_t) x * y) + 0x80000000LL ) >> 32)
 187:.\DSP\Include/dsp/none.h **** 
 188:.\DSP\Include/dsp/none.h **** /* SMMLSR */
 189:.\DSP\Include/dsp/none.h **** #define multSub_32x32_keep32_R(a, x, y) \
 190:.\DSP\Include/dsp/none.h ****     a = (q31_t) (((((q63_t) a) << 32) - ((q63_t) x * y) + 0x80000000LL ) >> 32)
 191:.\DSP\Include/dsp/none.h **** 
 192:.\DSP\Include/dsp/none.h **** /* SMMULR */
 193:.\DSP\Include/dsp/none.h **** #define mult_32x32_keep32_R(a, x, y) \
 194:.\DSP\Include/dsp/none.h ****     a = (q31_t) (((q63_t) x * y + 0x80000000LL ) >> 32)
 195:.\DSP\Include/dsp/none.h **** 
 196:.\DSP\Include/dsp/none.h **** /* SMMLA */
 197:.\DSP\Include/dsp/none.h **** #define multAcc_32x32_keep32(a, x, y) \
 198:.\DSP\Include/dsp/none.h ****     a += (q31_t) (((q63_t) x * y) >> 32)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 39


 199:.\DSP\Include/dsp/none.h **** 
 200:.\DSP\Include/dsp/none.h **** /* SMMLS */
 201:.\DSP\Include/dsp/none.h **** #define multSub_32x32_keep32(a, x, y) \
 202:.\DSP\Include/dsp/none.h ****     a -= (q31_t) (((q63_t) x * y) >> 32)
 203:.\DSP\Include/dsp/none.h **** 
 204:.\DSP\Include/dsp/none.h **** /* SMMUL */
 205:.\DSP\Include/dsp/none.h **** #define mult_32x32_keep32(a, x, y) \
 206:.\DSP\Include/dsp/none.h ****     a = (q31_t) (((q63_t) x * y ) >> 32)
 207:.\DSP\Include/dsp/none.h **** 
 208:.\DSP\Include/dsp/none.h **** #ifndef ARM_MATH_DSP
 209:.\DSP\Include/dsp/none.h ****   /**
 210:.\DSP\Include/dsp/none.h ****    * @brief definition to pack two 16 bit values.
 211:.\DSP\Include/dsp/none.h ****    */
 212:.\DSP\Include/dsp/none.h ****   #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 213:.\DSP\Include/dsp/none.h ****                                       (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 214:.\DSP\Include/dsp/none.h ****   #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 215:.\DSP\Include/dsp/none.h ****                                       (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 216:.\DSP\Include/dsp/none.h **** #endif
 217:.\DSP\Include/dsp/none.h **** 
 218:.\DSP\Include/dsp/none.h ****    /**
 219:.\DSP\Include/dsp/none.h ****    * @brief definition to pack four 8 bit values.
 220:.\DSP\Include/dsp/none.h ****    */
 221:.\DSP\Include/dsp/none.h **** #ifndef ARM_MATH_BIG_ENDIAN
 222:.\DSP\Include/dsp/none.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 223:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 224:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 225:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 226:.\DSP\Include/dsp/none.h **** #else
 227:.\DSP\Include/dsp/none.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 228:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 229:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 230:.\DSP\Include/dsp/none.h ****                                   (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 231:.\DSP\Include/dsp/none.h **** #endif
 232:.\DSP\Include/dsp/none.h **** 
 233:.\DSP\Include/dsp/none.h **** 
 234:.\DSP\Include/dsp/none.h ****  
 235:.\DSP\Include/dsp/none.h **** 
 236:.\DSP\Include/dsp/none.h **** /*
 237:.\DSP\Include/dsp/none.h ****  * @brief C custom defined intrinsic functions
 238:.\DSP\Include/dsp/none.h ****  */
 239:.\DSP\Include/dsp/none.h **** #if !defined (ARM_MATH_DSP)
 240:.\DSP\Include/dsp/none.h **** 
 241:.\DSP\Include/dsp/none.h **** 
 242:.\DSP\Include/dsp/none.h ****   /*
 243:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QADD8
 244:.\DSP\Include/dsp/none.h ****    */
 245:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QADD8(
 246:.\DSP\Include/dsp/none.h ****   uint32_t x,
 247:.\DSP\Include/dsp/none.h ****   uint32_t y)
 248:.\DSP\Include/dsp/none.h ****   {
 249:.\DSP\Include/dsp/none.h ****     q31_t r, s, t, u;
 250:.\DSP\Include/dsp/none.h **** 
 251:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 252:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 253:.\DSP\Include/dsp/none.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 254:.\DSP\Include/dsp/none.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 255:.\DSP\Include/dsp/none.h **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 40


 256:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 257:.\DSP\Include/dsp/none.h ****   }
 258:.\DSP\Include/dsp/none.h **** 
 259:.\DSP\Include/dsp/none.h **** 
 260:.\DSP\Include/dsp/none.h ****   /*
 261:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QSUB8
 262:.\DSP\Include/dsp/none.h ****    */
 263:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QSUB8(
 264:.\DSP\Include/dsp/none.h ****   uint32_t x,
 265:.\DSP\Include/dsp/none.h ****   uint32_t y)
 266:.\DSP\Include/dsp/none.h ****   {
 267:.\DSP\Include/dsp/none.h ****     q31_t r, s, t, u;
 268:.\DSP\Include/dsp/none.h **** 
 269:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 270:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 271:.\DSP\Include/dsp/none.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 272:.\DSP\Include/dsp/none.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 273:.\DSP\Include/dsp/none.h **** 
 274:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 275:.\DSP\Include/dsp/none.h ****   }
 276:.\DSP\Include/dsp/none.h **** 
 277:.\DSP\Include/dsp/none.h **** 
 278:.\DSP\Include/dsp/none.h ****   /*
 279:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QADD16
 280:.\DSP\Include/dsp/none.h ****    */
 281:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QADD16(
 282:.\DSP\Include/dsp/none.h ****   uint32_t x,
 283:.\DSP\Include/dsp/none.h ****   uint32_t y)
 284:.\DSP\Include/dsp/none.h ****   {
 285:.\DSP\Include/dsp/none.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 286:.\DSP\Include/dsp/none.h ****     q31_t r = 0, s = 0;
 287:.\DSP\Include/dsp/none.h **** 
 288:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 289:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 290:.\DSP\Include/dsp/none.h **** 
 291:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 292:.\DSP\Include/dsp/none.h ****   }
 293:.\DSP\Include/dsp/none.h **** 
 294:.\DSP\Include/dsp/none.h **** 
 295:.\DSP\Include/dsp/none.h ****   /*
 296:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SHADD16
 297:.\DSP\Include/dsp/none.h ****    */
 298:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SHADD16(
 299:.\DSP\Include/dsp/none.h ****   uint32_t x,
 300:.\DSP\Include/dsp/none.h ****   uint32_t y)
 301:.\DSP\Include/dsp/none.h ****   {
 302:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 303:.\DSP\Include/dsp/none.h **** 
 304:.\DSP\Include/dsp/none.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 305:.\DSP\Include/dsp/none.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 306:.\DSP\Include/dsp/none.h **** 
 307:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 308:.\DSP\Include/dsp/none.h ****   }
 309:.\DSP\Include/dsp/none.h **** 
 310:.\DSP\Include/dsp/none.h **** 
 311:.\DSP\Include/dsp/none.h ****   /*
 312:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QSUB16
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 41


 313:.\DSP\Include/dsp/none.h ****    */
 314:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QSUB16(
 315:.\DSP\Include/dsp/none.h ****   uint32_t x,
 316:.\DSP\Include/dsp/none.h ****   uint32_t y)
 317:.\DSP\Include/dsp/none.h ****   {
 318:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 319:.\DSP\Include/dsp/none.h **** 
 320:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 321:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 322:.\DSP\Include/dsp/none.h **** 
 323:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 324:.\DSP\Include/dsp/none.h ****   }
 325:.\DSP\Include/dsp/none.h **** 
 326:.\DSP\Include/dsp/none.h **** 
 327:.\DSP\Include/dsp/none.h ****   /*
 328:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SHSUB16
 329:.\DSP\Include/dsp/none.h ****    */
 330:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SHSUB16(
 331:.\DSP\Include/dsp/none.h ****   uint32_t x,
 332:.\DSP\Include/dsp/none.h ****   uint32_t y)
 333:.\DSP\Include/dsp/none.h ****   {
 334:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 335:.\DSP\Include/dsp/none.h **** 
 336:.\DSP\Include/dsp/none.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 337:.\DSP\Include/dsp/none.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 338:.\DSP\Include/dsp/none.h **** 
 339:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 340:.\DSP\Include/dsp/none.h ****   }
 341:.\DSP\Include/dsp/none.h **** 
 342:.\DSP\Include/dsp/none.h **** 
 343:.\DSP\Include/dsp/none.h ****   /*
 344:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QASX
 345:.\DSP\Include/dsp/none.h ****    */
 346:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QASX(
 347:.\DSP\Include/dsp/none.h ****   uint32_t x,
 348:.\DSP\Include/dsp/none.h ****   uint32_t y)
 349:.\DSP\Include/dsp/none.h ****   {
 350:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 351:.\DSP\Include/dsp/none.h **** 
 352:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 353:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 354:.\DSP\Include/dsp/none.h **** 
 355:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 356:.\DSP\Include/dsp/none.h ****   }
 357:.\DSP\Include/dsp/none.h **** 
 358:.\DSP\Include/dsp/none.h **** 
 359:.\DSP\Include/dsp/none.h ****   /*
 360:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SHASX
 361:.\DSP\Include/dsp/none.h ****    */
 362:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SHASX(
 363:.\DSP\Include/dsp/none.h ****   uint32_t x,
 364:.\DSP\Include/dsp/none.h ****   uint32_t y)
 365:.\DSP\Include/dsp/none.h ****   {
 366:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 367:.\DSP\Include/dsp/none.h **** 
 368:.\DSP\Include/dsp/none.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 369:.\DSP\Include/dsp/none.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 42


 370:.\DSP\Include/dsp/none.h **** 
 371:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 372:.\DSP\Include/dsp/none.h ****   }
 373:.\DSP\Include/dsp/none.h **** 
 374:.\DSP\Include/dsp/none.h **** 
 375:.\DSP\Include/dsp/none.h ****   /*
 376:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QSAX
 377:.\DSP\Include/dsp/none.h ****    */
 378:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __QSAX(
 379:.\DSP\Include/dsp/none.h ****   uint32_t x,
 380:.\DSP\Include/dsp/none.h ****   uint32_t y)
 381:.\DSP\Include/dsp/none.h ****   {
 382:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 383:.\DSP\Include/dsp/none.h **** 
 384:.\DSP\Include/dsp/none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 385:.\DSP\Include/dsp/none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 386:.\DSP\Include/dsp/none.h **** 
 387:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 388:.\DSP\Include/dsp/none.h ****   }
 389:.\DSP\Include/dsp/none.h **** 
 390:.\DSP\Include/dsp/none.h **** 
 391:.\DSP\Include/dsp/none.h ****   /*
 392:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SHSAX
 393:.\DSP\Include/dsp/none.h ****    */
 394:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SHSAX(
 395:.\DSP\Include/dsp/none.h ****   uint32_t x,
 396:.\DSP\Include/dsp/none.h ****   uint32_t y)
 397:.\DSP\Include/dsp/none.h ****   {
 398:.\DSP\Include/dsp/none.h ****     q31_t r, s;
 399:.\DSP\Include/dsp/none.h **** 
 400:.\DSP\Include/dsp/none.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 401:.\DSP\Include/dsp/none.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 402:.\DSP\Include/dsp/none.h **** 
 403:.\DSP\Include/dsp/none.h ****     return ((uint32_t)((s << 16) | (r      )));
 404:.\DSP\Include/dsp/none.h ****   }
 405:.\DSP\Include/dsp/none.h **** 
 406:.\DSP\Include/dsp/none.h **** 
 407:.\DSP\Include/dsp/none.h ****   /*
 408:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SMUSDX
 409:.\DSP\Include/dsp/none.h ****    */
 410:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SMUSDX(
 411:.\DSP\Include/dsp/none.h ****   uint32_t x,
 412:.\DSP\Include/dsp/none.h ****   uint32_t y)
 413:.\DSP\Include/dsp/none.h ****   {
 414:.\DSP\Include/dsp/none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 415:.\DSP\Include/dsp/none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 416:.\DSP\Include/dsp/none.h ****   }
 417:.\DSP\Include/dsp/none.h **** 
 418:.\DSP\Include/dsp/none.h ****   /*
 419:.\DSP\Include/dsp/none.h ****    * @brief C custom defined SMUADX
 420:.\DSP\Include/dsp/none.h ****    */
 421:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE uint32_t __SMUADX(
 422:.\DSP\Include/dsp/none.h ****   uint32_t x,
 423:.\DSP\Include/dsp/none.h ****   uint32_t y)
 424:.\DSP\Include/dsp/none.h ****   {
 425:.\DSP\Include/dsp/none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 426:.\DSP\Include/dsp/none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 43


 427:.\DSP\Include/dsp/none.h ****   }
 428:.\DSP\Include/dsp/none.h **** 
 429:.\DSP\Include/dsp/none.h **** 
 430:.\DSP\Include/dsp/none.h ****   /*
 431:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QADD
 432:.\DSP\Include/dsp/none.h ****    */
 433:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE int32_t __QADD(
 434:.\DSP\Include/dsp/none.h ****   int32_t x,
 435:.\DSP\Include/dsp/none.h ****   int32_t y)
 436:.\DSP\Include/dsp/none.h ****   {
 437:.\DSP\Include/dsp/none.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 551              		.loc 10 437 0
 552 000e C117     		asrs	r1, r0, #31
 553 0010 C019     		adds	r0, r0, r7
 554              	.LVL82:
 555 0012 41EBE771 		adc	r1, r1, r7, asr #31
 556              	.LVL83:
 557              	.LBB22:
 558              	.LBB23:
 140:.\DSP\Include/dsp/none.h ****   }
 559              		.loc 10 140 0
 560 0016 B1EBE07F 		cmp	r1, r0, asr #31
 561 001a 03D0     		beq	.L49
 562 001c 6FF00040 		mvn	r0, #-2147483648
 563              	.LVL84:
 564 0020 80EAE170 		eor	r0, r0, r1, asr #31
 565              	.L49:
 566              	.LBE23:
 567              	.LBE22:
 568              	.LBE21:
 569              	.LBE20:
 570              		.loc 9 148 0
 571 0024 1060     		str	r0, [r2]
 572              	.LVL85:
 149:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     /* Decrement loop counter */
 151:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt--;
 573              		.loc 9 151 0
 574 0026 013B     		subs	r3, r3, #1
 575              	.LVL86:
 148:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 576              		.loc 9 148 0
 577 0028 3246     		mov	r2, r6
 578 002a 2946     		mov	r1, r5
 579 002c 2046     		mov	r0, r4
 580              	.LVL87:
 581              	.L45:
 143:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   {
 582              		.loc 9 143 0
 583 002e 002B     		cmp	r3, #0
 584 0030 E8D1     		bne	.L48
 152:.\DSP\Source\BasicMathFunctions/arm_add_q31.c ****   }
 153:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_add_q31.c **** }
 585              		.loc 9 154 0
 586 0032 F0BC     		pop	{r4, r5, r6, r7}
 587              		.cfi_restore 7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 44


 588              		.cfi_restore 6
 589              		.cfi_restore 5
 590              		.cfi_restore 4
 591              		.cfi_def_cfa_offset 0
 592 0034 7047     		bx	lr
 593              		.cfi_endproc
 594              	.LFE91:
 595              		.size	arm_add_q31, .-arm_add_q31
 596 0036 00BF     		.section	.text.arm_add_q7,"ax",%progbits
 597              		.align	2
 598              		.global	arm_add_q7
 599              		.thumb
 600              		.thumb_func
 601              		.type	arm_add_q7, %function
 602              	arm_add_q7:
 603              	.LFB92:
 604              		.file 11 ".\\DSP\\Source\\BasicMathFunctions\\arm_add_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** /*
   2:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
   3:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
   4:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * SPDX-License-Identifier: Apache-2.0
   5:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * not use this file except in compliance with the License.
   8:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * You may obtain a copy of the License at
   9:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
  10:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
  12:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  13:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * See the License for the specific language governing permissions and
  16:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * limitations under the License.
  17:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  */
  18:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  19:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** /* ----------------------------------------------------------------------
  20:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Project:      CMSIS DSP Library
  21:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Title:        arm_add_q7.c
  22:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Description:  Q7 vector addition
  23:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
  24:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * $Date:        23 April 2021
  25:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * $Revision:    V1.9.0
  26:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  *
  27:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  28:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  * -------------------------------------------------------------------- */
  29:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  30:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #include "dsp/basic_math_functions.h"
  31:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  32:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** /**
  33:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @ingroup groupMath
  34:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  */
  35:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @addtogroup BasicAdd
  38:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 45


  41:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @brief         Q7 vector addition.
  43:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @param[in]     pSrcA      points to the first input vector
  44:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @param[in]     pSrcB      points to the second input vector
  45:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @param[out]    pDst       points to the output vector
  46:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @param[in]     blockSize  number of samples in each vector
  47:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @return        none
  48:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****                    The function uses saturating arithmetic.
  51:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  52:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  55:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #include "arm_helium_utils.h"
  57:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** void arm_add_q7(
  59:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     const q7_t * pSrcA,
  60:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     const q7_t * pSrcB,
  61:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     q7_t * pDst,
  62:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     uint32_t blockSize)
  63:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** {
  64:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  65:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     q7x16_t vecA;
  66:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     q7x16_t vecB;
  67:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* Compute 16 outputs at a time */
  69:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt = blockSize >> 4;
  70:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     while (blkCnt > 0U)
  71:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     {
  72:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         /*
  73:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          * C = A + B
  74:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          * Add and then store the results in the destination buffer.
  75:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          */
  76:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vecA = vld1q(pSrcA);
  77:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vecB = vld1q(pSrcB);
  78:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vst1q(pDst, vqaddq(vecA, vecB));
  79:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         /*
  80:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          * Decrement the blockSize loop counter
  81:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          */
  82:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         blkCnt--;
  83:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         /*
  84:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          * advance vector source and destination pointers
  85:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****          */
  86:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         pSrcA  += 16;
  87:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         pSrcB  += 16;
  88:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         pDst   += 16;
  89:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     }
  90:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /*
  91:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****      * tail
  92:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****      */
  93:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt = blockSize & 0xF;
  94:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     if (blkCnt > 0U)
  95:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     {
  96:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  97:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vecA = vld1q(pSrcA);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 46


  98:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vecB = vld1q(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         vstrbq_p(pDst, vqaddq(vecA, vecB), p0);
 100:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     }
 101:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** }
 102:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #else
 103:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** void arm_add_q7(
 104:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   const q7_t * pSrcA,
 105:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   const q7_t * pSrcB,
 106:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         q7_t * pDst,
 107:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         uint32_t blockSize)
 108:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** {
 605              		.loc 11 108 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610              	.LVL88:
 611 0000 E0B4     		push	{r5, r6, r7}
 612              		.cfi_def_cfa_offset 12
 613              		.cfi_offset 5, -12
 614              		.cfi_offset 6, -8
 615              		.cfi_offset 7, -4
 616              	.LVL89:
 109:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 110:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize >> 2U;
 115:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   while (blkCnt > 0U)
 117:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   {
 118:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* C = A + B */
 119:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #if defined (ARM_MATH_DSP)
 121:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* Add and store result in destination buffer (4 samples at a time). */
 122:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     write_q7x4_ia (&pDst, __QADD8 (read_q7x4_ia (&pSrcA), read_q7x4_ia (&pSrcB)));
 123:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #else
 124:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT ((q15_t) *pSrcA++ + *pSrcB++, 8);
 125:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT ((q15_t) *pSrcA++ + *pSrcB++, 8);
 126:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT ((q15_t) *pSrcA++ + *pSrcB++, 8);
 127:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT ((q15_t) *pSrcA++ + *pSrcB++, 8);
 128:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #endif
 129:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* Decrement loop counter */
 131:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt--;
 132:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   }
 133:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 135:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize % 0x4U;
 136:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #else
 138:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   /* Initialize blkCnt with number of samples */
 140:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize;
 141:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 47


 143:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   while (blkCnt > 0U)
 617              		.loc 11 144 0
 618 0002 0EE0     		b	.L52
 619              	.LVL90:
 620              	.L53:
 145:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   {
 146:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* C = A + B */
 147:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* Add and store result in destination buffer. */
 149:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ + *pSrcB++, 8);
 621              		.loc 11 149 0
 622 0004 571C     		adds	r7, r2, #1
 623              	.LVL91:
 624              	.LBB24:
 625 0006 451C     		adds	r5, r0, #1
 626              	.LVL92:
 627 0008 4E1C     		adds	r6, r1, #1
 628              	.LVL93:
 629 000a 90F90000 		ldrsb	r0, [r0]
 630 000e 91F90010 		ldrsb	r1, [r1]
 631 0012 0144     		add	r1, r1, r0
 632              	.LVL94:
 633              	@ 149 ".\DSP\Source\BasicMathFunctions\arm_add_q7.c" 1
 634 0014 01F30701 		ssat r1, #8, r1
 635              	@ 0 "" 2
 636              	.LVL95:
 637              		.thumb
 638              	.LBE24:
 639 0018 1170     		strb	r1, [r2]
 640              	.LVL96:
 150:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 151:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     /* Decrement loop counter */
 152:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt--;
 641              		.loc 11 152 0
 642 001a 013B     		subs	r3, r3, #1
 643              	.LVL97:
 149:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 644              		.loc 11 149 0
 645 001c 3A46     		mov	r2, r7
 646              	.LBB25:
 647 001e 3146     		mov	r1, r6
 648              	.LVL98:
 649 0020 2846     		mov	r0, r5
 650              	.LVL99:
 651              	.L52:
 652              	.LBE25:
 144:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   {
 653              		.loc 11 144 0
 654 0022 002B     		cmp	r3, #0
 655 0024 EED1     		bne	.L53
 153:.\DSP\Source\BasicMathFunctions/arm_add_q7.c ****   }
 154:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_add_q7.c **** }
 656              		.loc 11 155 0
 657 0026 E0BC     		pop	{r5, r6, r7}
 658              		.cfi_restore 7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 48


 659              		.cfi_restore 6
 660              		.cfi_restore 5
 661              		.cfi_def_cfa_offset 0
 662 0028 7047     		bx	lr
 663              		.cfi_endproc
 664              	.LFE92:
 665              		.size	arm_add_q7, .-arm_add_q7
 666 002a 00BF     		.section	.text.arm_and_u16,"ax",%progbits
 667              		.align	2
 668              		.global	arm_and_u16
 669              		.thumb
 670              		.thumb_func
 671              		.type	arm_and_u16, %function
 672              	arm_and_u16:
 673              	.LFB93:
 674              		.file 12 ".\\DSP\\Source\\BasicMathFunctions\\arm_and_u16.c"
   1:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Title:        arm_and_u16.c
   4:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Description:  uint16_t bitwise AND
   5:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @defgroup And Vector bitwise AND
  37:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   Compute the logical bitwise AND.
  39:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   There are separate functions for uint32_t, uint16_t, and uint7_t data types.
  41:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 49


  42:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  43:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /**
  44:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @addtogroup And
  45:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @{
  46:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** /**
  49:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @brief         Compute the logical bitwise AND of two fixed-point vectors.
  50:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @param[in]     pSrcA      points to input vector A
  51:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @param[in]     pSrcB      points to input vector B
  52:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @param[out]    pDst       points to output vector
  53:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @param[in]     blockSize  number of samples in each vector
  54:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****   @return        none
  55:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****  */
  56:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** void arm_and_u16(
  58:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     const uint16_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     const uint16_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****           uint16_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****           uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** {
 675              		.loc 12 62 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680              	.LVL100:
 681 0000 30B4     		push	{r4, r5}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 4, -8
 684              		.cfi_offset 5, -4
 685              	.LVL101:
  63:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     uint32_t blkCnt;      /* Loop counter */
  64:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  66:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     uint16x8_t vecSrcA, vecSrcB;
  67:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     /* Compute 8 outputs at a time */
  69:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize >> 3;
  70:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
  72:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     {
  73:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecSrcA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecSrcB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vst1q(pDst, vandq_u16(vecSrcA, vecSrcB) );
  77:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pSrcA += 8;
  79:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pSrcB += 8;
  80:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pDst  += 8;
  81:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
  83:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
  84:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  86:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     /* Tail */
  87:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize & 7;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 50


  88:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
  89:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecSrcA = vld1q(pSrcA);
  93:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecSrcB = vld1q(pSrcB);
  94:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vstrhq_p(pDst, vandq_u16(vecSrcA, vecSrcB), p0);
  95:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #else
  97:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  98:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     uint16x8_t vecA, vecB;
  99:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     /* Compute 8 outputs at a time */
 101:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize >> 3U;
 102:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
 104:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecA = vld1q_u16(pSrcA);
 106:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vecB = vld1q_u16(pSrcB);
 107:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         vst1q_u16(pDst, vandq_u16(vecA, vecB) );
 109:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pSrcA += 8;
 111:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pSrcB += 8;
 112:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         pDst  += 8;
 113:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
 115:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
 116:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     }
 117:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     /* Tail */
 119:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize & 7;
 120:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #else
 121:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     /* Initialize blkCnt with number of samples */
 122:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize;
 123:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #endif
 124:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
 686              		.loc 12 125 0
 687 0002 07E0     		b	.L56
 688              	.LVL102:
 689              	.L57:
 126:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     {
 127:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         *pDst++ = (*pSrcA++)&(*pSrcB++);
 690              		.loc 12 127 0
 691 0004 0588     		ldrh	r5, [r0]
 692              	.LVL103:
 693 0006 0C88     		ldrh	r4, [r1]
 694 0008 2C40     		ands	r4, r4, r5
 695 000a 1480     		strh	r4, [r2]	@ movhi
 128:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
 130:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
 696              		.loc 12 130 0
 697 000c 013B     		subs	r3, r3, #1
 698              	.LVL104:
 127:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 51


 699              		.loc 12 127 0
 700 000e 0232     		adds	r2, r2, #2
 701              	.LVL105:
 702 0010 0231     		adds	r1, r1, #2
 703              	.LVL106:
 704 0012 0230     		adds	r0, r0, #2
 705              	.LVL107:
 706              	.L56:
 125:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     {
 707              		.loc 12 125 0
 708 0014 002B     		cmp	r3, #0
 709 0016 F5D1     		bne	.L57
 131:.\DSP\Source\BasicMathFunctions/arm_and_u16.c ****     }
 132:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** #endif /* if defined(ARM_MATH_MVEI) */
 133:.\DSP\Source\BasicMathFunctions/arm_and_u16.c **** }
 710              		.loc 12 133 0
 711 0018 30BC     		pop	{r4, r5}
 712              		.cfi_restore 5
 713              		.cfi_restore 4
 714              		.cfi_def_cfa_offset 0
 715 001a 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE93:
 718              		.size	arm_and_u16, .-arm_and_u16
 719              		.section	.text.arm_and_u32,"ax",%progbits
 720              		.align	2
 721              		.global	arm_and_u32
 722              		.thumb
 723              		.thumb_func
 724              		.type	arm_and_u32, %function
 725              	arm_and_u32:
 726              	.LFB94:
 727              		.file 13 ".\\DSP\\Source\\BasicMathFunctions\\arm_and_u32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Title:        arm_and_u32.c
   4:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Description:  uint32_t bitwise AND
   5:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 52


  25:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @addtogroup And
  37:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @brief         Compute the logical bitwise AND of two fixed-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @param[in]     pSrcA      points to input vector A
  43:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @param[in]     pSrcB      points to input vector B
  44:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** void arm_and_u32(
  50:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     const uint32_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     const uint32_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****           uint32_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****           uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** {
 728              		.loc 13 54 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL108:
 734 0000 30B4     		push	{r4, r5}
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 4, -8
 737              		.cfi_offset 5, -4
 738              	.LVL109:
  55:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     uint32_t blkCnt;      /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     uint32x4_t vecSrcA, vecSrcB;
  59:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     /* Compute 4 outputs at a time */
  61:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     blkCnt = blockSize >> 2;
  62:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     while (blkCnt > 0U)
  64:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     {
  65:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecSrcA = vld1q(pSrcA);
  66:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecSrcB = vld1q(pSrcB);
  67:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vst1q(pDst, vandq_u32(vecSrcA, vecSrcB) );
  69:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pSrcA += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 53


  71:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pSrcB += 4;
  72:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pDst  += 4;
  73:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         /* Decrement the loop counter */
  75:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         blkCnt--;
  76:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     }
  77:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     /* Tail */
  79:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     blkCnt = blockSize & 3;
  80:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     if (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  84:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecSrcA = vld1q(pSrcA);
  85:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecSrcB = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vstrwq_p(pDst, vandq_u32(vecSrcA, vecSrcB), p0);
  87:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #else
  89:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  90:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     uint32x4_t vecA, vecB;
  91:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  92:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     /* Compute 4 outputs at a time */
  93:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     blkCnt = blockSize >> 2U;
  94:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     while (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecA = vld1q_u32(pSrcA);
  98:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vecB = vld1q_u32(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         vst1q_u32(pDst, vandq_u32(vecA, vecB) );
 101:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pSrcA += 4;
 103:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pSrcB += 4;
 104:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         pDst  += 4;
 105:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         /* Decrement the loop counter */
 107:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         blkCnt--;
 108:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     /* Tail */
 111:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     blkCnt = blockSize & 3;
 112:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     /* Initialize blkCnt with number of samples */
 114:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     blkCnt = blockSize;
 115:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     while (blkCnt > 0U)
 739              		.loc 13 117 0
 740 0002 07E0     		b	.L60
 741              	.LVL110:
 742              	.L61:
 118:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     {
 119:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         *pDst++ = (*pSrcA++)&(*pSrcB++);
 743              		.loc 13 119 0
 744 0004 0568     		ldr	r5, [r0]
 745              	.LVL111:
 746 0006 0C68     		ldr	r4, [r1]
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 54


 747 0008 2C40     		ands	r4, r4, r5
 748 000a 1460     		str	r4, [r2]
 120:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         /* Decrement the loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****         blkCnt--;
 749              		.loc 13 122 0
 750 000c 013B     		subs	r3, r3, #1
 751              	.LVL112:
 119:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** 
 752              		.loc 13 119 0
 753 000e 0432     		adds	r2, r2, #4
 754              	.LVL113:
 755 0010 0431     		adds	r1, r1, #4
 756              	.LVL114:
 757 0012 0430     		adds	r0, r0, #4
 758              	.LVL115:
 759              	.L60:
 117:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     {
 760              		.loc 13 117 0
 761 0014 002B     		cmp	r3, #0
 762 0016 F5D1     		bne	.L61
 123:.\DSP\Source\BasicMathFunctions/arm_and_u32.c ****     }
 124:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** #endif /* if defined(ARM_MATH_MVEI) */
 125:.\DSP\Source\BasicMathFunctions/arm_and_u32.c **** }
 763              		.loc 13 125 0
 764 0018 30BC     		pop	{r4, r5}
 765              		.cfi_restore 5
 766              		.cfi_restore 4
 767              		.cfi_def_cfa_offset 0
 768 001a 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE94:
 771              		.size	arm_and_u32, .-arm_and_u32
 772              		.section	.text.arm_and_u8,"ax",%progbits
 773              		.align	2
 774              		.global	arm_and_u8
 775              		.thumb
 776              		.thumb_func
 777              		.type	arm_and_u8, %function
 778              	arm_and_u8:
 779              	.LFB95:
 780              		.file 14 ".\\DSP\\Source\\BasicMathFunctions\\arm_and_u8.c"
   1:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Title:        arm_and_u8.c
   4:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Description:  uint8_t bitwise AND
   5:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 55


  16:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @addtogroup And
  38:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @brief         Compute the logical bitwise AND of two fixed-point vectors.
  43:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @param[in]     pSrcA      points to input vector A
  44:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @param[in]     pSrcB      points to input vector B
  45:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @param[out]    pDst       points to output vector
  46:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @param[in]     blockSize  number of samples in each vector
  47:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****   @return        none
  48:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****  */
  49:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  50:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** void arm_and_u8(
  51:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     const uint8_t * pSrcA,
  52:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     const uint8_t * pSrcB,
  53:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****           uint8_t * pDst,
  54:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****           uint32_t blockSize)
  55:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** {
 781              		.loc 14 55 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786              	.LVL116:
 787 0000 30B4     		push	{r4, r5}
 788              		.cfi_def_cfa_offset 8
 789              		.cfi_offset 4, -8
 790              		.cfi_offset 5, -4
 791              	.LVL117:
  56:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     uint32_t blkCnt;      /* Loop counter */
  57:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  59:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     uint8x16_t vecSrcA, vecSrcB;
  60:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     /* Compute 16 outputs at a time */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 56


  62:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     blkCnt = blockSize >> 4;
  63:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     while (blkCnt > 0U)
  65:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     {
  66:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecSrcA = vld1q(pSrcA);
  67:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecSrcB = vld1q(pSrcB);
  68:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vst1q(pDst, vandq_u8(vecSrcA, vecSrcB) );
  70:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pSrcA += 16;
  72:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pSrcB += 16;
  73:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pDst  += 16;
  74:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  75:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         /* Decrement the loop counter */
  76:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         blkCnt--;
  77:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     }
  78:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  79:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     /* Tail */
  80:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     blkCnt = blockSize & 0xF;
  81:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     if (blkCnt > 0U)
  83:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     {
  84:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  85:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecSrcA = vld1q(pSrcA);
  86:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecSrcB = vld1q(pSrcB);
  87:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vstrbq_p(pDst, vandq_u8(vecSrcA, vecSrcB), p0);
  88:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #else
  90:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  91:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     uint8x16_t vecA, vecB;
  92:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  93:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     /* Compute 16 outputs at a time */
  94:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     blkCnt = blockSize >> 4U;
  95:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
  96:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     while (blkCnt > 0U)
  97:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     {
  98:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecA = vld1q_u8(pSrcA);
  99:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vecB = vld1q_u8(pSrcB);
 100:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 101:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         vst1q_u8(pDst, vandq_u8(vecA, vecB) );
 102:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pSrcA += 16;
 104:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pSrcB += 16;
 105:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         pDst  += 16;
 106:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         /* Decrement the loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         blkCnt--;
 109:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     /* Tail */
 112:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     blkCnt = blockSize & 0xF;
 113:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #else
 114:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     /* Initialize blkCnt with number of samples */
 115:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     blkCnt = blockSize;
 116:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #endif
 117:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     while (blkCnt > 0U)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 57


 792              		.loc 14 118 0
 793 0002 07E0     		b	.L64
 794              	.LVL118:
 795              	.L65:
 119:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     {
 120:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         *pDst++ = (*pSrcA++)&(*pSrcB++);
 796              		.loc 14 120 0
 797 0004 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 798              	.LVL119:
 799 0006 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 800 0008 2C40     		ands	r4, r4, r5
 801 000a 1470     		strb	r4, [r2]
 121:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         /* Decrement the loop counter */
 123:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****         blkCnt--;
 802              		.loc 14 123 0
 803 000c 013B     		subs	r3, r3, #1
 804              	.LVL120:
 120:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** 
 805              		.loc 14 120 0
 806 000e 0132     		adds	r2, r2, #1
 807              	.LVL121:
 808 0010 0131     		adds	r1, r1, #1
 809              	.LVL122:
 810 0012 0130     		adds	r0, r0, #1
 811              	.LVL123:
 812              	.L64:
 118:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     {
 813              		.loc 14 118 0
 814 0014 002B     		cmp	r3, #0
 815 0016 F5D1     		bne	.L65
 124:.\DSP\Source\BasicMathFunctions/arm_and_u8.c ****     }
 125:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** #endif /* if defined(ARM_MATH_MVEI) */
 126:.\DSP\Source\BasicMathFunctions/arm_and_u8.c **** }
 816              		.loc 14 126 0
 817 0018 30BC     		pop	{r4, r5}
 818              		.cfi_restore 5
 819              		.cfi_restore 4
 820              		.cfi_def_cfa_offset 0
 821 001a 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE95:
 824              		.size	arm_and_u8, .-arm_and_u8
 825              		.global	__aeabi_fmul
 826              		.section	.text.arm_dot_prod_f32,"ax",%progbits
 827              		.align	2
 828              		.global	arm_dot_prod_f32
 829              		.thumb
 830              		.thumb_func
 831              		.type	arm_dot_prod_f32, %function
 832              	arm_dot_prod_f32:
 833              	.LFB96:
 834              		.file 15 ".\\DSP\\Source\\BasicMathFunctions\\arm_dot_prod_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Title:        arm_dot_prod_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Description:  Floating-point dot product
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 58


   5:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * $Date:        05 October 2021
   7:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * $Revision:    V1.9.1
   8:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @defgroup BasicDotProd Vector Dot Product
  37:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   Computes the dot product of two vectors.
  39:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   <pre>
  42:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****       sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
  43:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   </pre>
  44:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  45:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  46:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /**
  49:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @addtogroup BasicDotProd
  50:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @{
  51:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** /**
  54:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @brief         Dot product of floating-point vectors.
  55:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  56:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  57:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @param[out]    result     output result returned here.
  59:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   @return        none
  60:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****  */
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 59


  62:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  63:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #include "arm_helium_utils.h"
  65:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
  68:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     const float32_t * pSrcA,
  69:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     const float32_t * pSrcB,
  70:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     uint32_t    blockSize,
  71:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     float32_t * result)
  72:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** {
  73:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vecA, vecB;
  74:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vecSum;
  75:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     uint32_t blkCnt; 
  76:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     float32_t sum = 0.0f;  
  77:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     vecSum = vdupq_n_f32(0.0f);
  78:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  79:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
  80:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
  81:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /*
  84:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  85:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          * Calculate dot product and then store the result in a temporary buffer.
  86:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          * and advance vector source and destination pointers
  87:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          */
  88:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecA = vld1q(pSrcA);
  89:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
  90:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         
  91:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecB = vld1q(pSrcB);
  92:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4;
  93:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
  94:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecSum = vfmaq(vecSum, vecA, vecB);
  95:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /*
  96:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          * Decrement the blockSize loop counter
  97:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****          */
  98:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt --;
  99:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     }
 100:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 101:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 3;
 103:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     if (blkCnt > 0U)
 104:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 106:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 108:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecA = vld1q(pSrcA);
 109:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecB = vld1q(pSrcB);
 110:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vecSum = vfmaq_m(vecSum, vecA, vecB, p0);
 111:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     }
 112:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vecAddAcrossF32Mve(vecSum);
 114:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Store result in destination buffer */
 116:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     *result = sum;
 117:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 60


 119:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #else
 121:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
 123:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcA,
 124:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcB,
 125:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blockSize,
 126:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t * result)
 127:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** {
 835              		.loc 15 127 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              	.LVL124:
 840 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 841              		.cfi_def_cfa_offset 24
 842              		.cfi_offset 4, -24
 843              		.cfi_offset 5, -20
 844              		.cfi_offset 6, -16
 845              		.cfi_offset 7, -12
 846              		.cfi_offset 8, -8
 847              		.cfi_offset 14, -4
 848 0004 1446     		mov	r4, r2
 849 0006 9846     		mov	r8, r3
 850              	.LVL125:
 128:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 129:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t sum = 0.0f;                          /* Temporary return variable */
 851              		.loc 15 129 0
 852 0008 0025     		movs	r5, #0
 130:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 132:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vec1;
 133:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vec2;
 134:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t accum = vdupq_n_f32(0);   
 135:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #if !defined(__aarch64__)
 136:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     f32x2_t tmp = vdup_n_f32(0); 
 137:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #endif   
 138:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
 140:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
 141:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     vec1 = vld1q_f32(pSrcA);
 143:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     vec2 = vld1q_f32(pSrcB);
 144:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
 146:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     {
 147:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]*B[0] + A[1]*B[1] + A[2]*B[2] + ... + A[blockSize-1]*B[blockSize-1] */
 148:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
 149:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         
 150:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 	      accum = vmlaq_f32(accum, vec1, vec2);
 151:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 	
 152:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /* Increment pointers */
 153:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
 154:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4; 
 155:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vec1 = vld1q_f32(pSrcA);
 157:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         vec2 = vld1q_f32(pSrcB);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 61


 158:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         
 159:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         /* Decrement the loop counter */
 160:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt--;
 161:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     }
 162:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     
 163:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(__aarch64__)
 164:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vpadds_f32(vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)));
 165:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #else
 166:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     tmp = vpadd_f32(vget_low_f32(accum), vget_high_f32(accum));
 167:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vget_lane_f32(tmp, 0) + vget_lane_f32(tmp, 1);
 168:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #endif    
 170:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 171:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Tail */
 172:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 0x3;
 173:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #else
 175:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 176:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 178:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize >> 2U;
 179:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   /* First part of the processing with loop unrolling. Compute 4 outputs at a time.
 181:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 182:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
 183:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   {
 184:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 185:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 186:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 187:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 188:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 189:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 190:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 191:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 192:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 193:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 194:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 195:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 196:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 197:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   }
 198:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 199:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 200:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize % 0x4U;
 201:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 202:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #else
 203:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 204:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 205:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize;
 206:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 207:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 208:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 209:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 210:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
 853              		.loc 15 210 0
 854 000a 0DE0     		b	.L68
 855              	.LVL126:
 856              	.L69:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 62


 211:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   {
 212:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 213:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 214:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 215:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 857              		.loc 15 215 0
 858 000c 061D     		adds	r6, r0, #4
 859              	.LVL127:
 860 000e 0F1D     		adds	r7, r1, #4
 861              	.LVL128:
 862 0010 0068     		ldr	r0, [r0]	@ float
 863 0012 0968     		ldr	r1, [r1]	@ float
 864 0014 FFF7FEFF 		bl	__aeabi_fmul
 865              	.LVL129:
 866 0018 0146     		mov	r1, r0
 867 001a 2846     		mov	r0, r5
 868 001c FFF7FEFF 		bl	__aeabi_fadd
 869              	.LVL130:
 870 0020 0546     		mov	r5, r0
 871              	.LVL131:
 216:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 217:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 218:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 872              		.loc 15 218 0
 873 0022 013C     		subs	r4, r4, #1
 874              	.LVL132:
 215:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 875              		.loc 15 215 0
 876 0024 3946     		mov	r1, r7
 877 0026 3046     		mov	r0, r6
 878              	.LVL133:
 879              	.L68:
 210:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   {
 880              		.loc 15 210 0
 881 0028 002C     		cmp	r4, #0
 882 002a EFD1     		bne	.L69
 219:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   }
 220:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c **** 
 221:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   /* Store result in destination buffer */
 222:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f32.c ****   *result = sum;
 883              		.loc 15 222 0
 884 002c C8F80050 		str	r5, [r8]	@ float
 885 0030 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 886              		.cfi_endproc
 887              	.LFE96:
 888              		.size	arm_dot_prod_f32, .-arm_dot_prod_f32
 889              		.global	__aeabi_dmul
 890              		.section	.text.arm_dot_prod_f64,"ax",%progbits
 891              		.align	2
 892              		.global	arm_dot_prod_f64
 893              		.thumb
 894              		.thumb_func
 895              		.type	arm_dot_prod_f64, %function
 896              	arm_dot_prod_f64:
 897              	.LFB97:
 898              		.file 16 ".\\DSP\\Source\\BasicMathFunctions\\arm_dot_prod_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** /* ----------------------------------------------------------------------
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 63


   2:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Title:        arm_dot_prod_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Description:  Floating-point dot product
   5:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @addtogroup BasicDotProd
  37:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @brief         Dot product of floating-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @param[in]     pSrcA      points to the first input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @param[in]     pSrcB      points to the second input vector.
  44:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @param[in]     blockSize  number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @param[out]    result     output result returned here.
  46:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** void arm_dot_prod_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   const float64_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   const float64_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****         uint32_t blockSize,
  53:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****         float64_t * result)
  54:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** {
 899              		.loc 16 54 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 64


 903              	.LVL134:
 904 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 905              		.cfi_def_cfa_offset 32
 906              		.cfi_offset 4, -32
 907              		.cfi_offset 5, -28
 908              		.cfi_offset 6, -24
 909              		.cfi_offset 7, -20
 910              		.cfi_offset 8, -16
 911              		.cfi_offset 9, -12
 912              		.cfi_offset 10, -8
 913              		.cfi_offset 14, -4
 914 0004 0D46     		mov	r5, r1
 915 0006 1446     		mov	r4, r2
 916 0008 9A46     		mov	r10, r3
 917              	.LVL135:
  55:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   float64_t sum = 0.;                            /* Temporary return variable */
 918              		.loc 16 56 0
 919 000a 0026     		movs	r6, #0
 920 000c 0027     		movs	r7, #0
  57:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   /* Initialize blkCnt with number of samples */
  59:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   blkCnt = blockSize;
  60:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   while (blkCnt > 0U)
 921              		.loc 16 61 0
 922 000e 13E0     		b	.L72
 923              	.LVL136:
 924              	.L73:
  62:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   {
  63:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
  64:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****     /* Calculate dot product and store result in a temporary buffer. */
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****     sum += (*pSrcA++) * (*pSrcB++);
 925              		.loc 16 66 0
 926 0010 00F10808 		add	r8, r0, #8
 927              	.LVL137:
 928 0014 05F10809 		add	r9, r5, #8
 929              	.LVL138:
 930 0018 03C8     		ldmia	r0, {r0-r1}
 931 001a D5E90023 		ldrd	r2, [r5]
 932 001e FFF7FEFF 		bl	__aeabi_dmul
 933              	.LVL139:
 934 0022 0246     		mov	r2, r0
 935 0024 0B46     		mov	r3, r1
 936 0026 3046     		mov	r0, r6
 937 0028 3946     		mov	r1, r7
 938 002a FFF7FEFF 		bl	__aeabi_dadd
 939              	.LVL140:
 940 002e 0646     		mov	r6, r0
 941              	.LVL141:
 942 0030 0F46     		mov	r7, r1
 943              	.LVL142:
  67:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****     /* Decrement loop counter */
  69:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****     blkCnt--;
 944              		.loc 16 69 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 65


 945 0032 013C     		subs	r4, r4, #1
 946              	.LVL143:
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
 947              		.loc 16 66 0
 948 0034 4D46     		mov	r5, r9
 949 0036 4046     		mov	r0, r8
 950              	.LVL144:
 951              	.L72:
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   {
 952              		.loc 16 61 0
 953 0038 002C     		cmp	r4, #0
 954 003a E9D1     		bne	.L73
  70:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   }
  71:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c **** 
  72:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   /* Store result in destination buffer */
  73:.\DSP\Source\BasicMathFunctions/arm_dot_prod_f64.c ****   *result = sum;
 955              		.loc 16 73 0
 956 003c CAE90067 		strd	r6, [r10]
 957 0040 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 958              		.cfi_endproc
 959              	.LFE97:
 960              		.size	arm_dot_prod_f64, .-arm_dot_prod_f64
 961              		.section	.text.arm_dot_prod_q15,"ax",%progbits
 962              		.align	2
 963              		.global	arm_dot_prod_q15
 964              		.thumb
 965              		.thumb_func
 966              		.type	arm_dot_prod_q15, %function
 967              	arm_dot_prod_q15:
 968              	.LFB98:
 969              		.file 17 ".\\DSP\\Source\\BasicMathFunctions\\arm_dot_prod_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Title:        arm_dot_prod_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Description:  Q15 dot product
   5:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  * limitations under the License.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 66


  27:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @addtogroup BasicDotProd
  37:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @brief         Dot product of Q15 vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @param[out]    result     output result returned here
  46:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****                    The intermediate multiplications are in 1.15 x 1.15 = 2.30 format and these
  50:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****                    results are added to a 64-bit accumulator in 34.30 format.
  51:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****                    Nonsaturating additions are used and given that there are 33 guard bits in the a
  52:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****                    there is no risk of overflow.
  53:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****                    The return result is in 34.30 format.
  54:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****  */
  55:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  56:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #include "arm_helium_utils.h"
  58:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  59:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** void arm_dot_prod_q15(
  60:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     const q15_t * pSrcA,
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     const q15_t * pSrcB,
  62:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     uint32_t blockSize,
  63:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     q63_t * result)
  64:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** {
  65:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     q15x8_t vecA;
  67:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     q15x8_t vecB;
  68:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     q63_t     sum = 0LL;
  69:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* Compute 8 outputs at a time */
  71:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     blkCnt = blockSize >> 3;
  72:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     while (blkCnt > 0U)
  73:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     {
  74:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         /*
  75:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  76:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          * Calculate dot product and then store the result in a temporary buffer.
  77:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          */
  78:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         vecA = vld1q(pSrcA);
  79:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         vecB = vld1q(pSrcB);
  80:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         sum = vmlaldavaq(sum, vecA, vecB);
  81:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         /*
  82:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          * Decrement the blockSize loop counter
  83:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 67


  84:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         blkCnt--;
  85:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         /*
  86:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          * advance vector source and destination pointers
  87:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****          */
  88:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         pSrcA += 8;
  89:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         pSrcB += 8;
  90:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     }
  91:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /*
  92:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****      * tail
  93:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****      */
  94:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     blkCnt = blockSize & 7;
  95:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     if (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  98:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         vecA = vld1q(pSrcA);
  99:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         vecB = vld1q(pSrcB);
 100:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         sum = vmlaldavaq_p(sum, vecA, vecB, p0);
 101:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     *result = sum;
 104:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** }
 105:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #else
 107:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** void arm_dot_prod_q15(
 108:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   const q15_t * pSrcA,
 109:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   const q15_t * pSrcB,
 110:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         uint32_t blockSize,
 111:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         q63_t * result)
 112:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** {
 970              		.loc 17 112 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              		@ link register save eliminated.
 975              	.LVL145:
 976 0000 F0B4     		push	{r4, r5, r6, r7}
 977              		.cfi_def_cfa_offset 16
 978              		.cfi_offset 4, -16
 979              		.cfi_offset 5, -12
 980              		.cfi_offset 6, -8
 981              		.cfi_offset 7, -4
 982              	.LVL146:
 113:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 114:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****         q63_t sum = 0;                                 /* Temporary return variable */
 983              		.loc 17 114 0
 984 0002 0026     		movs	r6, #0
 985 0004 0027     		movs	r7, #0
 115:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 117:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 119:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   blkCnt = blockSize >> 2U;
 120:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   while (blkCnt > 0U)
 122:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   {
 123:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 124:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 68


 125:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #if defined (ARM_MATH_DSP)
 126:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* Calculate dot product and store result in a temporary buffer. */
 127:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum = __SMLALD(read_q15x2_ia (&pSrcA), read_q15x2_ia (&pSrcB), sum);
 128:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum = __SMLALD(read_q15x2_ia (&pSrcA), read_q15x2_ia (&pSrcB), sum);
 129:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #else
 130:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 131:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 132:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 133:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 134:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #endif
 135:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* Decrement loop counter */
 137:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     blkCnt--;
 138:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   }
 139:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 141:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   blkCnt = blockSize % 0x4U;
 142:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #else
 144:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   /* Initialize blkCnt with number of samples */
 146:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   blkCnt = blockSize;
 147:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 149:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   while (blkCnt > 0U)
 986              		.loc 17 150 0
 987 0006 0BE0     		b	.L76
 988              	.LVL147:
 989              	.L77:
 151:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   {
 152:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 153:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* Calculate dot product and store result in a temporary buffer. */
 155:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** //#if defined (ARM_MATH_DSP)
 156:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** //    sum  = __SMLALD(*pSrcA++, *pSrcB++, sum);
 157:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** //#else
 158:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 990              		.loc 17 158 0
 991 0008 B0F90050 		ldrsh	r5, [r0]
 992              	.LVL148:
 993 000c B1F90040 		ldrsh	r4, [r1]
 994 0010 04FB05F4 		mul	r4, r4, r5
 995 0014 3619     		adds	r6, r6, r4
 996              	.LVL149:
 997 0016 47EBE477 		adc	r7, r7, r4, asr #31
 998              	.LVL150:
 159:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** //#endif
 160:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     /* Decrement loop counter */
 162:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****     blkCnt--;
 999              		.loc 17 162 0
 1000 001a 013A     		subs	r2, r2, #1
 1001              	.LVL151:
 158:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** //#endif
 1002              		.loc 17 158 0
 1003 001c 0231     		adds	r1, r1, #2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 69


 1004              	.LVL152:
 1005 001e 0230     		adds	r0, r0, #2
 1006              	.LVL153:
 1007              	.L76:
 150:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   {
 1008              		.loc 17 150 0
 1009 0020 002A     		cmp	r2, #0
 1010 0022 F1D1     		bne	.L77
 163:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   }
 164:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   /* Store result in destination buffer in 34.30 format */
 166:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c ****   *result = sum;
 1011              		.loc 17 166 0
 1012 0024 C3E90067 		strd	r6, [r3]
 167:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q15.c **** }
 1013              		.loc 17 167 0
 1014 0028 F0BC     		pop	{r4, r5, r6, r7}
 1015              		.cfi_restore 7
 1016              		.cfi_restore 6
 1017              		.cfi_restore 5
 1018              		.cfi_restore 4
 1019              		.cfi_def_cfa_offset 0
 1020              	.LVL154:
 1021 002a 7047     		bx	lr
 1022              		.cfi_endproc
 1023              	.LFE98:
 1024              		.size	arm_dot_prod_q15, .-arm_dot_prod_q15
 1025              		.section	.text.arm_dot_prod_q31,"ax",%progbits
 1026              		.align	2
 1027              		.global	arm_dot_prod_q31
 1028              		.thumb
 1029              		.thumb_func
 1030              		.type	arm_dot_prod_q31, %function
 1031              	arm_dot_prod_q31:
 1032              	.LFB99:
 1033              		.file 18 ".\\DSP\\Source\\BasicMathFunctions\\arm_dot_prod_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Title:        arm_dot_prod_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Description:  Q31 dot product
   5:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 70


  22:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @addtogroup BasicDotProd
  37:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @brief         Dot product of Q31 vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     pSrcA      points to the first input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     pSrcB      points to the second input vector.
  44:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     blockSize  number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @param[out]    result     output result returned here.
  46:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    The intermediate multiplications are in 1.31 x 1.31 = 2.62 format and these
  50:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    are truncated to 2.48 format by discarding the lower 14 bits.
  51:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    The 2.48 result is then added without saturation to a 64-bit accumulator in 16.4
  52:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    There are 15 guard bits in the accumulator and there is no risk of overflow as l
  53:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    the length of the vectors is less than 2^16 elements.
  54:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****                    The return result is in 16.48 format.
  55:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****  */
  56:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  59:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #include "arm_helium_utils.h"
  60:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** void arm_dot_prod_q31(
  62:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     const q31_t * pSrcA,
  63:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     const q31_t * pSrcB,
  64:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     uint32_t blockSize,
  65:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     q63_t * result)
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** {
  67:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  68:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     q31x4_t vecA;
  69:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     q31x4_t vecB;
  70:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     q63_t     sum = 0LL;
  71:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
  72:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* Compute 4 outputs at a time */
  73:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt = blockSize >> 2;
  74:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     while (blkCnt > 0U)
  75:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     {
  76:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  78:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          * Calculate dot product and then store the result in a temporary buffer.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 71


  79:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          */
  80:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         vecA = vld1q(pSrcA);
  81:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         vecB = vld1q(pSrcB);
  82:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         sum = vrmlaldavhaq(sum, vecA, vecB);
  83:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  84:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          * Decrement the blockSize loop counter
  85:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          */
  86:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         blkCnt--;
  87:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  88:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          * advance vector source and destination pointers
  89:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****          */
  90:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         pSrcA += 4;
  91:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         pSrcB += 4;
  92:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     }
  93:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /*
  94:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      * tail
  95:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      */
  96:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt = blockSize & 3;
  97:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     if (blkCnt > 0U)
  98:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     {
  99:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 100:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         vecA = vld1q(pSrcA);
 101:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         vecB = vld1q(pSrcB);
 102:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         sum = vrmlaldavhaq_p(sum, vecA, vecB, p0);
 103:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     }
 104:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 105:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /*
 106:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      * vrmlaldavhaq provides extra intermediate accumulator headroom.
 107:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      * limiting the need of intermediate scaling
 108:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      * Scalar variant uses 2.48 accu format by right shifting accumulators by 14.
 109:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      * 16.48 output conversion is performed outside the loop by scaling accu. by 6
 110:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****      */
 111:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     *result = asrl(sum, (14 - 8));
 112:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** }
 113:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #else
 115:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** void arm_dot_prod_q31(
 116:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   const q31_t * pSrcA,
 117:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   const q31_t * pSrcB,
 118:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         uint32_t blockSize,
 119:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         q63_t * result)
 120:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** {
 1034              		.loc 18 120 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              	.LVL155:
 1039 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1040              		.cfi_def_cfa_offset 36
 1041              		.cfi_offset 4, -36
 1042              		.cfi_offset 5, -32
 1043              		.cfi_offset 6, -28
 1044              		.cfi_offset 7, -24
 1045              		.cfi_offset 8, -20
 1046              		.cfi_offset 9, -16
 1047              		.cfi_offset 10, -12
 1048              		.cfi_offset 11, -8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 72


 1049              		.cfi_offset 14, -4
 1050 0004 9646     		mov	lr, r2
 1051 0006 9C46     		mov	ip, r3
 1052              	.LVL156:
 121:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****         q63_t sum = 0;                                 /* Temporary return variable */
 1053              		.loc 18 122 0
 1054 0008 4FF00008 		mov	r8, #0
 1055 000c 4FF00009 		mov	r9, #0
 123:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 125:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 126:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 127:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize >> 2U;
 128:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   while (blkCnt > 0U)
 130:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   {
 131:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 132:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and store result in a temporary buffer. */
 134:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 135:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 137:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 139:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 141:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement loop counter */
 143:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
 144:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   }
 145:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 147:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize % 0x4U;
 148:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #else
 150:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 151:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   /* Initialize blkCnt with number of samples */
 152:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize;
 153:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 155:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   while (blkCnt > 0U)
 1056              		.loc 18 156 0
 1057 0010 17E0     		b	.L80
 1058              	.LVL157:
 1059              	.L81:
 157:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   {
 158:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 159:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 160:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and store result in a temporary buffer. */
 161:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 1060              		.loc 18 161 0
 1061 0012 0468     		ldr	r4, [r0]
 1062 0014 4FEAE47B 		asr	fp, r4, #31
 1063              	.LVL158:
 1064 0018 0D68     		ldr	r5, [r1]
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 73


 1065 001a EB17     		asrs	r3, r5, #31
 1066 001c 04FB03F3 		mul	r3, r4, r3
 1067 0020 05FB0B33 		mla	r3, r5, fp, r3
 1068 0024 A4FB0545 		umull	r4, r5, r4, r5
 1069 0028 1D44     		add	r5, r5, r3
 1070 002a A60B     		lsrs	r6, r4, #14
 1071 002c 46EA8546 		orr	r6, r6, r5, lsl #18
 1072 0030 AF13     		asrs	r7, r5, #14
 1073 0032 18EB0608 		adds	r8, r8, r6
 1074              	.LVL159:
 1075 0036 49EB0709 		adc	r9, r9, r7
 1076              	.LVL160:
 162:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement loop counter */
 164:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
 1077              		.loc 18 164 0
 1078 003a 0EF1FF3E 		add	lr, lr, #-1
 1079              	.LVL161:
 161:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 1080              		.loc 18 161 0
 1081 003e 0431     		adds	r1, r1, #4
 1082              	.LVL162:
 1083 0040 0430     		adds	r0, r0, #4
 1084              	.LVL163:
 1085              	.L80:
 156:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   {
 1086              		.loc 18 156 0
 1087 0042 BEF1000F 		cmp	lr, #0
 1088 0046 E4D1     		bne	.L81
 165:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   }
 166:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c **** 
 167:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   /* Store result in destination buffer in 16.48 format */
 168:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q31.c ****   *result = sum;
 1089              		.loc 18 168 0
 1090 0048 CCE90089 		strd	r8, [ip]
 1091 004c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1092              		.cfi_endproc
 1093              	.LFE99:
 1094              		.size	arm_dot_prod_q31, .-arm_dot_prod_q31
 1095              		.section	.text.arm_dot_prod_q7,"ax",%progbits
 1096              		.align	2
 1097              		.global	arm_dot_prod_q7
 1098              		.thumb
 1099              		.thumb_func
 1100              		.type	arm_dot_prod_q7, %function
 1101              	arm_dot_prod_q7:
 1102              	.LFB100:
 1103              		.file 19 ".\\DSP\\Source\\BasicMathFunctions\\arm_dot_prod_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Title:        arm_dot_prod_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Description:  Q7 dot product
   5:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 74


  10:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @addtogroup BasicDotProd
  37:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @brief         Dot product of Q7 vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @param[out]    result     output result returned here
  46:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****                    The intermediate multiplications are in 1.7 x 1.7 = 2.14 format and these
  50:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****                    results are added to an accumulator in 18.14 format.
  51:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****                    Nonsaturating additions are used and there is no danger of wrap around as long a
  52:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****                    the vectors are less than 2^18 elements long.
  53:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****                    The return result is in 18.14 format.
  54:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****  */
  55:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  57:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #include "arm_helium_utils.h"
  59:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** void arm_dot_prod_q7(
  61:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     const q7_t * pSrcA,
  62:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     const q7_t * pSrcB,
  63:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     uint32_t blockSize,
  64:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     q31_t * result)
  65:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** {
  66:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     uint32_t  blkCnt;           /* loop counters */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 75


  67:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     q7x16_t vecA;
  68:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     q7x16_t vecB;
  69:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     q31_t     sum = 0;
  70:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* Compute 16 outputs at a time */
  72:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     blkCnt = blockSize >> 4;
  73:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     while (blkCnt > 0U)
  74:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     {
  75:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  77:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          * Calculate dot product and then store the result in a temporary buffer.
  78:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         vecA = vld1q(pSrcA);
  80:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         vecB = vld1q(pSrcB);
  81:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         sum = vmladavaq(sum, vecA, vecB);
  82:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         /*
  83:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          * Decrement the blockSize loop counter
  84:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         blkCnt--;
  86:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         /*
  87:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          * advance vector source and destination pointers
  88:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****          */
  89:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         pSrcA += 16;
  90:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         pSrcB += 16;
  91:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     }
  92:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /*
  93:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****      * tail
  94:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****      */
  95:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     blkCnt = blockSize & 0xF;
  96:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     if (blkCnt > 0U)
  97:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     {
  98:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  99:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         vecA = vld1q(pSrcA);
 100:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         vecB = vld1q(pSrcB);
 101:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         sum = vmladavaq_p(sum, vecA, vecB, p0);
 102:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     }
 103:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 104:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     *result = sum;
 105:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** }
 106:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #else
 107:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** void arm_dot_prod_q7(
 108:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   const q7_t * pSrcA,
 109:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   const q7_t * pSrcB,
 110:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         uint32_t blockSize,
 111:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         q31_t * result)
 112:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** {
 1104              		.loc 19 112 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109              	.LVL164:
 1110 0000 70B4     		push	{r4, r5, r6}
 1111              		.cfi_def_cfa_offset 12
 1112              		.cfi_offset 4, -12
 1113              		.cfi_offset 5, -8
 1114              		.cfi_offset 6, -4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 76


 1115              	.LVL165:
 113:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 114:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****         q31_t sum = 0;                                 /* Temporary return variable */
 1116              		.loc 19 114 0
 1117 0002 0024     		movs	r4, #0
 115:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 117:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #if defined (ARM_MATH_DSP)
 119:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   q31_t input1, input2;                          /* Temporary variables */
 120:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   q31_t inA1, inA2, inB1, inB2;                  /* Temporary variables */
 121:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #endif
 122:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 124:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   blkCnt = blockSize >> 2U;
 125:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 126:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   while (blkCnt > 0U)
 127:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   {
 128:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 129:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #if defined (ARM_MATH_DSP)
 131:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* read 4 samples at a time from sourceA */
 132:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     input1 = read_q7x4_ia (&pSrcA);
 133:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* read 4 samples at a time from sourceB */
 134:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     input2 = read_q7x4_ia (&pSrcB);
 135:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* extract two q7_t samples to q15_t samples */
 137:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     inA1 = __SXTB16(__ROR(input1, 8));
 138:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* extract reminaing two samples */
 139:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     inA2 = __SXTB16(input1);
 140:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* extract two q7_t samples to q15_t samples */
 141:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     inB1 = __SXTB16(__ROR(input2, 8));
 142:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* extract reminaing two samples */
 143:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     inB2 = __SXTB16(input2);
 144:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* multiply and accumulate two samples at a time */
 146:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum = __SMLAD(inA1, inB1, sum);
 147:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum = __SMLAD(inA2, inB2, sum);
 148:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #else
 149:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum += (q31_t) ((q15_t) *pSrcA++ * *pSrcB++);
 150:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum += (q31_t) ((q15_t) *pSrcA++ * *pSrcB++);
 151:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum += (q31_t) ((q15_t) *pSrcA++ * *pSrcB++);
 152:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum += (q31_t) ((q15_t) *pSrcA++ * *pSrcB++);
 153:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #endif
 154:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* Decrement loop counter */
 156:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     blkCnt--;
 157:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   }
 158:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 160:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   blkCnt = blockSize % 0x4U;
 161:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #else
 163:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 164:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   /* Initialize blkCnt with number of samples */
 165:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   blkCnt = blockSize;
 166:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 77


 167:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 168:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   while (blkCnt > 0U)
 1118              		.loc 19 169 0
 1119 0004 08E0     		b	.L84
 1120              	.LVL166:
 1121              	.L85:
 170:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   {
 171:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 172:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* Calculate dot product and store result in a temporary buffer. */
 174:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** //#if defined (ARM_MATH_DSP)
 175:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** //    sum  = __SMLAD(*pSrcA++, *pSrcB++, sum);
 176:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** //#else
 177:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     sum += (q31_t) ((q15_t) *pSrcA++ * *pSrcB++);
 1122              		.loc 19 177 0
 1123 0006 90F90050 		ldrsb	r5, [r0]
 1124              	.LVL167:
 1125 000a 91F90060 		ldrsb	r6, [r1]
 1126 000e 06FB0544 		mla	r4, r6, r5, r4
 1127              	.LVL168:
 178:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** //#endif
 179:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     /* Decrement loop counter */
 181:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****     blkCnt--;
 1128              		.loc 19 181 0
 1129 0012 013A     		subs	r2, r2, #1
 1130              	.LVL169:
 177:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** //#endif
 1131              		.loc 19 177 0
 1132 0014 0131     		adds	r1, r1, #1
 1133              	.LVL170:
 1134 0016 0130     		adds	r0, r0, #1
 1135              	.LVL171:
 1136              	.L84:
 169:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   {
 1137              		.loc 19 169 0
 1138 0018 002A     		cmp	r2, #0
 1139 001a F4D1     		bne	.L85
 182:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   }
 183:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   /* Store result in destination buffer in 18.14 format */
 185:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c ****   *result = sum;
 1140              		.loc 19 185 0
 1141 001c 1C60     		str	r4, [r3]
 186:.\DSP\Source\BasicMathFunctions/arm_dot_prod_q7.c **** }
 1142              		.loc 19 186 0
 1143 001e 70BC     		pop	{r4, r5, r6}
 1144              		.cfi_restore 6
 1145              		.cfi_restore 5
 1146              		.cfi_restore 4
 1147              		.cfi_def_cfa_offset 0
 1148              	.LVL172:
 1149 0020 7047     		bx	lr
 1150              		.cfi_endproc
 1151              	.LFE100:
 1152              		.size	arm_dot_prod_q7, .-arm_dot_prod_q7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 78


 1153 0022 00BF     		.section	.text.arm_mult_f32,"ax",%progbits
 1154              		.align	2
 1155              		.global	arm_mult_f32
 1156              		.thumb
 1157              		.thumb_func
 1158              		.type	arm_mult_f32, %function
 1159              	arm_mult_f32:
 1160              	.LFB101:
 1161              		.file 20 ".\\DSP\\Source\\BasicMathFunctions\\arm_mult_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Title:        arm_mult_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Description:  Floating-point vector multiplication
   5:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @defgroup BasicMult Vector Multiplication
  37:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   Element-by-element multiplication of two vectors.
  39:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   <pre>
  41:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       pDst[n] = pSrcA[n] * pSrcB[n],   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  */
  46:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /**
  48:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @addtogroup BasicMult
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 79


  49:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @{
  50:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** /**
  53:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @brief         Floating-point vector multiplication.
  54:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  55:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  56:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @param[out]    pDst       points to the output vector.
  57:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   @return        none
  59:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****  */
  60:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  62:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #include "arm_helium_utils.h"
  64:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
  66:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcA,
  67:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcB,
  68:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         float32_t * pDst,
  69:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         uint32_t blockSize)
  70:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** {
  71:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  72:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec1;
  74:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec2;
  75:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t res;
  76:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Compute 4 outputs at a time */
  78:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize >> 2U;
  79:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     while (blkCnt > 0U)
  80:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     {
  81:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* C = A + B */
  82:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  83:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       /* Add and then store the results in the destination buffer. */
  84:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vec1 = vld1q(pSrcA);
  85:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vec2 = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         res = vmulq(vec1, vec2);
  87:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vst1q(pDst, res);
  88:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  89:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* Increment pointers */
  90:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pSrcA += 4;
  91:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pSrcB += 4; 
  92:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pDst += 4;
  93:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         
  94:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* Decrement the loop counter */
  95:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         blkCnt--;
  96:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     }
  97:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Tail */
  99:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize & 0x3;
 100:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     if (blkCnt > 0U)
 101:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     {
 102:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       /* C = A + B */
 103:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 104:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       vec1 = vld1q(pSrcA);
 105:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       vec2 = vld1q(pSrcB);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 80


 106:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****       vstrwq_p(pDst, vmulq(vec1,vec2), p0);
 107:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     }
 108:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** }
 110:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #else
 112:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
 113:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcA,
 114:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcB,
 115:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         float32_t * pDst,
 116:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         uint32_t blockSize)
 117:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** {
 1162              		.loc 20 117 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL173:
 1167 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1168              		.cfi_def_cfa_offset 24
 1169              		.cfi_offset 4, -24
 1170              		.cfi_offset 5, -20
 1171              		.cfi_offset 6, -16
 1172              		.cfi_offset 7, -12
 1173              		.cfi_offset 8, -8
 1174              		.cfi_offset 14, -4
 1175 0004 1546     		mov	r5, r2
 1176 0006 1C46     		mov	r4, r3
 1177              	.LVL174:
 118:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
 119:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 121:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec1;
 122:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec2;
 123:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     f32x4_t res;
 124:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Compute 4 outputs at a time */
 126:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize >> 2U;
 127:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 128:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     while (blkCnt > 0U)
 129:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     {
 130:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* C = A * B */
 131:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     	/* Multiply the inputs and then store the results in the destination buffer. */
 133:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vec1 = vld1q_f32(pSrcA);
 134:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vec2 = vld1q_f32(pSrcB);
 135:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         res = vmulq_f32(vec1, vec2);
 136:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         vst1q_f32(pDst, res);
 137:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* Increment pointers */
 139:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pSrcA += 4;
 140:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pSrcB += 4; 
 141:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         pDst += 4;
 142:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         
 143:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         /* Decrement the loop counter */
 144:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****         blkCnt--;
 145:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     }
 146:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 81


 147:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Tail */
 148:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize & 0x3;
 149:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #else
 151:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 152:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 154:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize >> 2U;
 155:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0U)
 157:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   {
 158:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 159:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 160:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Multiply inputs and store result in destination buffer. */
 161:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 162:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 164:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 166:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 167:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 168:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Decrement loop counter */
 170:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 171:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   }
 172:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 174:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize % 0x4U;
 175:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 176:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #else
 177:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   /* Initialize blkCnt with number of samples */
 179:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize;
 180:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 181:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 182:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 183:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0U)
 1178              		.loc 20 184 0
 1179 0008 0CE0     		b	.L88
 1180              	.LVL175:
 1181              	.L89:
 185:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   {
 186:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 187:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 188:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Multiply input and store result in destination buffer. */
 189:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 1182              		.loc 20 189 0
 1183 000a 05F10408 		add	r8, r5, #4
 1184              	.LVL176:
 1185 000e 061D     		adds	r6, r0, #4
 1186              	.LVL177:
 1187 0010 0F1D     		adds	r7, r1, #4
 1188              	.LVL178:
 1189 0012 0068     		ldr	r0, [r0]	@ float
 1190 0014 0968     		ldr	r1, [r1]	@ float
 1191 0016 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 82


 1192              	.LVL179:
 1193 001a 2860     		str	r0, [r5]	@ float
 190:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 191:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     /* Decrement loop counter */
 192:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 1194              		.loc 20 192 0
 1195 001c 013C     		subs	r4, r4, #1
 1196              	.LVL180:
 189:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 1197              		.loc 20 189 0
 1198 001e 4546     		mov	r5, r8
 1199 0020 3946     		mov	r1, r7
 1200 0022 3046     		mov	r0, r6
 1201              	.LVL181:
 1202              	.L88:
 184:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   {
 1203              		.loc 20 184 0
 1204 0024 002C     		cmp	r4, #0
 1205 0026 F0D1     		bne	.L89
 193:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c ****   }
 194:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** 
 195:.\DSP\Source\BasicMathFunctions/arm_mult_f32.c **** }
 1206              		.loc 20 195 0
 1207 0028 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1208              		.cfi_endproc
 1209              	.LFE101:
 1210              		.size	arm_mult_f32, .-arm_mult_f32
 1211              		.section	.text.arm_mult_f64,"ax",%progbits
 1212              		.align	2
 1213              		.global	arm_mult_f64
 1214              		.thumb
 1215              		.thumb_func
 1216              		.type	arm_mult_f64, %function
 1217              	arm_mult_f64:
 1218              	.LFB102:
 1219              		.file 21 ".\\DSP\\Source\\BasicMathFunctions\\arm_mult_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Title:        arm_mult_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Description:  Floating-point vector multiplication
   5:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 83


  22:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @addtogroup BasicMult
  37:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @brief         Floating-point vector multiplication.
  42:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @param[in]     pSrcA      points to the first input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @param[in]     pSrcB      points to the second input vector.
  44:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @param[out]    pDst       points to the output vector.
  45:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @param[in]     blockSize  number of samples in each vector.
  46:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** void arm_mult_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   const float64_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   const float64_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****         float64_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****         uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** {
 1220              		.loc 21 54 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              	.LVL182:
 1225 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1226              		.cfi_def_cfa_offset 32
 1227              		.cfi_offset 3, -32
 1228              		.cfi_offset 4, -28
 1229              		.cfi_offset 5, -24
 1230              		.cfi_offset 6, -20
 1231              		.cfi_offset 7, -16
 1232              		.cfi_offset 8, -12
 1233              		.cfi_offset 9, -8
 1234              		.cfi_offset 14, -4
 1235 0004 0E46     		mov	r6, r1
 1236 0006 1546     		mov	r5, r2
 1237 0008 1C46     		mov	r4, r3
 1238              	.LVL183:
  55:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   /* Initialize blkCnt with number of samples */
  58:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   blkCnt = blockSize;
  59:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 84


  60:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   while (blkCnt > 0U)
 1239              		.loc 21 60 0
 1240 000a 10E0     		b	.L92
 1241              	.LVL184:
 1242              	.L93:
  61:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   {
  62:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****     /* C = A * B */
  63:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****     /* Multiply input and store result in destination buffer. */
  65:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 1243              		.loc 21 65 0
 1244 000c 05F10809 		add	r9, r5, #8
 1245              	.LVL185:
 1246 0010 00F10807 		add	r7, r0, #8
 1247              	.LVL186:
 1248 0014 06F10808 		add	r8, r6, #8
 1249              	.LVL187:
 1250 0018 03C8     		ldmia	r0, {r0-r1}
 1251 001a D6E90023 		ldrd	r2, [r6]
 1252 001e FFF7FEFF 		bl	__aeabi_dmul
 1253              	.LVL188:
 1254 0022 C5E90001 		strd	r0, [r5]
  66:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****     /* Decrement loop counter */
  68:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****     blkCnt--;
 1255              		.loc 21 68 0
 1256 0026 013C     		subs	r4, r4, #1
 1257              	.LVL189:
  65:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
 1258              		.loc 21 65 0
 1259 0028 4D46     		mov	r5, r9
 1260 002a 4646     		mov	r6, r8
 1261 002c 3846     		mov	r0, r7
 1262              	.LVL190:
 1263              	.L92:
  60:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   {
 1264              		.loc 21 60 0
 1265 002e 002C     		cmp	r4, #0
 1266 0030 ECD1     		bne	.L93
  69:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c ****   }
  70:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_mult_f64.c **** }
 1267              		.loc 21 71 0
 1268 0032 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1269              		.cfi_endproc
 1270              	.LFE102:
 1271              		.size	arm_mult_f64, .-arm_mult_f64
 1272 0036 00BF     		.section	.text.arm_mult_q15,"ax",%progbits
 1273              		.align	2
 1274              		.global	arm_mult_q15
 1275              		.thumb
 1276              		.thumb_func
 1277              		.type	arm_mult_q15, %function
 1278              	arm_mult_q15:
 1279              	.LFB103:
 1280              		.file 22 ".\\DSP\\Source\\BasicMathFunctions\\arm_mult_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** /* ----------------------------------------------------------------------
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 85


   2:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Title:        arm_mult_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Description:  Q15 vector multiplication
   5:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @addtogroup BasicMult
  37:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @brief         Q15 vector multiplication
  42:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @param[in]     pSrcA      points to first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @param[in]     pSrcB      points to second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** void arm_mult_q15(
  57:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     const q15_t * pSrcA,
  58:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     const q15_t * pSrcB,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 86


  59:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     q15_t * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     q15x8_t vecA, vecB;
  64:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* Compute 8 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     blkCnt = blockSize >> 3;
  67:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          * C = A * B
  71:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          * Multiply the inputs and then store the results in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vecA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vecB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vst1q(pDst, vqdmulhq(vecA, vecB));
  76:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          * Decrement the blockSize loop counter
  78:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          * advance vector source and destination pointers
  82:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         pSrcA  += 8;
  84:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         pSrcB  += 8;
  85:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         pDst   += 8;
  86:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     }
  87:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /*
  88:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****      * tail
  89:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****      */
  90:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     blkCnt = blockSize & 7;
  91:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     if (blkCnt > 0U)
  92:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     {
  93:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  94:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vecA = vld1q(pSrcA);
  95:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vecB = vld1q(pSrcB);
  96:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         vstrhq_p(pDst, vqdmulhq(vecA, vecB), p0);
  97:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     }
  98:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** }
  99:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #else
 101:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** void arm_mult_q15(
 102:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   const q15_t * pSrcA,
 103:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   const q15_t * pSrcB,
 104:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         q15_t * pDst,
 105:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         uint32_t blockSize)
 106:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** {
 1281              		.loc 22 106 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286              	.LVL191:
 1287 0000 E0B4     		push	{r5, r6, r7}
 1288              		.cfi_def_cfa_offset 12
 1289              		.cfi_offset 5, -12
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 87


 1290              		.cfi_offset 6, -8
 1291              		.cfi_offset 7, -4
 1292              	.LVL192:
 107:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 110:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #if defined (ARM_MATH_DSP)
 112:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   q31_t inA1, inA2, inB1, inB2;                  /* Temporary input variables */
 113:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   q15_t out1, out2, out3, out4;                  /* Temporary output variables */
 114:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   q31_t mul1, mul2, mul3, mul4;                  /* Temporary variables */
 115:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 118:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize >> 2U;
 119:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   while (blkCnt > 0U)
 121:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   {
 122:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* C = A * B */
 123:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #if defined (ARM_MATH_DSP)
 125:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* read 2 samples at a time from sourceA */
 126:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     inA1 = read_q15x2_ia (&pSrcA);
 127:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* read 2 samples at a time from sourceB */
 128:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     inB1 = read_q15x2_ia (&pSrcB);
 129:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* read 2 samples at a time from sourceA */
 130:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     inA2 = read_q15x2_ia (&pSrcA);
 131:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* read 2 samples at a time from sourceB */
 132:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     inB2 = read_q15x2_ia (&pSrcB);
 133:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* multiply mul = sourceA * sourceB */
 135:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
 136:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1      ) * (q15_t) (inB1      ));
 137:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB2 >> 16));
 138:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2      ) * (q15_t) (inB2      ));
 139:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* saturate result to 16 bit */
 141:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15, 16);
 142:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15, 16);
 143:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15, 16);
 144:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15, 16);
 145:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* store result to destination */
 147:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 148:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(out2, out1, 16));
 149:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(out4, out3, 16));
 150:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #else
 151:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(out1, out2, 16));
 152:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(out3, out4, 16));
 153:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 154:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #else
 156:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 157:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 158:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 159:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 160:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #endif
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 88


 161:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* Decrement loop counter */
 163:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 164:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   }
 165:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 166:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 167:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize % 0x4U;
 168:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #else
 170:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 171:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   /* Initialize blkCnt with number of samples */
 172:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize;
 173:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 175:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 176:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   while (blkCnt > 0U)
 1293              		.loc 22 176 0
 1294 0002 10E0     		b	.L96
 1295              	.LVL193:
 1296              	.L97:
 177:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   {
 178:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* C = A * B */
 179:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* Multiply inputs and store result in destination buffer. */
 181:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 1297              		.loc 22 181 0
 1298 0004 961C     		adds	r6, r2, #2
 1299              	.LVL194:
 1300              	.LBB26:
 1301 0006 851C     		adds	r5, r0, #2
 1302              	.LVL195:
 1303 0008 B0F90070 		ldrsh	r7, [r0]
 1304 000c 881C     		adds	r0, r1, #2
 1305              	.LVL196:
 1306 000e B1F90010 		ldrsh	r1, [r1]
 1307 0012 01FB07F1 		mul	r1, r1, r7
 1308 0016 C913     		asrs	r1, r1, #15
 1309              	.LVL197:
 1310              	@ 181 ".\DSP\Source\BasicMathFunctions\arm_mult_q15.c" 1
 1311 0018 01F30F01 		ssat r1, #16, r1
 1312              	@ 0 "" 2
 1313              	.LVL198:
 1314              		.thumb
 1315              	.LBE26:
 1316 001c 1180     		strh	r1, [r2]	@ movhi
 1317              	.LVL199:
 182:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 183:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     /* Decrement loop counter */
 184:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 1318              		.loc 22 184 0
 1319 001e 013B     		subs	r3, r3, #1
 1320              	.LVL200:
 181:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 1321              		.loc 22 181 0
 1322 0020 3246     		mov	r2, r6
 1323              	.LBB27:
 1324 0022 0146     		mov	r1, r0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 89


 1325              	.LVL201:
 1326 0024 2846     		mov	r0, r5
 1327              	.LVL202:
 1328              	.L96:
 1329              	.LBE27:
 176:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   {
 1330              		.loc 22 176 0
 1331 0026 002B     		cmp	r3, #0
 1332 0028 ECD1     		bne	.L97
 185:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c ****   }
 186:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** 
 187:.\DSP\Source\BasicMathFunctions/arm_mult_q15.c **** }
 1333              		.loc 22 187 0
 1334 002a E0BC     		pop	{r5, r6, r7}
 1335              		.cfi_restore 7
 1336              		.cfi_restore 6
 1337              		.cfi_restore 5
 1338              		.cfi_def_cfa_offset 0
 1339 002c 7047     		bx	lr
 1340              		.cfi_endproc
 1341              	.LFE103:
 1342              		.size	arm_mult_q15, .-arm_mult_q15
 1343 002e 00BF     		.section	.text.arm_mult_q31,"ax",%progbits
 1344              		.align	2
 1345              		.global	arm_mult_q31
 1346              		.thumb
 1347              		.thumb_func
 1348              		.type	arm_mult_q31, %function
 1349              	arm_mult_q31:
 1350              	.LFB104:
 1351              		.file 23 ".\\DSP\\Source\\BasicMathFunctions\\arm_mult_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Title:        arm_mult_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Description:  Q31 vector multiplication
   5:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  * limitations under the License.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 90


  27:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @addtogroup BasicMult
  37:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @brief         Q31 vector multiplication.
  42:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @param[in]     pSrcA      points to the first input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @param[in]     pSrcB      points to the second input vector.
  44:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @param[out]    pDst       points to the output vector.
  45:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @param[in]     blockSize  number of samples in each vector.
  46:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****                    Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** void arm_mult_q31(
  57:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     const q31_t * pSrcA,
  58:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     const q31_t * pSrcB,
  59:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     q31_t * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     q31x4_t vecA, vecB;
  64:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* Compute 4 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt = blockSize >> 2;
  67:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          * C = A * B
  71:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          * Multiply the inputs and then store the results in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vecA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vecB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vst1q(pDst, vqdmulhq(vecA, vecB));
  76:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          * Decrement the blockSize loop counter
  78:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          * advance vector source and destination pointers
  82:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         pSrcA  += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 91


  84:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         pSrcB  += 4;
  85:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         pDst   += 4;
  86:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     }
  87:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /*
  88:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****      * tail
  89:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****      */
  90:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt = blockSize & 3;
  91:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     if (blkCnt > 0U)
  92:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     {
  93:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  94:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vecA = vld1q(pSrcA);
  95:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vecB = vld1q(pSrcB);
  96:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         vstrwq_p(pDst, vqdmulhq(vecA, vecB), p0);
  97:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     }
  98:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** }
  99:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #else
 101:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** void arm_mult_q31(
 102:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   const q31_t * pSrcA,
 103:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   const q31_t * pSrcB,
 104:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         q31_t * pDst,
 105:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         uint32_t blockSize)
 106:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** {
 1352              		.loc 23 106 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357              	.LVL203:
 1358 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, r10, fp}
 1359              		.cfi_def_cfa_offset 32
 1360              		.cfi_offset 4, -32
 1361              		.cfi_offset 5, -28
 1362              		.cfi_offset 6, -24
 1363              		.cfi_offset 7, -20
 1364              		.cfi_offset 8, -16
 1365              		.cfi_offset 9, -12
 1366              		.cfi_offset 10, -8
 1367              		.cfi_offset 11, -4
 1368              	.LVL204:
 107:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****         q31_t out;                                     /* Temporary output variable */
 109:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 111:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 113:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize >> 2U;
 114:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   while (blkCnt > 0U)
 116:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   {
 117:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 118:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* Multiply inputs and store result in destination buffer. */
 120:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = ((q63_t) *pSrcA++ * *pSrcB++) >> 32;
 121:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 122:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 123:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 92


 124:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = ((q63_t) *pSrcA++ * *pSrcB++) >> 32;
 125:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 126:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 127:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 128:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = ((q63_t) *pSrcA++ * *pSrcB++) >> 32;
 129:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 130:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 131:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = ((q63_t) *pSrcA++ * *pSrcB++) >> 32;
 133:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 134:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 135:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* Decrement loop counter */
 137:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 138:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   }
 139:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 141:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize % 0x4U;
 142:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #else
 144:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   /* Initialize blkCnt with number of samples */
 146:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize;
 147:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 149:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   while (blkCnt > 0U)
 1369              		.loc 23 150 0
 1370 0004 16E0     		b	.L100
 1371              	.LVL205:
 1372              	.L101:
 151:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   {
 152:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 153:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* Multiply inputs and store result in destination buffer. */
 155:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = ((q63_t) *pSrcA++ * *pSrcB++) >> 32;
 1373              		.loc 23 155 0
 1374 0006 061D     		adds	r6, r0, #4
 1375              	.LVL206:
 1376 0008 0468     		ldr	r4, [r0]
 1377 000a 4FEAE479 		asr	r9, r4, #31
 1378 000e 081D     		adds	r0, r1, #4
 1379              	.LVL207:
 1380 0010 0968     		ldr	r1, [r1]
 1381 0012 4FEAE17B 		asr	fp, r1, #31
 1382 0016 04FB0BF7 		mul	r7, r4, fp
 1383 001a A4FB0145 		umull	r4, r5, r4, r1
 1384 001e 01FB0971 		mla	r1, r1, r9, r7
 1385 0022 2944     		add	r1, r1, r5
 1386              	.LVL208:
 1387              	.LBB28:
 156:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 1388              		.loc 23 156 0
 1389              	@ 156 ".\DSP\Source\BasicMathFunctions\arm_mult_q31.c" 1
 1390 0024 01F31E01 		ssat r1, #31, r1
 1391              	@ 0 "" 2
 1392              	.LVL209:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 93


 1393              		.thumb
 1394              	.LBE28:
 157:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 1395              		.loc 23 157 0
 1396 0028 4900     		lsls	r1, r1, #1
 1397              	.LVL210:
 1398 002a 1160     		str	r1, [r2]
 1399              	.LVL211:
 158:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     /* Decrement loop counter */
 160:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 1400              		.loc 23 160 0
 1401 002c 013B     		subs	r3, r3, #1
 1402              	.LVL212:
 157:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out << 1U;
 1403              		.loc 23 157 0
 1404 002e 0432     		adds	r2, r2, #4
 1405              	.LVL213:
 155:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****     out = __SSAT(out, 31);
 1406              		.loc 23 155 0
 1407 0030 0146     		mov	r1, r0
 1408 0032 3046     		mov	r0, r6
 1409              	.LVL214:
 1410              	.L100:
 150:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   {
 1411              		.loc 23 150 0
 1412 0034 002B     		cmp	r3, #0
 1413 0036 E6D1     		bne	.L101
 161:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c ****   }
 162:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_mult_q31.c **** }
 1414              		.loc 23 163 0
 1415 0038 BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp}
 1416              		.cfi_restore 11
 1417              		.cfi_restore 10
 1418              		.cfi_restore 9
 1419              		.cfi_restore 8
 1420              		.cfi_restore 7
 1421              		.cfi_restore 6
 1422              		.cfi_restore 5
 1423              		.cfi_restore 4
 1424              		.cfi_def_cfa_offset 0
 1425 003c 7047     		bx	lr
 1426              		.cfi_endproc
 1427              	.LFE104:
 1428              		.size	arm_mult_q31, .-arm_mult_q31
 1429 003e 00BF     		.section	.text.arm_mult_q7,"ax",%progbits
 1430              		.align	2
 1431              		.global	arm_mult_q7
 1432              		.thumb
 1433              		.thumb_func
 1434              		.type	arm_mult_q7, %function
 1435              	arm_mult_q7:
 1436              	.LFB105:
 1437              		.file 24 ".\\DSP\\Source\\BasicMathFunctions\\arm_mult_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Project:      CMSIS DSP Library
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 94


   3:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Title:        arm_mult_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Description:  Q7 vector multiplication
   5:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @addtogroup BasicMult
  37:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @brief         Q7 vector multiplication
  42:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  57:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     const q7_t * pSrcA,
  58:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     const q7_t * pSrcB,
  59:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     q7_t * pDst,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 95


  60:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     q7x16_t vecA, vecB;
  64:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Compute 16 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt = blockSize >> 4;
  67:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          * C = A * B
  71:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          * Multiply the inputs and then store the results in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vecA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vecB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vst1q(pDst, vqdmulhq(vecA, vecB));
  76:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          * Decrement the blockSize loop counter
  78:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          * advance vector source and destination pointers
  82:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         pSrcA  += 16;
  84:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         pSrcB  += 16;
  85:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         pDst   += 16;
  86:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     }
  87:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /*
  88:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****      * tail
  89:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****      */
  90:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt = blockSize & 0xF;
  91:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     if (blkCnt > 0U)
  92:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     {
  93:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  94:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vecA = vld1q(pSrcA);
  95:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vecB = vld1q(pSrcB);
  96:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         vstrbq_p(pDst, vqdmulhq(vecA, vecB), p0);
  97:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     }
  98:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** }
  99:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #else
 101:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
 102:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   const q7_t * pSrcA,
 103:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   const q7_t * pSrcB,
 104:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         q7_t * pDst,
 105:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         uint32_t blockSize)
 106:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** {
 1438              		.loc 24 106 0
 1439              		.cfi_startproc
 1440              		@ args = 0, pretend = 0, frame = 0
 1441              		@ frame_needed = 0, uses_anonymous_args = 0
 1442              		@ link register save eliminated.
 1443              	.LVL215:
 1444 0000 E0B4     		push	{r5, r6, r7}
 1445              		.cfi_def_cfa_offset 12
 1446              		.cfi_offset 5, -12
 1447              		.cfi_offset 6, -8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 96


 1448              		.cfi_offset 7, -4
 1449              	.LVL216:
 107:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 110:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
 112:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary output variables */
 113:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #endif
 114:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 116:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2U;
 117:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0U)
 119:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   {
 120:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 121:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
 123:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Multiply inputs and store results in temporary variables */
 124:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 125:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 126:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 127:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 128:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 130:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     write_q7x4_ia (&pDst, __PACKq7(out1, out2, out3, out4));
 131:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #else
 132:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 133:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 134:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 135:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 136:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #endif
 137:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Decrement loop counter */
 139:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 140:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   }
 141:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 143:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4U;
 144:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #else
 146:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
 148:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
 149:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 151:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0U)
 1450              		.loc 24 152 0
 1451 0002 10E0     		b	.L104
 1452              	.LVL217:
 1453              	.L105:
 153:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   {
 154:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 155:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Multiply input and store result in destination buffer. */
 157:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 97


 1454              		.loc 24 157 0
 1455 0004 571C     		adds	r7, r2, #1
 1456              	.LVL218:
 1457              	.LBB29:
 1458 0006 451C     		adds	r5, r0, #1
 1459              	.LVL219:
 1460 0008 4E1C     		adds	r6, r1, #1
 1461              	.LVL220:
 1462 000a 90F90000 		ldrsb	r0, [r0]
 1463 000e 91F90010 		ldrsb	r1, [r1]
 1464 0012 01FB00F1 		mul	r1, r1, r0
 1465 0016 C911     		asrs	r1, r1, #7
 1466              	.LVL221:
 1467              	@ 157 ".\DSP\Source\BasicMathFunctions\arm_mult_q7.c" 1
 1468 0018 01F30701 		ssat r1, #8, r1
 1469              	@ 0 "" 2
 1470              	.LVL222:
 1471              		.thumb
 1472              	.LBE29:
 1473 001c 1170     		strb	r1, [r2]
 1474              	.LVL223:
 158:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     /* Decrement loop counter */
 160:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 1475              		.loc 24 160 0
 1476 001e 013B     		subs	r3, r3, #1
 1477              	.LVL224:
 157:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 1478              		.loc 24 157 0
 1479 0020 3A46     		mov	r2, r7
 1480              	.LBB30:
 1481 0022 3146     		mov	r1, r6
 1482              	.LVL225:
 1483 0024 2846     		mov	r0, r5
 1484              	.LVL226:
 1485              	.L104:
 1486              	.LBE30:
 152:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   {
 1487              		.loc 24 152 0
 1488 0026 002B     		cmp	r3, #0
 1489 0028 ECD1     		bne	.L105
 161:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c ****   }
 162:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_mult_q7.c **** }
 1490              		.loc 24 163 0
 1491 002a E0BC     		pop	{r5, r6, r7}
 1492              		.cfi_restore 7
 1493              		.cfi_restore 6
 1494              		.cfi_restore 5
 1495              		.cfi_def_cfa_offset 0
 1496 002c 7047     		bx	lr
 1497              		.cfi_endproc
 1498              	.LFE105:
 1499              		.size	arm_mult_q7, .-arm_mult_q7
 1500 002e 00BF     		.section	.text.arm_negate_f32,"ax",%progbits
 1501              		.align	2
 1502              		.global	arm_negate_f32
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 98


 1503              		.thumb
 1504              		.thumb_func
 1505              		.type	arm_negate_f32, %function
 1506              	arm_negate_f32:
 1507              	.LFB106:
 1508              		.file 25 ".\\DSP\\Source\\BasicMathFunctions\\arm_negate_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Title:        arm_negate_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Description:  Negates floating-point vectors
   5:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @defgroup BasicNegate Vector Negate
  37:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   Negates the elements of a vector.
  39:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   <pre>
  41:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****       pDst[n] = -pSrc[n],   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   The functions support in-place computation allowing the source and
  45:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   destination pointers to reference the same memory buffer.
  46:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  47:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /**
  50:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @addtogroup BasicNegate
  51:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @{
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 99


  52:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** /**
  55:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @brief         Negates the elements of a floating-point vector.
  56:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @param[in]     pSrc       points to input vector.
  57:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @param[out]    pDst       points to output vector.
  58:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  59:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   @return        none
  60:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****  */
  61:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  62:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  63:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #include "arm_helium_utils.h"
  65:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** void arm_negate_f32(
  67:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   const float32_t * pSrc,
  68:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         float32_t * pDst,
  69:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         uint32_t blockSize)
  70:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** {
  71:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  72:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     f32x4_t vec1;
  73:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     f32x4_t res;
  74:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  75:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Compute 4 outputs at a time */
  77:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt = blockSize >> 2U;
  78:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     while (blkCnt > 0U)
  79:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     {
  80:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* C = |A| */
  81:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* Calculate absolute values and then store the results in the destination buffer. */
  83:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         vec1 = vld1q(pSrc);
  84:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         res = vnegq(vec1);
  85:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         vst1q(pDst, res);
  86:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  87:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* Increment pointers */
  88:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         pSrc += 4;
  89:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         pDst += 4;
  90:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         
  91:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* Decrement the loop counter */
  92:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         blkCnt--;
  93:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     }
  94:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Tail */
  96:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt = blockSize & 0x3;
  97:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     if (blkCnt > 0U)
  98:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     {
  99:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****       /* C = |A| */
 100:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 101:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****       vec1 = vld1q((float32_t const *) pSrc);
 102:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****       vstrwq_p(pDst, vnegq(vec1), p0);
 103:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     }
 104:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 105:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** }
 106:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #else
 108:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** void arm_negate_f32(
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 100


 109:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   const float32_t * pSrc,
 110:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         float32_t * pDst,
 111:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         uint32_t blockSize)
 112:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** {
 1509              		.loc 25 112 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514              	.LVL227:
 113:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 114:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #if defined(ARM_MATH_NEON_EXPERIMENTAL) && !defined(ARM_MATH_AUTOVECTORIZE)
 116:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     f32x4_t vec1;
 117:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     f32x4_t res;
 118:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Compute 4 outputs at a time */
 120:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt = blockSize >> 2U;
 121:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     while (blkCnt > 0U)
 123:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     {
 124:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* C = -A */
 125:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 126:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     	/* Negate and then store the results in the destination buffer. */
 127:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         vec1 = vld1q_f32(pSrc);
 128:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         res = vnegq_f32(vec1);
 129:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         vst1q_f32(pDst, res);
 130:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* Increment pointers */
 132:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         pSrc += 4;
 133:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         pDst += 4;
 134:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         
 135:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         /* Decrement the loop counter */
 136:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****         blkCnt--;
 137:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     }
 138:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Tail */
 140:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt = blockSize & 0x3;
 141:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #else
 143:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 144:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 146:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize >> 2U;
 147:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   while (blkCnt > 0U)
 149:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   {
 150:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* C = -A */
 151:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Negate and store result in destination buffer. */
 153:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 154:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 156:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 158:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 101


 160:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Decrement loop counter */
 162:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 163:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   }
 164:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 166:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize % 0x4U;
 167:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #else
 169:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 170:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   /* Initialize blkCnt with number of samples */
 171:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize;
 172:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 174:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** #endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */
 175:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 176:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   while (blkCnt > 0U)
 1515              		.loc 25 176 0
 1516 0000 06E0     		b	.L108
 1517              	.LVL228:
 1518              	.L109:
 177:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   {
 178:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* C = -A */
 179:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Negate and store result in destination buffer. */
 181:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 1519              		.loc 25 181 0
 1520 0002 0368     		ldr	r3, [r0]	@ float
 1521 0004 03F10043 		add	r3, r3, #-2147483648
 1522 0008 0B60     		str	r3, [r1]	@ float
 182:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 183:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     /* Decrement loop counter */
 184:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 1523              		.loc 25 184 0
 1524 000a 013A     		subs	r2, r2, #1
 1525              	.LVL229:
 181:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 1526              		.loc 25 181 0
 1527 000c 0431     		adds	r1, r1, #4
 1528              	.LVL230:
 1529 000e 0430     		adds	r0, r0, #4
 1530              	.LVL231:
 1531              	.L108:
 176:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   {
 1532              		.loc 25 176 0
 1533 0010 002A     		cmp	r2, #0
 1534 0012 F6D1     		bne	.L109
 185:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c ****   }
 186:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** 
 187:.\DSP\Source\BasicMathFunctions/arm_negate_f32.c **** }
 1535              		.loc 25 187 0
 1536 0014 7047     		bx	lr
 1537              		.cfi_endproc
 1538              	.LFE106:
 1539              		.size	arm_negate_f32, .-arm_negate_f32
 1540 0016 00BF     		.section	.text.arm_negate_f64,"ax",%progbits
 1541              		.align	2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 102


 1542              		.global	arm_negate_f64
 1543              		.thumb
 1544              		.thumb_func
 1545              		.type	arm_negate_f64, %function
 1546              	arm_negate_f64:
 1547              	.LFB107:
 1548              		.file 26 ".\\DSP\\Source\\BasicMathFunctions\\arm_negate_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Title:        arm_negate_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Description:  Negates floating-point vectors
   5:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @addtogroup BasicNegate
  37:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @brief         Negates the elements of a floating-point vector.
  42:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @param[in]     pSrc       points to input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @param[out]    pDst       points to output vector.
  44:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @param[in]     blockSize  number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** void arm_negate_f64(
  49:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   const float64_t * pSrc,
  50:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****         float64_t * pDst,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 103


  51:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****         uint32_t blockSize)
  52:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** {
 1549              		.loc 26 52 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554              	.LVL232:
 1555 0000 30B4     		push	{r4, r5}
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 4, -8
 1558              		.cfi_offset 5, -4
 1559              	.LVL233:
  53:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  54:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   /* Initialize blkCnt with number of samples */
  56:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   blkCnt = blockSize;
  57:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   while (blkCnt > 0U)
 1560              		.loc 26 58 0
 1561 0002 08E0     		b	.L111
 1562              	.LVL234:
 1563              	.L112:
  59:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   {
  60:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****     /* C = -A */
  61:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  62:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****     /* Negate and store result in destination buffer. */
  63:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****     *pDst++ = -*pSrc++;
 1564              		.loc 26 63 0
 1565 0004 4368     		ldr	r3, [r0, #4]
 1566 0006 0468     		ldr	r4, [r0]
 1567 0008 03F10045 		add	r5, r3, #-2147483648
 1568 000c C1E90045 		strd	r4, [r1]
  64:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****     /* Decrement loop counter */
  66:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****     blkCnt--;
 1569              		.loc 26 66 0
 1570 0010 013A     		subs	r2, r2, #1
 1571              	.LVL235:
  63:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
 1572              		.loc 26 63 0
 1573 0012 0831     		adds	r1, r1, #8
 1574              	.LVL236:
 1575 0014 0830     		adds	r0, r0, #8
 1576              	.LVL237:
 1577              	.L111:
  58:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   {
 1578              		.loc 26 58 0
 1579 0016 002A     		cmp	r2, #0
 1580 0018 F4D1     		bne	.L112
  67:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c ****   }
  68:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_negate_f64.c **** }
 1581              		.loc 26 69 0
 1582 001a 30BC     		pop	{r4, r5}
 1583              		.cfi_restore 5
 1584              		.cfi_restore 4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 104


 1585              		.cfi_def_cfa_offset 0
 1586 001c 7047     		bx	lr
 1587              		.cfi_endproc
 1588              	.LFE107:
 1589              		.size	arm_negate_f64, .-arm_negate_f64
 1590 001e 00BF     		.section	.text.arm_negate_q15,"ax",%progbits
 1591              		.align	2
 1592              		.global	arm_negate_q15
 1593              		.thumb
 1594              		.thumb_func
 1595              		.type	arm_negate_q15, %function
 1596              	arm_negate_q15:
 1597              	.LFB108:
 1598              		.file 27 ".\\DSP\\Source\\BasicMathFunctions\\arm_negate_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Title:        arm_negate_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Description:  Negates Q15 vectors
   5:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @addtogroup BasicNegate
  37:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @brief         Negates the elements of a Q15 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @param[in]     pSrc       points to the input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @param[out]    pDst       points to the output vector.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 105


  44:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @param[in]     blockSize  number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @par           Conditions for optimum performance
  48:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****                    Input and output buffers should be aligned by 32-bit
  49:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****                    The function uses saturating arithmetic.
  51:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****                    The Q15 value -1 (0x8000) is saturated to the maximum allowable positive value 0
  52:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** void arm_negate_q15(
  58:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     const q15_t  * pSrc,
  59:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     q15_t  * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     q15x8_t vecSrc;
  64:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* Compute 8 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     blkCnt = blockSize >> 3;
  67:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          * C = -A
  71:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          * Negate and then store the results in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         vecSrc = vld1q(pSrc);
  74:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         vst1q(pDst, vqnegq(vecSrc));
  75:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          * Decrement the blockSize loop counter
  77:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          */
  78:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         blkCnt--;
  79:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         /*
  80:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          * advance vector source and destination pointers
  81:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****          */
  82:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         pSrc += 8;
  83:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         pDst += 8;
  84:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /*
  86:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****      * tail
  87:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****      */
  88:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     blkCnt = blockSize & 7;
  89:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         vecSrc = vld1q(pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         vstrhq_p(pDst, vqnegq(vecSrc), p0);
  94:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     }
  95:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** }
  96:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
  97:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #else
  98:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** void arm_negate_q15(
  99:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   const q15_t * pSrc,
 100:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         q15_t * pDst,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 106


 101:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         uint32_t blockSize)
 102:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** {
 1599              		.loc 27 102 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604              	.LVL238:
 1605 0000 30B4     		push	{r4, r5}
 1606              		.cfi_def_cfa_offset 8
 1607              		.cfi_offset 4, -8
 1608              		.cfi_offset 5, -4
 1609              	.LVL239:
 103:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 104:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****         q15_t in;                                      /* Temporary input variable */
 105:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 107:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #if defined (ARM_MATH_DSP)
 109:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   q31_t in1;                                    /* Temporary input variables */
 110:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #endif
 111:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 113:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   blkCnt = blockSize >> 2U;
 114:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   while (blkCnt > 0U)
 116:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   {
 117:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* C = -A */
 118:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #if defined (ARM_MATH_DSP)
 120:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* Negate and store result in destination buffer (2 samples at a time). */
 121:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in1 = read_q15x2_ia (&pSrc);
 122:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     write_q15x2_ia (&pDst, __QSUB16(0, in1));
 123:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in1 = read_q15x2_ia (&pSrc);
 125:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     write_q15x2_ia (&pDst, __QSUB16(0, in1));
 126:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #else
 127:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in = *pSrc++;
 128:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 129:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in = *pSrc++;
 131:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 132:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in = *pSrc++;
 134:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 135:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in = *pSrc++;
 137:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 138:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #endif
 139:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* Decrement loop counter */
 141:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     blkCnt--;
 142:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   }
 143:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 145:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   blkCnt = blockSize % 0x4U;
 146:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 107


 147:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #else
 148:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   /* Initialize blkCnt with number of samples */
 150:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   blkCnt = blockSize;
 151:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 153:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   while (blkCnt > 0U)
 1610              		.loc 27 154 0
 1611 0002 0FE0     		b	.L115
 1612              	.LVL240:
 1613              	.L117:
 155:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   {
 156:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* C = -A */
 157:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* Negate and store result in destination buffer. */
 159:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     in = *pSrc++;
 1614              		.loc 27 159 0
 1615 0004 841C     		adds	r4, r0, #2
 1616              	.LVL241:
 1617 0006 0388     		ldrh	r3, [r0]
 1618              	.LVL242:
 160:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 1619              		.loc 27 160 0
 1620 0008 881C     		adds	r0, r1, #2
 1621              	.LVL243:
 1622 000a 1DB2     		sxth	r5, r3
 1623 000c 15F5004F 		cmn	r5, #32768
 1624 0010 02D0     		beq	.L118
 1625              		.loc 27 160 0 is_stmt 0 discriminator 1
 1626 0012 5B42     		negs	r3, r3
 1627              	.LVL244:
 1628 0014 9BB2     		uxth	r3, r3
 1629 0016 01E0     		b	.L116
 1630              	.LVL245:
 1631              	.L118:
 1632              		.loc 27 160 0
 1633 0018 47F6FF73 		movw	r3, #32767
 1634              	.LVL246:
 1635              	.L116:
 1636              		.loc 27 160 0 discriminator 4
 1637 001c 0B80     		strh	r3, [r1]	@ movhi
 161:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     /* Decrement loop counter */
 163:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     blkCnt--;
 1638              		.loc 27 163 0 is_stmt 1 discriminator 4
 1639 001e 013A     		subs	r2, r2, #1
 1640              	.LVL247:
 160:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 1641              		.loc 27 160 0 discriminator 4
 1642 0020 0146     		mov	r1, r0
 159:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****     *pDst++ = (in == (q15_t) 0x8000) ? (q15_t) 0x7fff : -in;
 1643              		.loc 27 159 0 discriminator 4
 1644 0022 2046     		mov	r0, r4
 1645              	.LVL248:
 1646              	.L115:
 154:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 108


 1647              		.loc 27 154 0
 1648 0024 002A     		cmp	r2, #0
 1649 0026 EDD1     		bne	.L117
 164:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c ****   }
 165:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** 
 166:.\DSP\Source\BasicMathFunctions/arm_negate_q15.c **** }
 1650              		.loc 27 166 0
 1651 0028 30BC     		pop	{r4, r5}
 1652              		.cfi_restore 5
 1653              		.cfi_restore 4
 1654              		.cfi_def_cfa_offset 0
 1655 002a 7047     		bx	lr
 1656              		.cfi_endproc
 1657              	.LFE108:
 1658              		.size	arm_negate_q15, .-arm_negate_q15
 1659              		.section	.text.arm_negate_q31,"ax",%progbits
 1660              		.align	2
 1661              		.global	arm_negate_q31
 1662              		.thumb
 1663              		.thumb_func
 1664              		.type	arm_negate_q31, %function
 1665              	arm_negate_q31:
 1666              	.LFB109:
 1667              		.file 28 ".\\DSP\\Source\\BasicMathFunctions\\arm_negate_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Title:        arm_negate_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Description:  Negates Q31 vectors
   5:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 109


  34:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @addtogroup BasicNegate
  37:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @brief         Negates the elements of a Q31 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @param[in]     pSrc       points to the input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @param[out]    pDst       points to the output vector.
  44:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @param[in]     blockSize   number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****                    The Q31 value -1 (0x80000000) is saturated to the maximum allowable positive val
  50:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** void arm_negate_q31(
  57:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     const q31_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     q31_t * pDst,
  59:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     uint32_t blockSize)
  60:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** {
  61:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  62:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     q31x4_t vecSrc;
  63:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* Compute 4 outputs at a time */
  65:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     blkCnt = blockSize >> 2;
  66:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     while (blkCnt > 0U)
  67:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     {
  68:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         /*
  69:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          * C = -A
  70:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          * Negate and then store the results in the destination buffer.
  71:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          */
  72:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         vecSrc = vld1q(pSrc);
  73:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         vst1q(pDst, vqnegq(vecSrc));
  74:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         /*
  75:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          * Decrement the blockSize loop counter
  76:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          */
  77:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         blkCnt--;
  78:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          * advance vector source and destination pointers
  80:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         pSrc += 4;
  82:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         pDst += 4;
  83:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     }
  84:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /*
  85:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****      * tail
  86:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****      */
  87:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     blkCnt = blockSize & 3;
  88:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     if (blkCnt > 0U)
  89:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     {
  90:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 110


  91:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         vecSrc = vld1q(pSrc);
  92:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         vstrwq_p(pDst, vqnegq(vecSrc), p0);
  93:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     }
  94:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** }
  95:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
  96:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
  97:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** void arm_negate_q31(
  98:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   const q31_t * pSrc,
  99:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         q31_t * pDst,
 100:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         uint32_t blockSize)
 101:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** {
 1668              		.loc 28 101 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
 1673              	.LVL249:
 1674 0000 10B4     		push	{r4}
 1675              		.cfi_def_cfa_offset 4
 1676              		.cfi_offset 4, -4
 1677              	.LVL250:
 102:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 103:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****         q31_t in;                                      /* Temporary input variable */
 104:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 105:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 106:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 108:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   blkCnt = blockSize >> 2U;
 109:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   while (blkCnt > 0U)
 111:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   {
 112:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* C = -A */
 113:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* Negate and store result in destination buffer. */
 115:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     in = *pSrc++;
 116:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
 117:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = __QSUB(0, in);
 118:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 119:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 120:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
 121:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     in = *pSrc++;
 123:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
 124:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = __QSUB(0, in);
 125:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 126:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 127:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
 128:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     in = *pSrc++;
 130:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
 131:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = __QSUB(0, in);
 132:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 133:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 134:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
 135:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     in = *pSrc++;
 137:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 111


 138:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = __QSUB(0, in);
 139:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 140:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 141:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
 142:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* Decrement loop counter */
 144:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     blkCnt--;
 145:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   }
 146:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 148:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   blkCnt = blockSize % 0x4U;
 149:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 151:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   /* Initialize blkCnt with number of samples */
 153:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   blkCnt = blockSize;
 154:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 156:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   while (blkCnt > 0U)
 1678              		.loc 28 157 0
 1679 0002 0DE0     		b	.L121
 1680              	.LVL251:
 1681              	.L123:
 158:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   {
 159:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* C = -A */
 160:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* Negate and store result in destination buffer. */
 162:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     in = *pSrc++;
 1682              		.loc 28 162 0
 1683 0004 041D     		adds	r4, r0, #4
 1684              	.LVL252:
 1685 0006 0368     		ldr	r3, [r0]
 1686              	.LVL253:
 163:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
 164:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = __QSUB(0, in);
 165:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #else
 166:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     *pDst++ = (in == INT32_MIN) ? INT32_MAX : -in;
 1687              		.loc 28 166 0
 1688 0008 081D     		adds	r0, r1, #4
 1689              	.LVL254:
 1690 000a B3F1004F 		cmp	r3, #-2147483648
 1691 000e 01D0     		beq	.L124
 1692              		.loc 28 166 0 is_stmt 0 discriminator 1
 1693 0010 5B42     		negs	r3, r3
 1694              	.LVL255:
 1695 0012 01E0     		b	.L122
 1696              	.LVL256:
 1697              	.L124:
 1698              		.loc 28 166 0
 1699 0014 6FF00043 		mvn	r3, #-2147483648
 1700              	.LVL257:
 1701              	.L122:
 1702              		.loc 28 166 0 discriminator 4
 1703 0018 0B60     		str	r3, [r1]
 1704              	.LVL258:
 167:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 112


 168:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     /* Decrement loop counter */
 170:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****     blkCnt--;
 1705              		.loc 28 170 0 is_stmt 1 discriminator 4
 1706 001a 013A     		subs	r2, r2, #1
 1707              	.LVL259:
 166:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #endif
 1708              		.loc 28 166 0 discriminator 4
 1709 001c 0146     		mov	r1, r0
 162:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** #if defined (ARM_MATH_DSP)
 1710              		.loc 28 162 0 discriminator 4
 1711 001e 2046     		mov	r0, r4
 1712              	.LVL260:
 1713              	.L121:
 157:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   {
 1714              		.loc 28 157 0
 1715 0020 002A     		cmp	r2, #0
 1716 0022 EFD1     		bne	.L123
 171:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c ****   }
 172:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_negate_q31.c **** }
 1717              		.loc 28 173 0
 1718 0024 5DF8044B 		ldr	r4, [sp], #4
 1719              		.cfi_restore 4
 1720              		.cfi_def_cfa_offset 0
 1721 0028 7047     		bx	lr
 1722              		.cfi_endproc
 1723              	.LFE109:
 1724              		.size	arm_negate_q31, .-arm_negate_q31
 1725 002a 00BF     		.section	.text.arm_negate_q7,"ax",%progbits
 1726              		.align	2
 1727              		.global	arm_negate_q7
 1728              		.thumb
 1729              		.thumb_func
 1730              		.type	arm_negate_q7, %function
 1731              	arm_negate_q7:
 1732              	.LFB110:
 1733              		.file 29 ".\\DSP\\Source\\BasicMathFunctions\\arm_negate_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Title:        arm_negate_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Description:  Negates Q7 vectors
   5:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 113


  20:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @addtogroup BasicNegate
  37:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @brief         Negates the elements of a Q7 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @param[in]     pSrc       points to the input vector.
  43:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @param[out]    pDst       points to the output vector.
  44:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @param[in]     blockSize   number of samples in each vector.
  45:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   @par           Scaling and Overflow Behavior
  48:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****                    The function uses saturating arithmetic.
  49:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****                    The Q7 value -1 (0x80) is saturated to the maximum allowable positive value 0x7F
  50:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  52:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #include "arm_helium_utils.h"
  54:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** void arm_negate_q7(
  56:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     const q7_t   * pSrc,
  57:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     q7_t   * pDst,
  58:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     uint32_t blockSize)
  59:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** {
  60:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  61:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     q7x16_t vecSrc;
  62:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* Compute 16 outputs at a time */
  64:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     blkCnt = blockSize >> 4;
  65:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     while (blkCnt > 0U)
  66:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     {
  67:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         /*
  68:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          * C = -A
  69:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          * Negate and then store the results in the destination buffer.
  70:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          */
  71:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         vecSrc = vld1q(pSrc);
  72:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         vst1q(pDst, vqnegq(vecSrc));
  73:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         /*
  74:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          * Decrement the blockSize loop counter
  75:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          */
  76:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         blkCnt--;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 114


  77:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         /*
  78:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          * advance vector source and destination pointers
  79:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****          */
  80:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         pSrc += 16;
  81:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         pDst += 16;
  82:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     }
  83:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /*
  84:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****      * tail
  85:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****      */
  86:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     blkCnt = blockSize & 0xF;
  87:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     if (blkCnt > 0U)
  88:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     {
  89:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  90:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         vecSrc = vld1q(pSrc);
  91:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         vstrbq_p(pDst, vqnegq(vecSrc), p0);
  92:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     }
  93:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** }
  94:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #else
  96:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** void arm_negate_q7(
  97:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   const q7_t * pSrc,
  98:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         q7_t * pDst,
  99:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         uint32_t blockSize)
 100:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** {
 1734              		.loc 29 100 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
 1739              	.LVL261:
 1740 0000 30B4     		push	{r4, r5}
 1741              		.cfi_def_cfa_offset 8
 1742              		.cfi_offset 4, -8
 1743              		.cfi_offset 5, -4
 1744              	.LVL262:
 101:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 102:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****         q7_t in;                                       /* Temporary input variable */
 103:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 104:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 105:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #if defined (ARM_MATH_DSP)
 107:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   q31_t in1;                                    /* Temporary input variable */
 108:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #endif
 109:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 111:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   blkCnt = blockSize >> 2U;
 112:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   while (blkCnt > 0U)
 114:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   {
 115:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* C = -A */
 116:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #if defined (ARM_MATH_DSP)
 118:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* Negate and store result in destination buffer (4 samples at a time). */
 119:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in1 = read_q7x4_ia (&pSrc);
 120:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     write_q7x4_ia (&pDst, __QSUB8(0, in1));
 121:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #else
 122:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in = *pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 115


 123:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (in == (q7_t) 0x80) ? (q7_t) 0x7f : -in;
 124:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in = *pSrc++;
 126:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (in == (q7_t) 0x80) ? (q7_t) 0x7f : -in;
 127:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 128:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in = *pSrc++;
 129:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (in == (q7_t) 0x80) ? (q7_t) 0x7f : -in;
 130:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in = *pSrc++;
 132:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (in == (q7_t) 0x80) ? (q7_t) 0x7f : -in;
 133:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #endif
 134:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 135:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* Decrement loop counter */
 136:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     blkCnt--;
 137:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   }
 138:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 140:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   blkCnt = blockSize % 0x4U;
 141:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #else
 143:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   /* Initialize blkCnt with number of samples */
 145:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   blkCnt = blockSize;
 146:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 148:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   while (blkCnt > 0U)
 1745              		.loc 29 149 0
 1746 0002 0EE0     		b	.L127
 1747              	.LVL263:
 1748              	.L129:
 150:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   {
 151:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* C = -A */
 152:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* Negate and store result in destination buffer. */
 154:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     in = *pSrc++;
 1749              		.loc 29 154 0
 1750 0004 441C     		adds	r4, r0, #1
 1751              	.LVL264:
 1752 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1753              	.LVL265:
 155:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #if defined (ARM_MATH_DSP)
 157:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (q7_t) __QSUB8(0, in);
 158:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #else
 159:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     *pDst++ = (in == (q7_t) 0x80) ? (q7_t) 0x7f : -in;
 1754              		.loc 29 159 0
 1755 0008 481C     		adds	r0, r1, #1
 1756              	.LVL266:
 1757 000a 5DB2     		sxtb	r5, r3
 1758 000c 15F1800F 		cmn	r5, #128
 1759 0010 02D0     		beq	.L130
 1760              		.loc 29 159 0 is_stmt 0 discriminator 1
 1761 0012 5B42     		negs	r3, r3
 1762              	.LVL267:
 1763 0014 DBB2     		uxtb	r3, r3
 1764 0016 00E0     		b	.L128
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 116


 1765              	.LVL268:
 1766              	.L130:
 1767              		.loc 29 159 0
 1768 0018 7F23     		movs	r3, #127
 1769              	.LVL269:
 1770              	.L128:
 1771              		.loc 29 159 0 discriminator 4
 1772 001a 0B70     		strb	r3, [r1]
 160:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #endif
 161:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     /* Decrement loop counter */
 163:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****     blkCnt--;
 1773              		.loc 29 163 0 is_stmt 1 discriminator 4
 1774 001c 013A     		subs	r2, r2, #1
 1775              	.LVL270:
 159:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** #endif
 1776              		.loc 29 159 0 discriminator 4
 1777 001e 0146     		mov	r1, r0
 154:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 1778              		.loc 29 154 0 discriminator 4
 1779 0020 2046     		mov	r0, r4
 1780              	.LVL271:
 1781              	.L127:
 149:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   {
 1782              		.loc 29 149 0
 1783 0022 002A     		cmp	r2, #0
 1784 0024 EED1     		bne	.L129
 164:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c ****   }
 165:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** 
 166:.\DSP\Source\BasicMathFunctions/arm_negate_q7.c **** }
 1785              		.loc 29 166 0
 1786 0026 30BC     		pop	{r4, r5}
 1787              		.cfi_restore 5
 1788              		.cfi_restore 4
 1789              		.cfi_def_cfa_offset 0
 1790 0028 7047     		bx	lr
 1791              		.cfi_endproc
 1792              	.LFE110:
 1793              		.size	arm_negate_q7, .-arm_negate_q7
 1794 002a 00BF     		.section	.text.arm_not_u16,"ax",%progbits
 1795              		.align	2
 1796              		.global	arm_not_u16
 1797              		.thumb
 1798              		.thumb_func
 1799              		.type	arm_not_u16, %function
 1800              	arm_not_u16:
 1801              	.LFB111:
 1802              		.file 30 ".\\DSP\\Source\\BasicMathFunctions\\arm_not_u16.c"
   1:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Title:        arm_not_u16.c
   4:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Description:  uint16_t bitwise NOT
   5:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Target Processor: Cortex-M and Cortex-A cores
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 117


  10:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @defgroup Not Vector bitwise NOT
  37:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   Compute the logical bitwise NOT.
  39:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   There are separate functions for uint32_t, uint16_t, and uint8_t data types.
  41:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  */
  42:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  43:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /**
  44:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @addtogroup Not
  45:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @{
  46:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** /**
  49:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @brief         Compute the logical bitwise NOT of a fixed-point vector.
  50:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @param[in]     pSrc       points to input vector 
  51:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @param[out]    pDst       points to output vector
  52:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @param[in]     blockSize  number of samples in each vector
  53:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****   @return        none
  54:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****  */
  55:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** void arm_not_u16(
  57:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     const uint16_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****           uint16_t * pDst,
  59:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****           uint32_t blockSize)
  60:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** {
 1803              		.loc 30 60 0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              		@ link register save eliminated.
 1808              	.LVL272:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 118


  61:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     uint32_t blkCnt;      /* Loop counter */
  62:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  64:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     uint16x8_t vecSrc;
  65:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     /* Compute 8 outputs at a time */
  67:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     blkCnt = blockSize >> 3;
  68:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         vecSrc = vld1q(pSrc);
  72:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         vst1q(pDst, vmvnq_u16(vecSrc) );
  74:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  75:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         pSrc += 8;
  76:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         pDst += 8;
  77:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         /* Decrement the loop counter */
  79:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     }
  81:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     /* Tail */
  83:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     blkCnt = blockSize & 7;
  84:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  85:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     if (blkCnt > 0U)
  86:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     {
  87:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  88:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         vecSrc = vld1q(pSrc);
  89:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         vstrhq_p(pDst, vmvnq_u16(vecSrc), p0);
  90:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     }
  91:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #else
  92:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  93:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     uint16x8_t inV;
  94:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     /* Compute 8 outputs at a time */
  96:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     blkCnt = blockSize >> 3U;
  97:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     while (blkCnt > 0U)
  99:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     {
 100:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         inV = vld1q_u16(pSrc);
 101:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         vst1q_u16(pDst, vmvnq_u16(inV) );
 103:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 104:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         pSrc += 8;
 105:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         pDst += 8;
 106:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         /* Decrement the loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         blkCnt--;
 109:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     /* Tail */
 112:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     blkCnt = blockSize & 7;
 113:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #else
 114:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     /* Initialize blkCnt with number of samples */
 115:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     blkCnt = blockSize;
 116:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #endif
 117:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 119


 118:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     while (blkCnt > 0U)
 1809              		.loc 30 118 0
 1810 0000 05E0     		b	.L133
 1811              	.LVL273:
 1812              	.L134:
 119:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     {
 120:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         *pDst++ = ~(*pSrc++);
 1813              		.loc 30 120 0
 1814 0002 0388     		ldrh	r3, [r0]
 1815 0004 DB43     		mvns	r3, r3
 1816 0006 0B80     		strh	r3, [r1]	@ movhi
 121:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         /* Decrement the loop counter */
 123:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****         blkCnt--;
 1817              		.loc 30 123 0
 1818 0008 013A     		subs	r2, r2, #1
 1819              	.LVL274:
 120:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** 
 1820              		.loc 30 120 0
 1821 000a 0231     		adds	r1, r1, #2
 1822              	.LVL275:
 1823 000c 0230     		adds	r0, r0, #2
 1824              	.LVL276:
 1825              	.L133:
 118:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     {
 1826              		.loc 30 118 0
 1827 000e 002A     		cmp	r2, #0
 1828 0010 F7D1     		bne	.L134
 124:.\DSP\Source\BasicMathFunctions/arm_not_u16.c ****     }
 125:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** #endif /* if defined(ARM_MATH_MVEI) */
 126:.\DSP\Source\BasicMathFunctions/arm_not_u16.c **** }
 1829              		.loc 30 126 0
 1830 0012 7047     		bx	lr
 1831              		.cfi_endproc
 1832              	.LFE111:
 1833              		.size	arm_not_u16, .-arm_not_u16
 1834              		.section	.text.arm_not_u32,"ax",%progbits
 1835              		.align	2
 1836              		.global	arm_not_u32
 1837              		.thumb
 1838              		.thumb_func
 1839              		.type	arm_not_u32, %function
 1840              	arm_not_u32:
 1841              	.LFB112:
 1842              		.file 31 ".\\DSP\\Source\\BasicMathFunctions\\arm_not_u32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Title:        arm_not_u32.c
   4:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Description:  uint32_t bitwise NOT
   5:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 120


  13:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @addtogroup Not
  37:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @brief         Compute the logical bitwise NOT of a fixed-point vector.
  42:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @param[in]     pSrc       points to input vector 
  43:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @param[out]    pDst       points to output vector
  44:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** void arm_not_u32(
  49:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     const uint32_t * pSrc,
  50:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****           uint32_t * pDst,
  51:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****           uint32_t blockSize)
  52:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** {
 1843              		.loc 31 52 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
 1848              	.LVL277:
  53:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     uint32_t blkCnt;      /* Loop counter */
  54:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  56:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     uint32x4_t vecSrc;
  57:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     /* Compute 8 outputs at a time */
  59:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     blkCnt = blockSize >> 2;
  60:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     while (blkCnt > 0U)
  62:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     {
  63:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         vecSrc = vld1q(pSrc);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 121


  64:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         vst1q(pDst, vmvnq_u32(vecSrc) );
  66:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         pSrc += 4;
  68:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         pDst += 4;
  69:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         /* Decrement the loop counter */
  71:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         blkCnt--;
  72:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     }
  73:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     /* Tail */
  75:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     blkCnt = blockSize & 3;
  76:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     if (blkCnt > 0U)
  78:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     {
  79:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  80:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         vecSrc = vld1q(pSrc);
  81:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         vstrwq_p(pDst, vmvnq_u32(vecSrc), p0);
  82:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     }
  83:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #else
  84:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  85:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     uint32x4_t inV;
  86:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  87:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     /* Compute 4 outputs at a time */
  88:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     blkCnt = blockSize >> 2U;
  89:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     while (blkCnt > 0U)
  91:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     {
  92:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         inV = vld1q_u32(pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  94:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         vst1q_u32(pDst, vmvnq_u32(inV) );
  95:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  96:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         pSrc += 4;
  97:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         pDst += 4;
  98:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
  99:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         /* Decrement the loop counter */
 100:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         blkCnt--;
 101:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     /* Tail */
 104:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     blkCnt = blockSize & 3;
 105:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #else
 106:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     /* Initialize blkCnt with number of samples */
 107:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     blkCnt = blockSize;
 108:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #endif
 109:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     while (blkCnt > 0U)
 1849              		.loc 31 110 0
 1850 0000 05E0     		b	.L136
 1851              	.LVL278:
 1852              	.L137:
 111:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     {
 112:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         *pDst++ = ~(*pSrc++);
 1853              		.loc 31 112 0
 1854 0002 0368     		ldr	r3, [r0]
 1855 0004 DB43     		mvns	r3, r3
 1856 0006 0B60     		str	r3, [r1]
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 122


 113:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         /* Decrement the loop counter */
 115:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****         blkCnt--;
 1857              		.loc 31 115 0
 1858 0008 013A     		subs	r2, r2, #1
 1859              	.LVL279:
 112:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** 
 1860              		.loc 31 112 0
 1861 000a 0431     		adds	r1, r1, #4
 1862              	.LVL280:
 1863 000c 0430     		adds	r0, r0, #4
 1864              	.LVL281:
 1865              	.L136:
 110:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     {
 1866              		.loc 31 110 0
 1867 000e 002A     		cmp	r2, #0
 1868 0010 F7D1     		bne	.L137
 116:.\DSP\Source\BasicMathFunctions/arm_not_u32.c ****     }
 117:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** #endif /* if defined(ARM_MATH_MVEI) */
 118:.\DSP\Source\BasicMathFunctions/arm_not_u32.c **** }
 1869              		.loc 31 118 0
 1870 0012 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE112:
 1873              		.size	arm_not_u32, .-arm_not_u32
 1874              		.section	.text.arm_not_u8,"ax",%progbits
 1875              		.align	2
 1876              		.global	arm_not_u8
 1877              		.thumb
 1878              		.thumb_func
 1879              		.type	arm_not_u8, %function
 1880              	arm_not_u8:
 1881              	.LFB113:
 1882              		.file 32 ".\\DSP\\Source\\BasicMathFunctions\\arm_not_u8.c"
   1:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Title:        arm_not_u8.c
   4:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Description:  uint8_t bitwise NOT
   5:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 123


  24:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @addtogroup Not
  37:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @brief         Compute the logical bitwise NOT of a fixed-point vector.
  42:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @param[in]     pSrc       points to input vector 
  43:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @param[out]    pDst       points to output vector
  44:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @param[in]     blockSize  number of samples in each vector
  45:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****   @return        none
  46:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** void arm_not_u8(
  49:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     const uint8_t * pSrc,
  50:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****           uint8_t * pDst,
  51:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****           uint32_t blockSize)
  52:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** {
 1883              		.loc 32 52 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887              		@ link register save eliminated.
 1888              	.LVL282:
  53:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     uint32_t blkCnt;      /* Loop counter */
  54:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  56:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     uint8x16_t vecSrc;
  57:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     /* Compute 16 outputs at a time */
  59:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     blkCnt = blockSize >> 4;
  60:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     while (blkCnt > 0U)
  62:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     {
  63:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         vecSrc = vld1q(pSrc);
  64:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         vst1q(pDst, vmvnq_u8(vecSrc) );
  66:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         pSrc += 16;
  68:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         pDst += 16;
  69:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         /* Decrement the loop counter */
  71:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         blkCnt--;
  72:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     }
  73:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     /* Tail */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 124


  75:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     blkCnt = blockSize & 0xF;
  76:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     if (blkCnt > 0U)
  78:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     {
  79:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  80:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         vecSrc = vld1q(pSrc);
  81:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         vstrbq_p(pDst, vmvnq_u8(vecSrc), p0);
  82:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     }
  83:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #else
  84:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  85:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     uint8x16_t inV;
  86:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  87:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     /* Compute 16 outputs at a time */
  88:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     blkCnt = blockSize >> 4U;
  89:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     while (blkCnt > 0U)
  91:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     {
  92:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         inV = vld1q_u8(pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  94:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         vst1q_u8(pDst, vmvnq_u8(inV) );
  95:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  96:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         pSrc += 16;
  97:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         pDst += 16;
  98:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
  99:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         /* Decrement the loop counter */
 100:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         blkCnt--;
 101:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     /* Tail */
 104:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     blkCnt = blockSize & 0xF;
 105:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #else
 106:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     /* Initialize blkCnt with number of samples */
 107:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     blkCnt = blockSize;
 108:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #endif
 109:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     while (blkCnt > 0U)
 1889              		.loc 32 110 0
 1890 0000 05E0     		b	.L139
 1891              	.LVL283:
 1892              	.L140:
 111:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     {
 112:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         *pDst++ = ~(*pSrc++);
 1893              		.loc 32 112 0
 1894 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1895 0004 DB43     		mvns	r3, r3
 1896 0006 0B70     		strb	r3, [r1]
 113:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         /* Decrement the loop counter */
 115:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****         blkCnt--;
 1897              		.loc 32 115 0
 1898 0008 013A     		subs	r2, r2, #1
 1899              	.LVL284:
 112:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** 
 1900              		.loc 32 112 0
 1901 000a 0131     		adds	r1, r1, #1
 1902              	.LVL285:
 1903 000c 0130     		adds	r0, r0, #1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 125


 1904              	.LVL286:
 1905              	.L139:
 110:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     {
 1906              		.loc 32 110 0
 1907 000e 002A     		cmp	r2, #0
 1908 0010 F7D1     		bne	.L140
 116:.\DSP\Source\BasicMathFunctions/arm_not_u8.c ****     }
 117:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** #endif /* if defined(ARM_MATH_MVEI) */
 118:.\DSP\Source\BasicMathFunctions/arm_not_u8.c **** }
 1909              		.loc 32 118 0
 1910 0012 7047     		bx	lr
 1911              		.cfi_endproc
 1912              	.LFE113:
 1913              		.size	arm_not_u8, .-arm_not_u8
 1914              		.section	.text.arm_offset_f32,"ax",%progbits
 1915              		.align	2
 1916              		.global	arm_offset_f32
 1917              		.thumb
 1918              		.thumb_func
 1919              		.type	arm_offset_f32, %function
 1920              	arm_offset_f32:
 1921              	.LFB114:
 1922              		.file 33 ".\\DSP\\Source\\BasicMathFunctions\\arm_offset_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Title:        arm_offset_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Description:  Floating-point vector offset
   5:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 126


  35:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @defgroup BasicOffset Vector Offset
  37:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   Adds a constant offset to each element of a vector.
  39:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   <pre>
  41:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****       pDst[n] = pSrc[n] + offset,   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   The functions support in-place computation allowing the source and
  45:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   destination pointers to reference the same memory buffer.
  46:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  47:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /**
  50:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @addtogroup BasicOffset
  51:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @{
  52:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** /**
  55:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @brief         Adds a constant offset to a floating-point vector.
  56:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @param[in]     pSrc       points to the input vector
  57:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @param[in]     offset     is the offset to be added
  58:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @param[out]    pDst       points to the output vector
  59:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @param[in]     blockSize  number of samples in each vector
  60:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   @return        none
  61:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  */
  62:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  64:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #include "arm_helium_utils.h"
  66:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** void arm_offset_f32(
  68:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   const float32_t * pSrc,
  69:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         float32_t offset,
  70:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         float32_t * pDst,
  71:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         uint32_t blockSize)
  72:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** {
  73:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
  74:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  75:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     f32x4_t vec1;
  76:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     f32x4_t res;
  77:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Compute 4 outputs at a time */
  79:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt = blockSize >> 2U;
  80:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     while (blkCnt > 0U)
  81:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     {
  82:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* C = A + offset */
  83:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  
  84:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Add offset and then store the results in the destination buffer. */
  85:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vec1 = vld1q(pSrc);
  86:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         res = vaddq(vec1,offset);
  87:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vst1q(pDst, res);
  88:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  89:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Increment pointers */
  90:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         pSrc += 4;
  91:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         pDst += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 127


  92:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         
  93:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Decrement the loop counter */
  94:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         blkCnt--;
  95:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
  97:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Tail */
  98:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt = blockSize & 0x3;
  99:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     if (blkCnt > 0U)
 101:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     {
 102:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 103:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vec1 = vld1q((float32_t const *) pSrc);
 104:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vstrwq_p(pDst, vaddq(vec1, offset), p0);
 105:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     }
 106:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** }
 109:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #else
 111:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** void arm_offset_f32(
 112:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   const float32_t * pSrc,
 113:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         float32_t offset,
 114:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         float32_t * pDst,
 115:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         uint32_t blockSize)
 116:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** {
 1923              		.loc 33 116 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              	.LVL287:
 1928 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1929              		.cfi_def_cfa_offset 24
 1930              		.cfi_offset 4, -24
 1931              		.cfi_offset 5, -20
 1932              		.cfi_offset 6, -16
 1933              		.cfi_offset 7, -12
 1934              		.cfi_offset 8, -8
 1935              		.cfi_offset 14, -4
 1936 0004 8846     		mov	r8, r1
 1937 0006 1546     		mov	r5, r2
 1938 0008 1C46     		mov	r4, r3
 1939              	.LVL288:
 117:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 118:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #if defined(ARM_MATH_NEON_EXPERIMENTAL) && !defined(ARM_MATH_AUTOVECTORIZE)
 120:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     f32x4_t vec1;
 121:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     f32x4_t res;
 122:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Compute 4 outputs at a time */
 124:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt = blockSize >> 2U;
 125:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 126:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     while (blkCnt > 0U)
 127:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     {
 128:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* C = A + offset */
 129:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****  
 130:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Add offset and then store the results in the destination buffer. */
 131:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vec1 = vld1q_f32(pSrc);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 128


 132:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         res = vaddq_f32(vec1,vdupq_n_f32(offset));
 133:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         vst1q_f32(pDst, res);
 134:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 135:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Increment pointers */
 136:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         pSrc += 4;
 137:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         pDst += 4;
 138:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         
 139:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         /* Decrement the loop counter */
 140:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****         blkCnt--;
 141:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     }
 142:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Tail */
 144:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt = blockSize & 0x3;
 145:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #else
 147:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 148:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 150:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize >> 2U;
 151:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   while (blkCnt > 0U)
 153:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   {
 154:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
 155:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and store result in destination buffer. */
 157:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 158:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 160:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 162:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 164:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Decrement loop counter */
 166:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
 167:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   }
 168:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 170:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize % 0x4U;
 171:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 172:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #else
 173:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   /* Initialize blkCnt with number of samples */
 175:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize;
 176:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 178:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** #endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */
 179:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   while (blkCnt > 0U)
 1940              		.loc 33 180 0
 1941 000a 09E0     		b	.L142
 1942              	.LVL289:
 1943              	.L143:
 181:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   {
 182:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
 183:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and store result in destination buffer. */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 129


 185:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 1944              		.loc 33 185 0
 1945 000c 2F1D     		adds	r7, r5, #4
 1946              	.LVL290:
 1947 000e 061D     		adds	r6, r0, #4
 1948              	.LVL291:
 1949 0010 0068     		ldr	r0, [r0]	@ float
 1950 0012 4146     		mov	r1, r8
 1951 0014 FFF7FEFF 		bl	__aeabi_fadd
 1952              	.LVL292:
 1953 0018 2860     		str	r0, [r5]	@ float
 186:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 187:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     /* Decrement loop counter */
 188:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
 1954              		.loc 33 188 0
 1955 001a 013C     		subs	r4, r4, #1
 1956              	.LVL293:
 185:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 1957              		.loc 33 185 0
 1958 001c 3D46     		mov	r5, r7
 1959 001e 3046     		mov	r0, r6
 1960              	.LVL294:
 1961              	.L142:
 180:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   {
 1962              		.loc 33 180 0
 1963 0020 002C     		cmp	r4, #0
 1964 0022 F3D1     		bne	.L143
 189:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c ****   }
 190:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** 
 191:.\DSP\Source\BasicMathFunctions/arm_offset_f32.c **** }
 1965              		.loc 33 191 0
 1966 0024 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1967              		.cfi_endproc
 1968              	.LFE114:
 1969              		.size	arm_offset_f32, .-arm_offset_f32
 1970              		.section	.text.arm_offset_f64,"ax",%progbits
 1971              		.align	2
 1972              		.global	arm_offset_f64
 1973              		.thumb
 1974              		.thumb_func
 1975              		.type	arm_offset_f64, %function
 1976              	arm_offset_f64:
 1977              	.LFB115:
 1978              		.file 34 ".\\DSP\\Source\\BasicMathFunctions\\arm_offset_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Title:        arm_offset_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Description:  Floating-point vector offset
   5:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 130


  14:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @addtogroup BasicOffset
  37:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @brief         Adds a constant offset to a floating-point vector.
  42:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @param[in]     offset     is the offset to be added
  44:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** void arm_offset_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   const float64_t * pSrc,
  51:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****         float64_t offset,
  52:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****         float64_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****         uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** {
 1979              		.loc 34 54 0
 1980              		.cfi_startproc
 1981              		@ args = 8, pretend = 0, frame = 0
 1982              		@ frame_needed = 0, uses_anonymous_args = 0
 1983              	.LVL295:
 1984 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1985              		.cfi_def_cfa_offset 32
 1986              		.cfi_offset 3, -32
 1987              		.cfi_offset 4, -28
 1988              		.cfi_offset 5, -24
 1989              		.cfi_offset 6, -20
 1990              		.cfi_offset 7, -16
 1991              		.cfi_offset 8, -12
 1992              		.cfi_offset 9, -8
 1993              		.cfi_offset 14, -4
 1994 0004 1646     		mov	r6, r2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 131


 1995 0006 1F46     		mov	r7, r3
 1996 0008 089D     		ldr	r5, [sp, #32]
 1997 000a 099C     		ldr	r4, [sp, #36]
 1998              	.LVL296:
  55:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   /* Initialize blkCnt with number of samples */
  58:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   blkCnt = blockSize;
  59:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   while (blkCnt > 0U)
 1999              		.loc 34 60 0
 2000 000c 0DE0     		b	.L146
 2001              	.LVL297:
 2002              	.L147:
  61:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   {
  62:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****     /* C = A + offset */
  63:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****     /* Add offset and store result in destination buffer. */
  65:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****     *pDst++ = (*pSrc++) + offset;
 2003              		.loc 34 65 0
 2004 000e 05F10809 		add	r9, r5, #8
 2005              	.LVL298:
 2006 0012 00F10808 		add	r8, r0, #8
 2007              	.LVL299:
 2008 0016 03C8     		ldmia	r0, {r0-r1}
 2009 0018 3246     		mov	r2, r6
 2010 001a 3B46     		mov	r3, r7
 2011 001c FFF7FEFF 		bl	__aeabi_dadd
 2012              	.LVL300:
 2013 0020 C5E90001 		strd	r0, [r5]
  66:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****     /* Decrement loop counter */
  68:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****     blkCnt--;
 2014              		.loc 34 68 0
 2015 0024 013C     		subs	r4, r4, #1
 2016              	.LVL301:
  65:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
 2017              		.loc 34 65 0
 2018 0026 4D46     		mov	r5, r9
 2019 0028 4046     		mov	r0, r8
 2020              	.LVL302:
 2021              	.L146:
  60:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   {
 2022              		.loc 34 60 0
 2023 002a 002C     		cmp	r4, #0
 2024 002c EFD1     		bne	.L147
  69:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c ****   }
  70:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_offset_f64.c **** }
 2025              		.loc 34 71 0
 2026 002e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2027              		.cfi_endproc
 2028              	.LFE115:
 2029              		.size	arm_offset_f64, .-arm_offset_f64
 2030 0032 00BF     		.section	.text.arm_offset_q15,"ax",%progbits
 2031              		.align	2
 2032              		.global	arm_offset_q15
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 132


 2033              		.thumb
 2034              		.thumb_func
 2035              		.type	arm_offset_q15, %function
 2036              	arm_offset_q15:
 2037              	.LFB116:
 2038              		.file 35 ".\\DSP\\Source\\BasicMathFunctions\\arm_offset_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Title:        arm_offset_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Description:  Q15 vector offset
   5:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @addtogroup BasicOffset
  37:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @brief         Adds a constant offset to a Q15 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @param[in]     offset     is the offset to be added
  44:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 133


  52:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** void arm_offset_q15(
  57:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     const q15_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     q15_t   offset,
  59:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     q15_t * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     q15x8_t vecSrc;
  64:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* Compute 8 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt = blockSize >> 3;
  67:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          * C = A + offset
  71:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          * Add offset and then store the result in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         vecSrc = vld1q(pSrc);
  74:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         vst1q(pDst, vqaddq(vecSrc, offset));
  75:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          * Decrement the blockSize loop counter
  77:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          */
  78:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         blkCnt--;
  79:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         /*
  80:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          * advance vector source and destination pointers
  81:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****          */
  82:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         pSrc += 8;
  83:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         pDst += 8;
  84:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /*
  86:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****      * tail
  87:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****      */
  88:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt = blockSize & 7;
  89:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         vecSrc = vld1q(pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         vstrhq_p(pDst, vqaddq(vecSrc, offset), p0);
  94:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     }
  95:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** }
  96:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  97:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #else
  99:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** void arm_offset_q15(
 100:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   const q15_t * pSrc,
 101:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         q15_t offset,
 102:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         q15_t * pDst,
 103:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         uint32_t blockSize)
 104:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** {
 2039              		.loc 35 104 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 134


 2043              		@ link register save eliminated.
 2044              	.LVL303:
 2045 0000 30B4     		push	{r4, r5}
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 4, -8
 2048              		.cfi_offset 5, -4
 2049              	.LVL304:
 105:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 106:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 108:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #if defined (ARM_MATH_DSP)
 110:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   q31_t offset_packed;                           /* Offset packed to 32 bit */
 111:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   /* Offset is packed to 32 bit in order to use SIMD32 for addition */
 113:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   offset_packed = __PKHBT(offset, offset, 16);
 114:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #endif
 115:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 117:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize >> 2U;
 118:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   while (blkCnt > 0U)
 120:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   {
 121:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* C = A + offset */
 122:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #if defined (ARM_MATH_DSP)
 124:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* Add offset and store result in destination buffer (2 samples at a time). */
 125:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     write_q15x2_ia (&pDst, __QADD16(read_q15x2_ia (&pSrc), offset_packed));
 126:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     write_q15x2_ia (&pDst, __QADD16(read_q15x2_ia (&pSrc), offset_packed));
 127:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #else
 128:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrc++ + offset), 16);
 129:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrc++ + offset), 16);
 130:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrc++ + offset), 16);
 131:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrc++ + offset), 16);
 132:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #endif
 133:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* Decrement loop counter */
 135:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt--;
 136:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   }
 137:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 139:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize % 0x4U;
 140:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #else
 142:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   /* Initialize blkCnt with number of samples */
 144:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize;
 145:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 147:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   while (blkCnt > 0U)
 2050              		.loc 35 148 0
 2051 0002 0AE0     		b	.L150
 2052              	.LVL305:
 2053              	.L151:
 149:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   {
 150:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* C = A + offset */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 135


 151:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* Add offset and store result in destination buffer. */
 153:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #if defined (ARM_MATH_DSP)
 154:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __QADD16(*pSrc++, offset);
 155:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #else
 156:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrc++ + offset), 16);
 2054              		.loc 35 156 0
 2055 0004 951C     		adds	r5, r2, #2
 2056              	.LVL306:
 2057              	.LBB31:
 2058 0006 841C     		adds	r4, r0, #2
 2059              	.LVL307:
 2060 0008 B0F90000 		ldrsh	r0, [r0]
 2061 000c 0844     		add	r0, r0, r1
 2062              	.LVL308:
 2063              	@ 156 ".\DSP\Source\BasicMathFunctions\arm_offset_q15.c" 1
 2064 000e 00F30F00 		ssat r0, #16, r0
 2065              	@ 0 "" 2
 2066              	.LVL309:
 2067              		.thumb
 2068              	.LBE31:
 2069 0012 1080     		strh	r0, [r2]	@ movhi
 2070              	.LVL310:
 157:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #endif
 158:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     /* Decrement loop counter */
 160:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt--;
 2071              		.loc 35 160 0
 2072 0014 013B     		subs	r3, r3, #1
 2073              	.LVL311:
 156:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** #endif
 2074              		.loc 35 156 0
 2075 0016 2A46     		mov	r2, r5
 2076              	.LBB32:
 2077 0018 2046     		mov	r0, r4
 2078              	.LVL312:
 2079              	.L150:
 2080              	.LBE32:
 148:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   {
 2081              		.loc 35 148 0
 2082 001a 002B     		cmp	r3, #0
 2083 001c F2D1     		bne	.L151
 161:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c ****   }
 162:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_offset_q15.c **** }
 2084              		.loc 35 163 0
 2085 001e 30BC     		pop	{r4, r5}
 2086              		.cfi_restore 5
 2087              		.cfi_restore 4
 2088              		.cfi_def_cfa_offset 0
 2089 0020 7047     		bx	lr
 2090              		.cfi_endproc
 2091              	.LFE116:
 2092              		.size	arm_offset_q15, .-arm_offset_q15
 2093 0022 00BF     		.section	.text.arm_offset_q31,"ax",%progbits
 2094              		.align	2
 2095              		.global	arm_offset_q31
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 136


 2096              		.thumb
 2097              		.thumb_func
 2098              		.type	arm_offset_q31, %function
 2099              	arm_offset_q31:
 2100              	.LFB117:
 2101              		.file 36 ".\\DSP\\Source\\BasicMathFunctions\\arm_offset_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Title:        arm_offset_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Description:  Q31 vector offset
   5:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @addtogroup BasicOffset
  37:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @brief         Adds a constant offset to a Q31 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @param[in]     offset     is the offset to be added
  44:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****                    Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated
  51:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 137


  52:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** void arm_offset_q31(
  58:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     const q31_t * pSrc,
  59:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     q31_t   offset,
  60:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     q31_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  64:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     q31x4_t vecSrc;
  65:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* Compute 4 outputs at a time */
  67:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt = blockSize >> 2;
  68:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     while (blkCnt > 0U)
  69:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     {
  70:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         /*
  71:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          * C = A + offset
  72:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          * Add offset and then store the result in the destination buffer.
  73:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          */
  74:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         vecSrc = vld1q(pSrc);
  75:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         vst1q(pDst, vqaddq(vecSrc, offset));
  76:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          * Decrement the blockSize loop counter
  78:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         blkCnt--;
  80:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          * advance vector source and destination pointers
  82:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         pSrc += 4;
  84:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         pDst += 4;
  85:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     }
  86:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /*
  87:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****      * tail
  88:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****      */
  89:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt = blockSize & 3;
  90:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     if (blkCnt > 0U)
  91:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     {
  92:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  93:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         vecSrc = vld1q(pSrc);
  94:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         vstrwq_p(pDst, vqaddq(vecSrc, offset), p0);
  95:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** }
  97:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
  98:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #else
  99:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** void arm_offset_q31(
 100:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   const q31_t * pSrc,
 101:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         q31_t offset,
 102:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         q31_t * pDst,
 103:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         uint32_t blockSize)
 104:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** {
 2102              		.loc 36 104 0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 0
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 138


 2106              		@ link register save eliminated.
 2107              	.LVL313:
 2108 0000 F0B4     		push	{r4, r5, r6, r7}
 2109              		.cfi_def_cfa_offset 16
 2110              		.cfi_offset 4, -16
 2111              		.cfi_offset 5, -12
 2112              		.cfi_offset 6, -8
 2113              		.cfi_offset 7, -4
 2114 0002 0F46     		mov	r7, r1
 2115              	.LVL314:
 105:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 106:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 108:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 110:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize >> 2U;
 111:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   while (blkCnt > 0U)
 113:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   {
 114:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* C = A + offset */
 115:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* Add offset and store result in destination buffer. */
 117:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 118:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     
 119:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 120:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     
 121:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 122:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     
 123:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 124:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* Decrement loop counter */
 126:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt--;
 127:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   }
 128:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 130:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize % 0x4U;
 131:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #else
 133:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   /* Initialize blkCnt with number of samples */
 135:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize;
 136:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 138:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   while (blkCnt > 0U)
 2116              		.loc 36 139 0
 2117 0004 11E0     		b	.L154
 2118              	.LVL315:
 2119              	.L157:
 140:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   {
 141:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* C = A + offset */
 142:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* Add offset and store result in destination buffer. */
 144:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #if defined (ARM_MATH_DSP)
 145:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 146:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #else
 147:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 139


 2120              		.loc 36 147 0
 2121 0006 151D     		adds	r5, r2, #4
 2122              	.LVL316:
 2123 0008 041D     		adds	r4, r0, #4
 2124              	.LVL317:
 2125 000a 0668     		ldr	r6, [r0]
 2126 000c F917     		asrs	r1, r7, #31
 2127 000e B819     		adds	r0, r7, r6
 2128 0010 41EBE671 		adc	r1, r1, r6, asr #31
 2129              	.LVL318:
 2130              	.LBB33:
 2131              	.LBB34:
 140:.\DSP\Include/dsp/none.h ****   }
 2132              		.loc 10 140 0
 2133 0014 B1EBE07F 		cmp	r1, r0, asr #31
 2134 0018 03D0     		beq	.L158
 2135 001a 6FF00040 		mvn	r0, #-2147483648
 2136              	.LVL319:
 2137 001e 80EAE170 		eor	r0, r0, r1, asr #31
 2138              	.L158:
 2139              	.LBE34:
 2140              	.LBE33:
 2141              		.loc 36 147 0
 2142 0022 1060     		str	r0, [r2]
 148:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #endif
 149:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     /* Decrement loop counter */
 151:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt--;
 2143              		.loc 36 151 0
 2144 0024 013B     		subs	r3, r3, #1
 2145              	.LVL320:
 147:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** #endif
 2146              		.loc 36 147 0
 2147 0026 2A46     		mov	r2, r5
 2148 0028 2046     		mov	r0, r4
 2149              	.LVL321:
 2150              	.L154:
 139:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   {
 2151              		.loc 36 139 0
 2152 002a 002B     		cmp	r3, #0
 2153 002c EBD1     		bne	.L157
 152:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c ****   }
 153:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_offset_q31.c **** }
 2154              		.loc 36 154 0
 2155 002e F0BC     		pop	{r4, r5, r6, r7}
 2156              		.cfi_restore 7
 2157              		.cfi_restore 6
 2158              		.cfi_restore 5
 2159              		.cfi_restore 4
 2160              		.cfi_def_cfa_offset 0
 2161              	.LVL322:
 2162 0030 7047     		bx	lr
 2163              		.cfi_endproc
 2164              	.LFE117:
 2165              		.size	arm_offset_q31, .-arm_offset_q31
 2166 0032 00BF     		.section	.text.arm_offset_q7,"ax",%progbits
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 140


 2167              		.align	2
 2168              		.global	arm_offset_q7
 2169              		.thumb
 2170              		.thumb_func
 2171              		.type	arm_offset_q7, %function
 2172              	arm_offset_q7:
 2173              	.LFB118:
 2174              		.file 37 ".\\DSP\\Source\\BasicMathFunctions\\arm_offset_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Title:        arm_offset_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Description:  Q7 vector offset
   5:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @addtogroup BasicOffset
  37:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @brief         Adds a constant offset to a Q7 vector.
  42:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @param[in]     offset     is the offset to be added
  44:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****                    The function uses saturating arithmetic.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 141


  50:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** void arm_offset_q7(
  57:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     const q7_t * pSrc,
  58:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     q7_t   offset,
  59:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     q7_t * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     q7x16_t vecSrc;
  64:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* Compute 16 outputs at a time */
  66:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt = blockSize >> 4;
  67:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     while (blkCnt > 0U)
  68:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     {
  69:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         /*
  70:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          * C = A + offset
  71:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          * Add offset and then store the result in the destination buffer.
  72:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          */
  73:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         vecSrc = vld1q(pSrc);
  74:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         vst1q(pDst, vqaddq(vecSrc, offset));
  75:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          * Decrement the blockSize loop counter
  77:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          */
  78:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         blkCnt--;
  79:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         /*
  80:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          * advance vector source and destination pointers
  81:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****          */
  82:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         pSrc += 16;
  83:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         pDst += 16;
  84:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /*
  86:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****      * tail
  87:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****      */
  88:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt = blockSize & 0xF;
  89:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         vecSrc = vld1q(pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         vstrbq_p(pDst, vqaddq(vecSrc, offset), p0);
  94:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     }
  95:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** }
  96:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
  97:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #else
  98:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** void arm_offset_q7(
  99:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   const q7_t * pSrc,
 100:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         q7_t offset,
 101:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         q7_t * pDst,
 102:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         uint32_t blockSize)
 103:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** {
 2175              		.loc 37 103 0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 142


 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
 2180              	.LVL323:
 2181 0000 30B4     		push	{r4, r5}
 2182              		.cfi_def_cfa_offset 8
 2183              		.cfi_offset 4, -8
 2184              		.cfi_offset 5, -4
 2185              	.LVL324:
 104:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 105:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 107:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #if defined (ARM_MATH_DSP)
 109:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   q31_t offset_packed;                           /* Offset packed to 32 bit */
 110:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   /* Offset is packed to 32 bit in order to use SIMD32 for addition */
 112:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   offset_packed = __PACKq7(offset, offset, offset, offset);
 113:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #endif
 114:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 116:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize >> 2U;
 117:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   while (blkCnt > 0U)
 119:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   {
 120:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* C = A + offset */
 121:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #if defined (ARM_MATH_DSP)
 123:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* Add offset and store result in destination buffer (4 samples at a time). */
 124:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     write_q7x4_ia (&pDst, __QADD8(read_q7x4_ia (&pSrc), offset_packed));
 125:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #else
 126:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrc++ + offset, 8);
 127:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrc++ + offset, 8);
 128:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrc++ + offset, 8);
 129:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrc++ + offset, 8);
 130:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #endif
 131:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* Decrement loop counter */
 133:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt--;
 134:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   }
 135:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 137:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize % 0x4U;
 138:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #else
 140:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   /* Initialize blkCnt with number of samples */
 142:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize;
 143:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 145:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   while (blkCnt > 0U)
 2186              		.loc 37 146 0
 2187 0002 0AE0     		b	.L161
 2188              	.LVL325:
 2189              	.L162:
 147:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   {
 148:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* C = A + offset */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 143


 149:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* Add offset and store result in destination buffer. */
 151:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrc++ + offset, 8);
 2190              		.loc 37 151 0
 2191 0004 551C     		adds	r5, r2, #1
 2192              	.LVL326:
 2193              	.LBB35:
 2194 0006 441C     		adds	r4, r0, #1
 2195              	.LVL327:
 2196 0008 90F90000 		ldrsb	r0, [r0]
 2197 000c 0844     		add	r0, r0, r1
 2198              	.LVL328:
 2199              	@ 151 ".\DSP\Source\BasicMathFunctions\arm_offset_q7.c" 1
 2200 000e 00F30700 		ssat r0, #8, r0
 2201              	@ 0 "" 2
 2202              	.LVL329:
 2203              		.thumb
 2204              	.LBE35:
 2205 0012 1070     		strb	r0, [r2]
 2206              	.LVL330:
 152:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     /* Decrement loop counter */
 154:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt--;
 2207              		.loc 37 154 0
 2208 0014 013B     		subs	r3, r3, #1
 2209              	.LVL331:
 151:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 2210              		.loc 37 151 0
 2211 0016 2A46     		mov	r2, r5
 2212              	.LBB36:
 2213 0018 2046     		mov	r0, r4
 2214              	.LVL332:
 2215              	.L161:
 2216              	.LBE36:
 146:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   {
 2217              		.loc 37 146 0
 2218 001a 002B     		cmp	r3, #0
 2219 001c F2D1     		bne	.L162
 155:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c ****   }
 156:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** 
 157:.\DSP\Source\BasicMathFunctions/arm_offset_q7.c **** }
 2220              		.loc 37 157 0
 2221 001e 30BC     		pop	{r4, r5}
 2222              		.cfi_restore 5
 2223              		.cfi_restore 4
 2224              		.cfi_def_cfa_offset 0
 2225 0020 7047     		bx	lr
 2226              		.cfi_endproc
 2227              	.LFE118:
 2228              		.size	arm_offset_q7, .-arm_offset_q7
 2229 0022 00BF     		.section	.text.arm_or_u16,"ax",%progbits
 2230              		.align	2
 2231              		.global	arm_or_u16
 2232              		.thumb
 2233              		.thumb_func
 2234              		.type	arm_or_u16, %function
 2235              	arm_or_u16:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 144


 2236              	.LFB119:
 2237              		.file 38 ".\\DSP\\Source\\BasicMathFunctions\\arm_or_u16.c"
   1:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Title:        arm_or_u16.c
   4:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Description:  uint16_t bitwise inclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @defgroup Or Vector bitwise inclusive OR
  37:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   Compute the logical bitwise OR.
  39:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   There are separate functions for uint32_t, uint16_t, and uint8_t data types.
  41:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  */
  42:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  43:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /**
  44:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @addtogroup Or
  45:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @{
  46:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** /**
  49:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @brief         Compute the logical bitwise OR of two fixed-point vectors.
  50:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @param[in]     pSrcA      points to input vector A
  51:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @param[in]     pSrcB      points to input vector B
  52:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @param[out]    pDst       points to output vector
  53:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @param[in]     blockSize  number of samples in each vector
  54:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****   @return        none
  55:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 145


  56:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** void arm_or_u16(
  58:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     const uint16_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     const uint16_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****           uint16_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****           uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** {
 2238              		.loc 38 62 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              		@ link register save eliminated.
 2243              	.LVL333:
 2244 0000 30B4     		push	{r4, r5}
 2245              		.cfi_def_cfa_offset 8
 2246              		.cfi_offset 4, -8
 2247              		.cfi_offset 5, -4
 2248              	.LVL334:
  63:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     uint32_t blkCnt;      /* Loop counter */
  64:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  66:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     uint16x8_t vecSrcA, vecSrcB;
  67:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     /* Compute 8 outputs at a time */
  69:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     blkCnt = blockSize >> 3;
  70:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     while (blkCnt > 0U)
  72:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     {
  73:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecSrcA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecSrcB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vst1q(pDst, vorrq_u16(vecSrcA, vecSrcB) );
  77:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pSrcA += 8;
  79:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pSrcB += 8;
  80:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pDst  += 8;
  81:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         /* Decrement the loop counter */
  83:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         blkCnt--;
  84:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  86:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     /* Tail */
  87:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     blkCnt = blockSize & 7;
  88:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
  89:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecSrcA = vld1q(pSrcA);
  93:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecSrcB = vld1q(pSrcB);
  94:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vstrhq_p(pDst, vorrq_u16(vecSrcA, vecSrcB), p0);
  95:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #else
  97:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  98:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     uint16x8_t vecA, vecB;
  99:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     /* Compute 8 outputs at a time */
 101:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     blkCnt = blockSize >> 3U;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 146


 102:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     while (blkCnt > 0U)
 104:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecA = vld1q_u16(pSrcA);
 106:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vecB = vld1q_u16(pSrcB);
 107:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         vst1q_u16(pDst, vorrq_u16(vecA, vecB) );
 109:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pSrcA += 8;
 111:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pSrcB += 8;
 112:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         pDst  += 8;
 113:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         /* Decrement the loop counter */
 115:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         blkCnt--;
 116:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     }
 117:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     /* Tail */
 119:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     blkCnt = blockSize & 7;
 120:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #else
 121:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     /* Initialize blkCnt with number of samples */
 122:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     blkCnt = blockSize;
 123:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #endif
 124:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     while (blkCnt > 0U)
 2249              		.loc 38 125 0
 2250 0002 07E0     		b	.L165
 2251              	.LVL335:
 2252              	.L166:
 126:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     {
 127:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         *pDst++ = (*pSrcA++)|(*pSrcB++);
 2253              		.loc 38 127 0
 2254 0004 0588     		ldrh	r5, [r0]
 2255              	.LVL336:
 2256 0006 0C88     		ldrh	r4, [r1]
 2257 0008 2C43     		orrs	r4, r4, r5
 2258 000a 1480     		strh	r4, [r2]	@ movhi
 128:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         /* Decrement the loop counter */
 130:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****         blkCnt--;
 2259              		.loc 38 130 0
 2260 000c 013B     		subs	r3, r3, #1
 2261              	.LVL337:
 127:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** 
 2262              		.loc 38 127 0
 2263 000e 0232     		adds	r2, r2, #2
 2264              	.LVL338:
 2265 0010 0231     		adds	r1, r1, #2
 2266              	.LVL339:
 2267 0012 0230     		adds	r0, r0, #2
 2268              	.LVL340:
 2269              	.L165:
 125:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     {
 2270              		.loc 38 125 0
 2271 0014 002B     		cmp	r3, #0
 2272 0016 F5D1     		bne	.L166
 131:.\DSP\Source\BasicMathFunctions/arm_or_u16.c ****     }
 132:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** #endif /* if defined(ARM_MATH_MVEI) */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 147


 133:.\DSP\Source\BasicMathFunctions/arm_or_u16.c **** }
 2273              		.loc 38 133 0
 2274 0018 30BC     		pop	{r4, r5}
 2275              		.cfi_restore 5
 2276              		.cfi_restore 4
 2277              		.cfi_def_cfa_offset 0
 2278 001a 7047     		bx	lr
 2279              		.cfi_endproc
 2280              	.LFE119:
 2281              		.size	arm_or_u16, .-arm_or_u16
 2282              		.section	.text.arm_or_u32,"ax",%progbits
 2283              		.align	2
 2284              		.global	arm_or_u32
 2285              		.thumb
 2286              		.thumb_func
 2287              		.type	arm_or_u32, %function
 2288              	arm_or_u32:
 2289              	.LFB120:
 2290              		.file 39 ".\\DSP\\Source\\BasicMathFunctions\\arm_or_u32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Title:        arm_or_u32.c
   4:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Description:  uint32_t bitwise inclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @addtogroup Or
  37:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 148


  39:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @brief         Compute the logical bitwise OR of two fixed-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @param[in]     pSrcA      points to input vector A
  43:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @param[in]     pSrcB      points to input vector B
  44:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** void arm_or_u32(
  50:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     const uint32_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     const uint32_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****           uint32_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****           uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** {
 2291              		.loc 39 54 0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 0
 2294              		@ frame_needed = 0, uses_anonymous_args = 0
 2295              		@ link register save eliminated.
 2296              	.LVL341:
 2297 0000 30B4     		push	{r4, r5}
 2298              		.cfi_def_cfa_offset 8
 2299              		.cfi_offset 4, -8
 2300              		.cfi_offset 5, -4
 2301              	.LVL342:
  55:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     uint32_t blkCnt;      /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     uint32x4_t vecSrcA, vecSrcB;
  59:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     /* Compute 4 outputs at a time */
  61:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     blkCnt = blockSize >> 2;
  62:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     while (blkCnt > 0U)
  64:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     {
  65:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecSrcA = vld1q(pSrcA);
  66:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecSrcB = vld1q(pSrcB);
  67:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vst1q(pDst, vorrq_u32(vecSrcA, vecSrcB) );
  69:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pSrcA += 4;
  71:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pSrcB += 4;
  72:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pDst  += 4;
  73:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         /* Decrement the loop counter */
  75:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         blkCnt--;
  76:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     }
  77:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     /* Tail */
  79:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     blkCnt = blockSize & 3;
  80:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     if (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  84:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecSrcA = vld1q(pSrcA);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 149


  85:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecSrcB = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vstrwq_p(pDst, vorrq_u32(vecSrcA, vecSrcB), p0);
  87:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #else
  89:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  90:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     uint32x4_t vecA, vecB;
  91:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  92:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     /* Compute 4 outputs at a time */
  93:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     blkCnt = blockSize >> 2U;
  94:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     while (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecA = vld1q_u32(pSrcA);
  98:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vecB = vld1q_u32(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         vst1q_u32(pDst, vorrq_u32(vecA, vecB) );
 101:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pSrcA += 4;
 103:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pSrcB += 4;
 104:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         pDst  += 4;
 105:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         /* Decrement the loop counter */
 107:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         blkCnt--;
 108:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     /* Tail */
 111:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     blkCnt = blockSize & 3;
 112:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     /* Initialize blkCnt with number of samples */
 114:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     blkCnt = blockSize;
 115:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     while (blkCnt > 0U)
 2302              		.loc 39 117 0
 2303 0002 07E0     		b	.L169
 2304              	.LVL343:
 2305              	.L170:
 118:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     {
 119:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         *pDst++ = (*pSrcA++)|(*pSrcB++);
 2306              		.loc 39 119 0
 2307 0004 0568     		ldr	r5, [r0]
 2308              	.LVL344:
 2309 0006 0C68     		ldr	r4, [r1]
 2310 0008 2C43     		orrs	r4, r4, r5
 2311 000a 1460     		str	r4, [r2]
 120:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         /* Decrement the loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****         blkCnt--;
 2312              		.loc 39 122 0
 2313 000c 013B     		subs	r3, r3, #1
 2314              	.LVL345:
 119:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** 
 2315              		.loc 39 119 0
 2316 000e 0432     		adds	r2, r2, #4
 2317              	.LVL346:
 2318 0010 0431     		adds	r1, r1, #4
 2319              	.LVL347:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 150


 2320 0012 0430     		adds	r0, r0, #4
 2321              	.LVL348:
 2322              	.L169:
 117:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     {
 2323              		.loc 39 117 0
 2324 0014 002B     		cmp	r3, #0
 2325 0016 F5D1     		bne	.L170
 123:.\DSP\Source\BasicMathFunctions/arm_or_u32.c ****     }
 124:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** #endif /* if defined(ARM_MATH_MVEI) */
 125:.\DSP\Source\BasicMathFunctions/arm_or_u32.c **** }
 2326              		.loc 39 125 0
 2327 0018 30BC     		pop	{r4, r5}
 2328              		.cfi_restore 5
 2329              		.cfi_restore 4
 2330              		.cfi_def_cfa_offset 0
 2331 001a 7047     		bx	lr
 2332              		.cfi_endproc
 2333              	.LFE120:
 2334              		.size	arm_or_u32, .-arm_or_u32
 2335              		.section	.text.arm_or_u8,"ax",%progbits
 2336              		.align	2
 2337              		.global	arm_or_u8
 2338              		.thumb
 2339              		.thumb_func
 2340              		.type	arm_or_u8, %function
 2341              	arm_or_u8:
 2342              	.LFB121:
 2343              		.file 40 ".\\DSP\\Source\\BasicMathFunctions\\arm_or_u8.c"
   1:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Title:        arm_or_u8.c
   4:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Description:  uint8_t bitwise inclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #include "dsp/basic_math_functions.h"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 151


  30:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @addtogroup Or
  37:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @brief         Compute the logical bitwise OR of two fixed-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @param[in]     pSrcA      points to input vector A
  43:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @param[in]     pSrcB      points to input vector B
  44:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** void arm_or_u8(
  50:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     const uint8_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     const uint8_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****           uint8_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****           uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** {
 2344              		.loc 40 54 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349              	.LVL349:
 2350 0000 30B4     		push	{r4, r5}
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 4, -8
 2353              		.cfi_offset 5, -4
 2354              	.LVL350:
  55:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     uint32_t blkCnt;      /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     uint8x16_t vecSrcA, vecSrcB;
  59:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     /* Compute 16 outputs at a time */
  61:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     blkCnt = blockSize >> 4;
  62:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     while (blkCnt > 0U)
  64:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     {
  65:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecSrcA = vld1q(pSrcA);
  66:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecSrcB = vld1q(pSrcB);
  67:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vst1q(pDst, vorrq_u8(vecSrcA, vecSrcB) );
  69:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pSrcA += 16;
  71:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pSrcB += 16;
  72:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pDst  += 16;
  73:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         /* Decrement the loop counter */
  75:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         blkCnt--;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 152


  76:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     }
  77:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     /* Tail */
  79:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     blkCnt = blockSize & 0xF;
  80:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     if (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  84:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecSrcA = vld1q(pSrcA);
  85:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecSrcB = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vstrbq_p(pDst, vorrq_u8(vecSrcA, vecSrcB), p0);
  87:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #else
  89:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  90:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     uint8x16_t vecA, vecB;
  91:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  92:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     /* Compute 16 outputs at a time */
  93:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     blkCnt = blockSize >> 4U;
  94:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     while (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecA = vld1q_u8(pSrcA);
  98:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vecB = vld1q_u8(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         vst1q_u8(pDst, vorrq_u8(vecA, vecB) );
 101:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pSrcA += 16;
 103:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pSrcB += 16;
 104:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         pDst  += 16;
 105:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         /* Decrement the loop counter */
 107:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         blkCnt--;
 108:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     /* Tail */
 111:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     blkCnt = blockSize & 0xF;
 112:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     /* Initialize blkCnt with number of samples */
 114:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     blkCnt = blockSize;
 115:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     while (blkCnt > 0U)
 2355              		.loc 40 117 0
 2356 0002 07E0     		b	.L173
 2357              	.LVL351:
 2358              	.L174:
 118:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     {
 119:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         *pDst++ = (*pSrcA++)|(*pSrcB++);
 2359              		.loc 40 119 0
 2360 0004 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 2361              	.LVL352:
 2362 0006 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 2363 0008 2C43     		orrs	r4, r4, r5
 2364 000a 1470     		strb	r4, [r2]
 120:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         /* Decrement the loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****         blkCnt--;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 153


 2365              		.loc 40 122 0
 2366 000c 013B     		subs	r3, r3, #1
 2367              	.LVL353:
 119:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** 
 2368              		.loc 40 119 0
 2369 000e 0132     		adds	r2, r2, #1
 2370              	.LVL354:
 2371 0010 0131     		adds	r1, r1, #1
 2372              	.LVL355:
 2373 0012 0130     		adds	r0, r0, #1
 2374              	.LVL356:
 2375              	.L173:
 117:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     {
 2376              		.loc 40 117 0
 2377 0014 002B     		cmp	r3, #0
 2378 0016 F5D1     		bne	.L174
 123:.\DSP\Source\BasicMathFunctions/arm_or_u8.c ****     }
 124:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** #endif /* if defined(ARM_MATH_MVEI) */
 125:.\DSP\Source\BasicMathFunctions/arm_or_u8.c **** }
 2379              		.loc 40 125 0
 2380 0018 30BC     		pop	{r4, r5}
 2381              		.cfi_restore 5
 2382              		.cfi_restore 4
 2383              		.cfi_def_cfa_offset 0
 2384 001a 7047     		bx	lr
 2385              		.cfi_endproc
 2386              	.LFE121:
 2387              		.size	arm_or_u8, .-arm_or_u8
 2388              		.section	.text.arm_scale_f32,"ax",%progbits
 2389              		.align	2
 2390              		.global	arm_scale_f32
 2391              		.thumb
 2392              		.thumb_func
 2393              		.type	arm_scale_f32, %function
 2394              	arm_scale_f32:
 2395              	.LFB122:
 2396              		.file 41 ".\\DSP\\Source\\BasicMathFunctions\\arm_scale_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Title:        arm_scale_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Description:  Multiplies a floating-point vector by a scalar
   5:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 154


  21:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @defgroup BasicScale Vector Scale
  37:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   Multiply a vector by a scalar value.  For floating-point data, the algorithm used is:
  39:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   <pre>
  41:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****       pDst[n] = pSrc[n] * scale,   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   In the fixed-point Q7, Q15, and Q31 functions, <code>scale</code> is represented by
  45:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   a fractional multiplication <code>scaleFract</code> and an arithmetic shift <code>shift</code>.
  46:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   The shift allows the gain of the scaling operation to exceed 1.0.
  47:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   The algorithm used with fixed-point data is:
  48:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   <pre>
  50:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****       pDst[n] = (pSrc[n] * scaleFract) << shift,   0 <= n < blockSize.
  51:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   </pre>
  52:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   The overall scale factor applied to the fixed-point data is
  54:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   <pre>
  55:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****       scale = scaleFract * 2^shift.
  56:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   </pre>
  57:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   The functions support in-place computation allowing the source and destination
  59:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   pointers to reference the same memory buffer.
  60:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  */
  61:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  62:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /**
  63:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @addtogroup BasicScale
  64:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @{
  65:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  */
  66:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** /**
  68:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @brief         Multiplies a floating-point vector by a scalar.
  69:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @param[in]     pSrc       points to the input vector
  70:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @param[in]     scale      scale factor to be applied
  71:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @param[out]    pDst       points to the output vector
  72:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @param[in]     blockSize  number of samples in each vector
  73:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   @return        none
  74:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  */
  75:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  77:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 155


  78:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #include "arm_helium_utils.h"
  79:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  80:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** void arm_scale_f32(
  81:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   const float32_t * pSrc,
  82:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         float32_t scale,
  83:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         float32_t * pDst,
  84:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         uint32_t blockSize)
  85:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** {
  86:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
  87:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  88:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     f32x4_t vec1;
  89:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     f32x4_t res;
  90:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  91:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Compute 4 outputs at a time */
  92:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize >> 2U;
  93:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
  94:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     while (blkCnt > 0U)
  95:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     {
  96:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* C = A + offset */
  97:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****  
  98:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* Add offset and then store the results in the destination buffer. */
  99:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vec1 = vld1q(pSrc);
 100:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         res = vmulq(vec1,scale);
 101:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vst1q(pDst, res);
 102:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* Increment pointers */
 104:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         pSrc += 4;
 105:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         pDst += 4;
 106:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         
 107:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* Decrement the loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         blkCnt--;
 109:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Tail */
 112:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize & 0x3;
 113:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     if (blkCnt > 0U)
 115:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     {
 116:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 117:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vec1 = vld1q((float32_t const *) pSrc);
 118:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vstrwq_p(pDst, vmulq(vec1, scale), p0);
 119:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     }
 120:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** }
 123:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 124:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #else
 125:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** void arm_scale_f32(
 126:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   const float32_t *pSrc,
 127:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         float32_t scale,
 128:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         float32_t *pDst,
 129:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         uint32_t blockSize)
 130:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** {
 2397              		.loc 41 130 0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 156


 2401              	.LVL357:
 2402 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2403              		.cfi_def_cfa_offset 24
 2404              		.cfi_offset 4, -24
 2405              		.cfi_offset 5, -20
 2406              		.cfi_offset 6, -16
 2407              		.cfi_offset 7, -12
 2408              		.cfi_offset 8, -8
 2409              		.cfi_offset 14, -4
 2410 0004 8846     		mov	r8, r1
 2411 0006 1546     		mov	r5, r2
 2412 0008 1C46     		mov	r4, r3
 2413              	.LVL358:
 131:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   uint32_t blkCnt;                               /* Loop counter */
 132:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #if defined(ARM_MATH_NEON_EXPERIMENTAL)
 133:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     f32x4_t vec1;
 134:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     f32x4_t res;
 135:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Compute 4 outputs at a time */
 137:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize >> 2U;
 138:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 139:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     while (blkCnt > 0U)
 140:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     {
 141:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* C = A * scale */
 142:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     	/* Scale the input and then store the results in the destination buffer. */
 144:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vec1 = vld1q_f32(pSrc);
 145:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         res = vmulq_f32(vec1, vdupq_n_f32(scale));
 146:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         vst1q_f32(pDst, res);
 147:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* Increment pointers */
 149:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         pSrc += 4; 
 150:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         pDst += 4;
 151:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         
 152:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         /* Decrement the loop counter */
 153:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****         blkCnt--;
 154:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     }
 155:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Tail */
 157:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize & 0x3;
 158:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 159:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #else
 160:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 161:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 163:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize >> 2U;
 164:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0U)
 166:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   {
 167:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     float32_t in1, in2, in3, in4;
 168:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
 170:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 171:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Scale input and store result in destination buffer. */
 172:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     in1 = (*pSrc++) * scale;
 173:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     in2 = (*pSrc++) * scale;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 157


 175:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 176:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     in3 = (*pSrc++) * scale;
 177:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     in4 = (*pSrc++) * scale;
 179:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = in1;
 181:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = in2;
 182:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = in3;
 183:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = in4;
 184:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 185:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Decrement loop counter */
 186:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
 187:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   }
 188:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 189:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 190:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize % 0x4U;
 191:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #else
 193:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 194:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   /* Initialize blkCnt with number of samples */
 195:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize;
 196:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 197:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 198:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** #endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */
 199:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 200:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0U)
 2414              		.loc 41 200 0
 2415 000a 09E0     		b	.L177
 2416              	.LVL359:
 2417              	.L178:
 201:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   {
 202:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
 203:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 204:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Scale input and store result in destination buffer. */
 205:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 2418              		.loc 41 205 0
 2419 000c 2F1D     		adds	r7, r5, #4
 2420              	.LVL360:
 2421 000e 061D     		adds	r6, r0, #4
 2422              	.LVL361:
 2423 0010 0068     		ldr	r0, [r0]	@ float
 2424 0012 4146     		mov	r1, r8
 2425 0014 FFF7FEFF 		bl	__aeabi_fmul
 2426              	.LVL362:
 2427 0018 2860     		str	r0, [r5]	@ float
 206:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 207:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     /* Decrement loop counter */
 208:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
 2428              		.loc 41 208 0
 2429 001a 013C     		subs	r4, r4, #1
 2430              	.LVL363:
 205:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 2431              		.loc 41 205 0
 2432 001c 3D46     		mov	r5, r7
 2433 001e 3046     		mov	r0, r6
 2434              	.LVL364:
 2435              	.L177:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 158


 200:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   {
 2436              		.loc 41 200 0
 2437 0020 002C     		cmp	r4, #0
 2438 0022 F3D1     		bne	.L178
 209:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c ****   }
 210:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** 
 211:.\DSP\Source\BasicMathFunctions/arm_scale_f32.c **** }
 2439              		.loc 41 211 0
 2440 0024 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2441              		.cfi_endproc
 2442              	.LFE122:
 2443              		.size	arm_scale_f32, .-arm_scale_f32
 2444              		.section	.text.arm_scale_f64,"ax",%progbits
 2445              		.align	2
 2446              		.global	arm_scale_f64
 2447              		.thumb
 2448              		.thumb_func
 2449              		.type	arm_scale_f64, %function
 2450              	arm_scale_f64:
 2451              	.LFB123:
 2452              		.file 42 ".\\DSP\\Source\\BasicMathFunctions\\arm_scale_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Title:        arm_scale_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Description:  Multiplies a floating-point vector by a scalar
   5:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @addtogroup BasicScale
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 159


  37:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @brief         Multiplies a floating-point vector by a scalar.
  42:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @param[in]     scale      scale factor to be applied
  44:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** void arm_scale_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   const float64_t *pSrc,
  51:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****         float64_t scale,
  52:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****         float64_t *pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****         uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** {
 2453              		.loc 42 54 0
 2454              		.cfi_startproc
 2455              		@ args = 8, pretend = 0, frame = 0
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457              	.LVL365:
 2458 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2459              		.cfi_def_cfa_offset 32
 2460              		.cfi_offset 3, -32
 2461              		.cfi_offset 4, -28
 2462              		.cfi_offset 5, -24
 2463              		.cfi_offset 6, -20
 2464              		.cfi_offset 7, -16
 2465              		.cfi_offset 8, -12
 2466              		.cfi_offset 9, -8
 2467              		.cfi_offset 14, -4
 2468 0004 1646     		mov	r6, r2
 2469 0006 1F46     		mov	r7, r3
 2470 0008 089D     		ldr	r5, [sp, #32]
 2471 000a 099C     		ldr	r4, [sp, #36]
 2472              	.LVL366:
  55:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   /* Initialize blkCnt with number of samples */
  58:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   blkCnt = blockSize;
  59:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   while (blkCnt > 0U)
 2473              		.loc 42 60 0
 2474 000c 0DE0     		b	.L181
 2475              	.LVL367:
 2476              	.L182:
  61:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   {
  62:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****     /* C = A * scale */
  63:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****     /* Scale input and store result in destination buffer. */
  65:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****     *pDst++ = (*pSrc++) * scale;
 2477              		.loc 42 65 0
 2478 000e 05F10809 		add	r9, r5, #8
 2479              	.LVL368:
 2480 0012 00F10808 		add	r8, r0, #8
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 160


 2481              	.LVL369:
 2482 0016 03C8     		ldmia	r0, {r0-r1}
 2483 0018 3246     		mov	r2, r6
 2484 001a 3B46     		mov	r3, r7
 2485 001c FFF7FEFF 		bl	__aeabi_dmul
 2486              	.LVL370:
 2487 0020 C5E90001 		strd	r0, [r5]
  66:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****     /* Decrement loop counter */
  68:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****     blkCnt--;
 2488              		.loc 42 68 0
 2489 0024 013C     		subs	r4, r4, #1
 2490              	.LVL371:
  65:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
 2491              		.loc 42 65 0
 2492 0026 4D46     		mov	r5, r9
 2493 0028 4046     		mov	r0, r8
 2494              	.LVL372:
 2495              	.L181:
  60:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   {
 2496              		.loc 42 60 0
 2497 002a 002C     		cmp	r4, #0
 2498 002c EFD1     		bne	.L182
  69:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c ****   }
  70:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_scale_f64.c **** }
 2499              		.loc 42 71 0
 2500 002e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2501              		.cfi_endproc
 2502              	.LFE123:
 2503              		.size	arm_scale_f64, .-arm_scale_f64
 2504 0032 00BF     		.section	.text.arm_scale_q15,"ax",%progbits
 2505              		.align	2
 2506              		.global	arm_scale_q15
 2507              		.thumb
 2508              		.thumb_func
 2509              		.type	arm_scale_q15, %function
 2510              	arm_scale_q15:
 2511              	.LFB124:
 2512              		.file 43 ".\\DSP\\Source\\BasicMathFunctions\\arm_scale_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Title:        arm_scale_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Description:  Multiplies a Q15 vector by a scalar
   5:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * not use this file except in compliance with the License.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 161


  18:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @addtogroup BasicScale
  37:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @brief         Multiplies a Q15 vector by a scalar.
  42:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @param[in]     scaleFract fractional portion of the scale value
  44:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @param[in]     shift      number of bits to shift the result by
  45:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @param[out]    pDst       points to the output vector
  46:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @param[in]     blockSize  number of samples in each vector
  47:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @return        none
  48:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****                    The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format
  51:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****                    These are multiplied to yield a 2.30 intermediate result and this is shifted wit
  52:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  55:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #include "arm_helium_utils.h"
  57:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** void arm_scale_q15(
  59:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     const q15_t * pSrc,
  60:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     q15_t   scaleFract,
  61:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     int8_t  shift,
  62:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     q15_t * pDst,
  63:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     uint32_t blockSize)
  64:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** {
  65:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  66:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     q15x8_t vecSrc;
  67:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     q15x8_t vecDst;
  68:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* Compute 8 outputs at a time */
  71:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     blkCnt = blockSize >> 3;
  72:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     while (blkCnt > 0U)
  74:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 162


  75:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         /*
  76:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          * C = A * scale
  77:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          * Scale the input and then store the result in the destination buffer.
  78:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          */
  79:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecSrc = vld1q(pSrc);
  80:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s16(scaleFract));
  81:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
  82:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vst1q(pDst, vecDst);
  83:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         /*
  84:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          * Decrement the blockSize loop counter
  85:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          */
  86:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         blkCnt--;
  87:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         /*
  88:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          * advance vector source and destination pointers
  89:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****          */
  90:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         pSrc += 8;
  91:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         pDst += 8;
  92:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     }
  93:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /*
  94:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****      * tail
  95:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****      */
  96:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     blkCnt = blockSize & 7;
  97:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     if (blkCnt > 0U)
  98:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     {
  99:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);;
 100:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecSrc = vld1q(pSrc);
 101:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s16(scaleFract));
 102:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
 103:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         vstrhq_p(pDst, vecDst, p0);
 104:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     }
 105:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** }
 107:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #else
 110:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** void arm_scale_q15(
 111:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   const q15_t *pSrc,
 112:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         q15_t scaleFract,
 113:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         int8_t shift,
 114:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         q15_t *pDst,
 115:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         uint32_t blockSize)
 116:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** {
 2513              		.loc 43 116 0
 2514              		.cfi_startproc
 2515              		@ args = 4, pretend = 0, frame = 0
 2516              		@ frame_needed = 0, uses_anonymous_args = 0
 2517              		@ link register save eliminated.
 2518              	.LVL373:
 2519 0000 F0B4     		push	{r4, r5, r6, r7}
 2520              		.cfi_def_cfa_offset 16
 2521              		.cfi_offset 4, -16
 2522              		.cfi_offset 5, -12
 2523              		.cfi_offset 6, -8
 2524              		.cfi_offset 7, -4
 2525 0002 049C     		ldr	r4, [sp, #16]
 117:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 118:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****         int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 163


 2526              		.loc 43 118 0
 2527 0004 C2F10F02 		rsb	r2, r2, #15
 2528              	.LVL374:
 2529 0008 D2B2     		uxtb	r2, r2
 2530              	.LVL375:
 119:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 121:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_DSP)
 122:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   q31_t inA1, inA2;
 123:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   q31_t out1, out2, out3, out4;                  /* Temporary output variables */
 124:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   q15_t in1, in2, in3, in4;                      /* Temporary input variables */
 125:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #endif
 126:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #endif
 127:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 128:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 129:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 131:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize >> 2U;
 132:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0U)
 134:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   {
 135:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 136:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_DSP)
 138:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* read 2 times 2 samples at a time from source */
 139:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     inA1 = read_q15x2_ia (&pSrc);
 140:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     inA2 = read_q15x2_ia (&pSrc);
 141:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* Scale inputs and store result in temporary variables
 143:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****      * in single cycle by packing the outputs */
 144:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
 145:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out2 = (q31_t) ((q15_t) (inA1      ) * scaleFract);
 146:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
 147:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out4 = (q31_t) ((q15_t) (inA2      ) * scaleFract);
 148:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* apply shifting */
 150:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out1 = out1 >> kShift;
 151:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out2 = out2 >> kShift;
 152:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out3 = out3 >> kShift;
 153:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     out4 = out4 >> kShift;
 154:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* saturate the output */
 156:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     in1 = (q15_t) (__SSAT(out1, 16));
 157:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     in2 = (q15_t) (__SSAT(out2, 16));
 158:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     in3 = (q15_t) (__SSAT(out3, 16));
 159:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     in4 = (q15_t) (__SSAT(out4, 16));
 160:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 161:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* store result to destination */
 162:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(in2, in1, 16));
 163:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     write_q15x2_ia (&pDst, __PKHBT(in4, in3, 16));
 164:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #else
 165:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 166:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 167:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 168:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 169:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #endif
 170:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 164


 171:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* Decrement loop counter */
 172:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 173:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   }
 174:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 176:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize % 0x4U;
 177:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #else
 179:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   /* Initialize blkCnt with number of samples */
 181:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize;
 182:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 183:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 184:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 185:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0U)
 2531              		.loc 43 185 0
 2532 000a 0DE0     		b	.L185
 2533              	.L186:
 186:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   {
 187:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 188:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 189:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* Scale input and store result in destination buffer. */
 190:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 2534              		.loc 43 190 0
 2535 000c 9E1C     		adds	r6, r3, #2
 2536              	.LVL376:
 2537              	.LBB37:
 2538 000e 851C     		adds	r5, r0, #2
 2539              	.LVL377:
 2540 0010 B0F90000 		ldrsh	r0, [r0]
 2541 0014 01FB00F0 		mul	r0, r1, r0
 2542 0018 57B2     		sxtb	r7, r2
 2543 001a 3841     		asrs	r0, r0, r7
 2544              	.LVL378:
 2545              	@ 190 ".\DSP\Source\BasicMathFunctions\arm_scale_q15.c" 1
 2546 001c 00F30F00 		ssat r0, #16, r0
 2547              	@ 0 "" 2
 2548              	.LVL379:
 2549              		.thumb
 2550              	.LBE37:
 2551 0020 1880     		strh	r0, [r3]	@ movhi
 2552              	.LVL380:
 191:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     /* Decrement loop counter */
 193:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 2553              		.loc 43 193 0
 2554 0022 013C     		subs	r4, r4, #1
 2555              	.LVL381:
 190:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 2556              		.loc 43 190 0
 2557 0024 3346     		mov	r3, r6
 2558              	.LBB38:
 2559 0026 2846     		mov	r0, r5
 2560              	.LVL382:
 2561              	.L185:
 2562              	.LBE38:
 185:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 165


 2563              		.loc 43 185 0
 2564 0028 002C     		cmp	r4, #0
 2565 002a EFD1     		bne	.L186
 194:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c ****   }
 195:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** 
 196:.\DSP\Source\BasicMathFunctions/arm_scale_q15.c **** }
 2566              		.loc 43 196 0
 2567 002c F0BC     		pop	{r4, r5, r6, r7}
 2568              		.cfi_restore 7
 2569              		.cfi_restore 6
 2570              		.cfi_restore 5
 2571              		.cfi_restore 4
 2572              		.cfi_def_cfa_offset 0
 2573              	.LVL383:
 2574 002e 7047     		bx	lr
 2575              		.cfi_endproc
 2576              	.LFE124:
 2577              		.size	arm_scale_q15, .-arm_scale_q15
 2578              		.section	.text.arm_scale_q31,"ax",%progbits
 2579              		.align	2
 2580              		.global	arm_scale_q31
 2581              		.thumb
 2582              		.thumb_func
 2583              		.type	arm_scale_q31, %function
 2584              	arm_scale_q31:
 2585              	.LFB125:
 2586              		.file 44 ".\\DSP\\Source\\BasicMathFunctions\\arm_scale_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Title:        arm_scale_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Description:  Multiplies a Q31 vector by a scalar
   5:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 166


  31:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @addtogroup BasicScale
  37:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @brief         Multiplies a Q31 vector by a scalar.
  42:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @param[in]     scaleFract fractional portion of the scale value
  44:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @param[in]     shift      number of bits to shift the result by
  45:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @param[out]    pDst       points to the output vector
  46:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @param[in]     blockSize  number of samples in each vector
  47:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @return        none
  48:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****                    The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.31 format
  51:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****                    These are multiplied to yield a 2.62 intermediate result and this is shifted wit
  52:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  55:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #include "arm_helium_utils.h"
  57:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
  59:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     const q31_t * pSrc,
  60:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     q31_t   scaleFract,
  61:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     int8_t  shift,
  62:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     q31_t * pDst,
  63:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     uint32_t blockSize)
  64:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** {
  65:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  66:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     q31x4_t vecSrc;
  67:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     q31x4_t vecDst;
  68:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     /* Compute 4 outputs at a time */
  70:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     blkCnt = blockSize >> 2;
  71:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
  72:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
  73:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         /*
  74:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          * C = A * scale
  75:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          * Scale the input and then store the result in the destination buffer.
  76:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          */
  77:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecSrc = vld1q(pSrc);
  78:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s32(scaleFract));
  79:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
  80:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vst1q(pDst, vecDst);
  81:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         /*
  82:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          * Decrement the blockSize loop counter
  83:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          */
  84:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         blkCnt--;
  85:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         /*
  86:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          * advance vector source and destination pointers
  87:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****          */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 167


  88:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         pSrc += 4;
  89:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         pDst += 4;
  90:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
  91:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     /*
  92:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****      * tail
  93:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****      */
  94:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     blkCnt = blockSize & 3;
  95:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     if (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  98:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecSrc = vld1q(pSrc);
  99:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s32(scaleFract));
 100:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
 101:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         vstrwq_p(pDst, vecDst, p0);
 102:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
 103:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** }
 104:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 105:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #else
 106:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
 107:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   const q31_t *pSrc,
 108:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         q31_t scaleFract,
 109:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         int8_t shift,
 110:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         q31_t *pDst,
 111:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         uint32_t blockSize)
 112:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** {
 2587              		.loc 44 112 0
 2588              		.cfi_startproc
 2589              		@ args = 4, pretend = 0, frame = 0
 2590              		@ frame_needed = 0, uses_anonymous_args = 0
 2591              		@ link register save eliminated.
 2592              	.LVL384:
 2593 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, r10, fp}
 2594              		.cfi_def_cfa_offset 32
 2595              		.cfi_offset 4, -32
 2596              		.cfi_offset 5, -28
 2597              		.cfi_offset 6, -24
 2598              		.cfi_offset 7, -20
 2599              		.cfi_offset 8, -16
 2600              		.cfi_offset 9, -12
 2601              		.cfi_offset 10, -8
 2602              		.cfi_offset 11, -4
 2603 0004 089E     		ldr	r6, [sp, #32]
 113:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 114:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         q31_t in, out;                                 /* Temporary variables */
 115:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 2604              		.loc 44 115 0
 2605 0006 0132     		adds	r2, r2, #1
 2606              	.LVL385:
 2607 0008 D2B2     		uxtb	r2, r2
 2608              	.LVL386:
 116:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         int8_t sign = (kShift & 0x80);
 117:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 119:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 121:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize >> 2U;
 122:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 168


 123:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0U)
 124:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   {
 125:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 126:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 127:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 128:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 130:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;                                /* read input from source */
 131:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;        /* multiply input with scaler value */
 132:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;                          /* apply shifting */
 133:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))                   /* saturate the result */
 134:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 135:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;                               /* Store result destination */
 136:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 138:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 139:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 140:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 141:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 142:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 143:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 145:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 146:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 147:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 148:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 149:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 150:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 151:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 152:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 153:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 154:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 155:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 156:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 157:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 159:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 160:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
 161:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   }
 162:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   else
 163:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   {
 164:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 165:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 166:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 167:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 169:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;                                /* read four inputs from source */
 170:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;        /* multiply input with scaler value */
 171:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;                         /* apply shifting */
 172:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;                               /* Store result destination */
 173:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 175:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 176:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 177:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 178:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 179:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 169


 180:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 181:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 182:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 183:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 185:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 186:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 187:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 188:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 189:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 190:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 191:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
 192:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   }
 193:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 194:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 195:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize % 0x4U;
 196:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 197:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #else
 198:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 199:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   /* Initialize blkCnt with number of samples */
 200:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize;
 201:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 202:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 203:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 204:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0U)
 2609              		.loc 44 204 0
 2610 000a 12F0800F 		tst	r2, #128
 2611 000e 1CD0     		beq	.L189
 2612 0010 30E0     		b	.L190
 2613              	.L192:
 205:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   {
 206:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 207:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 208:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 209:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 210:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 211:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 2614              		.loc 44 211 0
 2615 0012 071D     		adds	r7, r0, #4
 2616              	.LVL387:
 2617 0014 0468     		ldr	r4, [r0]
 2618              	.LVL388:
 212:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 2619              		.loc 44 212 0
 2620 0016 4FEAE479 		asr	r9, r4, #31
 2621 001a 4FEAE17B 		asr	fp, r1, #31
 2622 001e 04FB0BF0 		mul	r0, r4, fp
 2623 0022 A4FB0145 		umull	r4, r5, r4, r1
 2624              	.LVL389:
 2625 0026 01FB0900 		mla	r0, r1, r9, r0
 2626 002a 2844     		add	r0, r0, r5
 2627              	.LVL390:
 213:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 2628              		.loc 44 213 0
 2629 002c 55B2     		sxtb	r5, r2
 2630 002e 00FA05F4 		lsl	r4, r0, r5
 2631              	.LVL391:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 170


 214:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 2632              		.loc 44 214 0
 2633 0032 44FA05F5 		asr	r5, r4, r5
 2634 0036 8542     		cmp	r5, r0
 2635 0038 03D0     		beq	.L191
 215:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****           out = 0x7FFFFFFF ^ (in >> 31);
 2636              		.loc 44 215 0
 2637 003a 6FF00044 		mvn	r4, #-2147483648
 2638              	.LVL392:
 2639 003e 84EAE074 		eor	r4, r4, r0, asr #31
 2640              	.LVL393:
 2641              	.L191:
 216:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 2642              		.loc 44 216 0
 2643 0042 1C60     		str	r4, [r3]
 217:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 218:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 219:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 2644              		.loc 44 219 0
 2645 0044 013E     		subs	r6, r6, #1
 2646              	.LVL394:
 216:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 2647              		.loc 44 216 0
 2648 0046 0433     		adds	r3, r3, #4
 2649              	.LVL395:
 211:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 2650              		.loc 44 211 0
 2651 0048 3846     		mov	r0, r7
 2652              	.LVL396:
 2653              	.L189:
 206:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 2654              		.loc 44 206 0
 2655 004a 002E     		cmp	r6, #0
 2656 004c E1D1     		bne	.L192
 2657 004e 13E0     		b	.L188
 2658              	.L194:
 2659              	.LVL397:
 220:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
 221:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   }
 222:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   else
 223:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   {
 224:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 225:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 226:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 227:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 228:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 229:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 2660              		.loc 44 229 0
 2661 0050 0768     		ldr	r7, [r0]
 2662              	.LVL398:
 230:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 2663              		.loc 44 230 0
 2664 0052 4FEAE77B 		asr	fp, r7, #31
 2665 0056 CD17     		asrs	r5, r1, #31
 2666 0058 07FB05F4 		mul	r4, r7, r5
 2667 005c A7FB0189 		umull	r8, r9, r7, r1
 2668 0060 01FB0B44 		mla	r4, r1, fp, r4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 171


 2669 0064 4C44     		add	r4, r4, r9
 2670              	.LVL399:
 231:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 2671              		.loc 44 231 0
 2672 0066 55B2     		sxtb	r5, r2
 2673 0068 6D42     		negs	r5, r5
 2674 006a 2C41     		asrs	r4, r4, r5
 2675              	.LVL400:
 232:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 2676              		.loc 44 232 0
 2677 006c 1C60     		str	r4, [r3]
 233:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 234:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 235:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 2678              		.loc 44 235 0
 2679 006e 013E     		subs	r6, r6, #1
 2680              	.LVL401:
 232:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 2681              		.loc 44 232 0
 2682 0070 0433     		adds	r3, r3, #4
 2683              	.LVL402:
 229:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 2684              		.loc 44 229 0
 2685 0072 0430     		adds	r0, r0, #4
 2686              	.LVL403:
 2687              	.L190:
 224:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     {
 2688              		.loc 44 224 0
 2689 0074 002E     		cmp	r6, #0
 2690 0076 EBD1     		bne	.L194
 2691              	.L188:
 236:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****     }
 237:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c ****   }
 238:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** 
 239:.\DSP\Source\BasicMathFunctions/arm_scale_q31.c **** }
 2692              		.loc 44 239 0
 2693 0078 BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp}
 2694              		.cfi_restore 11
 2695              		.cfi_restore 10
 2696              		.cfi_restore 9
 2697              		.cfi_restore 8
 2698              		.cfi_restore 7
 2699              		.cfi_restore 6
 2700              		.cfi_restore 5
 2701              		.cfi_restore 4
 2702              		.cfi_def_cfa_offset 0
 2703              	.LVL404:
 2704 007c 7047     		bx	lr
 2705              		.cfi_endproc
 2706              	.LFE125:
 2707              		.size	arm_scale_q31, .-arm_scale_q31
 2708 007e 00BF     		.section	.text.arm_scale_q7,"ax",%progbits
 2709              		.align	2
 2710              		.global	arm_scale_q7
 2711              		.thumb
 2712              		.thumb_func
 2713              		.type	arm_scale_q7, %function
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 172


 2714              	arm_scale_q7:
 2715              	.LFB126:
 2716              		.file 45 ".\\DSP\\Source\\BasicMathFunctions\\arm_scale_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Title:        arm_scale_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Description:  Multiplies a Q7 vector by a scalar
   5:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @addtogroup BasicScale
  37:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @brief         Multiplies a Q7 vector by a scalar.
  42:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @param[in]     scaleFract fractional portion of the scale value
  44:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @param[in]     shift      number of bits to shift the result by
  45:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @param[out]    pDst       points to the output vector
  46:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @param[in]     blockSize  number of samples in each vector
  47:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @return        none
  48:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   @par           Scaling and Overflow Behavior
  50:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****                    The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.7 format.
  51:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****                    These are multiplied to yield a 2.14 intermediate result and this is shifted wit
  52:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****  */
  53:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 173


  55:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #include "arm_helium_utils.h"
  57:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  58:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  59:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
  60:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     const q7_t * pSrc,
  61:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     q7_t   scaleFract,
  62:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     int8_t  shift,
  63:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     q7_t * pDst,
  64:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     uint32_t blockSize)
  65:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** {
  66:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  67:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     q7x16_t vecSrc;
  68:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     q7x16_t vecDst;
  69:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Compute 16 outputs at a time */
  72:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt = blockSize >> 4;
  73:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     while (blkCnt > 0U)
  75:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     {
  76:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         /*
  77:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          * C = A * scale
  78:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          * Scale the input and then store the result in the destination buffer.
  79:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          */
  80:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecSrc = vld1q(pSrc);
  81:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s8(scaleFract));
  82:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
  83:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vst1q(pDst, vecDst);
  84:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         /*
  85:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          * Decrement the blockSize loop counter
  86:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          */
  87:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         blkCnt--;
  88:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         /*
  89:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          * advance vector source and destination pointers
  90:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****          */
  91:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         pSrc += 16;
  92:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         pDst += 16;
  93:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     }
  94:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /*
  95:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****      * tail
  96:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****      */
  97:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt = blockSize & 0xF;
  98:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     if (blkCnt > 0U)
  99:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     {
 100:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
 101:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecSrc = vld1q(pSrc);
 102:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s8(scaleFract));
 103:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
 104:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         vstrbq_p(pDst, vecDst, p0);
 105:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     }
 106:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 107:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** }
 108:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #else
 110:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
 111:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   const q7_t * pSrc,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 174


 112:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         q7_t scaleFract,
 113:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         int8_t shift,
 114:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         q7_t * pDst,
 115:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         uint32_t blockSize)
 116:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** {
 2717              		.loc 45 116 0
 2718              		.cfi_startproc
 2719              		@ args = 4, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
 2721              		@ link register save eliminated.
 2722              	.LVL405:
 2723 0000 F0B4     		push	{r4, r5, r6, r7}
 2724              		.cfi_def_cfa_offset 16
 2725              		.cfi_offset 4, -16
 2726              		.cfi_offset 5, -12
 2727              		.cfi_offset 6, -8
 2728              		.cfi_offset 7, -4
 2729 0002 049C     		ldr	r4, [sp, #16]
 117:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 118:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****         int8_t kShift = 7 - shift;                     /* Shift to apply after scaling */
 2730              		.loc 45 118 0
 2731 0004 C2F10702 		rsb	r2, r2, #7
 2732              	.LVL406:
 2733 0008 D2B2     		uxtb	r2, r2
 2734              	.LVL407:
 119:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 121:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
 123:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t in1,  in2,  in3,  in4;                    /* Temporary input variables */
 124:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary output variables */
 125:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #endif
 126:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 128:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize >> 2U;
 129:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
 131:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   {
 132:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 133:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
 135:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Reading 4 inputs from memory */
 136:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     in1 = *pSrc++;
 137:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     in2 = *pSrc++;
 138:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     in3 = *pSrc++;
 139:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     in4 = *pSrc++;
 140:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Scale inputs and store result in the temporary variable. */
 142:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
 143:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
 144:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
 145:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
 146:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 148:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     write_q7x4_ia (&pDst, __PACKq7(out1, out2, out3, out4));
 149:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #else
 150:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 175


 151:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 152:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 153:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 154:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #endif
 155:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Decrement loop counter */
 157:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 158:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   }
 159:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 160:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 161:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize % 0x4U;
 162:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 163:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #else
 164:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   /* Initialize blkCnt with number of samples */
 166:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize;
 167:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 169:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 170:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
 2735              		.loc 45 170 0
 2736 000a 0DE0     		b	.L197
 2737              	.L198:
 171:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   {
 172:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 173:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 174:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Scale input and store result in destination buffer. */
 175:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 2738              		.loc 45 175 0
 2739 000c 5E1C     		adds	r6, r3, #1
 2740              	.LVL408:
 2741              	.LBB39:
 2742 000e 451C     		adds	r5, r0, #1
 2743              	.LVL409:
 2744 0010 90F90000 		ldrsb	r0, [r0]
 2745 0014 01FB00F0 		mul	r0, r1, r0
 2746 0018 57B2     		sxtb	r7, r2
 2747 001a 3841     		asrs	r0, r0, r7
 2748              	.LVL410:
 2749              	@ 175 ".\DSP\Source\BasicMathFunctions\arm_scale_q7.c" 1
 2750 001c 00F30700 		ssat r0, #8, r0
 2751              	@ 0 "" 2
 2752              	.LVL411:
 2753              		.thumb
 2754              	.LBE39:
 2755 0020 1870     		strb	r0, [r3]
 2756              	.LVL412:
 176:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     /* Decrement loop counter */
 178:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 2757              		.loc 45 178 0
 2758 0022 013C     		subs	r4, r4, #1
 2759              	.LVL413:
 175:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 2760              		.loc 45 175 0
 2761 0024 3346     		mov	r3, r6
 2762              	.LBB40:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 176


 2763 0026 2846     		mov	r0, r5
 2764              	.LVL414:
 2765              	.L197:
 2766              	.LBE40:
 170:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   {
 2767              		.loc 45 170 0
 2768 0028 002C     		cmp	r4, #0
 2769 002a EFD1     		bne	.L198
 179:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c ****   }
 180:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** 
 181:.\DSP\Source\BasicMathFunctions/arm_scale_q7.c **** }
 2770              		.loc 45 181 0
 2771 002c F0BC     		pop	{r4, r5, r6, r7}
 2772              		.cfi_restore 7
 2773              		.cfi_restore 6
 2774              		.cfi_restore 5
 2775              		.cfi_restore 4
 2776              		.cfi_def_cfa_offset 0
 2777              	.LVL415:
 2778 002e 7047     		bx	lr
 2779              		.cfi_endproc
 2780              	.LFE126:
 2781              		.size	arm_scale_q7, .-arm_scale_q7
 2782              		.section	.text.arm_shift_q15,"ax",%progbits
 2783              		.align	2
 2784              		.global	arm_shift_q15
 2785              		.thumb
 2786              		.thumb_func
 2787              		.type	arm_shift_q15, %function
 2788              	arm_shift_q15:
 2789              	.LFB127:
 2790              		.file 46 ".\\DSP\\Source\\BasicMathFunctions\\arm_shift_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Title:        arm_shift_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Description:  Shifts the elements of a Q15 vector by a specified number of bits
   5:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * See the License for the specific language governing permissions and
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 177


  26:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @addtogroup BasicShift
  37:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @brief         Shifts the elements of a Q15 vector a specified number of bits
  42:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  44:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
  58:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     const q15_t * pSrc,
  59:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     int8_t shiftBits,
  60:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     q15_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  64:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     q15x8_t vecSrc;
  65:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     q15x8_t vecDst;
  66:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     /* Compute 8 outputs at a time */
  68:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize >> 3;
  69:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         /*
  72:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          * C = A (>> or <<) shiftBits
  73:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          * Shift the input and then store the result in the destination buffer.
  74:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          */
  75:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vecSrc = vld1q(pSrc);
  76:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  77:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vst1q(pDst, vecDst);
  78:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          * Decrement the blockSize loop counter
  80:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         blkCnt--;
  82:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         /*
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 178


  83:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          * advance vector source and destination pointers
  84:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         pSrc += 8;
  86:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         pDst += 8;
  87:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     /*
  89:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****      * tail
  90:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****      */
  91:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize & 7;
  92:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     if (blkCnt > 0U)
  93:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
  94:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  95:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vecSrc = vld1q(pSrc);
  96:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  97:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         vstrhq_p(pDst, vecDst, p0);
  98:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
  99:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** }
 100:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 101:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 102:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
 103:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   const q15_t * pSrc,
 104:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         int8_t shiftBits,
 105:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         q15_t * pDst,
 106:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         uint32_t blockSize)
 107:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** {
 2791              		.loc 46 107 0
 2792              		.cfi_startproc
 2793              		@ args = 0, pretend = 0, frame = 0
 2794              		@ frame_needed = 0, uses_anonymous_args = 0
 2795              		@ link register save eliminated.
 2796              	.LVL416:
 2797 0000 30B4     		push	{r4, r5}
 2798              		.cfi_def_cfa_offset 8
 2799              		.cfi_offset 4, -8
 2800              		.cfi_offset 5, -4
 2801              	.LVL417:
 108:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 109:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 110:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 114:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   q15_t in1, in2;                                /* Temporary input variables */
 115:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 118:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize >> 2U;
 119:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 121:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0U)
 122:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   {
 123:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 124:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 125:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 126:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 128:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 179


 129:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 130:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 131:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 133:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 134:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT(((q31_t) in1 << shiftBits), 16),
 135:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT(((q31_t) in2 << shiftBits), 16), 16));
 136:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 137:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT(((q31_t) in2 << shiftBits), 16),
 138:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                       __SSAT(((q31_t) in1 << shiftBits), 16), 16));
 139:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 140:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 142:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 143:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 144:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 145:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 146:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT(((q31_t) in1 << shiftBits), 16),
 147:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT(((q31_t) in2 << shiftBits), 16), 16));
 148:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 149:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT(((q31_t) in2 << shiftBits), 16),
 150:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT(((q31_t) in1 << shiftBits), 16), 16));
 151:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 152:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 154:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 155:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 156:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 157:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 158:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif
 159:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 160:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 161:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 162:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
 163:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   }
 164:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   else
 165:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   {
 166:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 167:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 168:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 169:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 170:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 171:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 172:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 173:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 174:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 176:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 177:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in1 >> -shiftBits),
 178:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      (in2 >> -shiftBits), 16));
 179:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 180:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in2 >> -shiftBits),
 181:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      (in1 >> -shiftBits), 16));
 182:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 183:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 185:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 180


 186:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 187:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 188:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 189:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in1 >> -shiftBits),
 190:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      (in2 >> -shiftBits), 16));
 191:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 192:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in2 >> -shiftBits),
 193:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****                                      (in1 >> -shiftBits), 16));
 194:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 195:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 196:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 197:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 198:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 199:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 200:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 201:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif
 202:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 203:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 204:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 205:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
 206:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   }
 207:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 208:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 209:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize % 0x4U;
 210:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 211:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #else
 212:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 213:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   /* Initialize blkCnt with number of samples */
 214:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize;
 215:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 216:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 217:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 218:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 219:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0U)
 2802              		.loc 46 219 0
 2803 0002 0029     		cmp	r1, #0
 2804              	.LVL418:
 2805 0004 0BDA     		bge	.L201
 2806 0006 15E0     		b	.L202
 2807              	.LVL419:
 2808              	.L203:
 220:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   {
 221:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 222:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 223:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 224:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 225:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift input and store result in destination buffer. */
 226:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 2809              		.loc 46 226 0
 2810 0008 951C     		adds	r5, r2, #2
 2811              	.LVL420:
 2812              	.LBB41:
 2813 000a 841C     		adds	r4, r0, #2
 2814              	.LVL421:
 2815 000c B0F90000 		ldrsh	r0, [r0]
 2816 0010 8840     		lsls	r0, r0, r1
 2817              	.LVL422:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 181


 2818              	@ 226 ".\DSP\Source\BasicMathFunctions\arm_shift_q15.c" 1
 2819 0012 00F30F00 		ssat r0, #16, r0
 2820              	@ 0 "" 2
 2821              	.LVL423:
 2822              		.thumb
 2823              	.LBE41:
 2824 0016 1080     		strh	r0, [r2]	@ movhi
 2825              	.LVL424:
 227:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 228:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 229:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 2826              		.loc 46 229 0
 2827 0018 013B     		subs	r3, r3, #1
 2828              	.LVL425:
 226:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 2829              		.loc 46 226 0
 2830 001a 2A46     		mov	r2, r5
 2831              	.LBB42:
 2832 001c 2046     		mov	r0, r4
 2833              	.LVL426:
 2834              	.L201:
 2835              	.LBE42:
 221:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 2836              		.loc 46 221 0
 2837 001e 002B     		cmp	r3, #0
 2838 0020 F2D1     		bne	.L203
 2839 0022 09E0     		b	.L200
 2840              	.L205:
 2841              	.LVL427:
 230:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
 231:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   }
 232:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   else
 233:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   {
 234:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 235:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 236:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 237:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 238:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift input and store result in destination buffer. */
 239:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 2842              		.loc 46 239 0
 2843 0024 4D42     		negs	r5, r1
 2844 0026 B0F90040 		ldrsh	r4, [r0]
 2845 002a 2C41     		asrs	r4, r4, r5
 2846 002c 1480     		strh	r4, [r2]	@ movhi
 240:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 241:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 242:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 2847              		.loc 46 242 0
 2848 002e 013B     		subs	r3, r3, #1
 2849              	.LVL428:
 239:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 2850              		.loc 46 239 0
 2851 0030 0232     		adds	r2, r2, #2
 2852              	.LVL429:
 2853 0032 0230     		adds	r0, r0, #2
 2854              	.LVL430:
 2855              	.L202:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 182


 234:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     {
 2856              		.loc 46 234 0
 2857 0034 002B     		cmp	r3, #0
 2858 0036 F5D1     		bne	.L205
 2859              	.L200:
 243:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****     }
 244:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c ****   }
 245:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** 
 246:.\DSP\Source\BasicMathFunctions/arm_shift_q15.c **** }
 2860              		.loc 46 246 0
 2861 0038 30BC     		pop	{r4, r5}
 2862              		.cfi_restore 5
 2863              		.cfi_restore 4
 2864              		.cfi_def_cfa_offset 0
 2865 003a 7047     		bx	lr
 2866              		.cfi_endproc
 2867              	.LFE127:
 2868              		.size	arm_shift_q15, .-arm_shift_q15
 2869              		.section	.text.arm_shift_q31,"ax",%progbits
 2870              		.align	2
 2871              		.global	arm_shift_q31
 2872              		.thumb
 2873              		.thumb_func
 2874              		.type	arm_shift_q31, %function
 2875              	arm_shift_q31:
 2876              	.LFB128:
 2877              		.file 47 ".\\DSP\\Source\\BasicMathFunctions\\arm_shift_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Title:        arm_shift_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Description:  Shifts the elements of a Q31 vector by a specified number of bits
   5:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 183


  31:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /**
  35:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @defgroup BasicShift Vector Shift
  36:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  37:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   Shifts the elements of a fixed-point vector by a specified number of bits.
  38:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   There are separate functions for Q7, Q15, and Q31 data types.
  39:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   The underlying algorithm used is:
  40:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   <pre>
  42:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       pDst[n] = pSrc[n] << shift,   0 <= n < blockSize.
  43:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   </pre>
  44:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  45:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   If <code>shift</code> is positive then the elements of the vector are shifted to the left.
  46:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   If <code>shift</code> is negative then the elements of the vector are shifted to the right.
  47:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   The functions support in-place computation allowing the source and destination
  49:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   pointers to reference the same memory buffer.
  50:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /**
  53:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @addtogroup BasicShift
  54:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @{
  55:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  */
  56:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** /**
  58:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @brief         Shifts the elements of a Q31 vector a specified number of bits.
  59:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @param[in]     pSrc       points to the input vector
  60:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  61:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @param[out]    pDst       points to the output vector
  62:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @param[in]     blockSize  number of samples in the vector
  63:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @return        none
  64:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   @par           Scaling and Overflow Behavior
  66:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****                    The function uses saturating arithmetic.
  67:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****                    Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated
  68:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****  */
  69:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  71:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  72:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #include "arm_helium_utils.h"
  73:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** void arm_shift_q31(
  75:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     const q31_t * pSrc,
  76:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     int8_t shiftBits,
  77:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     q31_t * pDst,
  78:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     uint32_t blockSize)
  79:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** {
  80:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  81:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     q31x4_t vecSrc;
  82:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     q31x4_t vecDst;
  83:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
  84:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     /* Compute 4 outputs at a time */
  85:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     blkCnt = blockSize >> 2;
  86:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
  87:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 184


  88:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         /*
  89:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          * C = A (>> or <<) shiftBits
  90:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          * Shift the input and then store the result in the destination buffer.
  91:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          */
  92:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vecSrc = vld1q((q31_t const *) pSrc);
  93:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  94:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vst1q(pDst, vecDst);
  95:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         /*
  96:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          * Decrement the blockSize loop counter
  97:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          */
  98:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         blkCnt--;
  99:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         /*
 100:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          * advance vector source and destination pointers
 101:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****          */
 102:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         pSrc += 4;
 103:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         pDst += 4;
 104:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     }
 105:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     /*
 106:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****      * tail
 107:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****      */
 108:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     blkCnt = blockSize & 3;
 109:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     if (blkCnt > 0U)
 110:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 111:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 112:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vecSrc = vld1q((q31_t const *) pSrc);
 113:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
 114:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         vstrwq_p(pDst, vecDst, p0);
 115:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     }
 116:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** }
 117:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #else
 120:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** void arm_shift_q31(
 121:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   const q31_t * pSrc,
 122:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         int8_t shiftBits,
 123:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         q31_t * pDst,
 124:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         uint32_t blockSize)
 125:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** {
 2878              		.loc 47 125 0
 2879              		.cfi_startproc
 2880              		@ args = 0, pretend = 0, frame = 0
 2881              		@ frame_needed = 0, uses_anonymous_args = 0
 2882              	.LVL431:
 2883 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2884              		.cfi_def_cfa_offset 28
 2885              		.cfi_offset 4, -28
 2886              		.cfi_offset 5, -24
 2887              		.cfi_offset 6, -20
 2888              		.cfi_offset 7, -16
 2889              		.cfi_offset 8, -12
 2890              		.cfi_offset 9, -8
 2891              		.cfi_offset 14, -4
 2892              	.LVL432:
 126:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 127:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 128:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 185


 130:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 131:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   q31_t in, out;                                 /* Temporary variables */
 132:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 134:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize >> 2U;
 135:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   /* If the shift value is positive then do right shift else left shift */
 137:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   if (sign == 0U)
 138:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   {
 139:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 140:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 141:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* C = A << shiftBits */
 142:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
 144:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 145:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 146:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 147:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 148:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 149:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 151:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 152:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 153:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 154:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 155:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 157:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 158:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 159:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 160:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 161:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 163:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 164:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 165:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 166:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 167:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 168:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 169:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 170:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     }
 171:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   }
 172:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   else
 173:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   {
 174:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 175:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 176:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* C = A >> shiftBits */
 177:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store results in destination buffer. */
 179:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 180:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 181:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 182:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 183:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 184:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 185:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 186:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 186


 187:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   }
 188:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 189:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 190:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize % 0x4U;
 191:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #else
 193:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 194:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   /* Initialize blkCnt with number of samples */
 195:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize;
 196:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 197:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 198:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 199:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   /* If the shift value is positive then do right shift else left shift */
 200:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   if (sign == 0U)
 2893              		.loc 47 200 0
 2894 0004 0029     		cmp	r1, #0
 2895              	.LVL433:
 2896 0006 1EDA     		bge	.L208
 2897 0008 28E0     		b	.L209
 2898              	.LVL434:
 2899              	.L212:
 201:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   {
 202:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 203:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 204:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* C = A << shiftBits */
 205:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 206:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
 207:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 2900              		.loc 47 207 0
 2901 000a 171D     		adds	r7, r2, #4
 2902              	.LVL435:
 2903 000c 061D     		adds	r6, r0, #4
 2904              	.LVL436:
 2905 000e 0068     		ldr	r0, [r0]
 2906 0010 4FEAE079 		asr	r9, r0, #31
 2907 0014 A1F1200E 		sub	lr, r1, #32
 2908 0018 C1F12005 		rsb	r5, r1, #32
 2909 001c 09FA01F4 		lsl	r4, r9, r1
 2910 0020 00FA0EFE 		lsl	lr, r0, lr
 2911 0024 44EA0E04 		orr	r4, r4, lr
 2912 0028 20FA05F5 		lsr	r5, r0, r5
 2913 002c 2C43     		orrs	r4, r4, r5
 2914 002e 8840     		lsls	r0, r0, r1
 2915              	.LVL437:
 2916              	.LBB43:
 2917              	.LBB44:
 140:.\DSP\Include/dsp/none.h ****   }
 2918              		.loc 10 140 0
 2919 0030 B4EBE07F 		cmp	r4, r0, asr #31
 2920 0034 03D0     		beq	.L215
 2921 0036 6FF00040 		mvn	r0, #-2147483648
 2922              	.LVL438:
 2923 003a 80EAE470 		eor	r0, r0, r4, asr #31
 2924              	.L215:
 2925              	.LBE44:
 2926              	.LBE43:
 2927              		.loc 47 207 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 187


 2928 003e 1060     		str	r0, [r2]
 2929              	.LVL439:
 208:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 209:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 210:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 2930              		.loc 47 210 0
 2931 0040 013B     		subs	r3, r3, #1
 2932              	.LVL440:
 207:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 2933              		.loc 47 207 0
 2934 0042 3A46     		mov	r2, r7
 2935 0044 3046     		mov	r0, r6
 2936              	.LVL441:
 2937              	.L208:
 202:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 2938              		.loc 47 202 0
 2939 0046 002B     		cmp	r3, #0
 2940 0048 DFD1     		bne	.L212
 2941 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2942              	.L214:
 2943              	.LVL442:
 211:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     }
 212:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   }
 213:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   else
 214:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****   {
 215:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 216:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 217:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* C = A >> shiftBits */
 218:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 219:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
 220:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 2944              		.loc 47 220 0
 2945 004e 0468     		ldr	r4, [r0]
 2946 0050 4D42     		negs	r5, r1
 2947 0052 2C41     		asrs	r4, r4, r5
 2948 0054 1460     		str	r4, [r2]
 221:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 222:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 223:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 2949              		.loc 47 223 0
 2950 0056 013B     		subs	r3, r3, #1
 2951              	.LVL443:
 220:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c **** 
 2952              		.loc 47 220 0
 2953 0058 0432     		adds	r2, r2, #4
 2954              	.LVL444:
 2955 005a 0430     		adds	r0, r0, #4
 2956              	.LVL445:
 2957              	.L209:
 215:.\DSP\Source\BasicMathFunctions/arm_shift_q31.c ****     {
 2958              		.loc 47 215 0
 2959 005c 002B     		cmp	r3, #0
 2960 005e F6D1     		bne	.L214
 2961 0060 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2962              		.cfi_endproc
 2963              	.LFE128:
 2964              		.size	arm_shift_q31, .-arm_shift_q31
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 188


 2965              		.section	.text.arm_shift_q7,"ax",%progbits
 2966              		.align	2
 2967              		.global	arm_shift_q7
 2968              		.thumb
 2969              		.thumb_func
 2970              		.type	arm_shift_q7, %function
 2971              	arm_shift_q7:
 2972              	.LFB129:
 2973              		.file 48 ".\\DSP\\Source\\BasicMathFunctions\\arm_shift_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Title:        arm_shift_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Description:  Processing function for the Q7 Shifting
   5:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @addtogroup BasicShift
  37:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @brief         Shifts the elements of a Q7 vector a specified number of bits
  42:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @param[in]     pSrc       points to the input vector
  43:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  44:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @par           onditions for optimum performance
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 189


  49:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                    Input and output buffers should be aligned by 32-bit
  50:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   @par           Scaling and Overflow Behavior
  51:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                    The function uses saturating arithmetic.
  52:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  53:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****  */
  54:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  56:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #include "arm_helium_utils.h"
  58:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  59:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** void arm_shift_q7(
  60:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     const q7_t * pSrc,
  61:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     int8_t shiftBits,
  62:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     q7_t * pDst,
  63:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     uint32_t blockSize)
  64:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** {
  65:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  66:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     q7x16_t vecSrc;
  67:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     q7x16_t vecDst;
  68:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
  69:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     /* Compute 16 outputs at a time */
  70:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize >> 4;
  71:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
  72:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
  73:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         /*
  74:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          * C = A (>> or <<) shiftBits
  75:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          * Shift the input and then store the result in the destination buffer.
  76:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          */
  77:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vecSrc = vld1q(pSrc);
  78:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  79:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vst1q(pDst, vecDst);
  80:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         /*
  81:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          * Decrement the blockSize loop counter
  82:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          */
  83:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         blkCnt--;
  84:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         /*
  85:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          * advance vector source and destination pointers
  86:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****          */
  87:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         pSrc += 16;
  88:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         pDst += 16;
  89:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
  90:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     /*
  91:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****      * tail
  92:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****      */
  93:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize & 0xF;
  94:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     if (blkCnt > 0U)
  95:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
  96:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  97:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vecSrc = vld1q(pSrc);
  98:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  99:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         vstrbq_p(pDst, vecDst, p0);
 100:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
 101:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** }
 102:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #else
 104:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** void arm_shift_q7(
 105:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   const q7_t * pSrc,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 190


 106:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         int8_t shiftBits,
 107:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         q7_t * pDst,
 108:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         uint32_t blockSize)
 109:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** {
 2974              		.loc 48 109 0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 0
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
 2978              		@ link register save eliminated.
 2979              	.LVL446:
 2980 0000 30B4     		push	{r4, r5}
 2981              		.cfi_def_cfa_offset 8
 2982              		.cfi_offset 4, -8
 2983              		.cfi_offset 5, -4
 2984              	.LVL447:
 110:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 111:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 112:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 114:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 115:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 116:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t in1,  in2,  in3,  in4;                    /* Temporary input variables */
 117:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #endif
 118:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 120:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize >> 2U;
 121:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
 123:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0U)
 124:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   {
 125:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 126:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 127:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 128:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 130:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
 131:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc++;
 132:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in2 = *pSrc++;
 133:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in3 = *pSrc++;
 134:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in4 = *pSrc++;
 135:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 137:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       write_q7x4_ia (&pDst, __PACKq7(__SSAT(((q15_t) in1 << shiftBits), 8),
 138:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT(((q15_t) in2 << shiftBits), 8),
 139:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT(((q15_t) in3 << shiftBits), 8),
 140:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT(((q15_t) in4 << shiftBits), 8) ));
 141:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #else
 142:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 143:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 144:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 145:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 146:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #endif
 147:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 149:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 150:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
 151:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   }
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 191


 152:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   else
 153:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   {
 154:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 155:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 156:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 157:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 159:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
 160:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc++;
 161:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in2 = *pSrc++;
 162:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in3 = *pSrc++;
 163:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       in4 = *pSrc++;
 164:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 166:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       write_q7x4_ia (&pDst, __PACKq7((in1 >> -shiftBits),
 167:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      (in2 >> -shiftBits),
 168:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      (in3 >> -shiftBits),
 169:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****                                      (in4 >> -shiftBits) ));
 170:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #else
 171:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 172:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 173:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 174:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 175:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #endif
 176:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 177:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 178:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 179:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
 180:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   }
 181:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 182:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 183:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize % 0x4U;
 184:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 185:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #else
 186:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 187:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   /* Initialize blkCnt with number of samples */
 188:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize;
 189:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 190:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 191:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 192:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
 193:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0U)
 2985              		.loc 48 193 0
 2986 0002 0029     		cmp	r1, #0
 2987              	.LVL448:
 2988 0004 0BDA     		bge	.L218
 2989 0006 15E0     		b	.L219
 2990              	.LVL449:
 2991              	.L220:
 194:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   {
 195:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 196:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 197:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 198:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 199:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift input and store result in destination buffer. */
 200:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 2992              		.loc 48 200 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 192


 2993 0008 551C     		adds	r5, r2, #1
 2994              	.LVL450:
 2995              	.LBB45:
 2996 000a 441C     		adds	r4, r0, #1
 2997              	.LVL451:
 2998 000c 90F90000 		ldrsb	r0, [r0]
 2999 0010 8840     		lsls	r0, r0, r1
 3000              	.LVL452:
 3001              	@ 200 ".\DSP\Source\BasicMathFunctions\arm_shift_q7.c" 1
 3002 0012 00F30700 		ssat r0, #8, r0
 3003              	@ 0 "" 2
 3004              	.LVL453:
 3005              		.thumb
 3006              	.LBE45:
 3007 0016 1070     		strb	r0, [r2]
 3008              	.LVL454:
 201:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 202:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 203:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 3009              		.loc 48 203 0
 3010 0018 013B     		subs	r3, r3, #1
 3011              	.LVL455:
 200:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 3012              		.loc 48 200 0
 3013 001a 2A46     		mov	r2, r5
 3014              	.LBB46:
 3015 001c 2046     		mov	r0, r4
 3016              	.LVL456:
 3017              	.L218:
 3018              	.LBE46:
 195:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 3019              		.loc 48 195 0
 3020 001e 002B     		cmp	r3, #0
 3021 0020 F2D1     		bne	.L220
 3022 0022 09E0     		b	.L217
 3023              	.L222:
 3024              	.LVL457:
 204:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
 205:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   }
 206:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   else
 207:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   {
 208:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 209:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 210:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 211:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 212:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift input and store result in destination buffer. */
 213:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 3025              		.loc 48 213 0
 3026 0024 4D42     		negs	r5, r1
 3027 0026 90F90040 		ldrsb	r4, [r0]
 3028 002a 2C41     		asrs	r4, r4, r5
 3029 002c 1470     		strb	r4, [r2]
 214:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 215:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 216:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 3030              		.loc 48 216 0
 3031 002e 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 193


 3032              	.LVL458:
 213:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 3033              		.loc 48 213 0
 3034 0030 0132     		adds	r2, r2, #1
 3035              	.LVL459:
 3036 0032 0130     		adds	r0, r0, #1
 3037              	.LVL460:
 3038              	.L219:
 208:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     {
 3039              		.loc 48 208 0
 3040 0034 002B     		cmp	r3, #0
 3041 0036 F5D1     		bne	.L222
 3042              	.L217:
 217:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****     }
 218:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c ****   }
 219:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** 
 220:.\DSP\Source\BasicMathFunctions/arm_shift_q7.c **** }
 3043              		.loc 48 220 0
 3044 0038 30BC     		pop	{r4, r5}
 3045              		.cfi_restore 5
 3046              		.cfi_restore 4
 3047              		.cfi_def_cfa_offset 0
 3048 003a 7047     		bx	lr
 3049              		.cfi_endproc
 3050              	.LFE129:
 3051              		.size	arm_shift_q7, .-arm_shift_q7
 3052              		.global	__aeabi_fsub
 3053              		.section	.text.arm_sub_f32,"ax",%progbits
 3054              		.align	2
 3055              		.global	arm_sub_f32
 3056              		.thumb
 3057              		.thumb_func
 3058              		.type	arm_sub_f32, %function
 3059              	arm_sub_f32:
 3060              	.LFB130:
 3061              		.file 49 ".\\DSP\\Source\\BasicMathFunctions\\arm_sub_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Title:        arm_sub_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Description:  Floating-point vector subtraction
   5:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 194


  22:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @defgroup BasicSub Vector Subtraction
  37:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   Element-by-element subtraction of two vectors.
  39:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   <pre>
  41:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       pDst[n] = pSrcA[n] - pSrcB[n],   0 <= n < blockSize.
  42:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   </pre>
  43:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  44:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  */
  46:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  47:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /**
  48:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @addtogroup BasicSub
  49:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @{
  50:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  */
  51:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** /**
  53:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @brief         Floating-point vector subtraction.
  54:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @param[in]     pSrcA      points to the first input vector
  55:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @param[in]     pSrcB      points to the second input vector
  56:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @param[out]    pDst       points to the output vector
  57:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @param[in]     blockSize  number of samples in each vector
  58:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   @return        none
  59:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****  */
  60:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  62:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #include "arm_helium_utils.h"
  64:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** void arm_sub_f32(
  66:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   const float32_t * pSrcA,
  67:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   const float32_t * pSrcB,
  68:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         float32_t * pDst,
  69:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         uint32_t blockSize)
  70:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** {
  71:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  72:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t vec1;
  74:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t vec2;
  75:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t res;
  76:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  77:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Compute 4 outputs at a time */
  78:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt = blockSize >> 2U;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 195


  79:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  80:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     while (blkCnt > 0U)
  81:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     {
  82:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* C = A + B */
  83:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  84:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       /* Add and then store the results in the destination buffer. */
  85:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vec1 = vld1q(pSrcA);
  86:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vec2 = vld1q(pSrcB);
  87:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         res = vsubq(vec1, vec2);
  88:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vst1q(pDst, res);
  89:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  90:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* Increment pointers */
  91:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pSrcA += 4;
  92:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pSrcB += 4; 
  93:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pDst += 4;
  94:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         
  95:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* Decrement the loop counter */
  96:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         blkCnt--;
  97:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     }
  98:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
  99:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Tail */
 100:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt = blockSize & 0x3;
 101:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     if (blkCnt > 0U)
 103:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     {
 104:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       /* C = A + B */
 105:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 106:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       vec1 = vld1q(pSrcA);
 107:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       vec2 = vld1q(pSrcB);
 108:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****       vstrwq_p(pDst, vsubq(vec1,vec2), p0);
 109:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** }
 112:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #else
 114:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** void arm_sub_f32(
 115:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   const float32_t * pSrcA,
 116:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   const float32_t * pSrcB,
 117:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         float32_t * pDst,
 118:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         uint32_t blockSize)
 119:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** {
 3062              		.loc 49 119 0
 3063              		.cfi_startproc
 3064              		@ args = 0, pretend = 0, frame = 0
 3065              		@ frame_needed = 0, uses_anonymous_args = 0
 3066              	.LVL461:
 3067 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3068              		.cfi_def_cfa_offset 24
 3069              		.cfi_offset 4, -24
 3070              		.cfi_offset 5, -20
 3071              		.cfi_offset 6, -16
 3072              		.cfi_offset 7, -12
 3073              		.cfi_offset 8, -8
 3074              		.cfi_offset 14, -4
 3075 0004 1546     		mov	r5, r2
 3076 0006 1C46     		mov	r4, r3
 3077              	.LVL462:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 196


 120:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 121:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 123:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t vec1;
 124:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t vec2;
 125:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     f32x4_t res;
 126:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Compute 4 outputs at a time */
 128:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt = blockSize >> 2U;
 129:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 130:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     while (blkCnt > 0U)
 131:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     {
 132:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* C = A - B */
 133:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* Subtract and then store the results in the destination buffer. */
 135:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vec1 = vld1q_f32(pSrcA);
 136:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vec2 = vld1q_f32(pSrcB);
 137:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         res = vsubq_f32(vec1, vec2);
 138:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         vst1q_f32(pDst, res);
 139:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* Increment pointers */
 141:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pSrcA += 4;
 142:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pSrcB += 4; 
 143:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         pDst += 4;
 144:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         
 145:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         /* Decrement the loop counter */
 146:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****         blkCnt--;
 147:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     }
 148:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Tail */
 150:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt = blockSize & 0x3;
 151:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 152:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #else
 153:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 154:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 155:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 156:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize >> 2U;
 157:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   while (blkCnt > 0U)
 159:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   {
 160:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* C = A - B */
 161:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Subtract and store result in destination buffer. */
 163:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 164:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 165:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 166:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 167:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 168:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 170:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 171:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Decrement loop counter */
 172:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt--;
 173:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   }
 174:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 175:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 176:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize % 0x4U;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 197


 177:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 178:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #else
 179:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 180:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   /* Initialize blkCnt with number of samples */
 181:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize;
 182:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 183:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 184:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 185:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 186:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   while (blkCnt > 0U)
 3078              		.loc 49 186 0
 3079 0008 0CE0     		b	.L225
 3080              	.LVL463:
 3081              	.L226:
 187:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   {
 188:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* C = A - B */
 189:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 190:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Subtract and store result in destination buffer. */
 191:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 3082              		.loc 49 191 0
 3083 000a 05F10408 		add	r8, r5, #4
 3084              	.LVL464:
 3085 000e 061D     		adds	r6, r0, #4
 3086              	.LVL465:
 3087 0010 0F1D     		adds	r7, r1, #4
 3088              	.LVL466:
 3089 0012 0068     		ldr	r0, [r0]	@ float
 3090 0014 0968     		ldr	r1, [r1]	@ float
 3091 0016 FFF7FEFF 		bl	__aeabi_fsub
 3092              	.LVL467:
 3093 001a 2860     		str	r0, [r5]	@ float
 192:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 193:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     /* Decrement loop counter */
 194:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****     blkCnt--;
 3094              		.loc 49 194 0
 3095 001c 013C     		subs	r4, r4, #1
 3096              	.LVL468:
 191:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 3097              		.loc 49 191 0
 3098 001e 4546     		mov	r5, r8
 3099 0020 3946     		mov	r1, r7
 3100 0022 3046     		mov	r0, r6
 3101              	.LVL469:
 3102              	.L225:
 186:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   {
 3103              		.loc 49 186 0
 3104 0024 002C     		cmp	r4, #0
 3105 0026 F0D1     		bne	.L226
 195:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c ****   }
 196:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** 
 197:.\DSP\Source\BasicMathFunctions/arm_sub_f32.c **** }
 3106              		.loc 49 197 0
 3107 0028 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3108              		.cfi_endproc
 3109              	.LFE130:
 3110              		.size	arm_sub_f32, .-arm_sub_f32
 3111              		.global	__aeabi_dsub
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 198


 3112              		.section	.text.arm_sub_f64,"ax",%progbits
 3113              		.align	2
 3114              		.global	arm_sub_f64
 3115              		.thumb
 3116              		.thumb_func
 3117              		.type	arm_sub_f64, %function
 3118              	arm_sub_f64:
 3119              	.LFB131:
 3120              		.file 50 ".\\DSP\\Source\\BasicMathFunctions\\arm_sub_f64.c"
   1:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Title:        arm_sub_f64.c
   4:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Description:  Floating-point vector subtraction
   5:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * $Date:        13 September 2021
   7:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * $Revision:    V1.10.0
   8:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @addtogroup BasicSub
  37:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @brief         Floating-point vector subtraction.
  42:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 199


  49:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** void arm_sub_f64(
  50:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   const float64_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   const float64_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****         float64_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****         uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** {
 3121              		.loc 50 54 0
 3122              		.cfi_startproc
 3123              		@ args = 0, pretend = 0, frame = 0
 3124              		@ frame_needed = 0, uses_anonymous_args = 0
 3125              	.LVL470:
 3126 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3127              		.cfi_def_cfa_offset 32
 3128              		.cfi_offset 3, -32
 3129              		.cfi_offset 4, -28
 3130              		.cfi_offset 5, -24
 3131              		.cfi_offset 6, -20
 3132              		.cfi_offset 7, -16
 3133              		.cfi_offset 8, -12
 3134              		.cfi_offset 9, -8
 3135              		.cfi_offset 14, -4
 3136 0004 0E46     		mov	r6, r1
 3137 0006 1546     		mov	r5, r2
 3138 0008 1C46     		mov	r4, r3
 3139              	.LVL471:
  55:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   uint32_t blkCnt;                               /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   /* Initialize blkCnt with number of samples */
  58:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   blkCnt = blockSize;
  59:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   while (blkCnt > 0U)
 3140              		.loc 50 60 0
 3141 000a 10E0     		b	.L229
 3142              	.LVL472:
 3143              	.L230:
  61:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   {
  62:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****     /* C = A - B */
  63:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  64:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****     /* Subtract and store result in destination buffer. */
  65:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 3144              		.loc 50 65 0
 3145 000c 05F10809 		add	r9, r5, #8
 3146              	.LVL473:
 3147 0010 00F10807 		add	r7, r0, #8
 3148              	.LVL474:
 3149 0014 06F10808 		add	r8, r6, #8
 3150              	.LVL475:
 3151 0018 03C8     		ldmia	r0, {r0-r1}
 3152 001a D6E90023 		ldrd	r2, [r6]
 3153 001e FFF7FEFF 		bl	__aeabi_dsub
 3154              	.LVL476:
 3155 0022 C5E90001 		strd	r0, [r5]
  66:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****     /* Decrement loop counter */
  68:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****     blkCnt--;
 3156              		.loc 50 68 0
 3157 0026 013C     		subs	r4, r4, #1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 200


 3158              	.LVL477:
  65:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
 3159              		.loc 50 65 0
 3160 0028 4D46     		mov	r5, r9
 3161 002a 4646     		mov	r6, r8
 3162 002c 3846     		mov	r0, r7
 3163              	.LVL478:
 3164              	.L229:
  60:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   {
 3165              		.loc 50 60 0
 3166 002e 002C     		cmp	r4, #0
 3167 0030 ECD1     		bne	.L230
  69:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c ****   }
  70:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_sub_f64.c **** }
 3168              		.loc 50 71 0
 3169 0032 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3170              		.cfi_endproc
 3171              	.LFE131:
 3172              		.size	arm_sub_f64, .-arm_sub_f64
 3173 0036 00BF     		.section	.text.arm_sub_q15,"ax",%progbits
 3174              		.align	2
 3175              		.global	arm_sub_q15
 3176              		.thumb
 3177              		.thumb_func
 3178              		.type	arm_sub_q15, %function
 3179              	arm_sub_q15:
 3180              	.LFB132:
 3181              		.file 51 ".\\DSP\\Source\\BasicMathFunctions\\arm_sub_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Title:        arm_sub_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Description:  Q15 vector subtraction
   5:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 201


  29:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @addtogroup BasicSub
  37:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @brief         Q15 vector subtraction.
  42:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** void arm_sub_q15(
  58:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     const q15_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     const q15_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     q15_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  64:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     q15x8_t vecA;
  65:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     q15x8_t vecB;
  66:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* Compute 8 outputs at a time */
  68:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt = blockSize >> 3;
  69:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         /*
  72:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          * C = A - B
  73:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          * Subtract and then store the results in the destination buffer.
  74:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          */
  75:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vecA = vld1q(pSrcA);
  76:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vecB = vld1q(pSrcB);
  77:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vst1q(pDst, vqsubq(vecA, vecB));
  78:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          * Decrement the blockSize loop counter
  80:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         blkCnt--;
  82:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         /*
  83:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          * advance vector source and destination pointers
  84:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         pSrcA  += 8;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 202


  86:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         pSrcB  += 8;
  87:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         pDst   += 8;
  88:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****      * tail
  91:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****      */
  92:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt = blockSize & 7;
  93:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     if (blkCnt > 0U)
  94:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  96:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vecA = vld1q(pSrcA);
  97:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vecB = vld1q(pSrcB);
  98:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         vstrhq_p(pDst, vqsubq(vecA, vecB), p0);
  99:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     }
 100:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** }
 101:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #else
 104:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** void arm_sub_q15(
 105:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   const q15_t * pSrcA,
 106:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   const q15_t * pSrcB,
 107:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         q15_t * pDst,
 108:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         uint32_t blockSize)
 109:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** {
 3182              		.loc 51 109 0
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              		@ link register save eliminated.
 3187              	.LVL479:
 3188 0000 70B4     		push	{r4, r5, r6}
 3189              		.cfi_def_cfa_offset 12
 3190              		.cfi_offset 4, -12
 3191              		.cfi_offset 5, -8
 3192              		.cfi_offset 6, -4
 3193              	.LVL480:
 110:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 111:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 113:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #if defined (ARM_MATH_DSP)
 115:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   q31_t inA1, inA2;
 116:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   q31_t inB1, inB2;
 117:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #endif
 118:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 119:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 120:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize >> 2U;
 121:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   while (blkCnt > 0U)
 123:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   {
 124:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* C = A - B */
 125:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 126:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #if defined (ARM_MATH_DSP)
 127:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* read 2 times 2 samples at a time from sourceA */
 128:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     inA1 = read_q15x2_ia (&pSrcA);
 129:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     inA2 = read_q15x2_ia (&pSrcA);
 130:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* read 2 times 2 samples at a time from sourceB */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 203


 131:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     inB1 = read_q15x2_ia (&pSrcB);
 132:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     inB2 = read_q15x2_ia (&pSrcB);
 133:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 134:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* Subtract and store 2 times 2 samples at a time */
 135:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     write_q15x2_ia (&pDst, __QSUB16(inA1, inB1));
 136:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     write_q15x2_ia (&pDst, __QSUB16(inA2, inB2));
 137:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #else
 138:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ - *pSrcB++), 16);
 139:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ - *pSrcB++), 16);
 140:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ - *pSrcB++), 16);
 141:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ - *pSrcB++), 16);
 142:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #endif
 143:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 144:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* Decrement loop counter */
 145:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt--;
 146:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   }
 147:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 148:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 149:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize % 0x4U;
 150:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 151:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #else
 152:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   /* Initialize blkCnt with number of samples */
 154:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize;
 155:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 156:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 157:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 158:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   while (blkCnt > 0U)
 3194              		.loc 51 158 0
 3195 0002 0EE0     		b	.L233
 3196              	.LVL481:
 3197              	.L234:
 159:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   {
 160:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* C = A - B */
 161:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 162:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* Subtract and store result in destination buffer. */
 163:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #if defined (ARM_MATH_DSP)
 164:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __QSUB16(*pSrcA++, *pSrcB++);
 165:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #else
 166:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) *pSrcA++ - *pSrcB++), 16);
 3198              		.loc 51 166 0
 3199 0004 961C     		adds	r6, r2, #2
 3200              	.LVL482:
 3201              	.LBB47:
 3202 0006 841C     		adds	r4, r0, #2
 3203              	.LVL483:
 3204 0008 B0F90000 		ldrsh	r0, [r0]
 3205 000c 8D1C     		adds	r5, r1, #2
 3206              	.LVL484:
 3207 000e B1F90010 		ldrsh	r1, [r1]
 3208 0012 411A     		subs	r1, r0, r1
 3209              	.LVL485:
 3210              	@ 166 ".\DSP\Source\BasicMathFunctions\arm_sub_q15.c" 1
 3211 0014 01F30F01 		ssat r1, #16, r1
 3212              	@ 0 "" 2
 3213              	.LVL486:
 3214              		.thumb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 204


 3215              	.LBE47:
 3216 0018 1180     		strh	r1, [r2]	@ movhi
 3217              	.LVL487:
 167:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #endif
 168:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 169:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     /* Decrement loop counter */
 170:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt--;
 3218              		.loc 51 170 0
 3219 001a 013B     		subs	r3, r3, #1
 3220              	.LVL488:
 166:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** #endif
 3221              		.loc 51 166 0
 3222 001c 3246     		mov	r2, r6
 3223              	.LBB48:
 3224 001e 2946     		mov	r1, r5
 3225              	.LVL489:
 3226 0020 2046     		mov	r0, r4
 3227              	.LVL490:
 3228              	.L233:
 3229              	.LBE48:
 158:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   {
 3230              		.loc 51 158 0
 3231 0022 002B     		cmp	r3, #0
 3232 0024 EED1     		bne	.L234
 171:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c ****   }
 172:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** 
 173:.\DSP\Source\BasicMathFunctions/arm_sub_q15.c **** }
 3233              		.loc 51 173 0
 3234 0026 70BC     		pop	{r4, r5, r6}
 3235              		.cfi_restore 6
 3236              		.cfi_restore 5
 3237              		.cfi_restore 4
 3238              		.cfi_def_cfa_offset 0
 3239 0028 7047     		bx	lr
 3240              		.cfi_endproc
 3241              	.LFE132:
 3242              		.size	arm_sub_q15, .-arm_sub_q15
 3243 002a 00BF     		.section	.text.arm_sub_q31,"ax",%progbits
 3244              		.align	2
 3245              		.global	arm_sub_q31
 3246              		.thumb
 3247              		.thumb_func
 3248              		.type	arm_sub_q31, %function
 3249              	arm_sub_q31:
 3250              	.LFB133:
 3251              		.file 52 ".\\DSP\\Source\\BasicMathFunctions\\arm_sub_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Title:        arm_sub_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Description:  Q31 vector subtraction
   5:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** /*
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 205


  12:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @addtogroup BasicSub
  37:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @brief         Q31 vector subtraction.
  42:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****                    Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated
  51:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  53:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  54:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  55:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #include "arm_helium_utils.h"
  56:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** void arm_sub_q31(
  58:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   const q31_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   const q31_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         q31_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** {
  63:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     uint32_t blkCnt;   
  64:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     q31x4_t vecA;
  65:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     q31x4_t vecB;
  66:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
  67:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* Compute 4 outputs at a time */
  68:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     blkCnt = blockSize >> 2;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 206


  69:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     while (blkCnt > 0U)
  70:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     {
  71:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         /*
  72:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          * C = A + B
  73:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          * Add and then store the results in the destination buffer.
  74:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          */
  75:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vecA = vld1q(pSrcA);
  76:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vecB = vld1q(pSrcB);
  77:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vst1q(pDst, vqsubq(vecA, vecB));
  78:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         /*
  79:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          * Decrement the blockSize loop counter
  80:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          */
  81:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         blkCnt--;
  82:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         /*
  83:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          * advance vector source and destination pointers
  84:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****          */
  85:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         pSrcA  += 4;
  86:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         pSrcB  += 4;
  87:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         pDst   += 4;
  88:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****      * tail
  91:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****      */
  92:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     blkCnt = blockSize & 3;
  93:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     if (blkCnt > 0U)
  94:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  96:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vecA = vld1q(pSrcA);
  97:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vecB = vld1q(pSrcB);
  98:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         vstrwq_p(pDst, vqsubq(vecA, vecB), p0);
  99:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     }
 100:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** }
 101:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #else
 103:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** void arm_sub_q31(
 104:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   const q31_t * pSrcA,
 105:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   const q31_t * pSrcB,
 106:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         q31_t * pDst,
 107:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         uint32_t blockSize)
 108:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** {
 3252              		.loc 52 108 0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 0
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 3256              		@ link register save eliminated.
 3257              	.LVL491:
 3258 0000 F0B4     		push	{r4, r5, r6, r7}
 3259              		.cfi_def_cfa_offset 16
 3260              		.cfi_offset 4, -16
 3261              		.cfi_offset 5, -12
 3262              		.cfi_offset 6, -8
 3263              		.cfi_offset 7, -4
 3264              	.LVL492:
 109:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 110:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 207


 113:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   blkCnt = blockSize >> 2U;
 115:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 116:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   while (blkCnt > 0U)
 117:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   {
 118:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* C = A - B */
 119:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 120:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* Subtract and store result in destination buffer. */
 121:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
 122:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 123:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
 124:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
 126:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 127:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
 128:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* Decrement loop counter */
 130:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     blkCnt--;
 131:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   }
 132:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 133:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 134:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   blkCnt = blockSize % 0x4U;
 135:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 136:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #else
 137:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 138:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   /* Initialize blkCnt with number of samples */
 139:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   blkCnt = blockSize;
 140:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 141:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 142:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 143:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   while (blkCnt > 0U)
 3265              		.loc 52 143 0
 3266 0002 14E0     		b	.L237
 3267              	.LVL493:
 3268              	.L240:
 144:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   {
 145:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* C = A - B */
 146:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 147:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* Subtract and store result in destination buffer. */
 148:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     *pDst++ = __QSUB(*pSrcA++, *pSrcB++);
 3269              		.loc 52 148 0
 3270 0004 161D     		adds	r6, r2, #4
 3271              	.LVL494:
 3272 0006 041D     		adds	r4, r0, #4
 3273              	.LVL495:
 3274 0008 0068     		ldr	r0, [r0]
 3275 000a 0D1D     		adds	r5, r1, #4
 3276              	.LVL496:
 3277 000c 0F68     		ldr	r7, [r1]
 3278              	.LVL497:
 3279              	.LBB49:
 3280              	.LBB50:
 438:.\DSP\Include/dsp/none.h ****   }
 439:.\DSP\Include/dsp/none.h **** 
 440:.\DSP\Include/dsp/none.h **** 
 441:.\DSP\Include/dsp/none.h ****   /*
 442:.\DSP\Include/dsp/none.h ****    * @brief C custom defined QSUB
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 208


 443:.\DSP\Include/dsp/none.h ****    */
 444:.\DSP\Include/dsp/none.h ****   __STATIC_FORCEINLINE int32_t __QSUB(
 445:.\DSP\Include/dsp/none.h ****   int32_t x,
 446:.\DSP\Include/dsp/none.h ****   int32_t y)
 447:.\DSP\Include/dsp/none.h ****   {
 448:.\DSP\Include/dsp/none.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 3281              		.loc 10 448 0
 3282 000e C117     		asrs	r1, r0, #31
 3283 0010 C01B     		subs	r0, r0, r7
 3284              	.LVL498:
 3285 0012 61EBE771 		sbc	r1, r1, r7, asr #31
 3286              	.LVL499:
 3287              	.LBB51:
 3288              	.LBB52:
 140:.\DSP\Include/dsp/none.h ****   }
 3289              		.loc 10 140 0
 3290 0016 B1EBE07F 		cmp	r1, r0, asr #31
 3291 001a 03D0     		beq	.L241
 3292 001c 6FF00040 		mvn	r0, #-2147483648
 3293              	.LVL500:
 3294 0020 80EAE170 		eor	r0, r0, r1, asr #31
 3295              	.L241:
 3296              	.LBE52:
 3297              	.LBE51:
 3298              	.LBE50:
 3299              	.LBE49:
 3300              		.loc 52 148 0
 3301 0024 1060     		str	r0, [r2]
 3302              	.LVL501:
 149:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 150:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     /* Decrement loop counter */
 151:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****     blkCnt--;
 3303              		.loc 52 151 0
 3304 0026 013B     		subs	r3, r3, #1
 3305              	.LVL502:
 148:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 3306              		.loc 52 148 0
 3307 0028 3246     		mov	r2, r6
 3308 002a 2946     		mov	r1, r5
 3309 002c 2046     		mov	r0, r4
 3310              	.LVL503:
 3311              	.L237:
 143:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   {
 3312              		.loc 52 143 0
 3313 002e 002B     		cmp	r3, #0
 3314 0030 E8D1     		bne	.L240
 152:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c ****   }
 153:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** 
 154:.\DSP\Source\BasicMathFunctions/arm_sub_q31.c **** }
 3315              		.loc 52 154 0
 3316 0032 F0BC     		pop	{r4, r5, r6, r7}
 3317              		.cfi_restore 7
 3318              		.cfi_restore 6
 3319              		.cfi_restore 5
 3320              		.cfi_restore 4
 3321              		.cfi_def_cfa_offset 0
 3322 0034 7047     		bx	lr
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 209


 3323              		.cfi_endproc
 3324              	.LFE133:
 3325              		.size	arm_sub_q31, .-arm_sub_q31
 3326 0036 00BF     		.section	.text.arm_sub_q7,"ax",%progbits
 3327              		.align	2
 3328              		.global	arm_sub_q7
 3329              		.thumb
 3330              		.thumb_func
 3331              		.type	arm_sub_q7, %function
 3332              	arm_sub_q7:
 3333              	.LFB134:
 3334              		.file 53 ".\\DSP\\Source\\BasicMathFunctions\\arm_sub_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Title:        arm_sub_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Description:  Q7 vector subtraction
   5:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @addtogroup BasicSub
  37:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @brief         Q7 vector subtraction.
  42:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @param[in]     pSrcA      points to the first input vector
  43:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @param[in]     pSrcB      points to the second input vector
  44:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @param[out]    pDst       points to the output vector
  45:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @param[in]     blockSize  number of samples in each vector
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 210


  46:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   @par           Scaling and Overflow Behavior
  49:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****                    The function uses saturating arithmetic.
  50:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.
  51:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****  */
  52:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  53:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  54:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #include "arm_helium_utils.h"
  55:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  56:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** void arm_sub_q7(
  57:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     const q7_t * pSrcA,
  58:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     const q7_t * pSrcB,
  59:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     q7_t * pDst,
  60:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     uint32_t blockSize)
  61:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** {
  62:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  63:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     q7x16_t vecA;
  64:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     q7x16_t vecB;
  65:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* Compute 16 outputs at a time */
  67:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     blkCnt = blockSize >> 4;
  68:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     while (blkCnt > 0U)
  69:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     {
  70:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         /*
  71:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          * C = A - B
  72:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          * Subtract and then store the results in the destination buffer.
  73:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          */
  74:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vecA = vld1q(pSrcA);
  75:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vecB = vld1q(pSrcB);
  76:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vst1q(pDst, vqsubq(vecA, vecB));
  77:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         /*
  78:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          * Decrement the blockSize loop counter
  79:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          */
  80:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         blkCnt--;
  81:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         /*
  82:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          * advance vector source and destination pointers
  83:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****          */
  84:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         pSrcA  += 16;
  85:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         pSrcB  += 16;
  86:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         pDst   += 16;
  87:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /*
  89:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****      * tail
  90:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****      */
  91:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     blkCnt = blockSize & 0xF;
  92:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     if (blkCnt > 0U)
  93:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     {
  94:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  95:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vecA = vld1q(pSrcA);
  96:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vecB = vld1q(pSrcB);
  97:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         vstrbq_p(pDst, vqsubq(vecA, vecB), p0);
  98:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     }
  99:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** }
 100:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #else
 101:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** void arm_sub_q7(
 102:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   const q7_t * pSrcA,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 211


 103:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   const q7_t * pSrcB,
 104:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         q7_t * pDst,
 105:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         uint32_t blockSize)
 106:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** {
 3335              		.loc 53 106 0
 3336              		.cfi_startproc
 3337              		@ args = 0, pretend = 0, frame = 0
 3338              		@ frame_needed = 0, uses_anonymous_args = 0
 3339              		@ link register save eliminated.
 3340              	.LVL504:
 3341 0000 70B4     		push	{r4, r5, r6}
 3342              		.cfi_def_cfa_offset 12
 3343              		.cfi_offset 4, -12
 3344              		.cfi_offset 5, -8
 3345              		.cfi_offset 6, -4
 3346              	.LVL505:
 107:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 108:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 109:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 110:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 111:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 112:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   blkCnt = blockSize >> 2U;
 113:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   while (blkCnt > 0U)
 115:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   {
 116:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* C = A - B */
 117:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #if defined (ARM_MATH_DSP)
 119:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* Subtract and store result in destination buffer (4 samples at a time). */
 120:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     write_q7x4_ia (&pDst, __QSUB8(read_q7x4_ia (&pSrcA), read_q7x4_ia (&pSrcB)));
 121:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #else
 122:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ - *pSrcB++, 8);
 123:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ - *pSrcB++, 8);
 124:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ - *pSrcB++, 8);
 125:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ - *pSrcB++, 8);
 126:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #endif
 127:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 128:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* Decrement loop counter */
 129:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     blkCnt--;
 130:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   }
 131:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 132:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 133:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   blkCnt = blockSize % 0x4U;
 134:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 135:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #else
 136:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 137:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   /* Initialize blkCnt with number of samples */
 138:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   blkCnt = blockSize;
 139:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 140:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 141:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 142:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   while (blkCnt > 0U)
 3347              		.loc 53 142 0
 3348 0002 0EE0     		b	.L244
 3349              	.LVL506:
 3350              	.L245:
 143:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 212


 144:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* C = A - B */
 145:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 146:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* Subtract and store result in destination buffer. */
 147:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) *pSrcA++ - *pSrcB++, 8);
 3351              		.loc 53 147 0
 3352 0004 561C     		adds	r6, r2, #1
 3353              	.LVL507:
 3354              	.LBB53:
 3355 0006 441C     		adds	r4, r0, #1
 3356              	.LVL508:
 3357 0008 4D1C     		adds	r5, r1, #1
 3358              	.LVL509:
 3359 000a 90F90000 		ldrsb	r0, [r0]
 3360 000e 91F90010 		ldrsb	r1, [r1]
 3361 0012 411A     		subs	r1, r0, r1
 3362              	.LVL510:
 3363              	@ 147 ".\DSP\Source\BasicMathFunctions\arm_sub_q7.c" 1
 3364 0014 01F30701 		ssat r1, #8, r1
 3365              	@ 0 "" 2
 3366              	.LVL511:
 3367              		.thumb
 3368              	.LBE53:
 3369 0018 1170     		strb	r1, [r2]
 3370              	.LVL512:
 148:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 149:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     /* Decrement loop counter */
 150:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****     blkCnt--;
 3371              		.loc 53 150 0
 3372 001a 013B     		subs	r3, r3, #1
 3373              	.LVL513:
 147:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 3374              		.loc 53 147 0
 3375 001c 3246     		mov	r2, r6
 3376              	.LBB54:
 3377 001e 2946     		mov	r1, r5
 3378              	.LVL514:
 3379 0020 2046     		mov	r0, r4
 3380              	.LVL515:
 3381              	.L244:
 3382              	.LBE54:
 142:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   {
 3383              		.loc 53 142 0
 3384 0022 002B     		cmp	r3, #0
 3385 0024 EED1     		bne	.L245
 151:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c ****   }
 152:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** 
 153:.\DSP\Source\BasicMathFunctions/arm_sub_q7.c **** }
 3386              		.loc 53 153 0
 3387 0026 70BC     		pop	{r4, r5, r6}
 3388              		.cfi_restore 6
 3389              		.cfi_restore 5
 3390              		.cfi_restore 4
 3391              		.cfi_def_cfa_offset 0
 3392 0028 7047     		bx	lr
 3393              		.cfi_endproc
 3394              	.LFE134:
 3395              		.size	arm_sub_q7, .-arm_sub_q7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 213


 3396 002a 00BF     		.section	.text.arm_xor_u16,"ax",%progbits
 3397              		.align	2
 3398              		.global	arm_xor_u16
 3399              		.thumb
 3400              		.thumb_func
 3401              		.type	arm_xor_u16, %function
 3402              	arm_xor_u16:
 3403              	.LFB135:
 3404              		.file 54 ".\\DSP\\Source\\BasicMathFunctions\\arm_xor_u16.c"
   1:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Title:        arm_xor_u16.c
   4:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Description:  uint16_t bitwise exclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @defgroup Xor Vector bitwise exclusive OR
  37:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   Compute the logical bitwise XOR.
  39:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   There are separate functions for uint32_t, uint16_t, and uint8_t data types.
  41:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  */
  42:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  43:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /**
  44:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @addtogroup Xor
  45:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @{
  46:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  */
  47:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  48:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** /**
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 214


  49:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @brief         Compute the logical bitwise XOR of two fixed-point vectors.
  50:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @param[in]     pSrcA      points to input vector A
  51:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @param[in]     pSrcB      points to input vector B
  52:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @param[out]    pDst       points to output vector
  53:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @param[in]     blockSize  number of samples in each vector
  54:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****   @return        none
  55:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****  */
  56:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** void arm_xor_u16(
  58:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     const uint16_t * pSrcA,
  59:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     const uint16_t * pSrcB,
  60:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****           uint16_t * pDst,
  61:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****           uint32_t blockSize)
  62:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** {
 3405              		.loc 54 62 0
 3406              		.cfi_startproc
 3407              		@ args = 0, pretend = 0, frame = 0
 3408              		@ frame_needed = 0, uses_anonymous_args = 0
 3409              		@ link register save eliminated.
 3410              	.LVL516:
 3411 0000 30B4     		push	{r4, r5}
 3412              		.cfi_def_cfa_offset 8
 3413              		.cfi_offset 4, -8
 3414              		.cfi_offset 5, -4
 3415              	.LVL517:
  63:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     uint32_t blkCnt;      /* Loop counter */
  64:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  65:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  66:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     uint16x8_t vecSrcA, vecSrcB;
  67:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     /* Compute 8 outputs at a time */
  69:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     blkCnt = blockSize >> 3;
  70:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  71:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     while (blkCnt > 0U)
  72:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     {
  73:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecSrcA = vld1q(pSrcA);
  74:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecSrcB = vld1q(pSrcB);
  75:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vst1q(pDst, veorq_u16(vecSrcA, vecSrcB) );
  77:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pSrcA += 8;
  79:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pSrcB += 8;
  80:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pDst  += 8;
  81:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  82:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         /* Decrement the loop counter */
  83:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         blkCnt--;
  84:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     }
  85:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  86:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     /* Tail */
  87:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     blkCnt = blockSize & 7;
  88:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
  89:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     if (blkCnt > 0U)
  90:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     {
  91:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecSrcA = vld1q(pSrcA);
  93:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecSrcB = vld1q(pSrcB);
  94:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vstrhq_p(pDst, veorq_u16(vecSrcA, vecSrcB), p0);
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 215


  95:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     }
  96:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #else
  97:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  98:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     uint16x8_t vecA, vecB;
  99:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     /* Compute 8 outputs at a time */
 101:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     blkCnt = blockSize >> 3U;
 102:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     while (blkCnt > 0U)
 104:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecA = vld1q_u16(pSrcA);
 106:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vecB = vld1q_u16(pSrcB);
 107:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 108:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         vst1q_u16(pDst, veorq_u16(vecA, vecB) );
 109:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pSrcA += 8;
 111:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pSrcB += 8;
 112:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         pDst  += 8;
 113:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 114:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         /* Decrement the loop counter */
 115:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         blkCnt--;
 116:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     }
 117:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 118:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     /* Tail */
 119:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     blkCnt = blockSize & 7;
 120:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #else
 121:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     /* Initialize blkCnt with number of samples */
 122:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     blkCnt = blockSize;
 123:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #endif
 124:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 125:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     while (blkCnt > 0U)
 3416              		.loc 54 125 0
 3417 0002 07E0     		b	.L248
 3418              	.LVL518:
 3419              	.L249:
 126:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     {
 127:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         *pDst++ = (*pSrcA++)^(*pSrcB++);
 3420              		.loc 54 127 0
 3421 0004 0588     		ldrh	r5, [r0]
 3422              	.LVL519:
 3423 0006 0C88     		ldrh	r4, [r1]
 3424 0008 6C40     		eors	r4, r4, r5
 3425 000a 1480     		strh	r4, [r2]	@ movhi
 128:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 129:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         /* Decrement the loop counter */
 130:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****         blkCnt--;
 3426              		.loc 54 130 0
 3427 000c 013B     		subs	r3, r3, #1
 3428              	.LVL520:
 127:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** 
 3429              		.loc 54 127 0
 3430 000e 0232     		adds	r2, r2, #2
 3431              	.LVL521:
 3432 0010 0231     		adds	r1, r1, #2
 3433              	.LVL522:
 3434 0012 0230     		adds	r0, r0, #2
 3435              	.LVL523:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 216


 3436              	.L248:
 125:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     {
 3437              		.loc 54 125 0
 3438 0014 002B     		cmp	r3, #0
 3439 0016 F5D1     		bne	.L249
 131:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c ****     }
 132:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** #endif /* if defined(ARM_MATH_MVEI) */
 133:.\DSP\Source\BasicMathFunctions/arm_xor_u16.c **** }
 3440              		.loc 54 133 0
 3441 0018 30BC     		pop	{r4, r5}
 3442              		.cfi_restore 5
 3443              		.cfi_restore 4
 3444              		.cfi_def_cfa_offset 0
 3445 001a 7047     		bx	lr
 3446              		.cfi_endproc
 3447              	.LFE135:
 3448              		.size	arm_xor_u16, .-arm_xor_u16
 3449              		.section	.text.arm_xor_u32,"ax",%progbits
 3450              		.align	2
 3451              		.global	arm_xor_u32
 3452              		.thumb
 3453              		.thumb_func
 3454              		.type	arm_xor_u32, %function
 3455              	arm_xor_u32:
 3456              	.LFB136:
 3457              		.file 55 ".\\DSP\\Source\\BasicMathFunctions\\arm_xor_u32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Title:        arm_xor_u32.c
   4:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Description:  uint32_t bitwise exclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** /**
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 217


  32:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @addtogroup Xor
  37:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @brief         Compute the logical bitwise XOR of two fixed-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @param[in]     pSrcA      points to input vector A
  43:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @param[in]     pSrcB      points to input vector B
  44:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** void arm_xor_u32(
  50:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     const uint32_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     const uint32_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****           uint32_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****           uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** {
 3458              		.loc 55 54 0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 0
 3461              		@ frame_needed = 0, uses_anonymous_args = 0
 3462              		@ link register save eliminated.
 3463              	.LVL524:
 3464 0000 30B4     		push	{r4, r5}
 3465              		.cfi_def_cfa_offset 8
 3466              		.cfi_offset 4, -8
 3467              		.cfi_offset 5, -4
 3468              	.LVL525:
  55:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     uint32_t blkCnt;      /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     uint32x4_t vecSrcA, vecSrcB;
  59:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     /* Compute 4 outputs at a time */
  61:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     blkCnt = blockSize >> 2;
  62:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     while (blkCnt > 0U)
  64:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     {
  65:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecSrcA = vld1q(pSrcA);
  66:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecSrcB = vld1q(pSrcB);
  67:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vst1q(pDst, veorq_u32(vecSrcA, vecSrcB) );
  69:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pSrcA += 4;
  71:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pSrcB += 4;
  72:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pDst  += 4;
  73:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         /* Decrement the loop counter */
  75:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         blkCnt--;
  76:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     }
  77:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 218


  78:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     /* Tail */
  79:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     blkCnt = blockSize & 3;
  80:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     if (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  84:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecSrcA = vld1q(pSrcA);
  85:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecSrcB = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vstrwq_p(pDst, veorq_u32(vecSrcA, vecSrcB), p0);
  87:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #else
  89:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  90:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     uint32x4_t vecA, vecB;
  91:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  92:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     /* Compute 4 outputs at a time */
  93:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     blkCnt = blockSize >> 2U;
  94:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     while (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecA = vld1q_u32(pSrcA);
  98:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vecB = vld1q_u32(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         vst1q_u32(pDst, veorq_u32(vecA, vecB) );
 101:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pSrcA += 4;
 103:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pSrcB += 4;
 104:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         pDst  += 4;
 105:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         /* Decrement the loop counter */
 107:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         blkCnt--;
 108:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     /* Tail */
 111:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     blkCnt = blockSize & 3;
 112:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     /* Initialize blkCnt with number of samples */
 114:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     blkCnt = blockSize;
 115:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     while (blkCnt > 0U)
 3469              		.loc 55 117 0
 3470 0002 07E0     		b	.L252
 3471              	.LVL526:
 3472              	.L253:
 118:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     {
 119:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         *pDst++ = (*pSrcA++)^(*pSrcB++);
 3473              		.loc 55 119 0
 3474 0004 0568     		ldr	r5, [r0]
 3475              	.LVL527:
 3476 0006 0C68     		ldr	r4, [r1]
 3477 0008 6C40     		eors	r4, r4, r5
 3478 000a 1460     		str	r4, [r2]
 120:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         /* Decrement the loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****         blkCnt--;
 3479              		.loc 55 122 0
 3480 000c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 219


 3481              	.LVL528:
 119:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** 
 3482              		.loc 55 119 0
 3483 000e 0432     		adds	r2, r2, #4
 3484              	.LVL529:
 3485 0010 0431     		adds	r1, r1, #4
 3486              	.LVL530:
 3487 0012 0430     		adds	r0, r0, #4
 3488              	.LVL531:
 3489              	.L252:
 117:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     {
 3490              		.loc 55 117 0
 3491 0014 002B     		cmp	r3, #0
 3492 0016 F5D1     		bne	.L253
 123:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c ****     }
 124:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** #endif /* if defined(ARM_MATH_MVEI) */
 125:.\DSP\Source\BasicMathFunctions/arm_xor_u32.c **** }
 3493              		.loc 55 125 0
 3494 0018 30BC     		pop	{r4, r5}
 3495              		.cfi_restore 5
 3496              		.cfi_restore 4
 3497              		.cfi_def_cfa_offset 0
 3498 001a 7047     		bx	lr
 3499              		.cfi_endproc
 3500              	.LFE136:
 3501              		.size	arm_xor_u32, .-arm_xor_u32
 3502              		.section	.text.arm_xor_u8,"ax",%progbits
 3503              		.align	2
 3504              		.global	arm_xor_u8
 3505              		.thumb
 3506              		.thumb_func
 3507              		.type	arm_xor_u8, %function
 3508              	arm_xor_u8:
 3509              	.LFB137:
 3510              		.file 56 ".\\DSP\\Source\\BasicMathFunctions\\arm_xor_u8.c"
   1:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Title:        arm_xor_u8.c
   4:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Description:  uint8_t bitwise exclusive OR
   5:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 220


  23:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @addtogroup Xor
  37:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @{
  38:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  */
  39:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** /**
  41:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @brief         Compute the logical bitwise XOR of two fixed-point vectors.
  42:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @param[in]     pSrcA      points to input vector A
  43:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @param[in]     pSrcB      points to input vector B
  44:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @param[out]    pDst       points to output vector
  45:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @param[in]     blockSize  number of samples in each vector
  46:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****   @return        none
  47:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****  */
  48:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  49:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** void arm_xor_u8(
  50:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     const uint8_t * pSrcA,
  51:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     const uint8_t * pSrcB,
  52:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****           uint8_t * pDst,
  53:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****           uint32_t blockSize)
  54:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** {
 3511              		.loc 56 54 0
 3512              		.cfi_startproc
 3513              		@ args = 0, pretend = 0, frame = 0
 3514              		@ frame_needed = 0, uses_anonymous_args = 0
 3515              		@ link register save eliminated.
 3516              	.LVL532:
 3517 0000 30B4     		push	{r4, r5}
 3518              		.cfi_def_cfa_offset 8
 3519              		.cfi_offset 4, -8
 3520              		.cfi_offset 5, -4
 3521              	.LVL533:
  55:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     uint32_t blkCnt;      /* Loop counter */
  56:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  57:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  58:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     uint8x16_t vecSrcA, vecSrcB;
  59:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  60:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     /* Compute 16 outputs at a time */
  61:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     blkCnt = blockSize >> 4;
  62:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     while (blkCnt > 0U)
  64:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     {
  65:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecSrcA = vld1q(pSrcA);
  66:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecSrcB = vld1q(pSrcB);
  67:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  68:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vst1q(pDst, veorq_u8(vecSrcA, vecSrcB) );
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 221


  69:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  70:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pSrcA += 16;
  71:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pSrcB += 16;
  72:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pDst  += 16;
  73:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  74:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         /* Decrement the loop counter */
  75:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         blkCnt--;
  76:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     }
  77:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  78:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     /* Tail */
  79:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     blkCnt = blockSize & 0xF;
  80:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  81:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     if (blkCnt > 0U)
  82:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     {
  83:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  84:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecSrcA = vld1q(pSrcA);
  85:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecSrcB = vld1q(pSrcB);
  86:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vstrbq_p(pDst, veorq_u8(vecSrcA, vecSrcB), p0);
  87:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     }
  88:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #else
  89:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  90:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     uint8x16_t vecA, vecB;
  91:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  92:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     /* Compute 16 outputs at a time */
  93:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     blkCnt = blockSize >> 4U;
  94:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
  95:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     while (blkCnt > 0U)
  96:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     {
  97:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecA = vld1q_u8(pSrcA);
  98:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vecB = vld1q_u8(pSrcB);
  99:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 100:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         vst1q_u8(pDst, veorq_u8(vecA, vecB) );
 101:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 102:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pSrcA += 16;
 103:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pSrcB += 16;
 104:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         pDst  += 16;
 105:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 106:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         /* Decrement the loop counter */
 107:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         blkCnt--;
 108:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     }
 109:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 110:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     /* Tail */
 111:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     blkCnt = blockSize & 0xF;
 112:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     /* Initialize blkCnt with number of samples */
 114:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     blkCnt = blockSize;
 115:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #endif
 116:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 117:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     while (blkCnt > 0U)
 3522              		.loc 56 117 0
 3523 0002 07E0     		b	.L256
 3524              	.LVL534:
 3525              	.L257:
 118:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     {
 119:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         *pDst++ = (*pSrcA++)^(*pSrcB++);
 3526              		.loc 56 119 0
 3527 0004 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 222


 3528              	.LVL535:
 3529 0006 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 3530 0008 6C40     		eors	r4, r4, r5
 3531 000a 1470     		strb	r4, [r2]
 120:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 121:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         /* Decrement the loop counter */
 122:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****         blkCnt--;
 3532              		.loc 56 122 0
 3533 000c 013B     		subs	r3, r3, #1
 3534              	.LVL536:
 119:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** 
 3535              		.loc 56 119 0
 3536 000e 0132     		adds	r2, r2, #1
 3537              	.LVL537:
 3538 0010 0131     		adds	r1, r1, #1
 3539              	.LVL538:
 3540 0012 0130     		adds	r0, r0, #1
 3541              	.LVL539:
 3542              	.L256:
 117:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     {
 3543              		.loc 56 117 0
 3544 0014 002B     		cmp	r3, #0
 3545 0016 F5D1     		bne	.L257
 123:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c ****     }
 124:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** #endif /* if defined(ARM_MATH_MVEI) */
 125:.\DSP\Source\BasicMathFunctions/arm_xor_u8.c **** }
 3546              		.loc 56 125 0
 3547 0018 30BC     		pop	{r4, r5}
 3548              		.cfi_restore 5
 3549              		.cfi_restore 4
 3550              		.cfi_def_cfa_offset 0
 3551 001a 7047     		bx	lr
 3552              		.cfi_endproc
 3553              	.LFE137:
 3554              		.size	arm_xor_u8, .-arm_xor_u8
 3555              		.global	__aeabi_fcmpgt
 3556              		.global	__aeabi_fcmplt
 3557              		.section	.text.arm_clip_f32,"ax",%progbits
 3558              		.align	2
 3559              		.global	arm_clip_f32
 3560              		.thumb
 3561              		.thumb_func
 3562              		.type	arm_clip_f32, %function
 3563              	arm_clip_f32:
 3564              	.LFB138:
 3565              		.file 57 ".\\DSP\\Source\\BasicMathFunctions\\arm_clip_f32.c"
   1:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Title:        arm_clip_f32.c
   4:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /*
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 223


  12:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /**
  36:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @defgroup BasicClip Elementwise clipping
  37:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  38:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   Element-by-element clipping of a value.
  39:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  40:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   The value is constrained between 2 bounds.
  41:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  42:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  43:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  */
  44:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  45:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /**
  46:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @addtogroup BasicClip
  47:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @{
  48:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  */
  49:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  50:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** /**
  51:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @brief         Elementwise floating-point clipping
  52:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @param[in]     pSrc          points to input values
  53:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @param[out]    pDst          points to output clipped values
  54:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @param[in]     low           lower bound
  55:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @param[in]     high          higher bound
  56:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @param[in]     numSamples    number of samples to clip
  57:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   @return        none
  58:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****  */
  59:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  60:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  61:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** #include "arm_helium_utils.h"
  62:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** void arm_clip_f32(const float32_t * pSrc, 
  64:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t * pDst, 
  65:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t low, 
  66:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t high, 
  67:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   uint32_t numSamples)
  68:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 224


  69:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     uint32_t  blkCnt;
  70:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     f32x4_t curVec0, curVec1;
  71:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     f32x4_t vecLow, vecHigh;
  72:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  73:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     vecLow = vdupq_n_f32(low);
  74:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     vecHigh = vdupq_n_f32(high);
  75:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
  76:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     curVec0 = vld1q(pSrc);
  77:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     pSrc += 4;
  78:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     /*
  79:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      * unrolled x 2 to allow
  80:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      * vldr/vstr/vmin/vmax
  81:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      * stall free interleaving
  82:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      */
  83:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     blkCnt = numSamples >> 3;
  84:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     while (blkCnt--)
  85:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {
  86:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vmaxnmq(curVec0, vecLow);
  87:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec1 = vld1q(pSrc);
  88:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pSrc += 4;
  89:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vminnmq(curVec0, vecHigh);
  90:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         vst1q(pDst, curVec0);
  91:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pDst += 4;
  92:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec1 = vmaxnmq(curVec1, vecLow);
  93:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vld1q(pSrc);
  94:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pSrc += 4;
  95:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec1 = vminnmq(curVec1, vecHigh);
  96:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         vst1q(pDst, curVec1);
  97:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pDst += 4;
  98:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     }
  99:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     /*
 100:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      * Tail handling
 101:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****      */
 102:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     blkCnt = numSamples - ((numSamples >> 3) << 3);
 103:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     if (blkCnt >= 4)
 104:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vmaxnmq(curVec0, vecLow);
 106:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vminnmq(curVec0, vecHigh);
 107:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         vst1q(pDst, curVec0);
 108:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pDst += 4;
 109:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vld1q(pSrc);
 110:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         pSrc += 4;
 111:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     }
 112:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
 113:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     if (blkCnt > 0)
 114:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {
 115:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         mve_pred16_t p0 = vctp32q(blkCnt & 3);
 116:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vmaxnmq(curVec0, vecLow);
 117:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         curVec0 = vminnmq(curVec0, vecHigh);
 118:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         vstrwq_p(pDst, curVec0, p0);
 119:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     }
 120:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** }
 121:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** 
 122:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** #else
 123:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** void arm_clip_f32(const float32_t * pSrc, 
 124:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t * pDst, 
 125:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t low, 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 225


 126:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   float32_t high, 
 127:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****   uint32_t numSamples)
 128:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** {
 3566              		.loc 57 128 0
 3567              		.cfi_startproc
 3568              		@ args = 4, pretend = 0, frame = 0
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570              	.LVL540:
 3571 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3572              		.cfi_def_cfa_offset 40
 3573              		.cfi_offset 3, -40
 3574              		.cfi_offset 4, -36
 3575              		.cfi_offset 5, -32
 3576              		.cfi_offset 6, -28
 3577              		.cfi_offset 7, -24
 3578              		.cfi_offset 8, -20
 3579              		.cfi_offset 9, -16
 3580              		.cfi_offset 10, -12
 3581              		.cfi_offset 11, -8
 3582              		.cfi_offset 14, -4
 3583 0004 8146     		mov	r9, r0
 3584 0006 8A46     		mov	r10, r1
 3585 0008 9346     		mov	fp, r2
 3586 000a 1E46     		mov	r6, r3
 3587 000c DDF82880 		ldr	r8, [sp, #40]
 3588              	.LVL541:
 129:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     uint32_t i;
 130:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     for (i = 0; i < numSamples; i++)
 3589              		.loc 57 130 0
 3590 0010 0024     		movs	r4, #0
 3591 0012 15E0     		b	.L260
 3592              	.LVL542:
 3593              	.L266:
 131:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {                                        
 132:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         if (pSrc[i] > high)                  
 3594              		.loc 57 132 0
 3595 0014 A700     		lsls	r7, r4, #2
 3596 0016 59F82450 		ldr	r5, [r9, r4, lsl #2]	@ float
 3597 001a 2846     		mov	r0, r5
 3598 001c 3146     		mov	r1, r6
 3599 001e FFF7FEFF 		bl	__aeabi_fcmpgt
 3600              	.LVL543:
 3601 0022 10B1     		cbz	r0, .L269
 133:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****             pDst[i] = high;                  
 3602              		.loc 57 133 0
 3603 0024 4AF82460 		str	r6, [r10, r4, lsl #2]	@ float
 3604 0028 09E0     		b	.L263
 3605              	.L269:
 134:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         else if (pSrc[i] < low)              
 3606              		.loc 57 134 0
 3607 002a 2846     		mov	r0, r5
 3608 002c 5946     		mov	r1, fp
 3609 002e FFF7FEFF 		bl	__aeabi_fcmplt
 3610              	.LVL544:
 3611 0032 10B1     		cbz	r0, .L270
 135:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****             pDst[i] = low;                   
 3612              		.loc 57 135 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 226


 3613 0034 4AF807B0 		str	fp, [r10, r7]	@ float
 3614 0038 01E0     		b	.L263
 3615              	.L270:
 136:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****         else                                 
 137:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****             pDst[i] = pSrc[i];               
 3616              		.loc 57 137 0
 3617 003a 4AF80750 		str	r5, [r10, r7]	@ float
 3618              	.L263:
 130:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {                                        
 3619              		.loc 57 130 0 discriminator 2
 3620 003e 0134     		adds	r4, r4, #1
 3621              	.LVL545:
 3622              	.L260:
 130:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     {                                        
 3623              		.loc 57 130 0 is_stmt 0 discriminator 1
 3624 0040 4445     		cmp	r4, r8
 3625 0042 E7D3     		bcc	.L266
 138:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c ****     }
 139:.\DSP\Source\BasicMathFunctions/arm_clip_f32.c **** }
 3626              		.loc 57 139 0 is_stmt 1
 3627 0044 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3628              		.cfi_endproc
 3629              	.LFE138:
 3630              		.size	arm_clip_f32, .-arm_clip_f32
 3631              		.section	.text.arm_clip_q31,"ax",%progbits
 3632              		.align	2
 3633              		.global	arm_clip_q31
 3634              		.thumb
 3635              		.thumb_func
 3636              		.type	arm_clip_q31, %function
 3637              	arm_clip_q31:
 3638              	.LFB139:
 3639              		.file 58 ".\\DSP\\Source\\BasicMathFunctions\\arm_clip_q31.c"
   1:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Title:        arm_clip_q31.c
   4:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 227


  25:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @addtogroup BasicClip
  38:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @brief         Elementwise fixed-point clipping
  43:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @param[in]     pSrc          points to input values
  44:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @param[out]    pDst          points to output clipped values
  45:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @param[in]     low           lower bound
  46:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @param[in]     high          higher bound
  47:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @param[in]     numSamples    number of samples to clip
  48:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   @return        none
  49:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****  */
  50:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  51:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** #include "arm_helium_utils.h"
  53:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** void arm_clip_q31(const q31_t * pSrc, 
  54:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t * pDst, 
  55:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t low, 
  56:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t high, 
  57:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   uint32_t numSamples)
  58:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** {
  59:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     uint32_t  blkCnt;
  60:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     q31x4_t curVec0, curVec1;
  61:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     q31x4_t vecLow, vecHigh;
  62:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     vecLow = vdupq_n_s32(low);
  64:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     vecHigh = vdupq_n_s32(high);
  65:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     curVec0 = vld1q(pSrc);
  67:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     pSrc += 4;
  68:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     /*
  69:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      * unrolled x 2 to allow
  70:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      * vldr/vstr/vmin/vmax
  71:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      * stall free interleaving
  72:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      */
  73:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     blkCnt = numSamples >> 3;
  74:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     while (blkCnt--)
  75:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {
  76:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vmaxq(curVec0, vecLow);
  77:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec1 = vld1q(pSrc);
  78:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pSrc += 4;
  79:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vminq(curVec0, vecHigh);
  80:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         vst1q(pDst, curVec0);
  81:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pDst += 4;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 228


  82:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec1 = vmaxq(curVec1, vecLow);
  83:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vld1q(pSrc);
  84:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pSrc += 4;
  85:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec1 = vminq(curVec1, vecHigh);
  86:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         vst1q(pDst, curVec1);
  87:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pDst += 4;
  88:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      * Tail handling
  91:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****      */
  92:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     blkCnt = numSamples - ((numSamples >> 3) << 3);
  93:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     if (blkCnt >= 4)
  94:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vmaxq(curVec0, vecLow);
  96:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vminq(curVec0, vecHigh);
  97:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         vst1q(pDst, curVec0);
  98:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pDst += 4;
  99:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vld1q(pSrc);
 100:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         pSrc += 4;
 101:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     if (blkCnt > 0)
 104:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt & 3);
 106:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vmaxq(curVec0, vecLow);
 107:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         curVec0 = vminq(curVec0, vecHigh);
 108:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         vstrwq_p(pDst, curVec0, p0);
 109:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** }
 111:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** void arm_clip_q31(const q31_t * pSrc, 
 114:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t * pDst, 
 115:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t low, 
 116:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   q31_t high, 
 117:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****   uint32_t numSamples)
 118:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** {
 3640              		.loc 58 118 0
 3641              		.cfi_startproc
 3642              		@ args = 4, pretend = 0, frame = 0
 3643              		@ frame_needed = 0, uses_anonymous_args = 0
 3644              		@ link register save eliminated.
 3645              	.LVL546:
 3646 0000 F0B4     		push	{r4, r5, r6, r7}
 3647              		.cfi_def_cfa_offset 16
 3648              		.cfi_offset 4, -16
 3649              		.cfi_offset 5, -12
 3650              		.cfi_offset 6, -8
 3651              		.cfi_offset 7, -4
 3652 0002 049F     		ldr	r7, [sp, #16]
 3653              	.LVL547:
 119:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     uint32_t i;
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     for (i = 0; i < numSamples; i++)
 3654              		.loc 58 120 0
 3655 0004 0024     		movs	r4, #0
 3656 0006 0DE0     		b	.L273
 3657              	.LVL548:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 229


 3658              	.L277:
 121:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {                                        
 122:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         if (pSrc[i] > high)                  
 3659              		.loc 58 122 0
 3660 0008 A600     		lsls	r6, r4, #2
 3661 000a 50F82450 		ldr	r5, [r0, r4, lsl #2]
 3662 000e 9D42     		cmp	r5, r3
 3663 0010 02DD     		ble	.L274
 123:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****             pDst[i] = high;                  
 3664              		.loc 58 123 0
 3665 0012 41F82430 		str	r3, [r1, r4, lsl #2]
 3666 0016 04E0     		b	.L275
 3667              	.L274:
 124:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         else if (pSrc[i] < low)              
 3668              		.loc 58 124 0
 3669 0018 9542     		cmp	r5, r2
 3670 001a 01DA     		bge	.L276
 125:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****             pDst[i] = low;                   
 3671              		.loc 58 125 0
 3672 001c 8A51     		str	r2, [r1, r6]
 3673 001e 00E0     		b	.L275
 3674              	.L276:
 126:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****         else                                 
 127:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****             pDst[i] = pSrc[i];               
 3675              		.loc 58 127 0
 3676 0020 8D51     		str	r5, [r1, r6]
 3677              	.L275:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {                                        
 3678              		.loc 58 120 0 discriminator 2
 3679 0022 0134     		adds	r4, r4, #1
 3680              	.LVL549:
 3681              	.L273:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     {                                        
 3682              		.loc 58 120 0 is_stmt 0 discriminator 1
 3683 0024 BC42     		cmp	r4, r7
 3684 0026 EFD3     		bcc	.L277
 128:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c ****     }
 129:.\DSP\Source\BasicMathFunctions/arm_clip_q31.c **** }
 3685              		.loc 58 129 0 is_stmt 1
 3686 0028 F0BC     		pop	{r4, r5, r6, r7}
 3687              		.cfi_restore 7
 3688              		.cfi_restore 6
 3689              		.cfi_restore 5
 3690              		.cfi_restore 4
 3691              		.cfi_def_cfa_offset 0
 3692              	.LVL550:
 3693 002a 7047     		bx	lr
 3694              		.cfi_endproc
 3695              	.LFE139:
 3696              		.size	arm_clip_q31, .-arm_clip_q31
 3697              		.section	.text.arm_clip_q15,"ax",%progbits
 3698              		.align	2
 3699              		.global	arm_clip_q15
 3700              		.thumb
 3701              		.thumb_func
 3702              		.type	arm_clip_q15, %function
 3703              	arm_clip_q15:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 230


 3704              	.LFB140:
 3705              		.file 59 ".\\DSP\\Source\\BasicMathFunctions\\arm_clip_q15.c"
   1:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Title:        arm_clip_q15.c
   4:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  35:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @addtogroup BasicClip
  38:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @brief         Elementwise fixed-point clipping
  43:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @param[in]     pSrc          points to input values
  44:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @param[out]    pDst          points to output clipped values
  45:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @param[in]     low           lower bound
  46:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @param[in]     high          higher bound
  47:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @param[in]     numSamples    number of samples to clip
  48:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   @return        none
  49:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****  */
  50:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  51:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** #include "arm_helium_utils.h"
  53:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** void arm_clip_q15(const q15_t * pSrc, 
  54:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t * pDst, 
  55:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t low, 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 231


  56:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t high, 
  57:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   uint32_t numSamples)
  58:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** {
  59:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     uint32_t  blkCnt;
  60:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     q15x8_t curVec0, curVec1;
  61:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     q15x8_t vecLow, vecHigh;
  62:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     vecLow = vdupq_n_s16(low);
  64:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     vecHigh = vdupq_n_s16(high);
  65:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     curVec0 = vld1q(pSrc);
  67:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     pSrc += 8;
  68:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     /*
  69:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      * unrolled x 2 to allow
  70:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      * vldr/vstr/vmin/vmax
  71:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      * stall free interleaving
  72:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      */
  73:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     blkCnt = numSamples >> 4;
  74:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     while (blkCnt--)
  75:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {
  76:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vmaxq(curVec0, vecLow);
  77:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec1 = vld1q(pSrc);
  78:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pSrc += 8;
  79:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vminq(curVec0, vecHigh);
  80:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         vst1q(pDst, curVec0);
  81:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pDst += 8;
  82:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec1 = vmaxq(curVec1, vecLow);
  83:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vld1q(pSrc);
  84:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pSrc += 8;
  85:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec1 = vminq(curVec1, vecHigh);
  86:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         vst1q(pDst, curVec1);
  87:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pDst += 8;
  88:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      * Tail handling
  91:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****      */
  92:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     blkCnt = numSamples - ((numSamples >> 4) << 4);
  93:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     if (blkCnt >= 8)
  94:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vmaxq(curVec0, vecLow);
  96:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vminq(curVec0, vecHigh);
  97:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         vst1q(pDst, curVec0);
  98:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pDst += 8;
  99:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vld1q(pSrc);
 100:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         pSrc += 8;
 101:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     if (blkCnt > 0)
 104:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt & 7);
 106:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vmaxq(curVec0, vecLow);
 107:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         curVec0 = vminq(curVec0, vecHigh);
 108:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         vstrhq_p(pDst, curVec0, p0);
 109:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** }
 111:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** #else
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 232


 113:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** void arm_clip_q15(const q15_t * pSrc, 
 114:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t * pDst, 
 115:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t low, 
 116:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   q15_t high, 
 117:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****   uint32_t numSamples)
 118:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** {
 3706              		.loc 59 118 0
 3707              		.cfi_startproc
 3708              		@ args = 4, pretend = 0, frame = 0
 3709              		@ frame_needed = 0, uses_anonymous_args = 0
 3710              	.LVL551:
 3711 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3712              		.cfi_def_cfa_offset 20
 3713              		.cfi_offset 4, -20
 3714              		.cfi_offset 5, -16
 3715              		.cfi_offset 6, -12
 3716              		.cfi_offset 7, -8
 3717              		.cfi_offset 14, -4
 3718 0002 DDF814E0 		ldr	lr, [sp, #20]
 3719              	.LVL552:
 119:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     uint32_t i;
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     for (i = 0; i < numSamples; i++)
 3720              		.loc 59 120 0
 3721 0006 0024     		movs	r4, #0
 3722 0008 0FE0     		b	.L280
 3723              	.LVL553:
 3724              	.L284:
 121:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {                                        
 122:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         if (pSrc[i] > high)                  
 3725              		.loc 59 122 0
 3726 000a 6700     		lsls	r7, r4, #1
 3727 000c 30F81450 		ldrh	r5, [r0, r4, lsl #1]
 3728 0010 2EB2     		sxth	r6, r5
 3729 0012 9E42     		cmp	r6, r3
 3730 0014 02DD     		ble	.L281
 123:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****             pDst[i] = high;                  
 3731              		.loc 59 123 0
 3732 0016 21F81430 		strh	r3, [r1, r4, lsl #1]	@ movhi
 3733 001a 05E0     		b	.L282
 3734              	.L281:
 124:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         else if (pSrc[i] < low)              
 3735              		.loc 59 124 0
 3736 001c 2EB2     		sxth	r6, r5
 3737 001e 9642     		cmp	r6, r2
 3738 0020 01DA     		bge	.L283
 125:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****             pDst[i] = low;                   
 3739              		.loc 59 125 0
 3740 0022 CA53     		strh	r2, [r1, r7]	@ movhi
 3741 0024 00E0     		b	.L282
 3742              	.L283:
 126:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****         else                                 
 127:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****             pDst[i] = pSrc[i];               
 3743              		.loc 59 127 0
 3744 0026 CD53     		strh	r5, [r1, r7]	@ movhi
 3745              	.L282:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {                                        
 3746              		.loc 59 120 0 discriminator 2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 233


 3747 0028 0134     		adds	r4, r4, #1
 3748              	.LVL554:
 3749              	.L280:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     {                                        
 3750              		.loc 59 120 0 is_stmt 0 discriminator 1
 3751 002a 7445     		cmp	r4, lr
 3752 002c EDD3     		bcc	.L284
 128:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c ****     }
 129:.\DSP\Source\BasicMathFunctions/arm_clip_q15.c **** }
 3753              		.loc 59 129 0 is_stmt 1
 3754 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 3755              		.cfi_endproc
 3756              	.LFE140:
 3757              		.size	arm_clip_q15, .-arm_clip_q15
 3758              		.section	.text.arm_clip_q7,"ax",%progbits
 3759              		.align	2
 3760              		.global	arm_clip_q7
 3761              		.thumb
 3762              		.thumb_func
 3763              		.type	arm_clip_q7, %function
 3764              	arm_clip_q7:
 3765              	.LFB141:
 3766              		.file 60 ".\\DSP\\Source\\BasicMathFunctions\\arm_clip_q7.c"
   1:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Title:        arm_clip_q7.c
   4:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Description:  Floating-point vector addition
   5:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
   6:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
   9:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** /*
  12:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
  14:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
  16:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
  20:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  *
  22:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  * limitations under the License.
  27:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  */
  28:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  29:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** #include "dsp/basic_math_functions.h"
  30:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  31:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** /**
  32:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @ingroup groupMath
  33:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  */
  34:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 234


  35:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  36:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** /**
  37:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @addtogroup BasicClip
  38:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @{
  39:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  */
  40:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  41:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** /**
  42:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @brief         Elementwise fixed-point clipping
  43:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @param[in]     pSrc          points to input values
  44:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @param[out]    pDst          points to output clipped values
  45:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @param[in]     low           lower bound
  46:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @param[in]     high          higher bound
  47:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @param[in]     numSamples    number of samples to clip
  48:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   @return        none
  49:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****  */
  50:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  51:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  52:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** #include "arm_helium_utils.h"
  53:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** void arm_clip_q7(const q7_t * pSrc, 
  54:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t * pDst, 
  55:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t low, 
  56:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t high, 
  57:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   uint32_t numSamples)
  58:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** {
  59:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     uint32_t  blkCnt;
  60:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     q7x16_t curVec0, curVec1;
  61:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     q7x16_t vecLow, vecHigh;
  62:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  63:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     vecLow = vdupq_n_s8(low);
  64:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     vecHigh = vdupq_n_s8(high);
  65:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
  66:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     curVec0 = vld1q(pSrc);
  67:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     pSrc += 16;
  68:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     /*
  69:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      * unrolled x 2 to allow
  70:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      * vldr/vstr/vmin/vmax
  71:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      * stall free interleaving
  72:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      */
  73:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     blkCnt = numSamples >> 5;
  74:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     while (blkCnt--)
  75:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {
  76:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vmaxq(curVec0, vecLow);
  77:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec1 = vld1q(pSrc);
  78:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pSrc += 16;
  79:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vminq(curVec0, vecHigh);
  80:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         vst1q(pDst, curVec0);
  81:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pDst += 16;
  82:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec1 = vmaxq(curVec1, vecLow);
  83:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vld1q(pSrc);
  84:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pSrc += 16;
  85:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec1 = vminq(curVec1, vecHigh);
  86:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         vst1q(pDst, curVec1);
  87:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pDst += 16;
  88:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     }
  89:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     /*
  90:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      * Tail handling
  91:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****      */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 235


  92:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     blkCnt = numSamples - ((numSamples >> 5) << 5);
  93:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     if (blkCnt >= 16)
  94:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {
  95:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vmaxq(curVec0, vecLow);
  96:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vminq(curVec0, vecHigh);
  97:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         vst1q(pDst, curVec0);
  98:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pDst += 16;
  99:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vld1q(pSrc);
 100:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         pSrc += 16;
 101:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     }
 102:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
 103:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     if (blkCnt > 0)
 104:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {
 105:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt & 0xf);
 106:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vmaxq(curVec0, vecLow);
 107:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         curVec0 = vminq(curVec0, vecHigh);
 108:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         vstrbq_p(pDst, curVec0, p0);
 109:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     }
 110:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** }
 111:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** 
 112:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** #else
 113:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** void arm_clip_q7(const q7_t * pSrc, 
 114:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t * pDst, 
 115:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t low, 
 116:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   q7_t high, 
 117:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****   uint32_t numSamples)
 118:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** {
 3767              		.loc 60 118 0
 3768              		.cfi_startproc
 3769              		@ args = 4, pretend = 0, frame = 0
 3770              		@ frame_needed = 0, uses_anonymous_args = 0
 3771              		@ link register save eliminated.
 3772              	.LVL555:
 3773 0000 F0B4     		push	{r4, r5, r6, r7}
 3774              		.cfi_def_cfa_offset 16
 3775              		.cfi_offset 4, -16
 3776              		.cfi_offset 5, -12
 3777              		.cfi_offset 6, -8
 3778              		.cfi_offset 7, -4
 3779 0002 049F     		ldr	r7, [sp, #16]
 3780              	.LVL556:
 119:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     uint32_t i;
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     for (i = 0; i < numSamples; i++)
 3781              		.loc 60 120 0
 3782 0004 0024     		movs	r4, #0
 3783 0006 0CE0     		b	.L287
 3784              	.LVL557:
 3785              	.L291:
 121:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {                                        
 122:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         if (pSrc[i] > high)                  
 3786              		.loc 60 122 0
 3787 0008 055D     		ldrb	r5, [r0, r4]	@ zero_extendqisi2
 3788 000a 6EB2     		sxtb	r6, r5
 3789 000c 9E42     		cmp	r6, r3
 3790 000e 01DD     		ble	.L288
 123:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****             pDst[i] = high;                  
 3791              		.loc 60 123 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 236


 3792 0010 0B55     		strb	r3, [r1, r4]
 3793 0012 05E0     		b	.L289
 3794              	.L288:
 124:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         else if (pSrc[i] < low)              
 3795              		.loc 60 124 0
 3796 0014 6EB2     		sxtb	r6, r5
 3797 0016 9642     		cmp	r6, r2
 3798 0018 01DA     		bge	.L290
 125:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****             pDst[i] = low;                   
 3799              		.loc 60 125 0
 3800 001a 0A55     		strb	r2, [r1, r4]
 3801 001c 00E0     		b	.L289
 3802              	.L290:
 126:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****         else                                 
 127:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****             pDst[i] = pSrc[i];               
 3803              		.loc 60 127 0
 3804 001e 0D55     		strb	r5, [r1, r4]
 3805              	.L289:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {                                        
 3806              		.loc 60 120 0 discriminator 2
 3807 0020 0134     		adds	r4, r4, #1
 3808              	.LVL558:
 3809              	.L287:
 120:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     {                                        
 3810              		.loc 60 120 0 is_stmt 0 discriminator 1
 3811 0022 BC42     		cmp	r4, r7
 3812 0024 F0D3     		bcc	.L291
 128:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c ****     }
 129:.\DSP\Source\BasicMathFunctions/arm_clip_q7.c **** }
 3813              		.loc 60 129 0 is_stmt 1
 3814 0026 F0BC     		pop	{r4, r5, r6, r7}
 3815              		.cfi_restore 7
 3816              		.cfi_restore 6
 3817              		.cfi_restore 5
 3818              		.cfi_restore 4
 3819              		.cfi_def_cfa_offset 0
 3820              	.LVL559:
 3821 0028 7047     		bx	lr
 3822              		.cfi_endproc
 3823              	.LFE141:
 3824              		.size	arm_clip_q7, .-arm_clip_q7
 3825 002a 00BF     		.text
 3826              	.Letext0:
 3827              		.file 61 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9
 3828              		.file 62 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9
 3829              		.file 63 ".\\DSP\\Include/arm_math_types.h"
 3830              		.file 64 ".\\Core\\Include/cmsis_gcc.h"
 3831              		.section	.debug_info,"",%progbits
 3832              	.Ldebug_info0:
 3833 0000 2E1C0000 		.4byte	0x1c2e
 3834 0004 0400     		.2byte	0x4
 3835 0006 00000000 		.4byte	.Ldebug_abbrev0
 3836 000a 04       		.byte	0x4
 3837 000b 01       		.uleb128 0x1
 3838 000c B5050000 		.4byte	.LASF122
 3839 0010 01       		.byte	0x1
 3840 0011 FF000000 		.4byte	.LASF123
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 237


 3841 0015 57040000 		.4byte	.LASF124
 3842 0019 20010000 		.4byte	.Ldebug_ranges0+0x120
 3843 001d 00000000 		.4byte	0
 3844 0021 00000000 		.4byte	.Ldebug_line0
 3845 0025 02       		.uleb128 0x2
 3846 0026 08       		.byte	0x8
 3847 0027 04       		.byte	0x4
 3848 0028 D4010000 		.4byte	.LASF0
 3849 002c 03       		.uleb128 0x3
 3850 002d C0000000 		.4byte	.LASF2
 3851 0031 3D       		.byte	0x3d
 3852 0032 1B       		.byte	0x1b
 3853 0033 37000000 		.4byte	0x37
 3854 0037 02       		.uleb128 0x2
 3855 0038 01       		.byte	0x1
 3856 0039 06       		.byte	0x6
 3857 003a 55010000 		.4byte	.LASF1
 3858 003e 03       		.uleb128 0x3
 3859 003f 50000000 		.4byte	.LASF3
 3860 0043 3D       		.byte	0x3d
 3861 0044 1D       		.byte	0x1d
 3862 0045 49000000 		.4byte	0x49
 3863 0049 02       		.uleb128 0x2
 3864 004a 01       		.byte	0x1
 3865 004b 08       		.byte	0x8
 3866 004c E2030000 		.4byte	.LASF4
 3867 0050 03       		.uleb128 0x3
 3868 0051 26020000 		.4byte	.LASF5
 3869 0055 3D       		.byte	0x3d
 3870 0056 29       		.byte	0x29
 3871 0057 5B000000 		.4byte	0x5b
 3872 005b 02       		.uleb128 0x2
 3873 005c 02       		.byte	0x2
 3874 005d 05       		.byte	0x5
 3875 005e 16040000 		.4byte	.LASF6
 3876 0062 03       		.uleb128 0x3
 3877 0063 DB040000 		.4byte	.LASF7
 3878 0067 3D       		.byte	0x3d
 3879 0068 2B       		.byte	0x2b
 3880 0069 6D000000 		.4byte	0x6d
 3881 006d 02       		.uleb128 0x2
 3882 006e 02       		.byte	0x2
 3883 006f 07       		.byte	0x7
 3884 0070 D4020000 		.4byte	.LASF8
 3885 0074 03       		.uleb128 0x3
 3886 0075 E6040000 		.4byte	.LASF9
 3887 0079 3D       		.byte	0x3d
 3888 007a 3F       		.byte	0x3f
 3889 007b 7F000000 		.4byte	0x7f
 3890 007f 02       		.uleb128 0x2
 3891 0080 04       		.byte	0x4
 3892 0081 05       		.byte	0x5
 3893 0082 9F010000 		.4byte	.LASF10
 3894 0086 03       		.uleb128 0x3
 3895 0087 1B020000 		.4byte	.LASF11
 3896 008b 3D       		.byte	0x3d
 3897 008c 41       		.byte	0x41
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 238


 3898 008d 91000000 		.4byte	0x91
 3899 0091 02       		.uleb128 0x2
 3900 0092 04       		.byte	0x4
 3901 0093 07       		.byte	0x7
 3902 0094 9A020000 		.4byte	.LASF12
 3903 0098 03       		.uleb128 0x3
 3904 0099 B6000000 		.4byte	.LASF13
 3905 009d 3D       		.byte	0x3d
 3906 009e 59       		.byte	0x59
 3907 009f A3000000 		.4byte	0xa3
 3908 00a3 02       		.uleb128 0x2
 3909 00a4 08       		.byte	0x8
 3910 00a5 05       		.byte	0x5
 3911 00a6 47010000 		.4byte	.LASF14
 3912 00aa 02       		.uleb128 0x2
 3913 00ab 08       		.byte	0x8
 3914 00ac 07       		.byte	0x7
 3915 00ad 7D000000 		.4byte	.LASF15
 3916 00b1 04       		.uleb128 0x4
 3917 00b2 04       		.byte	0x4
 3918 00b3 05       		.byte	0x5
 3919 00b4 696E7400 		.ascii	"int\000"
 3920 00b8 02       		.uleb128 0x2
 3921 00b9 04       		.byte	0x4
 3922 00ba 07       		.byte	0x7
 3923 00bb 54020000 		.4byte	.LASF16
 3924 00bf 03       		.uleb128 0x3
 3925 00c0 35050000 		.4byte	.LASF17
 3926 00c4 3E       		.byte	0x3e
 3927 00c5 14       		.byte	0x14
 3928 00c6 2C000000 		.4byte	0x2c
 3929 00ca 03       		.uleb128 0x3
 3930 00cb 73050000 		.4byte	.LASF18
 3931 00cf 3E       		.byte	0x3e
 3932 00d0 15       		.byte	0x15
 3933 00d1 3E000000 		.4byte	0x3e
 3934 00d5 03       		.uleb128 0x3
 3935 00d6 34010000 		.4byte	.LASF19
 3936 00da 3E       		.byte	0x3e
 3937 00db 20       		.byte	0x20
 3938 00dc 50000000 		.4byte	0x50
 3939 00e0 03       		.uleb128 0x3
 3940 00e1 CB010000 		.4byte	.LASF20
 3941 00e5 3E       		.byte	0x3e
 3942 00e6 21       		.byte	0x21
 3943 00e7 62000000 		.4byte	0x62
 3944 00eb 03       		.uleb128 0x3
 3945 00ec DA030000 		.4byte	.LASF21
 3946 00f0 3E       		.byte	0x3e
 3947 00f1 2C       		.byte	0x2c
 3948 00f2 74000000 		.4byte	0x74
 3949 00f6 03       		.uleb128 0x3
 3950 00f7 33040000 		.4byte	.LASF22
 3951 00fb 3E       		.byte	0x3e
 3952 00fc 2D       		.byte	0x2d
 3953 00fd 86000000 		.4byte	0x86
 3954 0101 03       		.uleb128 0x3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 239


 3955 0102 A1050000 		.4byte	.LASF23
 3956 0106 3E       		.byte	0x3e
 3957 0107 38       		.byte	0x38
 3958 0108 98000000 		.4byte	0x98
 3959 010c 02       		.uleb128 0x2
 3960 010d 04       		.byte	0x4
 3961 010e 07       		.byte	0x7
 3962 010f 39030000 		.4byte	.LASF24
 3963 0113 02       		.uleb128 0x2
 3964 0114 01       		.byte	0x1
 3965 0115 08       		.byte	0x8
 3966 0116 C7040000 		.4byte	.LASF25
 3967 011a 02       		.uleb128 0x2
 3968 011b 04       		.byte	0x4
 3969 011c 04       		.byte	0x4
 3970 011d 9F030000 		.4byte	.LASF26
 3971 0121 02       		.uleb128 0x2
 3972 0122 08       		.byte	0x8
 3973 0123 04       		.byte	0x4
 3974 0124 42030000 		.4byte	.LASF27
 3975 0128 05       		.uleb128 0x5
 3976 0129 06050000 		.4byte	.LASF28
 3977 012d 3F       		.byte	0x3f
 3978 012e 1A01     		.2byte	0x11a
 3979 0130 BF000000 		.4byte	0xbf
 3980 0134 05       		.uleb128 0x5
 3981 0135 B9010000 		.4byte	.LASF29
 3982 0139 3F       		.byte	0x3f
 3983 013a 1F01     		.2byte	0x11f
 3984 013c D5000000 		.4byte	0xd5
 3985 0140 05       		.uleb128 0x5
 3986 0141 20040000 		.4byte	.LASF30
 3987 0145 3F       		.byte	0x3f
 3988 0146 2401     		.2byte	0x124
 3989 0148 EB000000 		.4byte	0xeb
 3990 014c 05       		.uleb128 0x5
 3991 014d 21000000 		.4byte	.LASF31
 3992 0151 3F       		.byte	0x3f
 3993 0152 2901     		.2byte	0x129
 3994 0154 01010000 		.4byte	0x101
 3995 0158 05       		.uleb128 0x5
 3996 0159 F5040000 		.4byte	.LASF32
 3997 015d 3F       		.byte	0x3f
 3998 015e 2F01     		.2byte	0x12f
 3999 0160 1A010000 		.4byte	0x11a
 4000 0164 05       		.uleb128 0x5
 4001 0165 C9000000 		.4byte	.LASF33
 4002 0169 3F       		.byte	0x3f
 4003 016a 3501     		.2byte	0x135
 4004 016c 25000000 		.4byte	0x25
 4005 0170 06       		.uleb128 0x6
 4006 0171 60030000 		.4byte	.LASF34
 4007 0175 0A       		.byte	0xa
 4008 0176 88       		.byte	0x88
 4009 0177 40010000 		.4byte	0x140
 4010 017b 03       		.byte	0x3
 4011 017c 8A010000 		.4byte	0x18a
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 240


 4012 0180 07       		.uleb128 0x7
 4013 0181 7800     		.ascii	"x\000"
 4014 0183 0A       		.byte	0xa
 4015 0184 89       		.byte	0x89
 4016 0185 4C010000 		.4byte	0x14c
 4017 0189 00       		.byte	0
 4018 018a 08       		.uleb128 0x8
 4019 018b 5F050000 		.4byte	.LASF35
 4020 018f 0A       		.byte	0xa
 4021 0190 B101     		.2byte	0x1b1
 4022 0192 EB000000 		.4byte	0xeb
 4023 0196 03       		.byte	0x3
 4024 0197 B0010000 		.4byte	0x1b0
 4025 019b 09       		.uleb128 0x9
 4026 019c 7800     		.ascii	"x\000"
 4027 019e 0A       		.byte	0xa
 4028 019f B201     		.2byte	0x1b2
 4029 01a1 EB000000 		.4byte	0xeb
 4030 01a5 09       		.uleb128 0x9
 4031 01a6 7900     		.ascii	"y\000"
 4032 01a8 0A       		.byte	0xa
 4033 01a9 B301     		.2byte	0x1b3
 4034 01ab EB000000 		.4byte	0xeb
 4035 01af 00       		.byte	0
 4036 01b0 08       		.uleb128 0x8
 4037 01b1 59030000 		.4byte	.LASF36
 4038 01b5 0A       		.byte	0xa
 4039 01b6 BC01     		.2byte	0x1bc
 4040 01b8 EB000000 		.4byte	0xeb
 4041 01bc 03       		.byte	0x3
 4042 01bd D6010000 		.4byte	0x1d6
 4043 01c1 09       		.uleb128 0x9
 4044 01c2 7800     		.ascii	"x\000"
 4045 01c4 0A       		.byte	0xa
 4046 01c5 BD01     		.2byte	0x1bd
 4047 01c7 EB000000 		.4byte	0xeb
 4048 01cb 09       		.uleb128 0x9
 4049 01cc 7900     		.ascii	"y\000"
 4050 01ce 0A       		.byte	0xa
 4051 01cf BE01     		.2byte	0x1be
 4052 01d1 EB000000 		.4byte	0xeb
 4053 01d5 00       		.byte	0
 4054 01d6 0A       		.uleb128 0xa
 4055 01d7 B1030000 		.4byte	.LASF40
 4056 01db 01       		.byte	0x1
 4057 01dc 71       		.byte	0x71
 4058 01dd 00000000 		.4byte	.LFB83
 4059 01e1 16000000 		.4byte	.LFE83-.LFB83
 4060 01e5 01       		.uleb128 0x1
 4061 01e6 9C       		.byte	0x9c
 4062 01e7 26020000 		.4byte	0x226
 4063 01eb 0B       		.uleb128 0xb
 4064 01ec 61020000 		.4byte	.LASF37
 4065 01f0 01       		.byte	0x1
 4066 01f1 72       		.byte	0x72
 4067 01f2 26020000 		.4byte	0x226
 4068 01f6 00000000 		.4byte	.LLST0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 241


 4069 01fa 0B       		.uleb128 0xb
 4070 01fb B4010000 		.4byte	.LASF38
 4071 01ff 01       		.byte	0x1
 4072 0200 73       		.byte	0x73
 4073 0201 31020000 		.4byte	0x231
 4074 0205 2B000000 		.4byte	.LLST1
 4075 0209 0B       		.uleb128 0xb
 4076 020a 55050000 		.4byte	.LASF39
 4077 020e 01       		.byte	0x1
 4078 020f 74       		.byte	0x74
 4079 0210 F6000000 		.4byte	0xf6
 4080 0214 56000000 		.4byte	.LLST2
 4081 0218 0C       		.uleb128 0xc
 4082 0219 AF000000 		.4byte	.LASF42
 4083 021d 01       		.byte	0x1
 4084 021e 76       		.byte	0x76
 4085 021f F6000000 		.4byte	0xf6
 4086 0223 01       		.uleb128 0x1
 4087 0224 52       		.byte	0x52
 4088 0225 00       		.byte	0
 4089 0226 0D       		.uleb128 0xd
 4090 0227 04       		.byte	0x4
 4091 0228 2C020000 		.4byte	0x22c
 4092 022c 0E       		.uleb128 0xe
 4093 022d 58010000 		.4byte	0x158
 4094 0231 0D       		.uleb128 0xd
 4095 0232 04       		.byte	0x4
 4096 0233 58010000 		.4byte	0x158
 4097 0237 0A       		.uleb128 0xa
 4098 0238 15000000 		.4byte	.LASF41
 4099 023c 02       		.byte	0x2
 4100 023d 31       		.byte	0x31
 4101 023e 00000000 		.4byte	.LFB84
 4102 0242 1E000000 		.4byte	.LFE84-.LFB84
 4103 0246 01       		.uleb128 0x1
 4104 0247 9C       		.byte	0x9c
 4105 0248 87020000 		.4byte	0x287
 4106 024c 0B       		.uleb128 0xb
 4107 024d 61020000 		.4byte	.LASF37
 4108 0251 02       		.byte	0x2
 4109 0252 32       		.byte	0x32
 4110 0253 87020000 		.4byte	0x287
 4111 0257 77000000 		.4byte	.LLST3
 4112 025b 0B       		.uleb128 0xb
 4113 025c B4010000 		.4byte	.LASF38
 4114 0260 02       		.byte	0x2
 4115 0261 33       		.byte	0x33
 4116 0262 92020000 		.4byte	0x292
 4117 0266 A2000000 		.4byte	.LLST4
 4118 026a 0B       		.uleb128 0xb
 4119 026b 55050000 		.4byte	.LASF39
 4120 026f 02       		.byte	0x2
 4121 0270 34       		.byte	0x34
 4122 0271 F6000000 		.4byte	0xf6
 4123 0275 CD000000 		.4byte	.LLST5
 4124 0279 0C       		.uleb128 0xc
 4125 027a AF000000 		.4byte	.LASF42
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 242


 4126 027e 02       		.byte	0x2
 4127 027f 36       		.byte	0x36
 4128 0280 F6000000 		.4byte	0xf6
 4129 0284 01       		.uleb128 0x1
 4130 0285 52       		.byte	0x52
 4131 0286 00       		.byte	0
 4132 0287 0D       		.uleb128 0xd
 4133 0288 04       		.byte	0x4
 4134 0289 8D020000 		.4byte	0x28d
 4135 028d 0E       		.uleb128 0xe
 4136 028e 64010000 		.4byte	0x164
 4137 0292 0D       		.uleb128 0xd
 4138 0293 04       		.byte	0x4
 4139 0294 64010000 		.4byte	0x164
 4140 0298 0A       		.uleb128 0xa
 4141 0299 C8020000 		.4byte	.LASF43
 4142 029d 03       		.byte	0x3
 4143 029e 61       		.byte	0x61
 4144 029f 00000000 		.4byte	.LFB85
 4145 02a3 30000000 		.4byte	.LFE85-.LFB85
 4146 02a7 01       		.uleb128 0x1
 4147 02a8 9C       		.byte	0x9c
 4148 02a9 F6020000 		.4byte	0x2f6
 4149 02ad 0B       		.uleb128 0xb
 4150 02ae 61020000 		.4byte	.LASF37
 4151 02b2 03       		.byte	0x3
 4152 02b3 62       		.byte	0x62
 4153 02b4 F6020000 		.4byte	0x2f6
 4154 02b8 EE000000 		.4byte	.LLST6
 4155 02bc 0B       		.uleb128 0xb
 4156 02bd B4010000 		.4byte	.LASF38
 4157 02c1 03       		.byte	0x3
 4158 02c2 63       		.byte	0x63
 4159 02c3 01030000 		.4byte	0x301
 4160 02c7 17010000 		.4byte	.LLST7
 4161 02cb 0B       		.uleb128 0xb
 4162 02cc 55050000 		.4byte	.LASF39
 4163 02d0 03       		.byte	0x3
 4164 02d1 64       		.byte	0x64
 4165 02d2 F6000000 		.4byte	0xf6
 4166 02d6 40010000 		.4byte	.LLST8
 4167 02da 0C       		.uleb128 0xc
 4168 02db AF000000 		.4byte	.LASF42
 4169 02df 03       		.byte	0x3
 4170 02e0 66       		.byte	0x66
 4171 02e1 F6000000 		.4byte	0xf6
 4172 02e5 01       		.uleb128 0x1
 4173 02e6 52       		.byte	0x52
 4174 02e7 0F       		.uleb128 0xf
 4175 02e8 696E00   		.ascii	"in\000"
 4176 02eb 03       		.byte	0x3
 4177 02ec 67       		.byte	0x67
 4178 02ed 34010000 		.4byte	0x134
 4179 02f1 61010000 		.4byte	.LLST9
 4180 02f5 00       		.byte	0
 4181 02f6 0D       		.uleb128 0xd
 4182 02f7 04       		.byte	0x4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 243


 4183 02f8 FC020000 		.4byte	0x2fc
 4184 02fc 0E       		.uleb128 0xe
 4185 02fd 34010000 		.4byte	0x134
 4186 0301 0D       		.uleb128 0xd
 4187 0302 04       		.byte	0x4
 4188 0303 34010000 		.4byte	0x134
 4189 0307 0A       		.uleb128 0xa
 4190 0308 CE030000 		.4byte	.LASF44
 4191 030c 04       		.byte	0x4
 4192 030d 63       		.byte	0x63
 4193 030e 00000000 		.4byte	.LFB86
 4194 0312 2E000000 		.4byte	.LFE86-.LFB86
 4195 0316 01       		.uleb128 0x1
 4196 0317 9C       		.byte	0x9c
 4197 0318 65030000 		.4byte	0x365
 4198 031c 0B       		.uleb128 0xb
 4199 031d 61020000 		.4byte	.LASF37
 4200 0321 04       		.byte	0x4
 4201 0322 64       		.byte	0x64
 4202 0323 65030000 		.4byte	0x365
 4203 0327 95010000 		.4byte	.LLST10
 4204 032b 0B       		.uleb128 0xb
 4205 032c B4010000 		.4byte	.LASF38
 4206 0330 04       		.byte	0x4
 4207 0331 65       		.byte	0x65
 4208 0332 70030000 		.4byte	0x370
 4209 0336 BE010000 		.4byte	.LLST11
 4210 033a 0B       		.uleb128 0xb
 4211 033b 55050000 		.4byte	.LASF39
 4212 033f 04       		.byte	0x4
 4213 0340 66       		.byte	0x66
 4214 0341 F6000000 		.4byte	0xf6
 4215 0345 E7010000 		.4byte	.LLST12
 4216 0349 0C       		.uleb128 0xc
 4217 034a AF000000 		.4byte	.LASF42
 4218 034e 04       		.byte	0x4
 4219 034f 68       		.byte	0x68
 4220 0350 F6000000 		.4byte	0xf6
 4221 0354 01       		.uleb128 0x1
 4222 0355 52       		.byte	0x52
 4223 0356 0F       		.uleb128 0xf
 4224 0357 696E00   		.ascii	"in\000"
 4225 035a 04       		.byte	0x4
 4226 035b 69       		.byte	0x69
 4227 035c 40010000 		.4byte	0x140
 4228 0360 08020000 		.4byte	.LLST13
 4229 0364 00       		.byte	0
 4230 0365 0D       		.uleb128 0xd
 4231 0366 04       		.byte	0x4
 4232 0367 6B030000 		.4byte	0x36b
 4233 036b 0E       		.uleb128 0xe
 4234 036c 40010000 		.4byte	0x140
 4235 0370 0D       		.uleb128 0xd
 4236 0371 04       		.byte	0x4
 4237 0372 40010000 		.4byte	0x140
 4238 0376 0A       		.uleb128 0xa
 4239 0377 AD040000 		.4byte	.LASF45
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 244


 4240 037b 05       		.byte	0x5
 4241 037c 63       		.byte	0x63
 4242 037d 00000000 		.4byte	.LFB87
 4243 0381 2E000000 		.4byte	.LFE87-.LFB87
 4244 0385 01       		.uleb128 0x1
 4245 0386 9C       		.byte	0x9c
 4246 0387 D4030000 		.4byte	0x3d4
 4247 038b 0B       		.uleb128 0xb
 4248 038c 61020000 		.4byte	.LASF37
 4249 0390 05       		.byte	0x5
 4250 0391 64       		.byte	0x64
 4251 0392 D4030000 		.4byte	0x3d4
 4252 0396 3E020000 		.4byte	.LLST14
 4253 039a 0B       		.uleb128 0xb
 4254 039b B4010000 		.4byte	.LASF38
 4255 039f 05       		.byte	0x5
 4256 03a0 65       		.byte	0x65
 4257 03a1 DF030000 		.4byte	0x3df
 4258 03a5 67020000 		.4byte	.LLST15
 4259 03a9 0B       		.uleb128 0xb
 4260 03aa 55050000 		.4byte	.LASF39
 4261 03ae 05       		.byte	0x5
 4262 03af 66       		.byte	0x66
 4263 03b0 F6000000 		.4byte	0xf6
 4264 03b4 90020000 		.4byte	.LLST16
 4265 03b8 0C       		.uleb128 0xc
 4266 03b9 AF000000 		.4byte	.LASF42
 4267 03bd 05       		.byte	0x5
 4268 03be 68       		.byte	0x68
 4269 03bf F6000000 		.4byte	0xf6
 4270 03c3 01       		.uleb128 0x1
 4271 03c4 52       		.byte	0x52
 4272 03c5 0F       		.uleb128 0xf
 4273 03c6 696E00   		.ascii	"in\000"
 4274 03c9 05       		.byte	0x5
 4275 03ca 69       		.byte	0x69
 4276 03cb 28010000 		.4byte	0x128
 4277 03cf B1020000 		.4byte	.LLST17
 4278 03d3 00       		.byte	0
 4279 03d4 0D       		.uleb128 0xd
 4280 03d5 04       		.byte	0x4
 4281 03d6 DA030000 		.4byte	0x3da
 4282 03da 0E       		.uleb128 0xe
 4283 03db 28010000 		.4byte	0x128
 4284 03df 0D       		.uleb128 0xd
 4285 03e0 04       		.byte	0x4
 4286 03e1 28010000 		.4byte	0x128
 4287 03e5 10       		.uleb128 0x10
 4288 03e6 02030000 		.4byte	.LASF46
 4289 03ea 06       		.byte	0x6
 4290 03eb 72       		.byte	0x72
 4291 03ec 00000000 		.4byte	.LFB88
 4292 03f0 2C000000 		.4byte	.LFE88-.LFB88
 4293 03f4 01       		.uleb128 0x1
 4294 03f5 9C       		.byte	0x9c
 4295 03f6 46040000 		.4byte	0x446
 4296 03fa 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 245


 4297 03fb 09020000 		.4byte	.LASF47
 4298 03ff 06       		.byte	0x6
 4299 0400 73       		.byte	0x73
 4300 0401 26020000 		.4byte	0x226
 4301 0405 E5020000 		.4byte	.LLST18
 4302 0409 0B       		.uleb128 0xb
 4303 040a 0F020000 		.4byte	.LASF48
 4304 040e 06       		.byte	0x6
 4305 040f 74       		.byte	0x74
 4306 0410 26020000 		.4byte	0x226
 4307 0414 0E030000 		.4byte	.LLST19
 4308 0418 0B       		.uleb128 0xb
 4309 0419 B4010000 		.4byte	.LASF38
 4310 041d 06       		.byte	0x6
 4311 041e 75       		.byte	0x75
 4312 041f 31020000 		.4byte	0x231
 4313 0423 37030000 		.4byte	.LLST20
 4314 0427 0B       		.uleb128 0xb
 4315 0428 55050000 		.4byte	.LASF39
 4316 042c 06       		.byte	0x6
 4317 042d 76       		.byte	0x76
 4318 042e F6000000 		.4byte	0xf6
 4319 0432 6B030000 		.4byte	.LLST21
 4320 0436 11       		.uleb128 0x11
 4321 0437 AF000000 		.4byte	.LASF42
 4322 043b 06       		.byte	0x6
 4323 043c 78       		.byte	0x78
 4324 043d F6000000 		.4byte	0xf6
 4325 0441 8C030000 		.4byte	.LLST22
 4326 0445 00       		.byte	0
 4327 0446 10       		.uleb128 0x10
 4328 0447 3C050000 		.4byte	.LASF49
 4329 044b 07       		.byte	0x7
 4330 044c 31       		.byte	0x31
 4331 044d 00000000 		.4byte	.LFB89
 4332 0451 36000000 		.4byte	.LFE89-.LFB89
 4333 0455 01       		.uleb128 0x1
 4334 0456 9C       		.byte	0x9c
 4335 0457 A7040000 		.4byte	0x4a7
 4336 045b 0B       		.uleb128 0xb
 4337 045c 09020000 		.4byte	.LASF47
 4338 0460 07       		.byte	0x7
 4339 0461 32       		.byte	0x32
 4340 0462 87020000 		.4byte	0x287
 4341 0466 AA030000 		.4byte	.LLST23
 4342 046a 0B       		.uleb128 0xb
 4343 046b 0F020000 		.4byte	.LASF48
 4344 046f 07       		.byte	0x7
 4345 0470 33       		.byte	0x33
 4346 0471 87020000 		.4byte	0x287
 4347 0475 D3030000 		.4byte	.LLST24
 4348 0479 0B       		.uleb128 0xb
 4349 047a B4010000 		.4byte	.LASF38
 4350 047e 07       		.byte	0x7
 4351 047f 34       		.byte	0x34
 4352 0480 92020000 		.4byte	0x292
 4353 0484 07040000 		.4byte	.LLST25
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 246


 4354 0488 0B       		.uleb128 0xb
 4355 0489 55050000 		.4byte	.LASF39
 4356 048d 07       		.byte	0x7
 4357 048e 35       		.byte	0x35
 4358 048f F6000000 		.4byte	0xf6
 4359 0493 3B040000 		.4byte	.LLST26
 4360 0497 11       		.uleb128 0x11
 4361 0498 AF000000 		.4byte	.LASF42
 4362 049c 07       		.byte	0x7
 4363 049d 37       		.byte	0x37
 4364 049e F6000000 		.4byte	0xf6
 4365 04a2 5C040000 		.4byte	.LLST27
 4366 04a6 00       		.byte	0
 4367 04a7 0A       		.uleb128 0xa
 4368 04a8 A8010000 		.4byte	.LASF50
 4369 04ac 08       		.byte	0x8
 4370 04ad 67       		.byte	0x67
 4371 04ae 00000000 		.4byte	.LFB90
 4372 04b2 2A000000 		.4byte	.LFE90-.LFB90
 4373 04b6 01       		.uleb128 0x1
 4374 04b7 9C       		.byte	0x9c
 4375 04b8 2A050000 		.4byte	0x52a
 4376 04bc 0B       		.uleb128 0xb
 4377 04bd 09020000 		.4byte	.LASF47
 4378 04c1 08       		.byte	0x8
 4379 04c2 68       		.byte	0x68
 4380 04c3 F6020000 		.4byte	0x2f6
 4381 04c7 7A040000 		.4byte	.LLST28
 4382 04cb 0B       		.uleb128 0xb
 4383 04cc 0F020000 		.4byte	.LASF48
 4384 04d0 08       		.byte	0x8
 4385 04d1 69       		.byte	0x69
 4386 04d2 F6020000 		.4byte	0x2f6
 4387 04d6 A3040000 		.4byte	.LLST29
 4388 04da 0B       		.uleb128 0xb
 4389 04db B4010000 		.4byte	.LASF38
 4390 04df 08       		.byte	0x8
 4391 04e0 6A       		.byte	0x6a
 4392 04e1 01030000 		.4byte	0x301
 4393 04e5 CC040000 		.4byte	.LLST30
 4394 04e9 0B       		.uleb128 0xb
 4395 04ea 55050000 		.4byte	.LASF39
 4396 04ee 08       		.byte	0x8
 4397 04ef 6B       		.byte	0x6b
 4398 04f0 F6000000 		.4byte	0xf6
 4399 04f4 F5040000 		.4byte	.LLST31
 4400 04f8 0C       		.uleb128 0xc
 4401 04f9 AF000000 		.4byte	.LASF42
 4402 04fd 08       		.byte	0x8
 4403 04fe 6D       		.byte	0x6d
 4404 04ff F6000000 		.4byte	0xf6
 4405 0503 01       		.uleb128 0x1
 4406 0504 53       		.byte	0x53
 4407 0505 12       		.uleb128 0x12
 4408 0506 00000000 		.4byte	.Ldebug_ranges0+0
 4409 050a 11       		.uleb128 0x11
 4410 050b 15020000 		.4byte	.LASF51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 247


 4411 050f 08       		.byte	0x8
 4412 0510 A5       		.byte	0xa5
 4413 0511 EB000000 		.4byte	0xeb
 4414 0515 16050000 		.4byte	.LLST32
 4415 0519 11       		.uleb128 0x11
 4416 051a 80050000 		.4byte	.LASF52
 4417 051e 08       		.byte	0x8
 4418 051f A5       		.byte	0xa5
 4419 0520 EB000000 		.4byte	0xeb
 4420 0524 29050000 		.4byte	.LLST33
 4421 0528 00       		.byte	0
 4422 0529 00       		.byte	0
 4423 052a 0A       		.uleb128 0xa
 4424 052b 0E030000 		.4byte	.LASF53
 4425 052f 09       		.byte	0x9
 4426 0530 67       		.byte	0x67
 4427 0531 00000000 		.4byte	.LFB91
 4428 0535 36000000 		.4byte	.LFE91-.LFB91
 4429 0539 01       		.uleb128 0x1
 4430 053a 9C       		.byte	0x9c
 4431 053b C5050000 		.4byte	0x5c5
 4432 053f 0B       		.uleb128 0xb
 4433 0540 09020000 		.4byte	.LASF47
 4434 0544 09       		.byte	0x9
 4435 0545 68       		.byte	0x68
 4436 0546 65030000 		.4byte	0x365
 4437 054a 52050000 		.4byte	.LLST34
 4438 054e 0B       		.uleb128 0xb
 4439 054f 0F020000 		.4byte	.LASF48
 4440 0553 09       		.byte	0x9
 4441 0554 69       		.byte	0x69
 4442 0555 65030000 		.4byte	0x365
 4443 0559 7B050000 		.4byte	.LLST35
 4444 055d 0B       		.uleb128 0xb
 4445 055e B4010000 		.4byte	.LASF38
 4446 0562 09       		.byte	0x9
 4447 0563 6A       		.byte	0x6a
 4448 0564 70030000 		.4byte	0x370
 4449 0568 A4050000 		.4byte	.LLST36
 4450 056c 0B       		.uleb128 0xb
 4451 056d 55050000 		.4byte	.LASF39
 4452 0571 09       		.byte	0x9
 4453 0572 6B       		.byte	0x6b
 4454 0573 F6000000 		.4byte	0xf6
 4455 0577 CD050000 		.4byte	.LLST37
 4456 057b 0C       		.uleb128 0xc
 4457 057c AF000000 		.4byte	.LASF42
 4458 0580 09       		.byte	0x9
 4459 0581 6D       		.byte	0x6d
 4460 0582 F6000000 		.4byte	0xf6
 4461 0586 01       		.uleb128 0x1
 4462 0587 53       		.byte	0x53
 4463 0588 13       		.uleb128 0x13
 4464 0589 8A010000 		.4byte	0x18a
 4465 058d 0E000000 		.4byte	.LBB20
 4466 0591 16000000 		.4byte	.LBE20-.LBB20
 4467 0595 09       		.byte	0x9
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 248


 4468 0596 94       		.byte	0x94
 4469 0597 14       		.uleb128 0x14
 4470 0598 A5010000 		.4byte	0x1a5
 4471 059c EE050000 		.4byte	.LLST38
 4472 05a0 14       		.uleb128 0x14
 4473 05a1 9B010000 		.4byte	0x19b
 4474 05a5 0D060000 		.4byte	.LLST39
 4475 05a9 15       		.uleb128 0x15
 4476 05aa 70010000 		.4byte	0x170
 4477 05ae 16000000 		.4byte	.LBB22
 4478 05b2 0E000000 		.4byte	.LBE22-.LBB22
 4479 05b6 0A       		.byte	0xa
 4480 05b7 B501     		.2byte	0x1b5
 4481 05b9 14       		.uleb128 0x14
 4482 05ba 80010000 		.4byte	0x180
 4483 05be 20060000 		.4byte	.LLST40
 4484 05c2 00       		.byte	0
 4485 05c3 00       		.byte	0
 4486 05c4 00       		.byte	0
 4487 05c5 0A       		.uleb128 0xa
 4488 05c6 0B040000 		.4byte	.LASF54
 4489 05ca 0B       		.byte	0xb
 4490 05cb 67       		.byte	0x67
 4491 05cc 00000000 		.4byte	.LFB92
 4492 05d0 2A000000 		.4byte	.LFE92-.LFB92
 4493 05d4 01       		.uleb128 0x1
 4494 05d5 9C       		.byte	0x9c
 4495 05d6 48060000 		.4byte	0x648
 4496 05da 0B       		.uleb128 0xb
 4497 05db 09020000 		.4byte	.LASF47
 4498 05df 0B       		.byte	0xb
 4499 05e0 68       		.byte	0x68
 4500 05e1 D4030000 		.4byte	0x3d4
 4501 05e5 38060000 		.4byte	.LLST41
 4502 05e9 0B       		.uleb128 0xb
 4503 05ea 0F020000 		.4byte	.LASF48
 4504 05ee 0B       		.byte	0xb
 4505 05ef 69       		.byte	0x69
 4506 05f0 D4030000 		.4byte	0x3d4
 4507 05f4 61060000 		.4byte	.LLST42
 4508 05f8 0B       		.uleb128 0xb
 4509 05f9 B4010000 		.4byte	.LASF38
 4510 05fd 0B       		.byte	0xb
 4511 05fe 6A       		.byte	0x6a
 4512 05ff DF030000 		.4byte	0x3df
 4513 0603 8A060000 		.4byte	.LLST43
 4514 0607 0B       		.uleb128 0xb
 4515 0608 55050000 		.4byte	.LASF39
 4516 060c 0B       		.byte	0xb
 4517 060d 6B       		.byte	0x6b
 4518 060e F6000000 		.4byte	0xf6
 4519 0612 B3060000 		.4byte	.LLST44
 4520 0616 0C       		.uleb128 0xc
 4521 0617 AF000000 		.4byte	.LASF42
 4522 061b 0B       		.byte	0xb
 4523 061c 6D       		.byte	0x6d
 4524 061d F6000000 		.4byte	0xf6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 249


 4525 0621 01       		.uleb128 0x1
 4526 0622 53       		.byte	0x53
 4527 0623 12       		.uleb128 0x12
 4528 0624 18000000 		.4byte	.Ldebug_ranges0+0x18
 4529 0628 11       		.uleb128 0x11
 4530 0629 15020000 		.4byte	.LASF51
 4531 062d 0B       		.byte	0xb
 4532 062e 95       		.byte	0x95
 4533 062f EB000000 		.4byte	0xeb
 4534 0633 D4060000 		.4byte	.LLST45
 4535 0637 11       		.uleb128 0x11
 4536 0638 80050000 		.4byte	.LASF52
 4537 063c 0B       		.byte	0xb
 4538 063d 95       		.byte	0x95
 4539 063e EB000000 		.4byte	0xeb
 4540 0642 E7060000 		.4byte	.LLST46
 4541 0646 00       		.byte	0
 4542 0647 00       		.byte	0
 4543 0648 0A       		.uleb128 0xa
 4544 0649 A5030000 		.4byte	.LASF55
 4545 064d 0C       		.byte	0xc
 4546 064e 39       		.byte	0x39
 4547 064f 00000000 		.4byte	.LFB93
 4548 0653 1C000000 		.4byte	.LFE93-.LFB93
 4549 0657 01       		.uleb128 0x1
 4550 0658 9C       		.byte	0x9c
 4551 0659 A7060000 		.4byte	0x6a7
 4552 065d 0B       		.uleb128 0xb
 4553 065e 09020000 		.4byte	.LASF47
 4554 0662 0C       		.byte	0xc
 4555 0663 3A       		.byte	0x3a
 4556 0664 A7060000 		.4byte	0x6a7
 4557 0668 10070000 		.4byte	.LLST47
 4558 066c 0B       		.uleb128 0xb
 4559 066d 0F020000 		.4byte	.LASF48
 4560 0671 0C       		.byte	0xc
 4561 0672 3B       		.byte	0x3b
 4562 0673 A7060000 		.4byte	0x6a7
 4563 0677 3B070000 		.4byte	.LLST48
 4564 067b 0B       		.uleb128 0xb
 4565 067c B4010000 		.4byte	.LASF38
 4566 0680 0C       		.byte	0xc
 4567 0681 3C       		.byte	0x3c
 4568 0682 B2060000 		.4byte	0x6b2
 4569 0686 66070000 		.4byte	.LLST49
 4570 068a 0B       		.uleb128 0xb
 4571 068b 55050000 		.4byte	.LASF39
 4572 068f 0C       		.byte	0xc
 4573 0690 3D       		.byte	0x3d
 4574 0691 F6000000 		.4byte	0xf6
 4575 0695 91070000 		.4byte	.LLST50
 4576 0699 0C       		.uleb128 0xc
 4577 069a AF000000 		.4byte	.LASF42
 4578 069e 0C       		.byte	0xc
 4579 069f 3F       		.byte	0x3f
 4580 06a0 F6000000 		.4byte	0xf6
 4581 06a4 01       		.uleb128 0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 250


 4582 06a5 53       		.byte	0x53
 4583 06a6 00       		.byte	0
 4584 06a7 0D       		.uleb128 0xd
 4585 06a8 04       		.byte	0x4
 4586 06a9 AD060000 		.4byte	0x6ad
 4587 06ad 0E       		.uleb128 0xe
 4588 06ae E0000000 		.4byte	0xe0
 4589 06b2 0D       		.uleb128 0xd
 4590 06b3 04       		.byte	0x4
 4591 06b4 E0000000 		.4byte	0xe0
 4592 06b8 0A       		.uleb128 0xa
 4593 06b9 FD010000 		.4byte	.LASF56
 4594 06bd 0D       		.byte	0xd
 4595 06be 31       		.byte	0x31
 4596 06bf 00000000 		.4byte	.LFB94
 4597 06c3 1C000000 		.4byte	.LFE94-.LFB94
 4598 06c7 01       		.uleb128 0x1
 4599 06c8 9C       		.byte	0x9c
 4600 06c9 17070000 		.4byte	0x717
 4601 06cd 0B       		.uleb128 0xb
 4602 06ce 09020000 		.4byte	.LASF47
 4603 06d2 0D       		.byte	0xd
 4604 06d3 32       		.byte	0x32
 4605 06d4 17070000 		.4byte	0x717
 4606 06d8 B2070000 		.4byte	.LLST51
 4607 06dc 0B       		.uleb128 0xb
 4608 06dd 0F020000 		.4byte	.LASF48
 4609 06e1 0D       		.byte	0xd
 4610 06e2 33       		.byte	0x33
 4611 06e3 17070000 		.4byte	0x717
 4612 06e7 DD070000 		.4byte	.LLST52
 4613 06eb 0B       		.uleb128 0xb
 4614 06ec B4010000 		.4byte	.LASF38
 4615 06f0 0D       		.byte	0xd
 4616 06f1 34       		.byte	0x34
 4617 06f2 22070000 		.4byte	0x722
 4618 06f6 08080000 		.4byte	.LLST53
 4619 06fa 0B       		.uleb128 0xb
 4620 06fb 55050000 		.4byte	.LASF39
 4621 06ff 0D       		.byte	0xd
 4622 0700 35       		.byte	0x35
 4623 0701 F6000000 		.4byte	0xf6
 4624 0705 33080000 		.4byte	.LLST54
 4625 0709 0C       		.uleb128 0xc
 4626 070a AF000000 		.4byte	.LASF42
 4627 070e 0D       		.byte	0xd
 4628 070f 37       		.byte	0x37
 4629 0710 F6000000 		.4byte	0xf6
 4630 0714 01       		.uleb128 0x1
 4631 0715 53       		.byte	0x53
 4632 0716 00       		.byte	0
 4633 0717 0D       		.uleb128 0xd
 4634 0718 04       		.byte	0x4
 4635 0719 1D070000 		.4byte	0x71d
 4636 071d 0E       		.uleb128 0xe
 4637 071e F6000000 		.4byte	0xf6
 4638 0722 0D       		.uleb128 0xd
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 251


 4639 0723 04       		.byte	0x4
 4640 0724 F6000000 		.4byte	0xf6
 4641 0728 0A       		.uleb128 0xa
 4642 0729 1A030000 		.4byte	.LASF57
 4643 072d 0E       		.byte	0xe
 4644 072e 32       		.byte	0x32
 4645 072f 00000000 		.4byte	.LFB95
 4646 0733 1C000000 		.4byte	.LFE95-.LFB95
 4647 0737 01       		.uleb128 0x1
 4648 0738 9C       		.byte	0x9c
 4649 0739 87070000 		.4byte	0x787
 4650 073d 0B       		.uleb128 0xb
 4651 073e 09020000 		.4byte	.LASF47
 4652 0742 0E       		.byte	0xe
 4653 0743 33       		.byte	0x33
 4654 0744 87070000 		.4byte	0x787
 4655 0748 54080000 		.4byte	.LLST55
 4656 074c 0B       		.uleb128 0xb
 4657 074d 0F020000 		.4byte	.LASF48
 4658 0751 0E       		.byte	0xe
 4659 0752 34       		.byte	0x34
 4660 0753 87070000 		.4byte	0x787
 4661 0757 7F080000 		.4byte	.LLST56
 4662 075b 0B       		.uleb128 0xb
 4663 075c B4010000 		.4byte	.LASF38
 4664 0760 0E       		.byte	0xe
 4665 0761 35       		.byte	0x35
 4666 0762 92070000 		.4byte	0x792
 4667 0766 AA080000 		.4byte	.LLST57
 4668 076a 0B       		.uleb128 0xb
 4669 076b 55050000 		.4byte	.LASF39
 4670 076f 0E       		.byte	0xe
 4671 0770 36       		.byte	0x36
 4672 0771 F6000000 		.4byte	0xf6
 4673 0775 D5080000 		.4byte	.LLST58
 4674 0779 0C       		.uleb128 0xc
 4675 077a AF000000 		.4byte	.LASF42
 4676 077e 0E       		.byte	0xe
 4677 077f 38       		.byte	0x38
 4678 0780 F6000000 		.4byte	0xf6
 4679 0784 01       		.uleb128 0x1
 4680 0785 53       		.byte	0x53
 4681 0786 00       		.byte	0
 4682 0787 0D       		.uleb128 0xd
 4683 0788 04       		.byte	0x4
 4684 0789 8D070000 		.4byte	0x78d
 4685 078d 0E       		.uleb128 0xe
 4686 078e CA000000 		.4byte	0xca
 4687 0792 0D       		.uleb128 0xd
 4688 0793 04       		.byte	0x4
 4689 0794 CA000000 		.4byte	0xca
 4690 0798 10       		.uleb128 0x10
 4691 0799 EC010000 		.4byte	.LASF58
 4692 079d 0F       		.byte	0xf
 4693 079e 7A       		.byte	0x7a
 4694 079f 00000000 		.4byte	.LFB96
 4695 07a3 34000000 		.4byte	.LFE96-.LFB96
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 252


 4696 07a7 01       		.uleb128 0x1
 4697 07a8 9C       		.byte	0x9c
 4698 07a9 08080000 		.4byte	0x808
 4699 07ad 0B       		.uleb128 0xb
 4700 07ae 09020000 		.4byte	.LASF47
 4701 07b2 0F       		.byte	0xf
 4702 07b3 7B       		.byte	0x7b
 4703 07b4 26020000 		.4byte	0x226
 4704 07b8 F6080000 		.4byte	.LLST59
 4705 07bc 0B       		.uleb128 0xb
 4706 07bd 0F020000 		.4byte	.LASF48
 4707 07c1 0F       		.byte	0xf
 4708 07c2 7C       		.byte	0x7c
 4709 07c3 26020000 		.4byte	0x226
 4710 07c7 1F090000 		.4byte	.LLST60
 4711 07cb 0B       		.uleb128 0xb
 4712 07cc 55050000 		.4byte	.LASF39
 4713 07d0 0F       		.byte	0xf
 4714 07d1 7D       		.byte	0x7d
 4715 07d2 F6000000 		.4byte	0xf6
 4716 07d6 48090000 		.4byte	.LLST61
 4717 07da 0B       		.uleb128 0xb
 4718 07db 5E060000 		.4byte	.LASF59
 4719 07df 0F       		.byte	0xf
 4720 07e0 7E       		.byte	0x7e
 4721 07e1 31020000 		.4byte	0x231
 4722 07e5 69090000 		.4byte	.LLST62
 4723 07e9 11       		.uleb128 0x11
 4724 07ea AF000000 		.4byte	.LASF42
 4725 07ee 0F       		.byte	0xf
 4726 07ef 80       		.byte	0x80
 4727 07f0 F6000000 		.4byte	0xf6
 4728 07f4 87090000 		.4byte	.LLST63
 4729 07f8 0F       		.uleb128 0xf
 4730 07f9 73756D00 		.ascii	"sum\000"
 4731 07fd 0F       		.byte	0xf
 4732 07fe 81       		.byte	0x81
 4733 07ff 58010000 		.4byte	0x158
 4734 0803 A5090000 		.4byte	.LLST64
 4735 0807 00       		.byte	0
 4736 0808 10       		.uleb128 0x10
 4737 0809 BD030000 		.4byte	.LASF60
 4738 080d 10       		.byte	0x10
 4739 080e 31       		.byte	0x31
 4740 080f 00000000 		.4byte	.LFB97
 4741 0813 44000000 		.4byte	.LFE97-.LFB97
 4742 0817 01       		.uleb128 0x1
 4743 0818 9C       		.byte	0x9c
 4744 0819 78080000 		.4byte	0x878
 4745 081d 0B       		.uleb128 0xb
 4746 081e 09020000 		.4byte	.LASF47
 4747 0822 10       		.byte	0x10
 4748 0823 32       		.byte	0x32
 4749 0824 87020000 		.4byte	0x287
 4750 0828 DE090000 		.4byte	.LLST65
 4751 082c 0B       		.uleb128 0xb
 4752 082d 0F020000 		.4byte	.LASF48
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 253


 4753 0831 10       		.byte	0x10
 4754 0832 33       		.byte	0x33
 4755 0833 87020000 		.4byte	0x287
 4756 0837 070A0000 		.4byte	.LLST66
 4757 083b 0B       		.uleb128 0xb
 4758 083c 55050000 		.4byte	.LASF39
 4759 0840 10       		.byte	0x10
 4760 0841 34       		.byte	0x34
 4761 0842 F6000000 		.4byte	0xf6
 4762 0846 3B0A0000 		.4byte	.LLST67
 4763 084a 0B       		.uleb128 0xb
 4764 084b 5E060000 		.4byte	.LASF59
 4765 084f 10       		.byte	0x10
 4766 0850 35       		.byte	0x35
 4767 0851 92020000 		.4byte	0x292
 4768 0855 5C0A0000 		.4byte	.LLST68
 4769 0859 11       		.uleb128 0x11
 4770 085a AF000000 		.4byte	.LASF42
 4771 085e 10       		.byte	0x10
 4772 085f 37       		.byte	0x37
 4773 0860 F6000000 		.4byte	0xf6
 4774 0864 7A0A0000 		.4byte	.LLST69
 4775 0868 0F       		.uleb128 0xf
 4776 0869 73756D00 		.ascii	"sum\000"
 4777 086d 10       		.byte	0x10
 4778 086e 38       		.byte	0x38
 4779 086f 64010000 		.4byte	0x164
 4780 0873 980A0000 		.4byte	.LLST70
 4781 0877 00       		.byte	0
 4782 0878 0A       		.uleb128 0xa
 4783 0879 73060000 		.4byte	.LASF61
 4784 087d 11       		.byte	0x11
 4785 087e 6B       		.byte	0x6b
 4786 087f 00000000 		.4byte	.LFB98
 4787 0883 2C000000 		.4byte	.LFE98-.LFB98
 4788 0887 01       		.uleb128 0x1
 4789 0888 9C       		.byte	0x9c
 4790 0889 E4080000 		.4byte	0x8e4
 4791 088d 0B       		.uleb128 0xb
 4792 088e 09020000 		.4byte	.LASF47
 4793 0892 11       		.byte	0x11
 4794 0893 6C       		.byte	0x6c
 4795 0894 F6020000 		.4byte	0x2f6
 4796 0898 D40A0000 		.4byte	.LLST71
 4797 089c 0B       		.uleb128 0xb
 4798 089d 0F020000 		.4byte	.LASF48
 4799 08a1 11       		.byte	0x11
 4800 08a2 6D       		.byte	0x6d
 4801 08a3 F6020000 		.4byte	0x2f6
 4802 08a7 FF0A0000 		.4byte	.LLST72
 4803 08ab 0B       		.uleb128 0xb
 4804 08ac 55050000 		.4byte	.LASF39
 4805 08b0 11       		.byte	0x11
 4806 08b1 6E       		.byte	0x6e
 4807 08b2 F6000000 		.4byte	0xf6
 4808 08b6 2A0B0000 		.4byte	.LLST73
 4809 08ba 16       		.uleb128 0x16
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 254


 4810 08bb 5E060000 		.4byte	.LASF59
 4811 08bf 11       		.byte	0x11
 4812 08c0 6F       		.byte	0x6f
 4813 08c1 E4080000 		.4byte	0x8e4
 4814 08c5 01       		.uleb128 0x1
 4815 08c6 53       		.byte	0x53
 4816 08c7 0C       		.uleb128 0xc
 4817 08c8 AF000000 		.4byte	.LASF42
 4818 08cc 11       		.byte	0x11
 4819 08cd 71       		.byte	0x71
 4820 08ce F6000000 		.4byte	0xf6
 4821 08d2 01       		.uleb128 0x1
 4822 08d3 52       		.byte	0x52
 4823 08d4 0F       		.uleb128 0xf
 4824 08d5 73756D00 		.ascii	"sum\000"
 4825 08d9 11       		.byte	0x11
 4826 08da 72       		.byte	0x72
 4827 08db 4C010000 		.4byte	0x14c
 4828 08df 4B0B0000 		.4byte	.LLST74
 4829 08e3 00       		.byte	0
 4830 08e4 0D       		.uleb128 0xd
 4831 08e5 04       		.byte	0x4
 4832 08e6 4C010000 		.4byte	0x14c
 4833 08ea 0A       		.uleb128 0xa
 4834 08eb DB010000 		.4byte	.LASF62
 4835 08ef 12       		.byte	0x12
 4836 08f0 73       		.byte	0x73
 4837 08f1 00000000 		.4byte	.LFB99
 4838 08f5 50000000 		.4byte	.LFE99-.LFB99
 4839 08f9 01       		.uleb128 0x1
 4840 08fa 9C       		.byte	0x9c
 4841 08fb 58090000 		.4byte	0x958
 4842 08ff 0B       		.uleb128 0xb
 4843 0900 09020000 		.4byte	.LASF47
 4844 0904 12       		.byte	0x12
 4845 0905 74       		.byte	0x74
 4846 0906 65030000 		.4byte	0x365
 4847 090a 930B0000 		.4byte	.LLST75
 4848 090e 0B       		.uleb128 0xb
 4849 090f 0F020000 		.4byte	.LASF48
 4850 0913 12       		.byte	0x12
 4851 0914 75       		.byte	0x75
 4852 0915 65030000 		.4byte	0x365
 4853 0919 BE0B0000 		.4byte	.LLST76
 4854 091d 16       		.uleb128 0x16
 4855 091e 55050000 		.4byte	.LASF39
 4856 0922 12       		.byte	0x12
 4857 0923 76       		.byte	0x76
 4858 0924 F6000000 		.4byte	0xf6
 4859 0928 01       		.uleb128 0x1
 4860 0929 52       		.byte	0x52
 4861 092a 0B       		.uleb128 0xb
 4862 092b 5E060000 		.4byte	.LASF59
 4863 092f 12       		.byte	0x12
 4864 0930 77       		.byte	0x77
 4865 0931 E4080000 		.4byte	0x8e4
 4866 0935 E90B0000 		.4byte	.LLST77
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 255


 4867 0939 11       		.uleb128 0x11
 4868 093a AF000000 		.4byte	.LASF42
 4869 093e 12       		.byte	0x12
 4870 093f 79       		.byte	0x79
 4871 0940 F6000000 		.4byte	0xf6
 4872 0944 070C0000 		.4byte	.LLST78
 4873 0948 0F       		.uleb128 0xf
 4874 0949 73756D00 		.ascii	"sum\000"
 4875 094d 12       		.byte	0x12
 4876 094e 7A       		.byte	0x7a
 4877 094f 4C010000 		.4byte	0x14c
 4878 0953 250C0000 		.4byte	.LLST79
 4879 0957 00       		.byte	0
 4880 0958 0A       		.uleb128 0xa
 4881 0959 4E060000 		.4byte	.LASF63
 4882 095d 13       		.byte	0x13
 4883 095e 6B       		.byte	0x6b
 4884 095f 00000000 		.4byte	.LFB100
 4885 0963 22000000 		.4byte	.LFE100-.LFB100
 4886 0967 01       		.uleb128 0x1
 4887 0968 9C       		.byte	0x9c
 4888 0969 C4090000 		.4byte	0x9c4
 4889 096d 0B       		.uleb128 0xb
 4890 096e 09020000 		.4byte	.LASF47
 4891 0972 13       		.byte	0x13
 4892 0973 6C       		.byte	0x6c
 4893 0974 D4030000 		.4byte	0x3d4
 4894 0978 610C0000 		.4byte	.LLST80
 4895 097c 0B       		.uleb128 0xb
 4896 097d 0F020000 		.4byte	.LASF48
 4897 0981 13       		.byte	0x13
 4898 0982 6D       		.byte	0x6d
 4899 0983 D4030000 		.4byte	0x3d4
 4900 0987 8C0C0000 		.4byte	.LLST81
 4901 098b 0B       		.uleb128 0xb
 4902 098c 55050000 		.4byte	.LASF39
 4903 0990 13       		.byte	0x13
 4904 0991 6E       		.byte	0x6e
 4905 0992 F6000000 		.4byte	0xf6
 4906 0996 B70C0000 		.4byte	.LLST82
 4907 099a 16       		.uleb128 0x16
 4908 099b 5E060000 		.4byte	.LASF59
 4909 099f 13       		.byte	0x13
 4910 09a0 6F       		.byte	0x6f
 4911 09a1 70030000 		.4byte	0x370
 4912 09a5 01       		.uleb128 0x1
 4913 09a6 53       		.byte	0x53
 4914 09a7 0C       		.uleb128 0xc
 4915 09a8 AF000000 		.4byte	.LASF42
 4916 09ac 13       		.byte	0x13
 4917 09ad 71       		.byte	0x71
 4918 09ae F6000000 		.4byte	0xf6
 4919 09b2 01       		.uleb128 0x1
 4920 09b3 52       		.byte	0x52
 4921 09b4 0F       		.uleb128 0xf
 4922 09b5 73756D00 		.ascii	"sum\000"
 4923 09b9 13       		.byte	0x13
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 256


 4924 09ba 72       		.byte	0x72
 4925 09bb 40010000 		.4byte	0x140
 4926 09bf D80C0000 		.4byte	.LLST83
 4927 09c3 00       		.byte	0
 4928 09c4 10       		.uleb128 0x10
 4929 09c5 26040000 		.4byte	.LASF64
 4930 09c9 14       		.byte	0x14
 4931 09ca 70       		.byte	0x70
 4932 09cb 00000000 		.4byte	.LFB101
 4933 09cf 2C000000 		.4byte	.LFE101-.LFB101
 4934 09d3 01       		.uleb128 0x1
 4935 09d4 9C       		.byte	0x9c
 4936 09d5 250A0000 		.4byte	0xa25
 4937 09d9 0B       		.uleb128 0xb
 4938 09da 09020000 		.4byte	.LASF47
 4939 09de 14       		.byte	0x14
 4940 09df 71       		.byte	0x71
 4941 09e0 26020000 		.4byte	0x226
 4942 09e4 030D0000 		.4byte	.LLST84
 4943 09e8 0B       		.uleb128 0xb
 4944 09e9 0F020000 		.4byte	.LASF48
 4945 09ed 14       		.byte	0x14
 4946 09ee 72       		.byte	0x72
 4947 09ef 26020000 		.4byte	0x226
 4948 09f3 2C0D0000 		.4byte	.LLST85
 4949 09f7 0B       		.uleb128 0xb
 4950 09f8 B4010000 		.4byte	.LASF38
 4951 09fc 14       		.byte	0x14
 4952 09fd 73       		.byte	0x73
 4953 09fe 31020000 		.4byte	0x231
 4954 0a02 550D0000 		.4byte	.LLST86
 4955 0a06 0B       		.uleb128 0xb
 4956 0a07 55050000 		.4byte	.LASF39
 4957 0a0b 14       		.byte	0x14
 4958 0a0c 74       		.byte	0x74
 4959 0a0d F6000000 		.4byte	0xf6
 4960 0a11 890D0000 		.4byte	.LLST87
 4961 0a15 11       		.uleb128 0x11
 4962 0a16 AF000000 		.4byte	.LASF42
 4963 0a1a 14       		.byte	0x14
 4964 0a1b 76       		.byte	0x76
 4965 0a1c F6000000 		.4byte	0xf6
 4966 0a20 AA0D0000 		.4byte	.LLST88
 4967 0a24 00       		.byte	0
 4968 0a25 10       		.uleb128 0x10
 4969 0a26 E6000000 		.4byte	.LASF65
 4970 0a2a 15       		.byte	0x15
 4971 0a2b 31       		.byte	0x31
 4972 0a2c 00000000 		.4byte	.LFB102
 4973 0a30 36000000 		.4byte	.LFE102-.LFB102
 4974 0a34 01       		.uleb128 0x1
 4975 0a35 9C       		.byte	0x9c
 4976 0a36 860A0000 		.4byte	0xa86
 4977 0a3a 0B       		.uleb128 0xb
 4978 0a3b 09020000 		.4byte	.LASF47
 4979 0a3f 15       		.byte	0x15
 4980 0a40 32       		.byte	0x32
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 257


 4981 0a41 87020000 		.4byte	0x287
 4982 0a45 C80D0000 		.4byte	.LLST89
 4983 0a49 0B       		.uleb128 0xb
 4984 0a4a 0F020000 		.4byte	.LASF48
 4985 0a4e 15       		.byte	0x15
 4986 0a4f 33       		.byte	0x33
 4987 0a50 87020000 		.4byte	0x287
 4988 0a54 F10D0000 		.4byte	.LLST90
 4989 0a58 0B       		.uleb128 0xb
 4990 0a59 B4010000 		.4byte	.LASF38
 4991 0a5d 15       		.byte	0x15
 4992 0a5e 34       		.byte	0x34
 4993 0a5f 92020000 		.4byte	0x292
 4994 0a63 250E0000 		.4byte	.LLST91
 4995 0a67 0B       		.uleb128 0xb
 4996 0a68 55050000 		.4byte	.LASF39
 4997 0a6c 15       		.byte	0x15
 4998 0a6d 35       		.byte	0x35
 4999 0a6e F6000000 		.4byte	0xf6
 5000 0a72 590E0000 		.4byte	.LLST92
 5001 0a76 11       		.uleb128 0x11
 5002 0a77 AF000000 		.4byte	.LASF42
 5003 0a7b 15       		.byte	0x15
 5004 0a7c 37       		.byte	0x37
 5005 0a7d F6000000 		.4byte	0xf6
 5006 0a81 7A0E0000 		.4byte	.LLST93
 5007 0a85 00       		.byte	0
 5008 0a86 0A       		.uleb128 0xa
 5009 0a87 25030000 		.4byte	.LASF66
 5010 0a8b 16       		.byte	0x16
 5011 0a8c 65       		.byte	0x65
 5012 0a8d 00000000 		.4byte	.LFB103
 5013 0a91 2E000000 		.4byte	.LFE103-.LFB103
 5014 0a95 01       		.uleb128 0x1
 5015 0a96 9C       		.byte	0x9c
 5016 0a97 090B0000 		.4byte	0xb09
 5017 0a9b 0B       		.uleb128 0xb
 5018 0a9c 09020000 		.4byte	.LASF47
 5019 0aa0 16       		.byte	0x16
 5020 0aa1 66       		.byte	0x66
 5021 0aa2 F6020000 		.4byte	0x2f6
 5022 0aa6 980E0000 		.4byte	.LLST94
 5023 0aaa 0B       		.uleb128 0xb
 5024 0aab 0F020000 		.4byte	.LASF48
 5025 0aaf 16       		.byte	0x16
 5026 0ab0 67       		.byte	0x67
 5027 0ab1 F6020000 		.4byte	0x2f6
 5028 0ab5 C10E0000 		.4byte	.LLST95
 5029 0ab9 0B       		.uleb128 0xb
 5030 0aba B4010000 		.4byte	.LASF38
 5031 0abe 16       		.byte	0x16
 5032 0abf 68       		.byte	0x68
 5033 0ac0 01030000 		.4byte	0x301
 5034 0ac4 EA0E0000 		.4byte	.LLST96
 5035 0ac8 0B       		.uleb128 0xb
 5036 0ac9 55050000 		.4byte	.LASF39
 5037 0acd 16       		.byte	0x16
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 258


 5038 0ace 69       		.byte	0x69
 5039 0acf F6000000 		.4byte	0xf6
 5040 0ad3 130F0000 		.4byte	.LLST97
 5041 0ad7 0C       		.uleb128 0xc
 5042 0ad8 AF000000 		.4byte	.LASF42
 5043 0adc 16       		.byte	0x16
 5044 0add 6B       		.byte	0x6b
 5045 0ade F6000000 		.4byte	0xf6
 5046 0ae2 01       		.uleb128 0x1
 5047 0ae3 53       		.byte	0x53
 5048 0ae4 12       		.uleb128 0x12
 5049 0ae5 30000000 		.4byte	.Ldebug_ranges0+0x30
 5050 0ae9 11       		.uleb128 0x11
 5051 0aea 15020000 		.4byte	.LASF51
 5052 0aee 16       		.byte	0x16
 5053 0aef B5       		.byte	0xb5
 5054 0af0 EB000000 		.4byte	0xeb
 5055 0af4 340F0000 		.4byte	.LLST98
 5056 0af8 11       		.uleb128 0x11
 5057 0af9 80050000 		.4byte	.LASF52
 5058 0afd 16       		.byte	0x16
 5059 0afe B5       		.byte	0xb5
 5060 0aff EB000000 		.4byte	0xeb
 5061 0b03 470F0000 		.4byte	.LLST99
 5062 0b07 00       		.byte	0
 5063 0b08 00       		.byte	0
 5064 0b09 0A       		.uleb128 0xa
 5065 0b0a 3C040000 		.4byte	.LASF67
 5066 0b0e 17       		.byte	0x17
 5067 0b0f 65       		.byte	0x65
 5068 0b10 00000000 		.4byte	.LFB104
 5069 0b14 3E000000 		.4byte	.LFE104-.LFB104
 5070 0b18 01       		.uleb128 0x1
 5071 0b19 9C       		.byte	0x9c
 5072 0b1a 9F0B0000 		.4byte	0xb9f
 5073 0b1e 0B       		.uleb128 0xb
 5074 0b1f 09020000 		.4byte	.LASF47
 5075 0b23 17       		.byte	0x17
 5076 0b24 66       		.byte	0x66
 5077 0b25 65030000 		.4byte	0x365
 5078 0b29 720F0000 		.4byte	.LLST100
 5079 0b2d 0B       		.uleb128 0xb
 5080 0b2e 0F020000 		.4byte	.LASF48
 5081 0b32 17       		.byte	0x17
 5082 0b33 67       		.byte	0x67
 5083 0b34 65030000 		.4byte	0x365
 5084 0b38 9B0F0000 		.4byte	.LLST101
 5085 0b3c 0B       		.uleb128 0xb
 5086 0b3d B4010000 		.4byte	.LASF38
 5087 0b41 17       		.byte	0x17
 5088 0b42 68       		.byte	0x68
 5089 0b43 70030000 		.4byte	0x370
 5090 0b47 C40F0000 		.4byte	.LLST102
 5091 0b4b 0B       		.uleb128 0xb
 5092 0b4c 55050000 		.4byte	.LASF39
 5093 0b50 17       		.byte	0x17
 5094 0b51 69       		.byte	0x69
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 259


 5095 0b52 F6000000 		.4byte	0xf6
 5096 0b56 EF0F0000 		.4byte	.LLST103
 5097 0b5a 0C       		.uleb128 0xc
 5098 0b5b AF000000 		.4byte	.LASF42
 5099 0b5f 17       		.byte	0x17
 5100 0b60 6B       		.byte	0x6b
 5101 0b61 F6000000 		.4byte	0xf6
 5102 0b65 01       		.uleb128 0x1
 5103 0b66 53       		.byte	0x53
 5104 0b67 0F       		.uleb128 0xf
 5105 0b68 6F757400 		.ascii	"out\000"
 5106 0b6c 17       		.byte	0x17
 5107 0b6d 6C       		.byte	0x6c
 5108 0b6e 40010000 		.4byte	0x140
 5109 0b72 10100000 		.4byte	.LLST104
 5110 0b76 17       		.uleb128 0x17
 5111 0b77 24000000 		.4byte	.LBB28
 5112 0b7b 04000000 		.4byte	.LBE28-.LBB28
 5113 0b7f 11       		.uleb128 0x11
 5114 0b80 15020000 		.4byte	.LASF51
 5115 0b84 17       		.byte	0x17
 5116 0b85 9C       		.byte	0x9c
 5117 0b86 EB000000 		.4byte	0xeb
 5118 0b8a 23100000 		.4byte	.LLST105
 5119 0b8e 11       		.uleb128 0x11
 5120 0b8f 80050000 		.4byte	.LASF52
 5121 0b93 17       		.byte	0x17
 5122 0b94 9C       		.byte	0x9c
 5123 0b95 EB000000 		.4byte	0xeb
 5124 0b99 36100000 		.4byte	.LLST106
 5125 0b9d 00       		.byte	0
 5126 0b9e 00       		.byte	0
 5127 0b9f 0A       		.uleb128 0xa
 5128 0ba0 FF030000 		.4byte	.LASF68
 5129 0ba4 18       		.byte	0x18
 5130 0ba5 65       		.byte	0x65
 5131 0ba6 00000000 		.4byte	.LFB105
 5132 0baa 2E000000 		.4byte	.LFE105-.LFB105
 5133 0bae 01       		.uleb128 0x1
 5134 0baf 9C       		.byte	0x9c
 5135 0bb0 220C0000 		.4byte	0xc22
 5136 0bb4 0B       		.uleb128 0xb
 5137 0bb5 09020000 		.4byte	.LASF47
 5138 0bb9 18       		.byte	0x18
 5139 0bba 66       		.byte	0x66
 5140 0bbb D4030000 		.4byte	0x3d4
 5141 0bbf 60100000 		.4byte	.LLST107
 5142 0bc3 0B       		.uleb128 0xb
 5143 0bc4 0F020000 		.4byte	.LASF48
 5144 0bc8 18       		.byte	0x18
 5145 0bc9 67       		.byte	0x67
 5146 0bca D4030000 		.4byte	0x3d4
 5147 0bce 89100000 		.4byte	.LLST108
 5148 0bd2 0B       		.uleb128 0xb
 5149 0bd3 B4010000 		.4byte	.LASF38
 5150 0bd7 18       		.byte	0x18
 5151 0bd8 68       		.byte	0x68
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 260


 5152 0bd9 DF030000 		.4byte	0x3df
 5153 0bdd B2100000 		.4byte	.LLST109
 5154 0be1 0B       		.uleb128 0xb
 5155 0be2 55050000 		.4byte	.LASF39
 5156 0be6 18       		.byte	0x18
 5157 0be7 69       		.byte	0x69
 5158 0be8 F6000000 		.4byte	0xf6
 5159 0bec DB100000 		.4byte	.LLST110
 5160 0bf0 0C       		.uleb128 0xc
 5161 0bf1 AF000000 		.4byte	.LASF42
 5162 0bf5 18       		.byte	0x18
 5163 0bf6 6B       		.byte	0x6b
 5164 0bf7 F6000000 		.4byte	0xf6
 5165 0bfb 01       		.uleb128 0x1
 5166 0bfc 53       		.byte	0x53
 5167 0bfd 12       		.uleb128 0x12
 5168 0bfe 48000000 		.4byte	.Ldebug_ranges0+0x48
 5169 0c02 11       		.uleb128 0x11
 5170 0c03 15020000 		.4byte	.LASF51
 5171 0c07 18       		.byte	0x18
 5172 0c08 9D       		.byte	0x9d
 5173 0c09 EB000000 		.4byte	0xeb
 5174 0c0d FC100000 		.4byte	.LLST111
 5175 0c11 11       		.uleb128 0x11
 5176 0c12 80050000 		.4byte	.LASF52
 5177 0c16 18       		.byte	0x18
 5178 0c17 9D       		.byte	0x9d
 5179 0c18 EB000000 		.4byte	0xeb
 5180 0c1c 0F110000 		.4byte	.LLST112
 5181 0c20 00       		.byte	0
 5182 0c21 00       		.byte	0
 5183 0c22 0A       		.uleb128 0xa
 5184 0c23 B8040000 		.4byte	.LASF69
 5185 0c27 19       		.byte	0x19
 5186 0c28 6C       		.byte	0x6c
 5187 0c29 00000000 		.4byte	.LFB106
 5188 0c2d 16000000 		.4byte	.LFE106-.LFB106
 5189 0c31 01       		.uleb128 0x1
 5190 0c32 9C       		.byte	0x9c
 5191 0c33 720C0000 		.4byte	0xc72
 5192 0c37 0B       		.uleb128 0xb
 5193 0c38 61020000 		.4byte	.LASF37
 5194 0c3c 19       		.byte	0x19
 5195 0c3d 6D       		.byte	0x6d
 5196 0c3e 26020000 		.4byte	0x226
 5197 0c42 3A110000 		.4byte	.LLST113
 5198 0c46 0B       		.uleb128 0xb
 5199 0c47 B4010000 		.4byte	.LASF38
 5200 0c4b 19       		.byte	0x19
 5201 0c4c 6E       		.byte	0x6e
 5202 0c4d 31020000 		.4byte	0x231
 5203 0c51 65110000 		.4byte	.LLST114
 5204 0c55 0B       		.uleb128 0xb
 5205 0c56 55050000 		.4byte	.LASF39
 5206 0c5a 19       		.byte	0x19
 5207 0c5b 6F       		.byte	0x6f
 5208 0c5c F6000000 		.4byte	0xf6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 261


 5209 0c60 90110000 		.4byte	.LLST115
 5210 0c64 0C       		.uleb128 0xc
 5211 0c65 AF000000 		.4byte	.LASF42
 5212 0c69 19       		.byte	0x19
 5213 0c6a 71       		.byte	0x71
 5214 0c6b F6000000 		.4byte	0xf6
 5215 0c6f 01       		.uleb128 0x1
 5216 0c70 52       		.byte	0x52
 5217 0c71 00       		.byte	0
 5218 0c72 0A       		.uleb128 0xa
 5219 0c73 45020000 		.4byte	.LASF70
 5220 0c77 1A       		.byte	0x1a
 5221 0c78 30       		.byte	0x30
 5222 0c79 00000000 		.4byte	.LFB107
 5223 0c7d 1E000000 		.4byte	.LFE107-.LFB107
 5224 0c81 01       		.uleb128 0x1
 5225 0c82 9C       		.byte	0x9c
 5226 0c83 C20C0000 		.4byte	0xcc2
 5227 0c87 0B       		.uleb128 0xb
 5228 0c88 61020000 		.4byte	.LASF37
 5229 0c8c 1A       		.byte	0x1a
 5230 0c8d 31       		.byte	0x31
 5231 0c8e 87020000 		.4byte	0x287
 5232 0c92 B1110000 		.4byte	.LLST116
 5233 0c96 0B       		.uleb128 0xb
 5234 0c97 B4010000 		.4byte	.LASF38
 5235 0c9b 1A       		.byte	0x1a
 5236 0c9c 32       		.byte	0x32
 5237 0c9d 92020000 		.4byte	0x292
 5238 0ca1 DC110000 		.4byte	.LLST117
 5239 0ca5 0B       		.uleb128 0xb
 5240 0ca6 55050000 		.4byte	.LASF39
 5241 0caa 1A       		.byte	0x1a
 5242 0cab 33       		.byte	0x33
 5243 0cac F6000000 		.4byte	0xf6
 5244 0cb0 07120000 		.4byte	.LLST118
 5245 0cb4 0C       		.uleb128 0xc
 5246 0cb5 AF000000 		.4byte	.LASF42
 5247 0cb9 1A       		.byte	0x1a
 5248 0cba 35       		.byte	0x35
 5249 0cbb F6000000 		.4byte	0xf6
 5250 0cbf 01       		.uleb128 0x1
 5251 0cc0 52       		.byte	0x52
 5252 0cc1 00       		.byte	0
 5253 0cc2 0A       		.uleb128 0xa
 5254 0cc3 F3020000 		.4byte	.LASF71
 5255 0cc7 1B       		.byte	0x1b
 5256 0cc8 62       		.byte	0x62
 5257 0cc9 00000000 		.4byte	.LFB108
 5258 0ccd 2C000000 		.4byte	.LFE108-.LFB108
 5259 0cd1 01       		.uleb128 0x1
 5260 0cd2 9C       		.byte	0x9c
 5261 0cd3 200D0000 		.4byte	0xd20
 5262 0cd7 0B       		.uleb128 0xb
 5263 0cd8 61020000 		.4byte	.LASF37
 5264 0cdc 1B       		.byte	0x1b
 5265 0cdd 63       		.byte	0x63
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 262


 5266 0cde F6020000 		.4byte	0x2f6
 5267 0ce2 28120000 		.4byte	.LLST119
 5268 0ce6 0B       		.uleb128 0xb
 5269 0ce7 B4010000 		.4byte	.LASF38
 5270 0ceb 1B       		.byte	0x1b
 5271 0cec 64       		.byte	0x64
 5272 0ced 01030000 		.4byte	0x301
 5273 0cf1 51120000 		.4byte	.LLST120
 5274 0cf5 0B       		.uleb128 0xb
 5275 0cf6 55050000 		.4byte	.LASF39
 5276 0cfa 1B       		.byte	0x1b
 5277 0cfb 65       		.byte	0x65
 5278 0cfc F6000000 		.4byte	0xf6
 5279 0d00 7A120000 		.4byte	.LLST121
 5280 0d04 0C       		.uleb128 0xc
 5281 0d05 AF000000 		.4byte	.LASF42
 5282 0d09 1B       		.byte	0x1b
 5283 0d0a 67       		.byte	0x67
 5284 0d0b F6000000 		.4byte	0xf6
 5285 0d0f 01       		.uleb128 0x1
 5286 0d10 52       		.byte	0x52
 5287 0d11 0F       		.uleb128 0xf
 5288 0d12 696E00   		.ascii	"in\000"
 5289 0d15 1B       		.byte	0x1b
 5290 0d16 68       		.byte	0x68
 5291 0d17 34010000 		.4byte	0x134
 5292 0d1b 9B120000 		.4byte	.LLST122
 5293 0d1f 00       		.byte	0
 5294 0d20 0A       		.uleb128 0xa
 5295 0d21 CC040000 		.4byte	.LASF72
 5296 0d25 1C       		.byte	0x1c
 5297 0d26 61       		.byte	0x61
 5298 0d27 00000000 		.4byte	.LFB109
 5299 0d2b 2A000000 		.4byte	.LFE109-.LFB109
 5300 0d2f 01       		.uleb128 0x1
 5301 0d30 9C       		.byte	0x9c
 5302 0d31 7E0D0000 		.4byte	0xd7e
 5303 0d35 0B       		.uleb128 0xb
 5304 0d36 61020000 		.4byte	.LASF37
 5305 0d3a 1C       		.byte	0x1c
 5306 0d3b 62       		.byte	0x62
 5307 0d3c 65030000 		.4byte	0x365
 5308 0d40 CF120000 		.4byte	.LLST123
 5309 0d44 0B       		.uleb128 0xb
 5310 0d45 B4010000 		.4byte	.LASF38
 5311 0d49 1C       		.byte	0x1c
 5312 0d4a 63       		.byte	0x63
 5313 0d4b 70030000 		.4byte	0x370
 5314 0d4f F8120000 		.4byte	.LLST124
 5315 0d53 0B       		.uleb128 0xb
 5316 0d54 55050000 		.4byte	.LASF39
 5317 0d58 1C       		.byte	0x1c
 5318 0d59 64       		.byte	0x64
 5319 0d5a F6000000 		.4byte	0xf6
 5320 0d5e 21130000 		.4byte	.LLST125
 5321 0d62 0C       		.uleb128 0xc
 5322 0d63 AF000000 		.4byte	.LASF42
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 263


 5323 0d67 1C       		.byte	0x1c
 5324 0d68 66       		.byte	0x66
 5325 0d69 F6000000 		.4byte	0xf6
 5326 0d6d 01       		.uleb128 0x1
 5327 0d6e 52       		.byte	0x52
 5328 0d6f 0F       		.uleb128 0xf
 5329 0d70 696E00   		.ascii	"in\000"
 5330 0d73 1C       		.byte	0x1c
 5331 0d74 67       		.byte	0x67
 5332 0d75 40010000 		.4byte	0x140
 5333 0d79 42130000 		.4byte	.LLST126
 5334 0d7d 00       		.byte	0
 5335 0d7e 0A       		.uleb128 0xa
 5336 0d7f 33000000 		.4byte	.LASF73
 5337 0d83 1D       		.byte	0x1d
 5338 0d84 60       		.byte	0x60
 5339 0d85 00000000 		.4byte	.LFB110
 5340 0d89 2A000000 		.4byte	.LFE110-.LFB110
 5341 0d8d 01       		.uleb128 0x1
 5342 0d8e 9C       		.byte	0x9c
 5343 0d8f DC0D0000 		.4byte	0xddc
 5344 0d93 0B       		.uleb128 0xb
 5345 0d94 61020000 		.4byte	.LASF37
 5346 0d98 1D       		.byte	0x1d
 5347 0d99 61       		.byte	0x61
 5348 0d9a D4030000 		.4byte	0x3d4
 5349 0d9e 78130000 		.4byte	.LLST127
 5350 0da2 0B       		.uleb128 0xb
 5351 0da3 B4010000 		.4byte	.LASF38
 5352 0da7 1D       		.byte	0x1d
 5353 0da8 62       		.byte	0x62
 5354 0da9 DF030000 		.4byte	0x3df
 5355 0dad A1130000 		.4byte	.LLST128
 5356 0db1 0B       		.uleb128 0xb
 5357 0db2 55050000 		.4byte	.LASF39
 5358 0db6 1D       		.byte	0x1d
 5359 0db7 63       		.byte	0x63
 5360 0db8 F6000000 		.4byte	0xf6
 5361 0dbc CA130000 		.4byte	.LLST129
 5362 0dc0 0C       		.uleb128 0xc
 5363 0dc1 AF000000 		.4byte	.LASF42
 5364 0dc5 1D       		.byte	0x1d
 5365 0dc6 65       		.byte	0x65
 5366 0dc7 F6000000 		.4byte	0xf6
 5367 0dcb 01       		.uleb128 0x1
 5368 0dcc 52       		.byte	0x52
 5369 0dcd 0F       		.uleb128 0xf
 5370 0dce 696E00   		.ascii	"in\000"
 5371 0dd1 1D       		.byte	0x1d
 5372 0dd2 66       		.byte	0x66
 5373 0dd3 28010000 		.4byte	0x128
 5374 0dd7 EB130000 		.4byte	.LLST130
 5375 0ddb 00       		.byte	0
 5376 0ddc 0A       		.uleb128 0xa
 5377 0ddd 66000000 		.4byte	.LASF74
 5378 0de1 1E       		.byte	0x1e
 5379 0de2 38       		.byte	0x38
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 264


 5380 0de3 00000000 		.4byte	.LFB111
 5381 0de7 14000000 		.4byte	.LFE111-.LFB111
 5382 0deb 01       		.uleb128 0x1
 5383 0dec 9C       		.byte	0x9c
 5384 0ded 2C0E0000 		.4byte	0xe2c
 5385 0df1 0B       		.uleb128 0xb
 5386 0df2 61020000 		.4byte	.LASF37
 5387 0df6 1E       		.byte	0x1e
 5388 0df7 39       		.byte	0x39
 5389 0df8 A7060000 		.4byte	0x6a7
 5390 0dfc 1F140000 		.4byte	.LLST131
 5391 0e00 0B       		.uleb128 0xb
 5392 0e01 B4010000 		.4byte	.LASF38
 5393 0e05 1E       		.byte	0x1e
 5394 0e06 3A       		.byte	0x3a
 5395 0e07 B2060000 		.4byte	0x6b2
 5396 0e0b 4A140000 		.4byte	.LLST132
 5397 0e0f 0B       		.uleb128 0xb
 5398 0e10 55050000 		.4byte	.LASF39
 5399 0e14 1E       		.byte	0x1e
 5400 0e15 3B       		.byte	0x3b
 5401 0e16 F6000000 		.4byte	0xf6
 5402 0e1a 75140000 		.4byte	.LLST133
 5403 0e1e 0C       		.uleb128 0xc
 5404 0e1f AF000000 		.4byte	.LASF42
 5405 0e23 1E       		.byte	0x1e
 5406 0e24 3D       		.byte	0x3d
 5407 0e25 F6000000 		.4byte	0xf6
 5408 0e29 01       		.uleb128 0x1
 5409 0e2a 52       		.byte	0x52
 5410 0e2b 00       		.byte	0
 5411 0e2c 0A       		.uleb128 0xa
 5412 0e2d 66020000 		.4byte	.LASF75
 5413 0e31 1F       		.byte	0x1f
 5414 0e32 30       		.byte	0x30
 5415 0e33 00000000 		.4byte	.LFB112
 5416 0e37 14000000 		.4byte	.LFE112-.LFB112
 5417 0e3b 01       		.uleb128 0x1
 5418 0e3c 9C       		.byte	0x9c
 5419 0e3d 7C0E0000 		.4byte	0xe7c
 5420 0e41 0B       		.uleb128 0xb
 5421 0e42 61020000 		.4byte	.LASF37
 5422 0e46 1F       		.byte	0x1f
 5423 0e47 31       		.byte	0x31
 5424 0e48 17070000 		.4byte	0x717
 5425 0e4c 96140000 		.4byte	.LLST134
 5426 0e50 0B       		.uleb128 0xb
 5427 0e51 B4010000 		.4byte	.LASF38
 5428 0e55 1F       		.byte	0x1f
 5429 0e56 32       		.byte	0x32
 5430 0e57 22070000 		.4byte	0x722
 5431 0e5b C1140000 		.4byte	.LLST135
 5432 0e5f 0B       		.uleb128 0xb
 5433 0e60 55050000 		.4byte	.LASF39
 5434 0e64 1F       		.byte	0x1f
 5435 0e65 33       		.byte	0x33
 5436 0e66 F6000000 		.4byte	0xf6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 265


 5437 0e6a EC140000 		.4byte	.LLST136
 5438 0e6e 0C       		.uleb128 0xc
 5439 0e6f AF000000 		.4byte	.LASF42
 5440 0e73 1F       		.byte	0x1f
 5441 0e74 35       		.byte	0x35
 5442 0e75 F6000000 		.4byte	0xf6
 5443 0e79 01       		.uleb128 0x1
 5444 0e7a 52       		.byte	0x52
 5445 0e7b 00       		.byte	0
 5446 0e7c 0A       		.uleb128 0xa
 5447 0e7d 3C010000 		.4byte	.LASF76
 5448 0e81 20       		.byte	0x20
 5449 0e82 30       		.byte	0x30
 5450 0e83 00000000 		.4byte	.LFB113
 5451 0e87 14000000 		.4byte	.LFE113-.LFB113
 5452 0e8b 01       		.uleb128 0x1
 5453 0e8c 9C       		.byte	0x9c
 5454 0e8d CC0E0000 		.4byte	0xecc
 5455 0e91 0B       		.uleb128 0xb
 5456 0e92 61020000 		.4byte	.LASF37
 5457 0e96 20       		.byte	0x20
 5458 0e97 31       		.byte	0x31
 5459 0e98 87070000 		.4byte	0x787
 5460 0e9c 0D150000 		.4byte	.LLST137
 5461 0ea0 0B       		.uleb128 0xb
 5462 0ea1 B4010000 		.4byte	.LASF38
 5463 0ea5 20       		.byte	0x20
 5464 0ea6 32       		.byte	0x32
 5465 0ea7 92070000 		.4byte	0x792
 5466 0eab 38150000 		.4byte	.LLST138
 5467 0eaf 0B       		.uleb128 0xb
 5468 0eb0 55050000 		.4byte	.LASF39
 5469 0eb4 20       		.byte	0x20
 5470 0eb5 33       		.byte	0x33
 5471 0eb6 F6000000 		.4byte	0xf6
 5472 0eba 63150000 		.4byte	.LLST139
 5473 0ebe 0C       		.uleb128 0xc
 5474 0ebf AF000000 		.4byte	.LASF42
 5475 0ec3 20       		.byte	0x20
 5476 0ec4 35       		.byte	0x35
 5477 0ec5 F6000000 		.4byte	0xf6
 5478 0ec9 01       		.uleb128 0x1
 5479 0eca 52       		.byte	0x52
 5480 0ecb 00       		.byte	0
 5481 0ecc 10       		.uleb128 0x10
 5482 0ecd 81010000 		.4byte	.LASF77
 5483 0ed1 21       		.byte	0x21
 5484 0ed2 6F       		.byte	0x6f
 5485 0ed3 00000000 		.4byte	.LFB114
 5486 0ed7 28000000 		.4byte	.LFE114-.LFB114
 5487 0edb 01       		.uleb128 0x1
 5488 0edc 9C       		.byte	0x9c
 5489 0edd 2D0F0000 		.4byte	0xf2d
 5490 0ee1 0B       		.uleb128 0xb
 5491 0ee2 61020000 		.4byte	.LASF37
 5492 0ee6 21       		.byte	0x21
 5493 0ee7 70       		.byte	0x70
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 266


 5494 0ee8 26020000 		.4byte	0x226
 5495 0eec 84150000 		.4byte	.LLST140
 5496 0ef0 0B       		.uleb128 0xb
 5497 0ef1 FF040000 		.4byte	.LASF78
 5498 0ef5 21       		.byte	0x21
 5499 0ef6 71       		.byte	0x71
 5500 0ef7 58010000 		.4byte	0x158
 5501 0efb AD150000 		.4byte	.LLST141
 5502 0eff 0B       		.uleb128 0xb
 5503 0f00 B4010000 		.4byte	.LASF38
 5504 0f04 21       		.byte	0x21
 5505 0f05 72       		.byte	0x72
 5506 0f06 31020000 		.4byte	0x231
 5507 0f0a CB150000 		.4byte	.LLST142
 5508 0f0e 0B       		.uleb128 0xb
 5509 0f0f 55050000 		.4byte	.LASF39
 5510 0f13 21       		.byte	0x21
 5511 0f14 73       		.byte	0x73
 5512 0f15 F6000000 		.4byte	0xf6
 5513 0f19 FF150000 		.4byte	.LLST143
 5514 0f1d 11       		.uleb128 0x11
 5515 0f1e AF000000 		.4byte	.LASF42
 5516 0f22 21       		.byte	0x21
 5517 0f23 75       		.byte	0x75
 5518 0f24 F6000000 		.4byte	0xf6
 5519 0f28 20160000 		.4byte	.LLST144
 5520 0f2c 00       		.byte	0
 5521 0f2d 10       		.uleb128 0x10
 5522 0f2e 7F030000 		.4byte	.LASF79
 5523 0f32 22       		.byte	0x22
 5524 0f33 31       		.byte	0x31
 5525 0f34 00000000 		.4byte	.LFB115
 5526 0f38 32000000 		.4byte	.LFE115-.LFB115
 5527 0f3c 01       		.uleb128 0x1
 5528 0f3d 9C       		.byte	0x9c
 5529 0f3e 8B0F0000 		.4byte	0xf8b
 5530 0f42 0B       		.uleb128 0xb
 5531 0f43 61020000 		.4byte	.LASF37
 5532 0f47 22       		.byte	0x22
 5533 0f48 32       		.byte	0x32
 5534 0f49 87020000 		.4byte	0x287
 5535 0f4d 3E160000 		.4byte	.LLST145
 5536 0f51 0B       		.uleb128 0xb
 5537 0f52 FF040000 		.4byte	.LASF78
 5538 0f56 22       		.byte	0x22
 5539 0f57 33       		.byte	0x33
 5540 0f58 64010000 		.4byte	0x164
 5541 0f5c 67160000 		.4byte	.LLST146
 5542 0f60 0B       		.uleb128 0xb
 5543 0f61 B4010000 		.4byte	.LASF38
 5544 0f65 22       		.byte	0x22
 5545 0f66 34       		.byte	0x34
 5546 0f67 92020000 		.4byte	0x292
 5547 0f6b 8F160000 		.4byte	.LLST147
 5548 0f6f 16       		.uleb128 0x16
 5549 0f70 55050000 		.4byte	.LASF39
 5550 0f74 22       		.byte	0x22
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 267


 5551 0f75 35       		.byte	0x35
 5552 0f76 F6000000 		.4byte	0xf6
 5553 0f7a 02       		.uleb128 0x2
 5554 0f7b 91       		.byte	0x91
 5555 0f7c 04       		.sleb128 4
 5556 0f7d 0C       		.uleb128 0xc
 5557 0f7e AF000000 		.4byte	.LASF42
 5558 0f82 22       		.byte	0x22
 5559 0f83 37       		.byte	0x37
 5560 0f84 F6000000 		.4byte	0xf6
 5561 0f88 01       		.uleb128 0x1
 5562 0f89 54       		.byte	0x54
 5563 0f8a 00       		.byte	0
 5564 0f8b 0A       		.uleb128 0xa
 5565 0f8c 92050000 		.4byte	.LASF80
 5566 0f90 23       		.byte	0x23
 5567 0f91 63       		.byte	0x63
 5568 0f92 00000000 		.4byte	.LFB116
 5569 0f96 22000000 		.4byte	.LFE116-.LFB116
 5570 0f9a 01       		.uleb128 0x1
 5571 0f9b 9C       		.byte	0x9c
 5572 0f9c 0C100000 		.4byte	0x100c
 5573 0fa0 0B       		.uleb128 0xb
 5574 0fa1 61020000 		.4byte	.LASF37
 5575 0fa5 23       		.byte	0x23
 5576 0fa6 64       		.byte	0x64
 5577 0fa7 F6020000 		.4byte	0x2f6
 5578 0fab C4160000 		.4byte	.LLST148
 5579 0faf 16       		.uleb128 0x16
 5580 0fb0 FF040000 		.4byte	.LASF78
 5581 0fb4 23       		.byte	0x23
 5582 0fb5 65       		.byte	0x65
 5583 0fb6 34010000 		.4byte	0x134
 5584 0fba 01       		.uleb128 0x1
 5585 0fbb 51       		.byte	0x51
 5586 0fbc 0B       		.uleb128 0xb
 5587 0fbd B4010000 		.4byte	.LASF38
 5588 0fc1 23       		.byte	0x23
 5589 0fc2 66       		.byte	0x66
 5590 0fc3 01030000 		.4byte	0x301
 5591 0fc7 ED160000 		.4byte	.LLST149
 5592 0fcb 0B       		.uleb128 0xb
 5593 0fcc 55050000 		.4byte	.LASF39
 5594 0fd0 23       		.byte	0x23
 5595 0fd1 67       		.byte	0x67
 5596 0fd2 F6000000 		.4byte	0xf6
 5597 0fd6 16170000 		.4byte	.LLST150
 5598 0fda 0C       		.uleb128 0xc
 5599 0fdb AF000000 		.4byte	.LASF42
 5600 0fdf 23       		.byte	0x23
 5601 0fe0 69       		.byte	0x69
 5602 0fe1 F6000000 		.4byte	0xf6
 5603 0fe5 01       		.uleb128 0x1
 5604 0fe6 53       		.byte	0x53
 5605 0fe7 12       		.uleb128 0x12
 5606 0fe8 60000000 		.4byte	.Ldebug_ranges0+0x60
 5607 0fec 11       		.uleb128 0x11
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 268


 5608 0fed 15020000 		.4byte	.LASF51
 5609 0ff1 23       		.byte	0x23
 5610 0ff2 9C       		.byte	0x9c
 5611 0ff3 EB000000 		.4byte	0xeb
 5612 0ff7 37170000 		.4byte	.LLST151
 5613 0ffb 11       		.uleb128 0x11
 5614 0ffc 80050000 		.4byte	.LASF52
 5615 1000 23       		.byte	0x23
 5616 1001 9C       		.byte	0x9c
 5617 1002 EB000000 		.4byte	0xeb
 5618 1006 4A170000 		.4byte	.LLST152
 5619 100a 00       		.byte	0
 5620 100b 00       		.byte	0
 5621 100c 0A       		.uleb128 0xa
 5622 100d 90010000 		.4byte	.LASF81
 5623 1011 24       		.byte	0x24
 5624 1012 63       		.byte	0x63
 5625 1013 00000000 		.4byte	.LFB117
 5626 1017 32000000 		.4byte	.LFE117-.LFB117
 5627 101b 01       		.uleb128 0x1
 5628 101c 9C       		.byte	0x9c
 5629 101d 84100000 		.4byte	0x1084
 5630 1021 0B       		.uleb128 0xb
 5631 1022 61020000 		.4byte	.LASF37
 5632 1026 24       		.byte	0x24
 5633 1027 64       		.byte	0x64
 5634 1028 65030000 		.4byte	0x365
 5635 102c 73170000 		.4byte	.LLST153
 5636 1030 0B       		.uleb128 0xb
 5637 1031 FF040000 		.4byte	.LASF78
 5638 1035 24       		.byte	0x24
 5639 1036 65       		.byte	0x65
 5640 1037 40010000 		.4byte	0x140
 5641 103b 9C170000 		.4byte	.LLST154
 5642 103f 0B       		.uleb128 0xb
 5643 1040 B4010000 		.4byte	.LASF38
 5644 1044 24       		.byte	0x24
 5645 1045 66       		.byte	0x66
 5646 1046 70030000 		.4byte	0x370
 5647 104a C8170000 		.4byte	.LLST155
 5648 104e 0B       		.uleb128 0xb
 5649 104f 55050000 		.4byte	.LASF39
 5650 1053 24       		.byte	0x24
 5651 1054 67       		.byte	0x67
 5652 1055 F6000000 		.4byte	0xf6
 5653 1059 F1170000 		.4byte	.LLST156
 5654 105d 0C       		.uleb128 0xc
 5655 105e AF000000 		.4byte	.LASF42
 5656 1062 24       		.byte	0x24
 5657 1063 69       		.byte	0x69
 5658 1064 F6000000 		.4byte	0xf6
 5659 1068 01       		.uleb128 0x1
 5660 1069 53       		.byte	0x53
 5661 106a 13       		.uleb128 0x13
 5662 106b 70010000 		.4byte	0x170
 5663 106f 14000000 		.4byte	.LBB33
 5664 1073 0E000000 		.4byte	.LBE33-.LBB33
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 269


 5665 1077 24       		.byte	0x24
 5666 1078 93       		.byte	0x93
 5667 1079 14       		.uleb128 0x14
 5668 107a 80010000 		.4byte	0x180
 5669 107e 12180000 		.4byte	.LLST157
 5670 1082 00       		.byte	0
 5671 1083 00       		.byte	0
 5672 1084 0A       		.uleb128 0xa
 5673 1085 84060000 		.4byte	.LASF82
 5674 1089 25       		.byte	0x25
 5675 108a 62       		.byte	0x62
 5676 108b 00000000 		.4byte	.LFB118
 5677 108f 22000000 		.4byte	.LFE118-.LFB118
 5678 1093 01       		.uleb128 0x1
 5679 1094 9C       		.byte	0x9c
 5680 1095 05110000 		.4byte	0x1105
 5681 1099 0B       		.uleb128 0xb
 5682 109a 61020000 		.4byte	.LASF37
 5683 109e 25       		.byte	0x25
 5684 109f 63       		.byte	0x63
 5685 10a0 D4030000 		.4byte	0x3d4
 5686 10a4 2A180000 		.4byte	.LLST158
 5687 10a8 16       		.uleb128 0x16
 5688 10a9 FF040000 		.4byte	.LASF78
 5689 10ad 25       		.byte	0x25
 5690 10ae 64       		.byte	0x64
 5691 10af 28010000 		.4byte	0x128
 5692 10b3 01       		.uleb128 0x1
 5693 10b4 51       		.byte	0x51
 5694 10b5 0B       		.uleb128 0xb
 5695 10b6 B4010000 		.4byte	.LASF38
 5696 10ba 25       		.byte	0x25
 5697 10bb 65       		.byte	0x65
 5698 10bc DF030000 		.4byte	0x3df
 5699 10c0 53180000 		.4byte	.LLST159
 5700 10c4 0B       		.uleb128 0xb
 5701 10c5 55050000 		.4byte	.LASF39
 5702 10c9 25       		.byte	0x25
 5703 10ca 66       		.byte	0x66
 5704 10cb F6000000 		.4byte	0xf6
 5705 10cf 7C180000 		.4byte	.LLST160
 5706 10d3 0C       		.uleb128 0xc
 5707 10d4 AF000000 		.4byte	.LASF42
 5708 10d8 25       		.byte	0x25
 5709 10d9 68       		.byte	0x68
 5710 10da F6000000 		.4byte	0xf6
 5711 10de 01       		.uleb128 0x1
 5712 10df 53       		.byte	0x53
 5713 10e0 12       		.uleb128 0x12
 5714 10e1 78000000 		.4byte	.Ldebug_ranges0+0x78
 5715 10e5 11       		.uleb128 0x11
 5716 10e6 15020000 		.4byte	.LASF51
 5717 10ea 25       		.byte	0x25
 5718 10eb 97       		.byte	0x97
 5719 10ec EB000000 		.4byte	0xeb
 5720 10f0 9D180000 		.4byte	.LLST161
 5721 10f4 11       		.uleb128 0x11
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 270


 5722 10f5 80050000 		.4byte	.LASF52
 5723 10f9 25       		.byte	0x25
 5724 10fa 97       		.byte	0x97
 5725 10fb EB000000 		.4byte	0xeb
 5726 10ff B0180000 		.4byte	.LLST162
 5727 1103 00       		.byte	0
 5728 1104 00       		.byte	0
 5729 1105 0A       		.uleb128 0xa
 5730 1106 2A050000 		.4byte	.LASF83
 5731 110a 26       		.byte	0x26
 5732 110b 39       		.byte	0x39
 5733 110c 00000000 		.4byte	.LFB119
 5734 1110 1C000000 		.4byte	.LFE119-.LFB119
 5735 1114 01       		.uleb128 0x1
 5736 1115 9C       		.byte	0x9c
 5737 1116 64110000 		.4byte	0x1164
 5738 111a 0B       		.uleb128 0xb
 5739 111b 09020000 		.4byte	.LASF47
 5740 111f 26       		.byte	0x26
 5741 1120 3A       		.byte	0x3a
 5742 1121 A7060000 		.4byte	0x6a7
 5743 1125 D9180000 		.4byte	.LLST163
 5744 1129 0B       		.uleb128 0xb
 5745 112a 0F020000 		.4byte	.LASF48
 5746 112e 26       		.byte	0x26
 5747 112f 3B       		.byte	0x3b
 5748 1130 A7060000 		.4byte	0x6a7
 5749 1134 04190000 		.4byte	.LLST164
 5750 1138 0B       		.uleb128 0xb
 5751 1139 B4010000 		.4byte	.LASF38
 5752 113d 26       		.byte	0x26
 5753 113e 3C       		.byte	0x3c
 5754 113f B2060000 		.4byte	0x6b2
 5755 1143 2F190000 		.4byte	.LLST165
 5756 1147 0B       		.uleb128 0xb
 5757 1148 55050000 		.4byte	.LASF39
 5758 114c 26       		.byte	0x26
 5759 114d 3D       		.byte	0x3d
 5760 114e F6000000 		.4byte	0xf6
 5761 1152 5A190000 		.4byte	.LLST166
 5762 1156 0C       		.uleb128 0xc
 5763 1157 AF000000 		.4byte	.LASF42
 5764 115b 26       		.byte	0x26
 5765 115c 3F       		.byte	0x3f
 5766 115d F6000000 		.4byte	0xf6
 5767 1161 01       		.uleb128 0x1
 5768 1162 53       		.byte	0x53
 5769 1163 00       		.byte	0
 5770 1164 0A       		.uleb128 0xa
 5771 1165 72000000 		.4byte	.LASF84
 5772 1169 27       		.byte	0x27
 5773 116a 31       		.byte	0x31
 5774 116b 00000000 		.4byte	.LFB120
 5775 116f 1C000000 		.4byte	.LFE120-.LFB120
 5776 1173 01       		.uleb128 0x1
 5777 1174 9C       		.byte	0x9c
 5778 1175 C3110000 		.4byte	0x11c3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 271


 5779 1179 0B       		.uleb128 0xb
 5780 117a 09020000 		.4byte	.LASF47
 5781 117e 27       		.byte	0x27
 5782 117f 32       		.byte	0x32
 5783 1180 17070000 		.4byte	0x717
 5784 1184 7B190000 		.4byte	.LLST167
 5785 1188 0B       		.uleb128 0xb
 5786 1189 0F020000 		.4byte	.LASF48
 5787 118d 27       		.byte	0x27
 5788 118e 33       		.byte	0x33
 5789 118f 17070000 		.4byte	0x717
 5790 1193 A6190000 		.4byte	.LLST168
 5791 1197 0B       		.uleb128 0xb
 5792 1198 B4010000 		.4byte	.LASF38
 5793 119c 27       		.byte	0x27
 5794 119d 34       		.byte	0x34
 5795 119e 22070000 		.4byte	0x722
 5796 11a2 D1190000 		.4byte	.LLST169
 5797 11a6 0B       		.uleb128 0xb
 5798 11a7 55050000 		.4byte	.LASF39
 5799 11ab 27       		.byte	0x27
 5800 11ac 35       		.byte	0x35
 5801 11ad F6000000 		.4byte	0xf6
 5802 11b1 FC190000 		.4byte	.LLST170
 5803 11b5 0C       		.uleb128 0xc
 5804 11b6 AF000000 		.4byte	.LASF42
 5805 11ba 27       		.byte	0x27
 5806 11bb 37       		.byte	0x37
 5807 11bc F6000000 		.4byte	0xf6
 5808 11c0 01       		.uleb128 0x1
 5809 11c1 53       		.byte	0x53
 5810 11c2 00       		.byte	0
 5811 11c3 0A       		.uleb128 0xa
 5812 11c4 70030000 		.4byte	.LASF85
 5813 11c8 28       		.byte	0x28
 5814 11c9 31       		.byte	0x31
 5815 11ca 00000000 		.4byte	.LFB121
 5816 11ce 1C000000 		.4byte	.LFE121-.LFB121
 5817 11d2 01       		.uleb128 0x1
 5818 11d3 9C       		.byte	0x9c
 5819 11d4 22120000 		.4byte	0x1222
 5820 11d8 0B       		.uleb128 0xb
 5821 11d9 09020000 		.4byte	.LASF47
 5822 11dd 28       		.byte	0x28
 5823 11de 32       		.byte	0x32
 5824 11df 87070000 		.4byte	0x787
 5825 11e3 1D1A0000 		.4byte	.LLST171
 5826 11e7 0B       		.uleb128 0xb
 5827 11e8 0F020000 		.4byte	.LASF48
 5828 11ec 28       		.byte	0x28
 5829 11ed 33       		.byte	0x33
 5830 11ee 87070000 		.4byte	0x787
 5831 11f2 481A0000 		.4byte	.LLST172
 5832 11f6 0B       		.uleb128 0xb
 5833 11f7 B4010000 		.4byte	.LASF38
 5834 11fb 28       		.byte	0x28
 5835 11fc 34       		.byte	0x34
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 272


 5836 11fd 92070000 		.4byte	0x792
 5837 1201 731A0000 		.4byte	.LLST173
 5838 1205 0B       		.uleb128 0xb
 5839 1206 55050000 		.4byte	.LASF39
 5840 120a 28       		.byte	0x28
 5841 120b 35       		.byte	0x35
 5842 120c F6000000 		.4byte	0xf6
 5843 1210 9E1A0000 		.4byte	.LLST174
 5844 1214 0C       		.uleb128 0xc
 5845 1215 AF000000 		.4byte	.LASF42
 5846 1219 28       		.byte	0x28
 5847 121a 37       		.byte	0x37
 5848 121b F6000000 		.4byte	0xf6
 5849 121f 01       		.uleb128 0x1
 5850 1220 53       		.byte	0x53
 5851 1221 00       		.byte	0
 5852 1222 10       		.uleb128 0x10
 5853 1223 7F020000 		.4byte	.LASF86
 5854 1227 29       		.byte	0x29
 5855 1228 7D       		.byte	0x7d
 5856 1229 00000000 		.4byte	.LFB122
 5857 122d 28000000 		.4byte	.LFE122-.LFB122
 5858 1231 01       		.uleb128 0x1
 5859 1232 9C       		.byte	0x9c
 5860 1233 83120000 		.4byte	0x1283
 5861 1237 0B       		.uleb128 0xb
 5862 1238 61020000 		.4byte	.LASF37
 5863 123c 29       		.byte	0x29
 5864 123d 7E       		.byte	0x7e
 5865 123e 26020000 		.4byte	0x226
 5866 1242 BF1A0000 		.4byte	.LLST175
 5867 1246 0B       		.uleb128 0xb
 5868 1247 00000000 		.4byte	.LASF87
 5869 124b 29       		.byte	0x29
 5870 124c 7F       		.byte	0x7f
 5871 124d 58010000 		.4byte	0x158
 5872 1251 E81A0000 		.4byte	.LLST176
 5873 1255 0B       		.uleb128 0xb
 5874 1256 B4010000 		.4byte	.LASF38
 5875 125a 29       		.byte	0x29
 5876 125b 80       		.byte	0x80
 5877 125c 31020000 		.4byte	0x231
 5878 1260 061B0000 		.4byte	.LLST177
 5879 1264 0B       		.uleb128 0xb
 5880 1265 55050000 		.4byte	.LASF39
 5881 1269 29       		.byte	0x29
 5882 126a 81       		.byte	0x81
 5883 126b F6000000 		.4byte	0xf6
 5884 126f 3A1B0000 		.4byte	.LLST178
 5885 1273 11       		.uleb128 0x11
 5886 1274 AF000000 		.4byte	.LASF42
 5887 1278 29       		.byte	0x29
 5888 1279 83       		.byte	0x83
 5889 127a F6000000 		.4byte	0xf6
 5890 127e 5B1B0000 		.4byte	.LLST179
 5891 1282 00       		.byte	0
 5892 1283 10       		.uleb128 0x10
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 273


 5893 1284 49040000 		.4byte	.LASF88
 5894 1288 2A       		.byte	0x2a
 5895 1289 31       		.byte	0x31
 5896 128a 00000000 		.4byte	.LFB123
 5897 128e 32000000 		.4byte	.LFE123-.LFB123
 5898 1292 01       		.uleb128 0x1
 5899 1293 9C       		.byte	0x9c
 5900 1294 E1120000 		.4byte	0x12e1
 5901 1298 0B       		.uleb128 0xb
 5902 1299 61020000 		.4byte	.LASF37
 5903 129d 2A       		.byte	0x2a
 5904 129e 32       		.byte	0x32
 5905 129f 87020000 		.4byte	0x287
 5906 12a3 791B0000 		.4byte	.LLST180
 5907 12a7 0B       		.uleb128 0xb
 5908 12a8 00000000 		.4byte	.LASF87
 5909 12ac 2A       		.byte	0x2a
 5910 12ad 33       		.byte	0x33
 5911 12ae 64010000 		.4byte	0x164
 5912 12b2 A21B0000 		.4byte	.LLST181
 5913 12b6 0B       		.uleb128 0xb
 5914 12b7 B4010000 		.4byte	.LASF38
 5915 12bb 2A       		.byte	0x2a
 5916 12bc 34       		.byte	0x34
 5917 12bd 92020000 		.4byte	0x292
 5918 12c1 CA1B0000 		.4byte	.LLST182
 5919 12c5 16       		.uleb128 0x16
 5920 12c6 55050000 		.4byte	.LASF39
 5921 12ca 2A       		.byte	0x2a
 5922 12cb 35       		.byte	0x35
 5923 12cc F6000000 		.4byte	0xf6
 5924 12d0 02       		.uleb128 0x2
 5925 12d1 91       		.byte	0x91
 5926 12d2 04       		.sleb128 4
 5927 12d3 0C       		.uleb128 0xc
 5928 12d4 AF000000 		.4byte	.LASF42
 5929 12d8 2A       		.byte	0x2a
 5930 12d9 37       		.byte	0x37
 5931 12da F6000000 		.4byte	0xf6
 5932 12de 01       		.uleb128 0x1
 5933 12df 54       		.byte	0x54
 5934 12e0 00       		.byte	0
 5935 12e1 0A       		.uleb128 0xa
 5936 12e2 A1000000 		.4byte	.LASF89
 5937 12e6 2B       		.byte	0x2b
 5938 12e7 6E       		.byte	0x6e
 5939 12e8 00000000 		.4byte	.LFB124
 5940 12ec 30000000 		.4byte	.LFE124-.LFB124
 5941 12f0 01       		.uleb128 0x1
 5942 12f1 9C       		.byte	0x9c
 5943 12f2 80130000 		.4byte	0x1380
 5944 12f6 0B       		.uleb128 0xb
 5945 12f7 61020000 		.4byte	.LASF37
 5946 12fb 2B       		.byte	0x2b
 5947 12fc 6F       		.byte	0x6f
 5948 12fd F6020000 		.4byte	0x2f6
 5949 1301 FF1B0000 		.4byte	.LLST183
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 274


 5950 1305 16       		.uleb128 0x16
 5951 1306 4E030000 		.4byte	.LASF90
 5952 130a 2B       		.byte	0x2b
 5953 130b 70       		.byte	0x70
 5954 130c 34010000 		.4byte	0x134
 5955 1310 01       		.uleb128 0x1
 5956 1311 51       		.byte	0x51
 5957 1312 0B       		.uleb128 0xb
 5958 1313 99030000 		.4byte	.LASF91
 5959 1317 2B       		.byte	0x2b
 5960 1318 71       		.byte	0x71
 5961 1319 BF000000 		.4byte	0xbf
 5962 131d 281C0000 		.4byte	.LLST184
 5963 1321 0B       		.uleb128 0xb
 5964 1322 B4010000 		.4byte	.LASF38
 5965 1326 2B       		.byte	0x2b
 5966 1327 72       		.byte	0x72
 5967 1328 01030000 		.4byte	0x301
 5968 132c 491C0000 		.4byte	.LLST185
 5969 1330 0B       		.uleb128 0xb
 5970 1331 55050000 		.4byte	.LASF39
 5971 1335 2B       		.byte	0x2b
 5972 1336 73       		.byte	0x73
 5973 1337 F6000000 		.4byte	0xf6
 5974 133b 721C0000 		.4byte	.LLST186
 5975 133f 11       		.uleb128 0x11
 5976 1340 AF000000 		.4byte	.LASF42
 5977 1344 2B       		.byte	0x2b
 5978 1345 75       		.byte	0x75
 5979 1346 F6000000 		.4byte	0xf6
 5980 134a 921C0000 		.4byte	.LLST187
 5981 134e 0C       		.uleb128 0xc
 5982 134f 32030000 		.4byte	.LASF92
 5983 1353 2B       		.byte	0x2b
 5984 1354 76       		.byte	0x76
 5985 1355 BF000000 		.4byte	0xbf
 5986 1359 01       		.uleb128 0x1
 5987 135a 52       		.byte	0x52
 5988 135b 12       		.uleb128 0x12
 5989 135c 90000000 		.4byte	.Ldebug_ranges0+0x90
 5990 1360 11       		.uleb128 0x11
 5991 1361 15020000 		.4byte	.LASF51
 5992 1365 2B       		.byte	0x2b
 5993 1366 BE       		.byte	0xbe
 5994 1367 EB000000 		.4byte	0xeb
 5995 136b A51C0000 		.4byte	.LLST188
 5996 136f 11       		.uleb128 0x11
 5997 1370 80050000 		.4byte	.LASF52
 5998 1374 2B       		.byte	0x2b
 5999 1375 BE       		.byte	0xbe
 6000 1376 EB000000 		.4byte	0xeb
 6001 137a B81C0000 		.4byte	.LLST189
 6002 137e 00       		.byte	0
 6003 137f 00       		.byte	0
 6004 1380 0A       		.uleb128 0xa
 6005 1381 AC020000 		.4byte	.LASF93
 6006 1385 2C       		.byte	0x2c
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 275


 6007 1386 6A       		.byte	0x6a
 6008 1387 00000000 		.4byte	.LFB125
 6009 138b 7E000000 		.4byte	.LFE125-.LFB125
 6010 138f 01       		.uleb128 0x1
 6011 1390 9C       		.byte	0x9c
 6012 1391 2A140000 		.4byte	0x142a
 6013 1395 0B       		.uleb128 0xb
 6014 1396 61020000 		.4byte	.LASF37
 6015 139a 2C       		.byte	0x2c
 6016 139b 6B       		.byte	0x6b
 6017 139c 65030000 		.4byte	0x365
 6018 13a0 E41C0000 		.4byte	.LLST190
 6019 13a4 16       		.uleb128 0x16
 6020 13a5 4E030000 		.4byte	.LASF90
 6021 13a9 2C       		.byte	0x2c
 6022 13aa 6C       		.byte	0x6c
 6023 13ab 40010000 		.4byte	0x140
 6024 13af 01       		.uleb128 0x1
 6025 13b0 51       		.byte	0x51
 6026 13b1 0B       		.uleb128 0xb
 6027 13b2 99030000 		.4byte	.LASF91
 6028 13b6 2C       		.byte	0x2c
 6029 13b7 6D       		.byte	0x6d
 6030 13b8 BF000000 		.4byte	0xbf
 6031 13bc 251D0000 		.4byte	.LLST191
 6032 13c0 0B       		.uleb128 0xb
 6033 13c1 B4010000 		.4byte	.LASF38
 6034 13c5 2C       		.byte	0x2c
 6035 13c6 6E       		.byte	0x6e
 6036 13c7 70030000 		.4byte	0x370
 6037 13cb 461D0000 		.4byte	.LLST192
 6038 13cf 0B       		.uleb128 0xb
 6039 13d0 55050000 		.4byte	.LASF39
 6040 13d4 2C       		.byte	0x2c
 6041 13d5 6F       		.byte	0x6f
 6042 13d6 F6000000 		.4byte	0xf6
 6043 13da 891D0000 		.4byte	.LLST193
 6044 13de 11       		.uleb128 0x11
 6045 13df AF000000 		.4byte	.LASF42
 6046 13e3 2C       		.byte	0x2c
 6047 13e4 71       		.byte	0x71
 6048 13e5 F6000000 		.4byte	0xf6
 6049 13e9 A91D0000 		.4byte	.LLST194
 6050 13ed 0F       		.uleb128 0xf
 6051 13ee 696E00   		.ascii	"in\000"
 6052 13f1 2C       		.byte	0x2c
 6053 13f2 72       		.byte	0x72
 6054 13f3 40010000 		.4byte	0x140
 6055 13f7 BC1D0000 		.4byte	.LLST195
 6056 13fb 0F       		.uleb128 0xf
 6057 13fc 6F757400 		.ascii	"out\000"
 6058 1400 2C       		.byte	0x2c
 6059 1401 72       		.byte	0x72
 6060 1402 40010000 		.4byte	0x140
 6061 1406 171E0000 		.4byte	.LLST196
 6062 140a 0C       		.uleb128 0xc
 6063 140b 32030000 		.4byte	.LASF92
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 276


 6064 140f 2C       		.byte	0x2c
 6065 1410 73       		.byte	0x73
 6066 1411 BF000000 		.4byte	0xbf
 6067 1415 01       		.uleb128 0x1
 6068 1416 52       		.byte	0x52
 6069 1417 0C       		.uleb128 0xc
 6070 1418 7B050000 		.4byte	.LASF94
 6071 141c 2C       		.byte	0x2c
 6072 141d 74       		.byte	0x74
 6073 141e BF000000 		.4byte	0xbf
 6074 1422 06       		.uleb128 0x6
 6075 1423 72       		.byte	0x72
 6076 1424 00       		.sleb128 0
 6077 1425 09       		.byte	0x9
 6078 1426 80       		.byte	0x80
 6079 1427 1A       		.byte	0x1a
 6080 1428 9F       		.byte	0x9f
 6081 1429 00       		.byte	0
 6082 142a 0A       		.uleb128 0xa
 6083 142b 48050000 		.4byte	.LASF95
 6084 142f 2D       		.byte	0x2d
 6085 1430 6E       		.byte	0x6e
 6086 1431 00000000 		.4byte	.LFB126
 6087 1435 30000000 		.4byte	.LFE126-.LFB126
 6088 1439 01       		.uleb128 0x1
 6089 143a 9C       		.byte	0x9c
 6090 143b C9140000 		.4byte	0x14c9
 6091 143f 0B       		.uleb128 0xb
 6092 1440 61020000 		.4byte	.LASF37
 6093 1444 2D       		.byte	0x2d
 6094 1445 6F       		.byte	0x6f
 6095 1446 D4030000 		.4byte	0x3d4
 6096 144a 541E0000 		.4byte	.LLST197
 6097 144e 16       		.uleb128 0x16
 6098 144f 4E030000 		.4byte	.LASF90
 6099 1453 2D       		.byte	0x2d
 6100 1454 70       		.byte	0x70
 6101 1455 28010000 		.4byte	0x128
 6102 1459 01       		.uleb128 0x1
 6103 145a 51       		.byte	0x51
 6104 145b 0B       		.uleb128 0xb
 6105 145c 99030000 		.4byte	.LASF91
 6106 1460 2D       		.byte	0x2d
 6107 1461 71       		.byte	0x71
 6108 1462 BF000000 		.4byte	0xbf
 6109 1466 7D1E0000 		.4byte	.LLST198
 6110 146a 0B       		.uleb128 0xb
 6111 146b B4010000 		.4byte	.LASF38
 6112 146f 2D       		.byte	0x2d
 6113 1470 72       		.byte	0x72
 6114 1471 DF030000 		.4byte	0x3df
 6115 1475 9E1E0000 		.4byte	.LLST199
 6116 1479 0B       		.uleb128 0xb
 6117 147a 55050000 		.4byte	.LASF39
 6118 147e 2D       		.byte	0x2d
 6119 147f 73       		.byte	0x73
 6120 1480 F6000000 		.4byte	0xf6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 277


 6121 1484 C71E0000 		.4byte	.LLST200
 6122 1488 11       		.uleb128 0x11
 6123 1489 AF000000 		.4byte	.LASF42
 6124 148d 2D       		.byte	0x2d
 6125 148e 75       		.byte	0x75
 6126 148f F6000000 		.4byte	0xf6
 6127 1493 E71E0000 		.4byte	.LLST201
 6128 1497 0C       		.uleb128 0xc
 6129 1498 32030000 		.4byte	.LASF92
 6130 149c 2D       		.byte	0x2d
 6131 149d 76       		.byte	0x76
 6132 149e BF000000 		.4byte	0xbf
 6133 14a2 01       		.uleb128 0x1
 6134 14a3 52       		.byte	0x52
 6135 14a4 12       		.uleb128 0x12
 6136 14a5 A8000000 		.4byte	.Ldebug_ranges0+0xa8
 6137 14a9 11       		.uleb128 0x11
 6138 14aa 15020000 		.4byte	.LASF51
 6139 14ae 2D       		.byte	0x2d
 6140 14af AF       		.byte	0xaf
 6141 14b0 EB000000 		.4byte	0xeb
 6142 14b4 FA1E0000 		.4byte	.LLST202
 6143 14b8 11       		.uleb128 0x11
 6144 14b9 80050000 		.4byte	.LASF52
 6145 14bd 2D       		.byte	0x2d
 6146 14be AF       		.byte	0xaf
 6147 14bf EB000000 		.4byte	0xeb
 6148 14c3 0D1F0000 		.4byte	.LLST203
 6149 14c7 00       		.byte	0
 6150 14c8 00       		.byte	0
 6151 14c9 0A       		.uleb128 0xa
 6152 14ca 65060000 		.4byte	.LASF96
 6153 14ce 2E       		.byte	0x2e
 6154 14cf 66       		.byte	0x66
 6155 14d0 00000000 		.4byte	.LFB127
 6156 14d4 3C000000 		.4byte	.LFE127-.LFB127
 6157 14d8 01       		.uleb128 0x1
 6158 14d9 9C       		.byte	0x9c
 6159 14da 5E150000 		.4byte	0x155e
 6160 14de 0B       		.uleb128 0xb
 6161 14df 61020000 		.4byte	.LASF37
 6162 14e3 2E       		.byte	0x2e
 6163 14e4 67       		.byte	0x67
 6164 14e5 F6020000 		.4byte	0x2f6
 6165 14e9 391F0000 		.4byte	.LLST204
 6166 14ed 0B       		.uleb128 0xb
 6167 14ee F0030000 		.4byte	.LASF97
 6168 14f2 2E       		.byte	0x2e
 6169 14f3 68       		.byte	0x68
 6170 14f4 BF000000 		.4byte	0xbf
 6171 14f8 7A1F0000 		.4byte	.LLST205
 6172 14fc 0B       		.uleb128 0xb
 6173 14fd B4010000 		.4byte	.LASF38
 6174 1501 2E       		.byte	0x2e
 6175 1502 69       		.byte	0x69
 6176 1503 01030000 		.4byte	0x301
 6177 1507 9B1F0000 		.4byte	.LLST206
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 278


 6178 150b 0B       		.uleb128 0xb
 6179 150c 55050000 		.4byte	.LASF39
 6180 1510 2E       		.byte	0x2e
 6181 1511 6A       		.byte	0x6a
 6182 1512 F6000000 		.4byte	0xf6
 6183 1516 DC1F0000 		.4byte	.LLST207
 6184 151a 0C       		.uleb128 0xc
 6185 151b AF000000 		.4byte	.LASF42
 6186 151f 2E       		.byte	0x2e
 6187 1520 6C       		.byte	0x6c
 6188 1521 F6000000 		.4byte	0xf6
 6189 1525 01       		.uleb128 0x1
 6190 1526 53       		.byte	0x53
 6191 1527 0C       		.uleb128 0xc
 6192 1528 7B050000 		.4byte	.LASF94
 6193 152c 2E       		.byte	0x2e
 6194 152d 6D       		.byte	0x6d
 6195 152e CA000000 		.4byte	0xca
 6196 1532 06       		.uleb128 0x6
 6197 1533 71       		.byte	0x71
 6198 1534 00       		.sleb128 0
 6199 1535 09       		.byte	0x9
 6200 1536 80       		.byte	0x80
 6201 1537 1A       		.byte	0x1a
 6202 1538 9F       		.byte	0x9f
 6203 1539 12       		.uleb128 0x12
 6204 153a C0000000 		.4byte	.Ldebug_ranges0+0xc0
 6205 153e 11       		.uleb128 0x11
 6206 153f 15020000 		.4byte	.LASF51
 6207 1543 2E       		.byte	0x2e
 6208 1544 E2       		.byte	0xe2
 6209 1545 EB000000 		.4byte	0xeb
 6210 1549 FD1F0000 		.4byte	.LLST208
 6211 154d 11       		.uleb128 0x11
 6212 154e 80050000 		.4byte	.LASF52
 6213 1552 2E       		.byte	0x2e
 6214 1553 E2       		.byte	0xe2
 6215 1554 EB000000 		.4byte	0xeb
 6216 1558 10200000 		.4byte	.LLST209
 6217 155c 00       		.byte	0
 6218 155d 00       		.byte	0
 6219 155e 0A       		.uleb128 0xa
 6220 155f BA020000 		.4byte	.LASF98
 6221 1563 2F       		.byte	0x2f
 6222 1564 78       		.byte	0x78
 6223 1565 00000000 		.4byte	.LFB128
 6224 1569 64000000 		.4byte	.LFE128-.LFB128
 6225 156d 01       		.uleb128 0x1
 6226 156e 9C       		.byte	0x9c
 6227 156f E8150000 		.4byte	0x15e8
 6228 1573 0B       		.uleb128 0xb
 6229 1574 61020000 		.4byte	.LASF37
 6230 1578 2F       		.byte	0x2f
 6231 1579 79       		.byte	0x79
 6232 157a 65030000 		.4byte	0x365
 6233 157e 39200000 		.4byte	.LLST210
 6234 1582 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 279


 6235 1583 F0030000 		.4byte	.LASF97
 6236 1587 2F       		.byte	0x2f
 6237 1588 7A       		.byte	0x7a
 6238 1589 BF000000 		.4byte	0xbf
 6239 158d 7A200000 		.4byte	.LLST211
 6240 1591 0B       		.uleb128 0xb
 6241 1592 B4010000 		.4byte	.LASF38
 6242 1596 2F       		.byte	0x2f
 6243 1597 7B       		.byte	0x7b
 6244 1598 70030000 		.4byte	0x370
 6245 159c 9B200000 		.4byte	.LLST212
 6246 15a0 0B       		.uleb128 0xb
 6247 15a1 55050000 		.4byte	.LASF39
 6248 15a5 2F       		.byte	0x2f
 6249 15a6 7C       		.byte	0x7c
 6250 15a7 F6000000 		.4byte	0xf6
 6251 15ab DC200000 		.4byte	.LLST213
 6252 15af 0C       		.uleb128 0xc
 6253 15b0 AF000000 		.4byte	.LASF42
 6254 15b4 2F       		.byte	0x2f
 6255 15b5 7E       		.byte	0x7e
 6256 15b6 F6000000 		.4byte	0xf6
 6257 15ba 01       		.uleb128 0x1
 6258 15bb 53       		.byte	0x53
 6259 15bc 0C       		.uleb128 0xc
 6260 15bd 7B050000 		.4byte	.LASF94
 6261 15c1 2F       		.byte	0x2f
 6262 15c2 7F       		.byte	0x7f
 6263 15c3 CA000000 		.4byte	0xca
 6264 15c7 06       		.uleb128 0x6
 6265 15c8 71       		.byte	0x71
 6266 15c9 00       		.sleb128 0
 6267 15ca 09       		.byte	0x9
 6268 15cb 80       		.byte	0x80
 6269 15cc 1A       		.byte	0x1a
 6270 15cd 9F       		.byte	0x9f
 6271 15ce 13       		.uleb128 0x13
 6272 15cf 70010000 		.4byte	0x170
 6273 15d3 30000000 		.4byte	.LBB43
 6274 15d7 0E000000 		.4byte	.LBE43-.LBB43
 6275 15db 2F       		.byte	0x2f
 6276 15dc CF       		.byte	0xcf
 6277 15dd 14       		.uleb128 0x14
 6278 15de 80010000 		.4byte	0x180
 6279 15e2 FD200000 		.4byte	.LLST214
 6280 15e6 00       		.byte	0
 6281 15e7 00       		.byte	0
 6282 15e8 0A       		.uleb128 0xa
 6283 15e9 66050000 		.4byte	.LASF99
 6284 15ed 30       		.byte	0x30
 6285 15ee 68       		.byte	0x68
 6286 15ef 00000000 		.4byte	.LFB129
 6287 15f3 3C000000 		.4byte	.LFE129-.LFB129
 6288 15f7 01       		.uleb128 0x1
 6289 15f8 9C       		.byte	0x9c
 6290 15f9 7D160000 		.4byte	0x167d
 6291 15fd 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 280


 6292 15fe 61020000 		.4byte	.LASF37
 6293 1602 30       		.byte	0x30
 6294 1603 69       		.byte	0x69
 6295 1604 D4030000 		.4byte	0x3d4
 6296 1608 15210000 		.4byte	.LLST215
 6297 160c 0B       		.uleb128 0xb
 6298 160d F0030000 		.4byte	.LASF97
 6299 1611 30       		.byte	0x30
 6300 1612 6A       		.byte	0x6a
 6301 1613 BF000000 		.4byte	0xbf
 6302 1617 56210000 		.4byte	.LLST216
 6303 161b 0B       		.uleb128 0xb
 6304 161c B4010000 		.4byte	.LASF38
 6305 1620 30       		.byte	0x30
 6306 1621 6B       		.byte	0x6b
 6307 1622 DF030000 		.4byte	0x3df
 6308 1626 77210000 		.4byte	.LLST217
 6309 162a 0B       		.uleb128 0xb
 6310 162b 55050000 		.4byte	.LASF39
 6311 162f 30       		.byte	0x30
 6312 1630 6C       		.byte	0x6c
 6313 1631 F6000000 		.4byte	0xf6
 6314 1635 B8210000 		.4byte	.LLST218
 6315 1639 0C       		.uleb128 0xc
 6316 163a AF000000 		.4byte	.LASF42
 6317 163e 30       		.byte	0x30
 6318 163f 6E       		.byte	0x6e
 6319 1640 F6000000 		.4byte	0xf6
 6320 1644 01       		.uleb128 0x1
 6321 1645 53       		.byte	0x53
 6322 1646 0C       		.uleb128 0xc
 6323 1647 7B050000 		.4byte	.LASF94
 6324 164b 30       		.byte	0x30
 6325 164c 6F       		.byte	0x6f
 6326 164d CA000000 		.4byte	0xca
 6327 1651 06       		.uleb128 0x6
 6328 1652 71       		.byte	0x71
 6329 1653 00       		.sleb128 0
 6330 1654 09       		.byte	0x9
 6331 1655 80       		.byte	0x80
 6332 1656 1A       		.byte	0x1a
 6333 1657 9F       		.byte	0x9f
 6334 1658 12       		.uleb128 0x12
 6335 1659 D8000000 		.4byte	.Ldebug_ranges0+0xd8
 6336 165d 11       		.uleb128 0x11
 6337 165e 15020000 		.4byte	.LASF51
 6338 1662 30       		.byte	0x30
 6339 1663 C8       		.byte	0xc8
 6340 1664 EB000000 		.4byte	0xeb
 6341 1668 D9210000 		.4byte	.LLST219
 6342 166c 11       		.uleb128 0x11
 6343 166d 80050000 		.4byte	.LASF52
 6344 1671 30       		.byte	0x30
 6345 1672 C8       		.byte	0xc8
 6346 1673 EB000000 		.4byte	0xeb
 6347 1677 EC210000 		.4byte	.LLST220
 6348 167b 00       		.byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 281


 6349 167c 00       		.byte	0
 6350 167d 10       		.uleb128 0x10
 6351 167e 1E050000 		.4byte	.LASF100
 6352 1682 31       		.byte	0x31
 6353 1683 72       		.byte	0x72
 6354 1684 00000000 		.4byte	.LFB130
 6355 1688 2C000000 		.4byte	.LFE130-.LFB130
 6356 168c 01       		.uleb128 0x1
 6357 168d 9C       		.byte	0x9c
 6358 168e DE160000 		.4byte	0x16de
 6359 1692 0B       		.uleb128 0xb
 6360 1693 09020000 		.4byte	.LASF47
 6361 1697 31       		.byte	0x31
 6362 1698 73       		.byte	0x73
 6363 1699 26020000 		.4byte	0x226
 6364 169d 15220000 		.4byte	.LLST221
 6365 16a1 0B       		.uleb128 0xb
 6366 16a2 0F020000 		.4byte	.LASF48
 6367 16a6 31       		.byte	0x31
 6368 16a7 74       		.byte	0x74
 6369 16a8 26020000 		.4byte	0x226
 6370 16ac 3E220000 		.4byte	.LLST222
 6371 16b0 0B       		.uleb128 0xb
 6372 16b1 B4010000 		.4byte	.LASF38
 6373 16b5 31       		.byte	0x31
 6374 16b6 75       		.byte	0x75
 6375 16b7 31020000 		.4byte	0x231
 6376 16bb 67220000 		.4byte	.LLST223
 6377 16bf 0B       		.uleb128 0xb
 6378 16c0 55050000 		.4byte	.LASF39
 6379 16c4 31       		.byte	0x31
 6380 16c5 76       		.byte	0x76
 6381 16c6 F6000000 		.4byte	0xf6
 6382 16ca 9B220000 		.4byte	.LLST224
 6383 16ce 11       		.uleb128 0x11
 6384 16cf AF000000 		.4byte	.LASF42
 6385 16d3 31       		.byte	0x31
 6386 16d4 78       		.byte	0x78
 6387 16d5 F6000000 		.4byte	0xf6
 6388 16d9 BC220000 		.4byte	.LLST225
 6389 16dd 00       		.byte	0
 6390 16de 10       		.uleb128 0x10
 6391 16df 27000000 		.4byte	.LASF101
 6392 16e3 32       		.byte	0x32
 6393 16e4 31       		.byte	0x31
 6394 16e5 00000000 		.4byte	.LFB131
 6395 16e9 36000000 		.4byte	.LFE131-.LFB131
 6396 16ed 01       		.uleb128 0x1
 6397 16ee 9C       		.byte	0x9c
 6398 16ef 3F170000 		.4byte	0x173f
 6399 16f3 0B       		.uleb128 0xb
 6400 16f4 09020000 		.4byte	.LASF47
 6401 16f8 32       		.byte	0x32
 6402 16f9 32       		.byte	0x32
 6403 16fa 87020000 		.4byte	0x287
 6404 16fe DA220000 		.4byte	.LLST226
 6405 1702 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 282


 6406 1703 0F020000 		.4byte	.LASF48
 6407 1707 32       		.byte	0x32
 6408 1708 33       		.byte	0x33
 6409 1709 87020000 		.4byte	0x287
 6410 170d 03230000 		.4byte	.LLST227
 6411 1711 0B       		.uleb128 0xb
 6412 1712 B4010000 		.4byte	.LASF38
 6413 1716 32       		.byte	0x32
 6414 1717 34       		.byte	0x34
 6415 1718 92020000 		.4byte	0x292
 6416 171c 37230000 		.4byte	.LLST228
 6417 1720 0B       		.uleb128 0xb
 6418 1721 55050000 		.4byte	.LASF39
 6419 1725 32       		.byte	0x32
 6420 1726 35       		.byte	0x35
 6421 1727 F6000000 		.4byte	0xf6
 6422 172b 6B230000 		.4byte	.LLST229
 6423 172f 11       		.uleb128 0x11
 6424 1730 AF000000 		.4byte	.LASF42
 6425 1734 32       		.byte	0x32
 6426 1735 37       		.byte	0x37
 6427 1736 F6000000 		.4byte	0xf6
 6428 173a 8C230000 		.4byte	.LLST230
 6429 173e 00       		.byte	0
 6430 173f 0A       		.uleb128 0xa
 6431 1740 E7020000 		.4byte	.LASF102
 6432 1744 33       		.byte	0x33
 6433 1745 68       		.byte	0x68
 6434 1746 00000000 		.4byte	.LFB132
 6435 174a 2A000000 		.4byte	.LFE132-.LFB132
 6436 174e 01       		.uleb128 0x1
 6437 174f 9C       		.byte	0x9c
 6438 1750 C2170000 		.4byte	0x17c2
 6439 1754 0B       		.uleb128 0xb
 6440 1755 09020000 		.4byte	.LASF47
 6441 1759 33       		.byte	0x33
 6442 175a 69       		.byte	0x69
 6443 175b F6020000 		.4byte	0x2f6
 6444 175f AA230000 		.4byte	.LLST231
 6445 1763 0B       		.uleb128 0xb
 6446 1764 0F020000 		.4byte	.LASF48
 6447 1768 33       		.byte	0x33
 6448 1769 6A       		.byte	0x6a
 6449 176a F6020000 		.4byte	0x2f6
 6450 176e D3230000 		.4byte	.LLST232
 6451 1772 0B       		.uleb128 0xb
 6452 1773 B4010000 		.4byte	.LASF38
 6453 1777 33       		.byte	0x33
 6454 1778 6B       		.byte	0x6b
 6455 1779 01030000 		.4byte	0x301
 6456 177d FC230000 		.4byte	.LLST233
 6457 1781 0B       		.uleb128 0xb
 6458 1782 55050000 		.4byte	.LASF39
 6459 1786 33       		.byte	0x33
 6460 1787 6C       		.byte	0x6c
 6461 1788 F6000000 		.4byte	0xf6
 6462 178c 25240000 		.4byte	.LLST234
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 283


 6463 1790 0C       		.uleb128 0xc
 6464 1791 AF000000 		.4byte	.LASF42
 6465 1795 33       		.byte	0x33
 6466 1796 6E       		.byte	0x6e
 6467 1797 F6000000 		.4byte	0xf6
 6468 179b 01       		.uleb128 0x1
 6469 179c 53       		.byte	0x53
 6470 179d 12       		.uleb128 0x12
 6471 179e F0000000 		.4byte	.Ldebug_ranges0+0xf0
 6472 17a2 11       		.uleb128 0x11
 6473 17a3 15020000 		.4byte	.LASF51
 6474 17a7 33       		.byte	0x33
 6475 17a8 A6       		.byte	0xa6
 6476 17a9 EB000000 		.4byte	0xeb
 6477 17ad 46240000 		.4byte	.LLST235
 6478 17b1 11       		.uleb128 0x11
 6479 17b2 80050000 		.4byte	.LASF52
 6480 17b6 33       		.byte	0x33
 6481 17b7 A6       		.byte	0xa6
 6482 17b8 EB000000 		.4byte	0xeb
 6483 17bc 59240000 		.4byte	.LLST236
 6484 17c0 00       		.byte	0
 6485 17c1 00       		.byte	0
 6486 17c2 0A       		.uleb128 0xa
 6487 17c3 F3000000 		.4byte	.LASF103
 6488 17c7 34       		.byte	0x34
 6489 17c8 67       		.byte	0x67
 6490 17c9 00000000 		.4byte	.LFB133
 6491 17cd 36000000 		.4byte	.LFE133-.LFB133
 6492 17d1 01       		.uleb128 0x1
 6493 17d2 9C       		.byte	0x9c
 6494 17d3 5D180000 		.4byte	0x185d
 6495 17d7 0B       		.uleb128 0xb
 6496 17d8 09020000 		.4byte	.LASF47
 6497 17dc 34       		.byte	0x34
 6498 17dd 68       		.byte	0x68
 6499 17de 65030000 		.4byte	0x365
 6500 17e2 82240000 		.4byte	.LLST237
 6501 17e6 0B       		.uleb128 0xb
 6502 17e7 0F020000 		.4byte	.LASF48
 6503 17eb 34       		.byte	0x34
 6504 17ec 69       		.byte	0x69
 6505 17ed 65030000 		.4byte	0x365
 6506 17f1 AB240000 		.4byte	.LLST238
 6507 17f5 0B       		.uleb128 0xb
 6508 17f6 B4010000 		.4byte	.LASF38
 6509 17fa 34       		.byte	0x34
 6510 17fb 6A       		.byte	0x6a
 6511 17fc 70030000 		.4byte	0x370
 6512 1800 D4240000 		.4byte	.LLST239
 6513 1804 0B       		.uleb128 0xb
 6514 1805 55050000 		.4byte	.LASF39
 6515 1809 34       		.byte	0x34
 6516 180a 6B       		.byte	0x6b
 6517 180b F6000000 		.4byte	0xf6
 6518 180f FD240000 		.4byte	.LLST240
 6519 1813 0C       		.uleb128 0xc
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 284


 6520 1814 AF000000 		.4byte	.LASF42
 6521 1818 34       		.byte	0x34
 6522 1819 6D       		.byte	0x6d
 6523 181a F6000000 		.4byte	0xf6
 6524 181e 01       		.uleb128 0x1
 6525 181f 53       		.byte	0x53
 6526 1820 13       		.uleb128 0x13
 6527 1821 B0010000 		.4byte	0x1b0
 6528 1825 0E000000 		.4byte	.LBB49
 6529 1829 16000000 		.4byte	.LBE49-.LBB49
 6530 182d 34       		.byte	0x34
 6531 182e 94       		.byte	0x94
 6532 182f 14       		.uleb128 0x14
 6533 1830 CB010000 		.4byte	0x1cb
 6534 1834 1E250000 		.4byte	.LLST241
 6535 1838 14       		.uleb128 0x14
 6536 1839 C1010000 		.4byte	0x1c1
 6537 183d 31250000 		.4byte	.LLST242
 6538 1841 15       		.uleb128 0x15
 6539 1842 70010000 		.4byte	0x170
 6540 1846 16000000 		.4byte	.LBB51
 6541 184a 0E000000 		.4byte	.LBE51-.LBB51
 6542 184e 0A       		.byte	0xa
 6543 184f C001     		.2byte	0x1c0
 6544 1851 14       		.uleb128 0x14
 6545 1852 80010000 		.4byte	0x180
 6546 1856 50250000 		.4byte	.LLST243
 6547 185a 00       		.byte	0
 6548 185b 00       		.byte	0
 6549 185c 00       		.byte	0
 6550 185d 0A       		.uleb128 0xa
 6551 185e 8E030000 		.4byte	.LASF104
 6552 1862 35       		.byte	0x35
 6553 1863 65       		.byte	0x65
 6554 1864 00000000 		.4byte	.LFB134
 6555 1868 2A000000 		.4byte	.LFE134-.LFB134
 6556 186c 01       		.uleb128 0x1
 6557 186d 9C       		.byte	0x9c
 6558 186e E0180000 		.4byte	0x18e0
 6559 1872 0B       		.uleb128 0xb
 6560 1873 09020000 		.4byte	.LASF47
 6561 1877 35       		.byte	0x35
 6562 1878 66       		.byte	0x66
 6563 1879 D4030000 		.4byte	0x3d4
 6564 187d 68250000 		.4byte	.LLST244
 6565 1881 0B       		.uleb128 0xb
 6566 1882 0F020000 		.4byte	.LASF48
 6567 1886 35       		.byte	0x35
 6568 1887 67       		.byte	0x67
 6569 1888 D4030000 		.4byte	0x3d4
 6570 188c 91250000 		.4byte	.LLST245
 6571 1890 0B       		.uleb128 0xb
 6572 1891 B4010000 		.4byte	.LASF38
 6573 1895 35       		.byte	0x35
 6574 1896 68       		.byte	0x68
 6575 1897 DF030000 		.4byte	0x3df
 6576 189b BA250000 		.4byte	.LLST246
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 285


 6577 189f 0B       		.uleb128 0xb
 6578 18a0 55050000 		.4byte	.LASF39
 6579 18a4 35       		.byte	0x35
 6580 18a5 69       		.byte	0x69
 6581 18a6 F6000000 		.4byte	0xf6
 6582 18aa E3250000 		.4byte	.LLST247
 6583 18ae 0C       		.uleb128 0xc
 6584 18af AF000000 		.4byte	.LASF42
 6585 18b3 35       		.byte	0x35
 6586 18b4 6B       		.byte	0x6b
 6587 18b5 F6000000 		.4byte	0xf6
 6588 18b9 01       		.uleb128 0x1
 6589 18ba 53       		.byte	0x53
 6590 18bb 12       		.uleb128 0x12
 6591 18bc 08010000 		.4byte	.Ldebug_ranges0+0x108
 6592 18c0 11       		.uleb128 0x11
 6593 18c1 15020000 		.4byte	.LASF51
 6594 18c5 35       		.byte	0x35
 6595 18c6 93       		.byte	0x93
 6596 18c7 EB000000 		.4byte	0xeb
 6597 18cb 04260000 		.4byte	.LLST248
 6598 18cf 11       		.uleb128 0x11
 6599 18d0 80050000 		.4byte	.LASF52
 6600 18d4 35       		.byte	0x35
 6601 18d5 93       		.byte	0x93
 6602 18d6 EB000000 		.4byte	0xeb
 6603 18da 17260000 		.4byte	.LLST249
 6604 18de 00       		.byte	0
 6605 18df 00       		.byte	0
 6606 18e0 0A       		.uleb128 0xa
 6607 18e1 A9050000 		.4byte	.LASF105
 6608 18e5 36       		.byte	0x36
 6609 18e6 39       		.byte	0x39
 6610 18e7 00000000 		.4byte	.LFB135
 6611 18eb 1C000000 		.4byte	.LFE135-.LFB135
 6612 18ef 01       		.uleb128 0x1
 6613 18f0 9C       		.byte	0x9c
 6614 18f1 3F190000 		.4byte	0x193f
 6615 18f5 0B       		.uleb128 0xb
 6616 18f6 09020000 		.4byte	.LASF47
 6617 18fa 36       		.byte	0x36
 6618 18fb 3A       		.byte	0x3a
 6619 18fc A7060000 		.4byte	0x6a7
 6620 1900 40260000 		.4byte	.LLST250
 6621 1904 0B       		.uleb128 0xb
 6622 1905 0F020000 		.4byte	.LASF48
 6623 1909 36       		.byte	0x36
 6624 190a 3B       		.byte	0x3b
 6625 190b A7060000 		.4byte	0x6a7
 6626 190f 6B260000 		.4byte	.LLST251
 6627 1913 0B       		.uleb128 0xb
 6628 1914 B4010000 		.4byte	.LASF38
 6629 1918 36       		.byte	0x36
 6630 1919 3C       		.byte	0x3c
 6631 191a B2060000 		.4byte	0x6b2
 6632 191e 96260000 		.4byte	.LLST252
 6633 1922 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 286


 6634 1923 55050000 		.4byte	.LASF39
 6635 1927 36       		.byte	0x36
 6636 1928 3D       		.byte	0x3d
 6637 1929 F6000000 		.4byte	0xf6
 6638 192d C1260000 		.4byte	.LLST253
 6639 1931 0C       		.uleb128 0xc
 6640 1932 AF000000 		.4byte	.LASF42
 6641 1936 36       		.byte	0x36
 6642 1937 3F       		.byte	0x3f
 6643 1938 F6000000 		.4byte	0xf6
 6644 193c 01       		.uleb128 0x1
 6645 193d 53       		.byte	0x53
 6646 193e 00       		.byte	0
 6647 193f 0A       		.uleb128 0xa
 6648 1940 BF010000 		.4byte	.LASF106
 6649 1944 37       		.byte	0x37
 6650 1945 31       		.byte	0x31
 6651 1946 00000000 		.4byte	.LFB136
 6652 194a 1C000000 		.4byte	.LFE136-.LFB136
 6653 194e 01       		.uleb128 0x1
 6654 194f 9C       		.byte	0x9c
 6655 1950 9E190000 		.4byte	0x199e
 6656 1954 0B       		.uleb128 0xb
 6657 1955 09020000 		.4byte	.LASF47
 6658 1959 37       		.byte	0x37
 6659 195a 32       		.byte	0x32
 6660 195b 17070000 		.4byte	0x717
 6661 195f E2260000 		.4byte	.LLST254
 6662 1963 0B       		.uleb128 0xb
 6663 1964 0F020000 		.4byte	.LASF48
 6664 1968 37       		.byte	0x37
 6665 1969 33       		.byte	0x33
 6666 196a 17070000 		.4byte	0x717
 6667 196e 0D270000 		.4byte	.LLST255
 6668 1972 0B       		.uleb128 0xb
 6669 1973 B4010000 		.4byte	.LASF38
 6670 1977 37       		.byte	0x37
 6671 1978 34       		.byte	0x34
 6672 1979 22070000 		.4byte	0x722
 6673 197d 38270000 		.4byte	.LLST256
 6674 1981 0B       		.uleb128 0xb
 6675 1982 55050000 		.4byte	.LASF39
 6676 1986 37       		.byte	0x37
 6677 1987 35       		.byte	0x35
 6678 1988 F6000000 		.4byte	0xf6
 6679 198c 63270000 		.4byte	.LLST257
 6680 1990 0C       		.uleb128 0xc
 6681 1991 AF000000 		.4byte	.LASF42
 6682 1995 37       		.byte	0x37
 6683 1996 37       		.byte	0x37
 6684 1997 F6000000 		.4byte	0xf6
 6685 199b 01       		.uleb128 0x1
 6686 199c 53       		.byte	0x53
 6687 199d 00       		.byte	0
 6688 199e 0A       		.uleb128 0xa
 6689 199f 61010000 		.4byte	.LASF107
 6690 19a3 38       		.byte	0x38
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 287


 6691 19a4 31       		.byte	0x31
 6692 19a5 00000000 		.4byte	.LFB137
 6693 19a9 1C000000 		.4byte	.LFE137-.LFB137
 6694 19ad 01       		.uleb128 0x1
 6695 19ae 9C       		.byte	0x9c
 6696 19af FD190000 		.4byte	0x19fd
 6697 19b3 0B       		.uleb128 0xb
 6698 19b4 09020000 		.4byte	.LASF47
 6699 19b8 38       		.byte	0x38
 6700 19b9 32       		.byte	0x32
 6701 19ba 87070000 		.4byte	0x787
 6702 19be 84270000 		.4byte	.LLST258
 6703 19c2 0B       		.uleb128 0xb
 6704 19c3 0F020000 		.4byte	.LASF48
 6705 19c7 38       		.byte	0x38
 6706 19c8 33       		.byte	0x33
 6707 19c9 87070000 		.4byte	0x787
 6708 19cd AF270000 		.4byte	.LLST259
 6709 19d1 0B       		.uleb128 0xb
 6710 19d2 B4010000 		.4byte	.LASF38
 6711 19d6 38       		.byte	0x38
 6712 19d7 34       		.byte	0x34
 6713 19d8 92070000 		.4byte	0x792
 6714 19dc DA270000 		.4byte	.LLST260
 6715 19e0 0B       		.uleb128 0xb
 6716 19e1 55050000 		.4byte	.LASF39
 6717 19e5 38       		.byte	0x38
 6718 19e6 35       		.byte	0x35
 6719 19e7 F6000000 		.4byte	0xf6
 6720 19eb 05280000 		.4byte	.LLST261
 6721 19ef 0C       		.uleb128 0xc
 6722 19f0 AF000000 		.4byte	.LASF42
 6723 19f4 38       		.byte	0x38
 6724 19f5 37       		.byte	0x37
 6725 19f6 F6000000 		.4byte	0xf6
 6726 19fa 01       		.uleb128 0x1
 6727 19fb 53       		.byte	0x53
 6728 19fc 00       		.byte	0
 6729 19fd 10       		.uleb128 0x10
 6730 19fe 72020000 		.4byte	.LASF108
 6731 1a02 39       		.byte	0x39
 6732 1a03 7B       		.byte	0x7b
 6733 1a04 00000000 		.4byte	.LFB138
 6734 1a08 48000000 		.4byte	.LFE138-.LFB138
 6735 1a0c 01       		.uleb128 0x1
 6736 1a0d 9C       		.byte	0x9c
 6737 1a0e 6A1A0000 		.4byte	0x1a6a
 6738 1a12 0B       		.uleb128 0xb
 6739 1a13 61020000 		.4byte	.LASF37
 6740 1a17 39       		.byte	0x39
 6741 1a18 7B       		.byte	0x7b
 6742 1a19 26020000 		.4byte	0x226
 6743 1a1d 26280000 		.4byte	.LLST262
 6744 1a21 0B       		.uleb128 0xb
 6745 1a22 B4010000 		.4byte	.LASF38
 6746 1a26 39       		.byte	0x39
 6747 1a27 7C       		.byte	0x7c
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 288


 6748 1a28 31020000 		.4byte	0x231
 6749 1a2c 44280000 		.4byte	.LLST263
 6750 1a30 18       		.uleb128 0x18
 6751 1a31 6C6F7700 		.ascii	"low\000"
 6752 1a35 39       		.byte	0x39
 6753 1a36 7D       		.byte	0x7d
 6754 1a37 58010000 		.4byte	0x158
 6755 1a3b 62280000 		.4byte	.LLST264
 6756 1a3f 0B       		.uleb128 0xb
 6757 1a40 F0040000 		.4byte	.LASF109
 6758 1a44 39       		.byte	0x39
 6759 1a45 7E       		.byte	0x7e
 6760 1a46 58010000 		.4byte	0x158
 6761 1a4a 80280000 		.4byte	.LLST265
 6762 1a4e 16       		.uleb128 0x16
 6763 1a4f 87050000 		.4byte	.LASF110
 6764 1a53 39       		.byte	0x39
 6765 1a54 7F       		.byte	0x7f
 6766 1a55 F6000000 		.4byte	0xf6
 6767 1a59 02       		.uleb128 0x2
 6768 1a5a 91       		.byte	0x91
 6769 1a5b 00       		.sleb128 0
 6770 1a5c 0F       		.uleb128 0xf
 6771 1a5d 6900     		.ascii	"i\000"
 6772 1a5f 39       		.byte	0x39
 6773 1a60 81       		.byte	0x81
 6774 1a61 F6000000 		.4byte	0xf6
 6775 1a65 9E280000 		.4byte	.LLST266
 6776 1a69 00       		.byte	0
 6777 1a6a 0A       		.uleb128 0xa
 6778 1a6b 8D020000 		.4byte	.LASF111
 6779 1a6f 3A       		.byte	0x3a
 6780 1a70 71       		.byte	0x71
 6781 1a71 00000000 		.4byte	.LFB139
 6782 1a75 2C000000 		.4byte	.LFE139-.LFB139
 6783 1a79 01       		.uleb128 0x1
 6784 1a7a 9C       		.byte	0x9c
 6785 1a7b D01A0000 		.4byte	0x1ad0
 6786 1a7f 16       		.uleb128 0x16
 6787 1a80 61020000 		.4byte	.LASF37
 6788 1a84 3A       		.byte	0x3a
 6789 1a85 71       		.byte	0x71
 6790 1a86 65030000 		.4byte	0x365
 6791 1a8a 01       		.uleb128 0x1
 6792 1a8b 50       		.byte	0x50
 6793 1a8c 16       		.uleb128 0x16
 6794 1a8d B4010000 		.4byte	.LASF38
 6795 1a91 3A       		.byte	0x3a
 6796 1a92 72       		.byte	0x72
 6797 1a93 70030000 		.4byte	0x370
 6798 1a97 01       		.uleb128 0x1
 6799 1a98 51       		.byte	0x51
 6800 1a99 19       		.uleb128 0x19
 6801 1a9a 6C6F7700 		.ascii	"low\000"
 6802 1a9e 3A       		.byte	0x3a
 6803 1a9f 73       		.byte	0x73
 6804 1aa0 40010000 		.4byte	0x140
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 289


 6805 1aa4 01       		.uleb128 0x1
 6806 1aa5 52       		.byte	0x52
 6807 1aa6 16       		.uleb128 0x16
 6808 1aa7 F0040000 		.4byte	.LASF109
 6809 1aab 3A       		.byte	0x3a
 6810 1aac 74       		.byte	0x74
 6811 1aad 40010000 		.4byte	0x140
 6812 1ab1 01       		.uleb128 0x1
 6813 1ab2 53       		.byte	0x53
 6814 1ab3 0B       		.uleb128 0xb
 6815 1ab4 87050000 		.4byte	.LASF110
 6816 1ab8 3A       		.byte	0x3a
 6817 1ab9 75       		.byte	0x75
 6818 1aba F6000000 		.4byte	0xf6
 6819 1abe BD280000 		.4byte	.LLST267
 6820 1ac2 0F       		.uleb128 0xf
 6821 1ac3 6900     		.ascii	"i\000"
 6822 1ac5 3A       		.byte	0x3a
 6823 1ac6 77       		.byte	0x77
 6824 1ac7 F6000000 		.4byte	0xf6
 6825 1acb DD280000 		.4byte	.LLST268
 6826 1acf 00       		.byte	0
 6827 1ad0 0A       		.uleb128 0xa
 6828 1ad1 94000000 		.4byte	.LASF112
 6829 1ad5 3B       		.byte	0x3b
 6830 1ad6 71       		.byte	0x71
 6831 1ad7 00000000 		.4byte	.LFB140
 6832 1adb 30000000 		.4byte	.LFE140-.LFB140
 6833 1adf 01       		.uleb128 0x1
 6834 1ae0 9C       		.byte	0x9c
 6835 1ae1 351B0000 		.4byte	0x1b35
 6836 1ae5 16       		.uleb128 0x16
 6837 1ae6 61020000 		.4byte	.LASF37
 6838 1aea 3B       		.byte	0x3b
 6839 1aeb 71       		.byte	0x71
 6840 1aec F6020000 		.4byte	0x2f6
 6841 1af0 01       		.uleb128 0x1
 6842 1af1 50       		.byte	0x50
 6843 1af2 16       		.uleb128 0x16
 6844 1af3 B4010000 		.4byte	.LASF38
 6845 1af7 3B       		.byte	0x3b
 6846 1af8 72       		.byte	0x72
 6847 1af9 01030000 		.4byte	0x301
 6848 1afd 01       		.uleb128 0x1
 6849 1afe 51       		.byte	0x51
 6850 1aff 19       		.uleb128 0x19
 6851 1b00 6C6F7700 		.ascii	"low\000"
 6852 1b04 3B       		.byte	0x3b
 6853 1b05 73       		.byte	0x73
 6854 1b06 34010000 		.4byte	0x134
 6855 1b0a 01       		.uleb128 0x1
 6856 1b0b 52       		.byte	0x52
 6857 1b0c 16       		.uleb128 0x16
 6858 1b0d F0040000 		.4byte	.LASF109
 6859 1b11 3B       		.byte	0x3b
 6860 1b12 74       		.byte	0x74
 6861 1b13 34010000 		.4byte	0x134
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 290


 6862 1b17 01       		.uleb128 0x1
 6863 1b18 53       		.byte	0x53
 6864 1b19 16       		.uleb128 0x16
 6865 1b1a 87050000 		.4byte	.LASF110
 6866 1b1e 3B       		.byte	0x3b
 6867 1b1f 75       		.byte	0x75
 6868 1b20 F6000000 		.4byte	0xf6
 6869 1b24 02       		.uleb128 0x2
 6870 1b25 91       		.byte	0x91
 6871 1b26 00       		.sleb128 0
 6872 1b27 0F       		.uleb128 0xf
 6873 1b28 6900     		.ascii	"i\000"
 6874 1b2a 3B       		.byte	0x3b
 6875 1b2b 77       		.byte	0x77
 6876 1b2c F6000000 		.4byte	0xf6
 6877 1b30 FC280000 		.4byte	.LLST269
 6878 1b34 00       		.byte	0
 6879 1b35 0A       		.uleb128 0xa
 6880 1b36 5A000000 		.4byte	.LASF113
 6881 1b3a 3C       		.byte	0x3c
 6882 1b3b 71       		.byte	0x71
 6883 1b3c 00000000 		.4byte	.LFB141
 6884 1b40 2A000000 		.4byte	.LFE141-.LFB141
 6885 1b44 01       		.uleb128 0x1
 6886 1b45 9C       		.byte	0x9c
 6887 1b46 9B1B0000 		.4byte	0x1b9b
 6888 1b4a 16       		.uleb128 0x16
 6889 1b4b 61020000 		.4byte	.LASF37
 6890 1b4f 3C       		.byte	0x3c
 6891 1b50 71       		.byte	0x71
 6892 1b51 D4030000 		.4byte	0x3d4
 6893 1b55 01       		.uleb128 0x1
 6894 1b56 50       		.byte	0x50
 6895 1b57 16       		.uleb128 0x16
 6896 1b58 B4010000 		.4byte	.LASF38
 6897 1b5c 3C       		.byte	0x3c
 6898 1b5d 72       		.byte	0x72
 6899 1b5e DF030000 		.4byte	0x3df
 6900 1b62 01       		.uleb128 0x1
 6901 1b63 51       		.byte	0x51
 6902 1b64 19       		.uleb128 0x19
 6903 1b65 6C6F7700 		.ascii	"low\000"
 6904 1b69 3C       		.byte	0x3c
 6905 1b6a 73       		.byte	0x73
 6906 1b6b 28010000 		.4byte	0x128
 6907 1b6f 01       		.uleb128 0x1
 6908 1b70 52       		.byte	0x52
 6909 1b71 16       		.uleb128 0x16
 6910 1b72 F0040000 		.4byte	.LASF109
 6911 1b76 3C       		.byte	0x3c
 6912 1b77 74       		.byte	0x74
 6913 1b78 28010000 		.4byte	0x128
 6914 1b7c 01       		.uleb128 0x1
 6915 1b7d 53       		.byte	0x53
 6916 1b7e 0B       		.uleb128 0xb
 6917 1b7f 87050000 		.4byte	.LASF110
 6918 1b83 3C       		.byte	0x3c
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 291


 6919 1b84 75       		.byte	0x75
 6920 1b85 F6000000 		.4byte	0xf6
 6921 1b89 1B290000 		.4byte	.LLST270
 6922 1b8d 0F       		.uleb128 0xf
 6923 1b8e 6900     		.ascii	"i\000"
 6924 1b90 3C       		.byte	0x3c
 6925 1b91 77       		.byte	0x77
 6926 1b92 F6000000 		.4byte	0xf6
 6927 1b96 3B290000 		.4byte	.LLST271
 6928 1b9a 00       		.byte	0
 6929 1b9b 03       		.uleb128 0x3
 6930 1b9c 06000000 		.4byte	.LASF114
 6931 1ba0 40       		.byte	0x40
 6932 1ba1 8B       		.byte	0x8b
 6933 1ba2 081C0000 		.4byte	0x1c08
 6934 1ba6 1A       		.uleb128 0x1a
 6935 1ba7 30020000 		.4byte	.LASF115
 6936 1bab 40       		.byte	0x40
 6937 1bac 92       		.byte	0x92
 6938 1bad B11B0000 		.4byte	0x1bb1
 6939 1bb1 0E       		.uleb128 0xe
 6940 1bb2 9B1B0000 		.4byte	0x1b9b
 6941 1bb6 1A       		.uleb128 0x1a
 6942 1bb7 D3000000 		.4byte	.LASF116
 6943 1bbb 40       		.byte	0x40
 6944 1bbc 93       		.byte	0x93
 6945 1bbd B11B0000 		.4byte	0x1bb1
 6946 1bc1 03       		.uleb128 0x3
 6947 1bc2 41000000 		.4byte	.LASF117
 6948 1bc6 40       		.byte	0x40
 6949 1bc7 90       		.byte	0x90
 6950 1bc8 E71B0000 		.4byte	0x1be7
 6951 1bcc 1A       		.uleb128 0x1a
 6952 1bcd 6C010000 		.4byte	.LASF118
 6953 1bd1 40       		.byte	0x40
 6954 1bd2 94       		.byte	0x94
 6955 1bd3 D71B0000 		.4byte	0x1bd7
 6956 1bd7 0E       		.uleb128 0xe
 6957 1bd8 C11B0000 		.4byte	0x1bc1
 6958 1bdc 1A       		.uleb128 0x1a
 6959 1bdd 0B050000 		.4byte	.LASF119
 6960 1be1 40       		.byte	0x40
 6961 1be2 95       		.byte	0x95
 6962 1be3 D71B0000 		.4byte	0x1bd7
 6963 1be7 1B       		.uleb128 0x1b
 6964 1be8 08       		.byte	0x8
 6965 1be9 40       		.byte	0x40
 6966 1bea 8D       		.byte	0x8d
 6967 1beb 081C0000 		.4byte	0x1c08
 6968 1bef 1C       		.uleb128 0x1c
 6969 1bf0 7A030000 		.4byte	.LASF120
 6970 1bf4 40       		.byte	0x40
 6971 1bf5 8E       		.byte	0x8e
 6972 1bf6 22070000 		.4byte	0x722
 6973 1bfa 00       		.byte	0
 6974 1bfb 1C       		.uleb128 0x1c
 6975 1bfc FA030000 		.4byte	.LASF121
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 292


 6976 1c00 40       		.byte	0x40
 6977 1c01 8F       		.byte	0x8f
 6978 1c02 F6000000 		.4byte	0xf6
 6979 1c06 04       		.byte	0x4
 6980 1c07 00       		.byte	0
 6981 1c08 1D       		.uleb128 0x1d
 6982 1c09 0C       		.byte	0xc
 6983 1c0a 40       		.byte	0x40
 6984 1c0b 87       		.byte	0x87
 6985 1c0c 1E       		.uleb128 0x1e
 6986 1c0d 73726300 		.ascii	"src\000"
 6987 1c11 40       		.byte	0x40
 6988 1c12 88       		.byte	0x88
 6989 1c13 17070000 		.4byte	0x717
 6990 1c17 00       		.byte	0
 6991 1c18 1C       		.uleb128 0x1c
 6992 1c19 7A030000 		.4byte	.LASF120
 6993 1c1d 40       		.byte	0x40
 6994 1c1e 89       		.byte	0x89
 6995 1c1f 22070000 		.4byte	0x722
 6996 1c23 04       		.byte	0x4
 6997 1c24 1C       		.uleb128 0x1c
 6998 1c25 FA030000 		.4byte	.LASF121
 6999 1c29 40       		.byte	0x40
 7000 1c2a 8A       		.byte	0x8a
 7001 1c2b F6000000 		.4byte	0xf6
 7002 1c2f 08       		.byte	0x8
 7003 1c30 00       		.byte	0
 7004 1c31 00       		.byte	0
 7005              		.section	.debug_abbrev,"",%progbits
 7006              	.Ldebug_abbrev0:
 7007 0000 01       		.uleb128 0x1
 7008 0001 11       		.uleb128 0x11
 7009 0002 01       		.byte	0x1
 7010 0003 25       		.uleb128 0x25
 7011 0004 0E       		.uleb128 0xe
 7012 0005 13       		.uleb128 0x13
 7013 0006 0B       		.uleb128 0xb
 7014 0007 03       		.uleb128 0x3
 7015 0008 0E       		.uleb128 0xe
 7016 0009 1B       		.uleb128 0x1b
 7017 000a 0E       		.uleb128 0xe
 7018 000b 55       		.uleb128 0x55
 7019 000c 17       		.uleb128 0x17
 7020 000d 11       		.uleb128 0x11
 7021 000e 01       		.uleb128 0x1
 7022 000f 10       		.uleb128 0x10
 7023 0010 17       		.uleb128 0x17
 7024 0011 00       		.byte	0
 7025 0012 00       		.byte	0
 7026 0013 02       		.uleb128 0x2
 7027 0014 24       		.uleb128 0x24
 7028 0015 00       		.byte	0
 7029 0016 0B       		.uleb128 0xb
 7030 0017 0B       		.uleb128 0xb
 7031 0018 3E       		.uleb128 0x3e
 7032 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 293


 7033 001a 03       		.uleb128 0x3
 7034 001b 0E       		.uleb128 0xe
 7035 001c 00       		.byte	0
 7036 001d 00       		.byte	0
 7037 001e 03       		.uleb128 0x3
 7038 001f 16       		.uleb128 0x16
 7039 0020 00       		.byte	0
 7040 0021 03       		.uleb128 0x3
 7041 0022 0E       		.uleb128 0xe
 7042 0023 3A       		.uleb128 0x3a
 7043 0024 0B       		.uleb128 0xb
 7044 0025 3B       		.uleb128 0x3b
 7045 0026 0B       		.uleb128 0xb
 7046 0027 49       		.uleb128 0x49
 7047 0028 13       		.uleb128 0x13
 7048 0029 00       		.byte	0
 7049 002a 00       		.byte	0
 7050 002b 04       		.uleb128 0x4
 7051 002c 24       		.uleb128 0x24
 7052 002d 00       		.byte	0
 7053 002e 0B       		.uleb128 0xb
 7054 002f 0B       		.uleb128 0xb
 7055 0030 3E       		.uleb128 0x3e
 7056 0031 0B       		.uleb128 0xb
 7057 0032 03       		.uleb128 0x3
 7058 0033 08       		.uleb128 0x8
 7059 0034 00       		.byte	0
 7060 0035 00       		.byte	0
 7061 0036 05       		.uleb128 0x5
 7062 0037 16       		.uleb128 0x16
 7063 0038 00       		.byte	0
 7064 0039 03       		.uleb128 0x3
 7065 003a 0E       		.uleb128 0xe
 7066 003b 3A       		.uleb128 0x3a
 7067 003c 0B       		.uleb128 0xb
 7068 003d 3B       		.uleb128 0x3b
 7069 003e 05       		.uleb128 0x5
 7070 003f 49       		.uleb128 0x49
 7071 0040 13       		.uleb128 0x13
 7072 0041 00       		.byte	0
 7073 0042 00       		.byte	0
 7074 0043 06       		.uleb128 0x6
 7075 0044 2E       		.uleb128 0x2e
 7076 0045 01       		.byte	0x1
 7077 0046 03       		.uleb128 0x3
 7078 0047 0E       		.uleb128 0xe
 7079 0048 3A       		.uleb128 0x3a
 7080 0049 0B       		.uleb128 0xb
 7081 004a 3B       		.uleb128 0x3b
 7082 004b 0B       		.uleb128 0xb
 7083 004c 27       		.uleb128 0x27
 7084 004d 19       		.uleb128 0x19
 7085 004e 49       		.uleb128 0x49
 7086 004f 13       		.uleb128 0x13
 7087 0050 20       		.uleb128 0x20
 7088 0051 0B       		.uleb128 0xb
 7089 0052 01       		.uleb128 0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 294


 7090 0053 13       		.uleb128 0x13
 7091 0054 00       		.byte	0
 7092 0055 00       		.byte	0
 7093 0056 07       		.uleb128 0x7
 7094 0057 05       		.uleb128 0x5
 7095 0058 00       		.byte	0
 7096 0059 03       		.uleb128 0x3
 7097 005a 08       		.uleb128 0x8
 7098 005b 3A       		.uleb128 0x3a
 7099 005c 0B       		.uleb128 0xb
 7100 005d 3B       		.uleb128 0x3b
 7101 005e 0B       		.uleb128 0xb
 7102 005f 49       		.uleb128 0x49
 7103 0060 13       		.uleb128 0x13
 7104 0061 00       		.byte	0
 7105 0062 00       		.byte	0
 7106 0063 08       		.uleb128 0x8
 7107 0064 2E       		.uleb128 0x2e
 7108 0065 01       		.byte	0x1
 7109 0066 03       		.uleb128 0x3
 7110 0067 0E       		.uleb128 0xe
 7111 0068 3A       		.uleb128 0x3a
 7112 0069 0B       		.uleb128 0xb
 7113 006a 3B       		.uleb128 0x3b
 7114 006b 05       		.uleb128 0x5
 7115 006c 27       		.uleb128 0x27
 7116 006d 19       		.uleb128 0x19
 7117 006e 49       		.uleb128 0x49
 7118 006f 13       		.uleb128 0x13
 7119 0070 20       		.uleb128 0x20
 7120 0071 0B       		.uleb128 0xb
 7121 0072 01       		.uleb128 0x1
 7122 0073 13       		.uleb128 0x13
 7123 0074 00       		.byte	0
 7124 0075 00       		.byte	0
 7125 0076 09       		.uleb128 0x9
 7126 0077 05       		.uleb128 0x5
 7127 0078 00       		.byte	0
 7128 0079 03       		.uleb128 0x3
 7129 007a 08       		.uleb128 0x8
 7130 007b 3A       		.uleb128 0x3a
 7131 007c 0B       		.uleb128 0xb
 7132 007d 3B       		.uleb128 0x3b
 7133 007e 05       		.uleb128 0x5
 7134 007f 49       		.uleb128 0x49
 7135 0080 13       		.uleb128 0x13
 7136 0081 00       		.byte	0
 7137 0082 00       		.byte	0
 7138 0083 0A       		.uleb128 0xa
 7139 0084 2E       		.uleb128 0x2e
 7140 0085 01       		.byte	0x1
 7141 0086 3F       		.uleb128 0x3f
 7142 0087 19       		.uleb128 0x19
 7143 0088 03       		.uleb128 0x3
 7144 0089 0E       		.uleb128 0xe
 7145 008a 3A       		.uleb128 0x3a
 7146 008b 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 295


 7147 008c 3B       		.uleb128 0x3b
 7148 008d 0B       		.uleb128 0xb
 7149 008e 27       		.uleb128 0x27
 7150 008f 19       		.uleb128 0x19
 7151 0090 11       		.uleb128 0x11
 7152 0091 01       		.uleb128 0x1
 7153 0092 12       		.uleb128 0x12
 7154 0093 06       		.uleb128 0x6
 7155 0094 40       		.uleb128 0x40
 7156 0095 18       		.uleb128 0x18
 7157 0096 9742     		.uleb128 0x2117
 7158 0098 19       		.uleb128 0x19
 7159 0099 01       		.uleb128 0x1
 7160 009a 13       		.uleb128 0x13
 7161 009b 00       		.byte	0
 7162 009c 00       		.byte	0
 7163 009d 0B       		.uleb128 0xb
 7164 009e 05       		.uleb128 0x5
 7165 009f 00       		.byte	0
 7166 00a0 03       		.uleb128 0x3
 7167 00a1 0E       		.uleb128 0xe
 7168 00a2 3A       		.uleb128 0x3a
 7169 00a3 0B       		.uleb128 0xb
 7170 00a4 3B       		.uleb128 0x3b
 7171 00a5 0B       		.uleb128 0xb
 7172 00a6 49       		.uleb128 0x49
 7173 00a7 13       		.uleb128 0x13
 7174 00a8 02       		.uleb128 0x2
 7175 00a9 17       		.uleb128 0x17
 7176 00aa 00       		.byte	0
 7177 00ab 00       		.byte	0
 7178 00ac 0C       		.uleb128 0xc
 7179 00ad 34       		.uleb128 0x34
 7180 00ae 00       		.byte	0
 7181 00af 03       		.uleb128 0x3
 7182 00b0 0E       		.uleb128 0xe
 7183 00b1 3A       		.uleb128 0x3a
 7184 00b2 0B       		.uleb128 0xb
 7185 00b3 3B       		.uleb128 0x3b
 7186 00b4 0B       		.uleb128 0xb
 7187 00b5 49       		.uleb128 0x49
 7188 00b6 13       		.uleb128 0x13
 7189 00b7 02       		.uleb128 0x2
 7190 00b8 18       		.uleb128 0x18
 7191 00b9 00       		.byte	0
 7192 00ba 00       		.byte	0
 7193 00bb 0D       		.uleb128 0xd
 7194 00bc 0F       		.uleb128 0xf
 7195 00bd 00       		.byte	0
 7196 00be 0B       		.uleb128 0xb
 7197 00bf 0B       		.uleb128 0xb
 7198 00c0 49       		.uleb128 0x49
 7199 00c1 13       		.uleb128 0x13
 7200 00c2 00       		.byte	0
 7201 00c3 00       		.byte	0
 7202 00c4 0E       		.uleb128 0xe
 7203 00c5 26       		.uleb128 0x26
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 296


 7204 00c6 00       		.byte	0
 7205 00c7 49       		.uleb128 0x49
 7206 00c8 13       		.uleb128 0x13
 7207 00c9 00       		.byte	0
 7208 00ca 00       		.byte	0
 7209 00cb 0F       		.uleb128 0xf
 7210 00cc 34       		.uleb128 0x34
 7211 00cd 00       		.byte	0
 7212 00ce 03       		.uleb128 0x3
 7213 00cf 08       		.uleb128 0x8
 7214 00d0 3A       		.uleb128 0x3a
 7215 00d1 0B       		.uleb128 0xb
 7216 00d2 3B       		.uleb128 0x3b
 7217 00d3 0B       		.uleb128 0xb
 7218 00d4 49       		.uleb128 0x49
 7219 00d5 13       		.uleb128 0x13
 7220 00d6 02       		.uleb128 0x2
 7221 00d7 17       		.uleb128 0x17
 7222 00d8 00       		.byte	0
 7223 00d9 00       		.byte	0
 7224 00da 10       		.uleb128 0x10
 7225 00db 2E       		.uleb128 0x2e
 7226 00dc 01       		.byte	0x1
 7227 00dd 3F       		.uleb128 0x3f
 7228 00de 19       		.uleb128 0x19
 7229 00df 03       		.uleb128 0x3
 7230 00e0 0E       		.uleb128 0xe
 7231 00e1 3A       		.uleb128 0x3a
 7232 00e2 0B       		.uleb128 0xb
 7233 00e3 3B       		.uleb128 0x3b
 7234 00e4 0B       		.uleb128 0xb
 7235 00e5 27       		.uleb128 0x27
 7236 00e6 19       		.uleb128 0x19
 7237 00e7 11       		.uleb128 0x11
 7238 00e8 01       		.uleb128 0x1
 7239 00e9 12       		.uleb128 0x12
 7240 00ea 06       		.uleb128 0x6
 7241 00eb 40       		.uleb128 0x40
 7242 00ec 18       		.uleb128 0x18
 7243 00ed 9642     		.uleb128 0x2116
 7244 00ef 19       		.uleb128 0x19
 7245 00f0 01       		.uleb128 0x1
 7246 00f1 13       		.uleb128 0x13
 7247 00f2 00       		.byte	0
 7248 00f3 00       		.byte	0
 7249 00f4 11       		.uleb128 0x11
 7250 00f5 34       		.uleb128 0x34
 7251 00f6 00       		.byte	0
 7252 00f7 03       		.uleb128 0x3
 7253 00f8 0E       		.uleb128 0xe
 7254 00f9 3A       		.uleb128 0x3a
 7255 00fa 0B       		.uleb128 0xb
 7256 00fb 3B       		.uleb128 0x3b
 7257 00fc 0B       		.uleb128 0xb
 7258 00fd 49       		.uleb128 0x49
 7259 00fe 13       		.uleb128 0x13
 7260 00ff 02       		.uleb128 0x2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 297


 7261 0100 17       		.uleb128 0x17
 7262 0101 00       		.byte	0
 7263 0102 00       		.byte	0
 7264 0103 12       		.uleb128 0x12
 7265 0104 0B       		.uleb128 0xb
 7266 0105 01       		.byte	0x1
 7267 0106 55       		.uleb128 0x55
 7268 0107 17       		.uleb128 0x17
 7269 0108 00       		.byte	0
 7270 0109 00       		.byte	0
 7271 010a 13       		.uleb128 0x13
 7272 010b 1D       		.uleb128 0x1d
 7273 010c 01       		.byte	0x1
 7274 010d 31       		.uleb128 0x31
 7275 010e 13       		.uleb128 0x13
 7276 010f 11       		.uleb128 0x11
 7277 0110 01       		.uleb128 0x1
 7278 0111 12       		.uleb128 0x12
 7279 0112 06       		.uleb128 0x6
 7280 0113 58       		.uleb128 0x58
 7281 0114 0B       		.uleb128 0xb
 7282 0115 59       		.uleb128 0x59
 7283 0116 0B       		.uleb128 0xb
 7284 0117 00       		.byte	0
 7285 0118 00       		.byte	0
 7286 0119 14       		.uleb128 0x14
 7287 011a 05       		.uleb128 0x5
 7288 011b 00       		.byte	0
 7289 011c 31       		.uleb128 0x31
 7290 011d 13       		.uleb128 0x13
 7291 011e 02       		.uleb128 0x2
 7292 011f 17       		.uleb128 0x17
 7293 0120 00       		.byte	0
 7294 0121 00       		.byte	0
 7295 0122 15       		.uleb128 0x15
 7296 0123 1D       		.uleb128 0x1d
 7297 0124 01       		.byte	0x1
 7298 0125 31       		.uleb128 0x31
 7299 0126 13       		.uleb128 0x13
 7300 0127 11       		.uleb128 0x11
 7301 0128 01       		.uleb128 0x1
 7302 0129 12       		.uleb128 0x12
 7303 012a 06       		.uleb128 0x6
 7304 012b 58       		.uleb128 0x58
 7305 012c 0B       		.uleb128 0xb
 7306 012d 59       		.uleb128 0x59
 7307 012e 05       		.uleb128 0x5
 7308 012f 00       		.byte	0
 7309 0130 00       		.byte	0
 7310 0131 16       		.uleb128 0x16
 7311 0132 05       		.uleb128 0x5
 7312 0133 00       		.byte	0
 7313 0134 03       		.uleb128 0x3
 7314 0135 0E       		.uleb128 0xe
 7315 0136 3A       		.uleb128 0x3a
 7316 0137 0B       		.uleb128 0xb
 7317 0138 3B       		.uleb128 0x3b
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 298


 7318 0139 0B       		.uleb128 0xb
 7319 013a 49       		.uleb128 0x49
 7320 013b 13       		.uleb128 0x13
 7321 013c 02       		.uleb128 0x2
 7322 013d 18       		.uleb128 0x18
 7323 013e 00       		.byte	0
 7324 013f 00       		.byte	0
 7325 0140 17       		.uleb128 0x17
 7326 0141 0B       		.uleb128 0xb
 7327 0142 01       		.byte	0x1
 7328 0143 11       		.uleb128 0x11
 7329 0144 01       		.uleb128 0x1
 7330 0145 12       		.uleb128 0x12
 7331 0146 06       		.uleb128 0x6
 7332 0147 00       		.byte	0
 7333 0148 00       		.byte	0
 7334 0149 18       		.uleb128 0x18
 7335 014a 05       		.uleb128 0x5
 7336 014b 00       		.byte	0
 7337 014c 03       		.uleb128 0x3
 7338 014d 08       		.uleb128 0x8
 7339 014e 3A       		.uleb128 0x3a
 7340 014f 0B       		.uleb128 0xb
 7341 0150 3B       		.uleb128 0x3b
 7342 0151 0B       		.uleb128 0xb
 7343 0152 49       		.uleb128 0x49
 7344 0153 13       		.uleb128 0x13
 7345 0154 02       		.uleb128 0x2
 7346 0155 17       		.uleb128 0x17
 7347 0156 00       		.byte	0
 7348 0157 00       		.byte	0
 7349 0158 19       		.uleb128 0x19
 7350 0159 05       		.uleb128 0x5
 7351 015a 00       		.byte	0
 7352 015b 03       		.uleb128 0x3
 7353 015c 08       		.uleb128 0x8
 7354 015d 3A       		.uleb128 0x3a
 7355 015e 0B       		.uleb128 0xb
 7356 015f 3B       		.uleb128 0x3b
 7357 0160 0B       		.uleb128 0xb
 7358 0161 49       		.uleb128 0x49
 7359 0162 13       		.uleb128 0x13
 7360 0163 02       		.uleb128 0x2
 7361 0164 18       		.uleb128 0x18
 7362 0165 00       		.byte	0
 7363 0166 00       		.byte	0
 7364 0167 1A       		.uleb128 0x1a
 7365 0168 34       		.uleb128 0x34
 7366 0169 00       		.byte	0
 7367 016a 03       		.uleb128 0x3
 7368 016b 0E       		.uleb128 0xe
 7369 016c 3A       		.uleb128 0x3a
 7370 016d 0B       		.uleb128 0xb
 7371 016e 3B       		.uleb128 0x3b
 7372 016f 0B       		.uleb128 0xb
 7373 0170 49       		.uleb128 0x49
 7374 0171 13       		.uleb128 0x13
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 299


 7375 0172 3F       		.uleb128 0x3f
 7376 0173 19       		.uleb128 0x19
 7377 0174 3C       		.uleb128 0x3c
 7378 0175 19       		.uleb128 0x19
 7379 0176 00       		.byte	0
 7380 0177 00       		.byte	0
 7381 0178 1B       		.uleb128 0x1b
 7382 0179 13       		.uleb128 0x13
 7383 017a 01       		.byte	0x1
 7384 017b 0B       		.uleb128 0xb
 7385 017c 0B       		.uleb128 0xb
 7386 017d 3A       		.uleb128 0x3a
 7387 017e 0B       		.uleb128 0xb
 7388 017f 3B       		.uleb128 0x3b
 7389 0180 0B       		.uleb128 0xb
 7390 0181 01       		.uleb128 0x1
 7391 0182 13       		.uleb128 0x13
 7392 0183 00       		.byte	0
 7393 0184 00       		.byte	0
 7394 0185 1C       		.uleb128 0x1c
 7395 0186 0D       		.uleb128 0xd
 7396 0187 00       		.byte	0
 7397 0188 03       		.uleb128 0x3
 7398 0189 0E       		.uleb128 0xe
 7399 018a 3A       		.uleb128 0x3a
 7400 018b 0B       		.uleb128 0xb
 7401 018c 3B       		.uleb128 0x3b
 7402 018d 0B       		.uleb128 0xb
 7403 018e 49       		.uleb128 0x49
 7404 018f 13       		.uleb128 0x13
 7405 0190 38       		.uleb128 0x38
 7406 0191 0B       		.uleb128 0xb
 7407 0192 00       		.byte	0
 7408 0193 00       		.byte	0
 7409 0194 1D       		.uleb128 0x1d
 7410 0195 13       		.uleb128 0x13
 7411 0196 01       		.byte	0x1
 7412 0197 0B       		.uleb128 0xb
 7413 0198 0B       		.uleb128 0xb
 7414 0199 3A       		.uleb128 0x3a
 7415 019a 0B       		.uleb128 0xb
 7416 019b 3B       		.uleb128 0x3b
 7417 019c 0B       		.uleb128 0xb
 7418 019d 00       		.byte	0
 7419 019e 00       		.byte	0
 7420 019f 1E       		.uleb128 0x1e
 7421 01a0 0D       		.uleb128 0xd
 7422 01a1 00       		.byte	0
 7423 01a2 03       		.uleb128 0x3
 7424 01a3 08       		.uleb128 0x8
 7425 01a4 3A       		.uleb128 0x3a
 7426 01a5 0B       		.uleb128 0xb
 7427 01a6 3B       		.uleb128 0x3b
 7428 01a7 0B       		.uleb128 0xb
 7429 01a8 49       		.uleb128 0x49
 7430 01a9 13       		.uleb128 0x13
 7431 01aa 38       		.uleb128 0x38
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 300


 7432 01ab 0B       		.uleb128 0xb
 7433 01ac 00       		.byte	0
 7434 01ad 00       		.byte	0
 7435 01ae 00       		.byte	0
 7436              		.section	.debug_loc,"",%progbits
 7437              	.Ldebug_loc0:
 7438              	.LLST0:
 7439 0000 00000000 		.4byte	.LVL0
 7440 0004 02000000 		.4byte	.LVL1
 7441 0008 0100     		.2byte	0x1
 7442 000a 50       		.byte	0x50
 7443 000b 02000000 		.4byte	.LVL1
 7444 000f 10000000 		.4byte	.LVL4
 7445 0013 0300     		.2byte	0x3
 7446 0015 70       		.byte	0x70
 7447 0016 04       		.sleb128 4
 7448 0017 9F       		.byte	0x9f
 7449 0018 10000000 		.4byte	.LVL4
 7450 001c 16000000 		.4byte	.LFE83
 7451 0020 0100     		.2byte	0x1
 7452 0022 50       		.byte	0x50
 7453 0023 00000000 		.4byte	0
 7454 0027 00000000 		.4byte	0
 7455              	.LLST1:
 7456 002b 00000000 		.4byte	.LVL0
 7457 002f 02000000 		.4byte	.LVL1
 7458 0033 0100     		.2byte	0x1
 7459 0035 51       		.byte	0x51
 7460 0036 02000000 		.4byte	.LVL1
 7461 003a 0E000000 		.4byte	.LVL3
 7462 003e 0300     		.2byte	0x3
 7463 0040 71       		.byte	0x71
 7464 0041 04       		.sleb128 4
 7465 0042 9F       		.byte	0x9f
 7466 0043 0E000000 		.4byte	.LVL3
 7467 0047 16000000 		.4byte	.LFE83
 7468 004b 0100     		.2byte	0x1
 7469 004d 51       		.byte	0x51
 7470 004e 00000000 		.4byte	0
 7471 0052 00000000 		.4byte	0
 7472              	.LLST2:
 7473 0056 00000000 		.4byte	.LVL0
 7474 005a 02000000 		.4byte	.LVL1
 7475 005e 0100     		.2byte	0x1
 7476 0060 52       		.byte	0x52
 7477 0061 02000000 		.4byte	.LVL1
 7478 0065 16000000 		.4byte	.LFE83
 7479 0069 0400     		.2byte	0x4
 7480 006b F3       		.byte	0xf3
 7481 006c 01       		.uleb128 0x1
 7482 006d 52       		.byte	0x52
 7483 006e 9F       		.byte	0x9f
 7484 006f 00000000 		.4byte	0
 7485 0073 00000000 		.4byte	0
 7486              	.LLST3:
 7487 0077 00000000 		.4byte	.LVL5
 7488 007b 04000000 		.4byte	.LVL7
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 301


 7489 007f 0100     		.2byte	0x1
 7490 0081 50       		.byte	0x50
 7491 0082 04000000 		.4byte	.LVL7
 7492 0086 16000000 		.4byte	.LVL10
 7493 008a 0300     		.2byte	0x3
 7494 008c 70       		.byte	0x70
 7495 008d 08       		.sleb128 8
 7496 008e 9F       		.byte	0x9f
 7497 008f 16000000 		.4byte	.LVL10
 7498 0093 1E000000 		.4byte	.LFE84
 7499 0097 0100     		.2byte	0x1
 7500 0099 50       		.byte	0x50
 7501 009a 00000000 		.4byte	0
 7502 009e 00000000 		.4byte	0
 7503              	.LLST4:
 7504 00a2 00000000 		.4byte	.LVL5
 7505 00a6 04000000 		.4byte	.LVL7
 7506 00aa 0100     		.2byte	0x1
 7507 00ac 51       		.byte	0x51
 7508 00ad 04000000 		.4byte	.LVL7
 7509 00b1 14000000 		.4byte	.LVL9
 7510 00b5 0300     		.2byte	0x3
 7511 00b7 71       		.byte	0x71
 7512 00b8 08       		.sleb128 8
 7513 00b9 9F       		.byte	0x9f
 7514 00ba 14000000 		.4byte	.LVL9
 7515 00be 1E000000 		.4byte	.LFE84
 7516 00c2 0100     		.2byte	0x1
 7517 00c4 51       		.byte	0x51
 7518 00c5 00000000 		.4byte	0
 7519 00c9 00000000 		.4byte	0
 7520              	.LLST5:
 7521 00cd 00000000 		.4byte	.LVL5
 7522 00d1 04000000 		.4byte	.LVL7
 7523 00d5 0100     		.2byte	0x1
 7524 00d7 52       		.byte	0x52
 7525 00d8 04000000 		.4byte	.LVL7
 7526 00dc 1E000000 		.4byte	.LFE84
 7527 00e0 0400     		.2byte	0x4
 7528 00e2 F3       		.byte	0xf3
 7529 00e3 01       		.uleb128 0x1
 7530 00e4 52       		.byte	0x52
 7531 00e5 9F       		.byte	0x9f
 7532 00e6 00000000 		.4byte	0
 7533 00ea 00000000 		.4byte	0
 7534              	.LLST6:
 7535 00ee 00000000 		.4byte	.LVL11
 7536 00f2 06000000 		.4byte	.LVL14
 7537 00f6 0100     		.2byte	0x1
 7538 00f8 50       		.byte	0x50
 7539 00f9 06000000 		.4byte	.LVL14
 7540 00fd 28000000 		.4byte	.LVL21
 7541 0101 0100     		.2byte	0x1
 7542 0103 54       		.byte	0x54
 7543 0104 28000000 		.4byte	.LVL21
 7544 0108 30000000 		.4byte	.LFE85
 7545 010c 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 302


 7546 010e 50       		.byte	0x50
 7547 010f 00000000 		.4byte	0
 7548 0113 00000000 		.4byte	0
 7549              	.LLST7:
 7550 0117 00000000 		.4byte	.LVL11
 7551 011b 0A000000 		.4byte	.LVL16
 7552 011f 0100     		.2byte	0x1
 7553 0121 51       		.byte	0x51
 7554 0122 0A000000 		.4byte	.LVL16
 7555 0126 28000000 		.4byte	.LVL21
 7556 012a 0100     		.2byte	0x1
 7557 012c 50       		.byte	0x50
 7558 012d 28000000 		.4byte	.LVL21
 7559 0131 30000000 		.4byte	.LFE85
 7560 0135 0100     		.2byte	0x1
 7561 0137 51       		.byte	0x51
 7562 0138 00000000 		.4byte	0
 7563 013c 00000000 		.4byte	0
 7564              	.LLST8:
 7565 0140 00000000 		.4byte	.LVL11
 7566 0144 04000000 		.4byte	.LVL13
 7567 0148 0100     		.2byte	0x1
 7568 014a 52       		.byte	0x52
 7569 014b 04000000 		.4byte	.LVL13
 7570 014f 30000000 		.4byte	.LFE85
 7571 0153 0400     		.2byte	0x4
 7572 0155 F3       		.byte	0xf3
 7573 0156 01       		.uleb128 0x1
 7574 0157 52       		.byte	0x52
 7575 0158 9F       		.byte	0x9f
 7576 0159 00000000 		.4byte	0
 7577 015d 00000000 		.4byte	0
 7578              	.LLST9:
 7579 0161 08000000 		.4byte	.LVL15
 7580 0165 18000000 		.4byte	.LVL17
 7581 0169 0100     		.2byte	0x1
 7582 016b 53       		.byte	0x53
 7583 016c 18000000 		.4byte	.LVL17
 7584 0170 1C000000 		.4byte	.LVL18
 7585 0174 0100     		.2byte	0x1
 7586 0176 55       		.byte	0x55
 7587 0177 1C000000 		.4byte	.LVL18
 7588 017b 20000000 		.4byte	.LVL19
 7589 017f 0100     		.2byte	0x1
 7590 0181 53       		.byte	0x53
 7591 0182 20000000 		.4byte	.LVL19
 7592 0186 28000000 		.4byte	.LVL21
 7593 018a 0100     		.2byte	0x1
 7594 018c 55       		.byte	0x55
 7595 018d 00000000 		.4byte	0
 7596 0191 00000000 		.4byte	0
 7597              	.LLST10:
 7598 0195 00000000 		.4byte	.LVL22
 7599 0199 06000000 		.4byte	.LVL25
 7600 019d 0100     		.2byte	0x1
 7601 019f 50       		.byte	0x50
 7602 01a0 06000000 		.4byte	.LVL25
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 303


 7603 01a4 24000000 		.4byte	.LVL33
 7604 01a8 0100     		.2byte	0x1
 7605 01aa 54       		.byte	0x54
 7606 01ab 24000000 		.4byte	.LVL33
 7607 01af 2E000000 		.4byte	.LFE86
 7608 01b3 0100     		.2byte	0x1
 7609 01b5 50       		.byte	0x50
 7610 01b6 00000000 		.4byte	0
 7611 01ba 00000000 		.4byte	0
 7612              	.LLST11:
 7613 01be 00000000 		.4byte	.LVL22
 7614 01c2 0A000000 		.4byte	.LVL27
 7615 01c6 0100     		.2byte	0x1
 7616 01c8 51       		.byte	0x51
 7617 01c9 0A000000 		.4byte	.LVL27
 7618 01cd 24000000 		.4byte	.LVL33
 7619 01d1 0100     		.2byte	0x1
 7620 01d3 50       		.byte	0x50
 7621 01d4 24000000 		.4byte	.LVL33
 7622 01d8 2E000000 		.4byte	.LFE86
 7623 01dc 0100     		.2byte	0x1
 7624 01de 51       		.byte	0x51
 7625 01df 00000000 		.4byte	0
 7626 01e3 00000000 		.4byte	0
 7627              	.LLST12:
 7628 01e7 00000000 		.4byte	.LVL22
 7629 01eb 04000000 		.4byte	.LVL24
 7630 01ef 0100     		.2byte	0x1
 7631 01f1 52       		.byte	0x52
 7632 01f2 04000000 		.4byte	.LVL24
 7633 01f6 2E000000 		.4byte	.LFE86
 7634 01fa 0400     		.2byte	0x4
 7635 01fc F3       		.byte	0xf3
 7636 01fd 01       		.uleb128 0x1
 7637 01fe 52       		.byte	0x52
 7638 01ff 9F       		.byte	0x9f
 7639 0200 00000000 		.4byte	0
 7640 0204 00000000 		.4byte	0
 7641              	.LLST13:
 7642 0208 08000000 		.4byte	.LVL26
 7643 020c 16000000 		.4byte	.LVL28
 7644 0210 0100     		.2byte	0x1
 7645 0212 53       		.byte	0x53
 7646 0213 16000000 		.4byte	.LVL28
 7647 0217 18000000 		.4byte	.LVL29
 7648 021b 0200     		.2byte	0x2
 7649 021d 74       		.byte	0x74
 7650 021e 7C       		.sleb128 -4
 7651 021f 18000000 		.4byte	.LVL29
 7652 0223 1C000000 		.4byte	.LVL30
 7653 0227 0100     		.2byte	0x1
 7654 0229 53       		.byte	0x53
 7655 022a 1C000000 		.4byte	.LVL30
 7656 022e 1E000000 		.4byte	.LVL31
 7657 0232 0200     		.2byte	0x2
 7658 0234 74       		.byte	0x74
 7659 0235 7C       		.sleb128 -4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 304


 7660 0236 00000000 		.4byte	0
 7661 023a 00000000 		.4byte	0
 7662              	.LLST14:
 7663 023e 00000000 		.4byte	.LVL34
 7664 0242 06000000 		.4byte	.LVL37
 7665 0246 0100     		.2byte	0x1
 7666 0248 50       		.byte	0x50
 7667 0249 06000000 		.4byte	.LVL37
 7668 024d 26000000 		.4byte	.LVL44
 7669 0251 0100     		.2byte	0x1
 7670 0253 54       		.byte	0x54
 7671 0254 26000000 		.4byte	.LVL44
 7672 0258 2E000000 		.4byte	.LFE87
 7673 025c 0100     		.2byte	0x1
 7674 025e 50       		.byte	0x50
 7675 025f 00000000 		.4byte	0
 7676 0263 00000000 		.4byte	0
 7677              	.LLST15:
 7678 0267 00000000 		.4byte	.LVL34
 7679 026b 0A000000 		.4byte	.LVL39
 7680 026f 0100     		.2byte	0x1
 7681 0271 51       		.byte	0x51
 7682 0272 0A000000 		.4byte	.LVL39
 7683 0276 26000000 		.4byte	.LVL44
 7684 027a 0100     		.2byte	0x1
 7685 027c 50       		.byte	0x50
 7686 027d 26000000 		.4byte	.LVL44
 7687 0281 2E000000 		.4byte	.LFE87
 7688 0285 0100     		.2byte	0x1
 7689 0287 51       		.byte	0x51
 7690 0288 00000000 		.4byte	0
 7691 028c 00000000 		.4byte	0
 7692              	.LLST16:
 7693 0290 00000000 		.4byte	.LVL34
 7694 0294 04000000 		.4byte	.LVL36
 7695 0298 0100     		.2byte	0x1
 7696 029a 52       		.byte	0x52
 7697 029b 04000000 		.4byte	.LVL36
 7698 029f 2E000000 		.4byte	.LFE87
 7699 02a3 0400     		.2byte	0x4
 7700 02a5 F3       		.byte	0xf3
 7701 02a6 01       		.uleb128 0x1
 7702 02a7 52       		.byte	0x52
 7703 02a8 9F       		.byte	0x9f
 7704 02a9 00000000 		.4byte	0
 7705 02ad 00000000 		.4byte	0
 7706              	.LLST17:
 7707 02b1 08000000 		.4byte	.LVL38
 7708 02b5 18000000 		.4byte	.LVL40
 7709 02b9 0100     		.2byte	0x1
 7710 02bb 53       		.byte	0x53
 7711 02bc 18000000 		.4byte	.LVL40
 7712 02c0 1C000000 		.4byte	.LVL41
 7713 02c4 0100     		.2byte	0x1
 7714 02c6 55       		.byte	0x55
 7715 02c7 1C000000 		.4byte	.LVL41
 7716 02cb 1E000000 		.4byte	.LVL42
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 305


 7717 02cf 0100     		.2byte	0x1
 7718 02d1 53       		.byte	0x53
 7719 02d2 1E000000 		.4byte	.LVL42
 7720 02d6 26000000 		.4byte	.LVL44
 7721 02da 0100     		.2byte	0x1
 7722 02dc 55       		.byte	0x55
 7723 02dd 00000000 		.4byte	0
 7724 02e1 00000000 		.4byte	0
 7725              	.LLST18:
 7726 02e5 00000000 		.4byte	.LVL45
 7727 02e9 10000000 		.4byte	.LVL49
 7728 02ed 0100     		.2byte	0x1
 7729 02ef 50       		.byte	0x50
 7730 02f0 10000000 		.4byte	.LVL49
 7731 02f4 24000000 		.4byte	.LVL53
 7732 02f8 0100     		.2byte	0x1
 7733 02fa 56       		.byte	0x56
 7734 02fb 24000000 		.4byte	.LVL53
 7735 02ff 2C000000 		.4byte	.LFE88
 7736 0303 0100     		.2byte	0x1
 7737 0305 50       		.byte	0x50
 7738 0306 00000000 		.4byte	0
 7739 030a 00000000 		.4byte	0
 7740              	.LLST19:
 7741 030e 00000000 		.4byte	.LVL45
 7742 0312 12000000 		.4byte	.LVL50
 7743 0316 0100     		.2byte	0x1
 7744 0318 51       		.byte	0x51
 7745 0319 12000000 		.4byte	.LVL50
 7746 031d 24000000 		.4byte	.LVL53
 7747 0321 0100     		.2byte	0x1
 7748 0323 57       		.byte	0x57
 7749 0324 24000000 		.4byte	.LVL53
 7750 0328 2C000000 		.4byte	.LFE88
 7751 032c 0100     		.2byte	0x1
 7752 032e 51       		.byte	0x51
 7753 032f 00000000 		.4byte	0
 7754 0333 00000000 		.4byte	0
 7755              	.LLST20:
 7756 0337 00000000 		.4byte	.LVL45
 7757 033b 0A000000 		.4byte	.LVL47
 7758 033f 0100     		.2byte	0x1
 7759 0341 52       		.byte	0x52
 7760 0342 0A000000 		.4byte	.LVL47
 7761 0346 0E000000 		.4byte	.LVL48
 7762 034a 0100     		.2byte	0x1
 7763 034c 55       		.byte	0x55
 7764 034d 0E000000 		.4byte	.LVL48
 7765 0351 24000000 		.4byte	.LVL53
 7766 0355 0100     		.2byte	0x1
 7767 0357 58       		.byte	0x58
 7768 0358 24000000 		.4byte	.LVL53
 7769 035c 2C000000 		.4byte	.LFE88
 7770 0360 0100     		.2byte	0x1
 7771 0362 55       		.byte	0x55
 7772 0363 00000000 		.4byte	0
 7773 0367 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 306


 7774              	.LLST21:
 7775 036b 00000000 		.4byte	.LVL45
 7776 036f 0A000000 		.4byte	.LVL47
 7777 0373 0100     		.2byte	0x1
 7778 0375 53       		.byte	0x53
 7779 0376 0A000000 		.4byte	.LVL47
 7780 037a 2C000000 		.4byte	.LFE88
 7781 037e 0400     		.2byte	0x4
 7782 0380 F3       		.byte	0xf3
 7783 0381 01       		.uleb128 0x1
 7784 0382 53       		.byte	0x53
 7785 0383 9F       		.byte	0x9f
 7786 0384 00000000 		.4byte	0
 7787 0388 00000000 		.4byte	0
 7788              	.LLST22:
 7789 038c 08000000 		.4byte	.LVL46
 7790 0390 0A000000 		.4byte	.LVL47
 7791 0394 0100     		.2byte	0x1
 7792 0396 53       		.byte	0x53
 7793 0397 0A000000 		.4byte	.LVL47
 7794 039b 2C000000 		.4byte	.LFE88
 7795 039f 0100     		.2byte	0x1
 7796 03a1 54       		.byte	0x54
 7797 03a2 00000000 		.4byte	0
 7798 03a6 00000000 		.4byte	0
 7799              	.LLST23:
 7800 03aa 00000000 		.4byte	.LVL54
 7801 03ae 14000000 		.4byte	.LVL58
 7802 03b2 0100     		.2byte	0x1
 7803 03b4 50       		.byte	0x50
 7804 03b5 14000000 		.4byte	.LVL58
 7805 03b9 2E000000 		.4byte	.LVL62
 7806 03bd 0100     		.2byte	0x1
 7807 03bf 57       		.byte	0x57
 7808 03c0 2E000000 		.4byte	.LVL62
 7809 03c4 36000000 		.4byte	.LFE89
 7810 03c8 0100     		.2byte	0x1
 7811 03ca 50       		.byte	0x50
 7812 03cb 00000000 		.4byte	0
 7813 03cf 00000000 		.4byte	0
 7814              	.LLST24:
 7815 03d3 00000000 		.4byte	.LVL54
 7816 03d7 0C000000 		.4byte	.LVL56
 7817 03db 0100     		.2byte	0x1
 7818 03dd 51       		.byte	0x51
 7819 03de 0C000000 		.4byte	.LVL56
 7820 03e2 18000000 		.4byte	.LVL59
 7821 03e6 0100     		.2byte	0x1
 7822 03e8 56       		.byte	0x56
 7823 03e9 18000000 		.4byte	.LVL59
 7824 03ed 2E000000 		.4byte	.LVL62
 7825 03f1 0100     		.2byte	0x1
 7826 03f3 58       		.byte	0x58
 7827 03f4 2E000000 		.4byte	.LVL62
 7828 03f8 36000000 		.4byte	.LFE89
 7829 03fc 0100     		.2byte	0x1
 7830 03fe 56       		.byte	0x56
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 307


 7831 03ff 00000000 		.4byte	0
 7832 0403 00000000 		.4byte	0
 7833              	.LLST25:
 7834 0407 00000000 		.4byte	.LVL54
 7835 040b 0C000000 		.4byte	.LVL56
 7836 040f 0100     		.2byte	0x1
 7837 0411 52       		.byte	0x52
 7838 0412 0C000000 		.4byte	.LVL56
 7839 0416 10000000 		.4byte	.LVL57
 7840 041a 0100     		.2byte	0x1
 7841 041c 55       		.byte	0x55
 7842 041d 10000000 		.4byte	.LVL57
 7843 0421 2E000000 		.4byte	.LVL62
 7844 0425 0100     		.2byte	0x1
 7845 0427 59       		.byte	0x59
 7846 0428 2E000000 		.4byte	.LVL62
 7847 042c 36000000 		.4byte	.LFE89
 7848 0430 0100     		.2byte	0x1
 7849 0432 55       		.byte	0x55
 7850 0433 00000000 		.4byte	0
 7851 0437 00000000 		.4byte	0
 7852              	.LLST26:
 7853 043b 00000000 		.4byte	.LVL54
 7854 043f 0C000000 		.4byte	.LVL56
 7855 0443 0100     		.2byte	0x1
 7856 0445 53       		.byte	0x53
 7857 0446 0C000000 		.4byte	.LVL56
 7858 044a 36000000 		.4byte	.LFE89
 7859 044e 0400     		.2byte	0x4
 7860 0450 F3       		.byte	0xf3
 7861 0451 01       		.uleb128 0x1
 7862 0452 53       		.byte	0x53
 7863 0453 9F       		.byte	0x9f
 7864 0454 00000000 		.4byte	0
 7865 0458 00000000 		.4byte	0
 7866              	.LLST27:
 7867 045c 0A000000 		.4byte	.LVL55
 7868 0460 0C000000 		.4byte	.LVL56
 7869 0464 0100     		.2byte	0x1
 7870 0466 53       		.byte	0x53
 7871 0467 0C000000 		.4byte	.LVL56
 7872 046b 36000000 		.4byte	.LFE89
 7873 046f 0100     		.2byte	0x1
 7874 0471 54       		.byte	0x54
 7875 0472 00000000 		.4byte	0
 7876 0476 00000000 		.4byte	0
 7877              	.LLST28:
 7878 047a 00000000 		.4byte	.LVL63
 7879 047e 08000000 		.4byte	.LVL67
 7880 0482 0100     		.2byte	0x1
 7881 0484 50       		.byte	0x50
 7882 0485 08000000 		.4byte	.LVL67
 7883 0489 22000000 		.4byte	.LVL74
 7884 048d 0100     		.2byte	0x1
 7885 048f 55       		.byte	0x55
 7886 0490 22000000 		.4byte	.LVL74
 7887 0494 2A000000 		.4byte	.LFE90
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 308


 7888 0498 0100     		.2byte	0x1
 7889 049a 50       		.byte	0x50
 7890 049b 00000000 		.4byte	0
 7891 049f 00000000 		.4byte	0
 7892              	.LLST29:
 7893 04a3 00000000 		.4byte	.LVL63
 7894 04a7 0E000000 		.4byte	.LVL68
 7895 04ab 0100     		.2byte	0x1
 7896 04ad 51       		.byte	0x51
 7897 04ae 0E000000 		.4byte	.LVL68
 7898 04b2 22000000 		.4byte	.LVL74
 7899 04b6 0100     		.2byte	0x1
 7900 04b8 50       		.byte	0x50
 7901 04b9 22000000 		.4byte	.LVL74
 7902 04bd 2A000000 		.4byte	.LFE90
 7903 04c1 0100     		.2byte	0x1
 7904 04c3 51       		.byte	0x51
 7905 04c4 00000000 		.4byte	0
 7906 04c8 00000000 		.4byte	0
 7907              	.LLST30:
 7908 04cc 00000000 		.4byte	.LVL63
 7909 04d0 06000000 		.4byte	.LVL66
 7910 04d4 0100     		.2byte	0x1
 7911 04d6 52       		.byte	0x52
 7912 04d7 06000000 		.4byte	.LVL66
 7913 04db 22000000 		.4byte	.LVL74
 7914 04df 0100     		.2byte	0x1
 7915 04e1 56       		.byte	0x56
 7916 04e2 22000000 		.4byte	.LVL74
 7917 04e6 2A000000 		.4byte	.LFE90
 7918 04ea 0100     		.2byte	0x1
 7919 04ec 52       		.byte	0x52
 7920 04ed 00000000 		.4byte	0
 7921 04f1 00000000 		.4byte	0
 7922              	.LLST31:
 7923 04f5 00000000 		.4byte	.LVL63
 7924 04f9 04000000 		.4byte	.LVL65
 7925 04fd 0100     		.2byte	0x1
 7926 04ff 53       		.byte	0x53
 7927 0500 04000000 		.4byte	.LVL65
 7928 0504 2A000000 		.4byte	.LFE90
 7929 0508 0400     		.2byte	0x4
 7930 050a F3       		.byte	0xf3
 7931 050b 01       		.uleb128 0x1
 7932 050c 53       		.byte	0x53
 7933 050d 9F       		.byte	0x9f
 7934 050e 00000000 		.4byte	0
 7935 0512 00000000 		.4byte	0
 7936              	.LLST32:
 7937 0516 18000000 		.4byte	.LVL70
 7938 051a 20000000 		.4byte	.LVL73
 7939 051e 0100     		.2byte	0x1
 7940 0520 51       		.byte	0x51
 7941 0521 00000000 		.4byte	0
 7942 0525 00000000 		.4byte	0
 7943              	.LLST33:
 7944 0529 14000000 		.4byte	.LVL69
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 309


 7945 052d 18000000 		.4byte	.LVL70
 7946 0531 0100     		.2byte	0x1
 7947 0533 51       		.byte	0x51
 7948 0534 18000000 		.4byte	.LVL70
 7949 0538 1A000000 		.4byte	.LVL71
 7950 053c 0C00     		.2byte	0xc
 7951 053e 70       		.byte	0x70
 7952 053f 7E       		.sleb128 -2
 7953 0540 94       		.byte	0x94
 7954 0541 02       		.byte	0x2
 7955 0542 40       		.byte	0x40
 7956 0543 24       		.byte	0x24
 7957 0544 40       		.byte	0x40
 7958 0545 26       		.byte	0x26
 7959 0546 77       		.byte	0x77
 7960 0547 00       		.sleb128 0
 7961 0548 22       		.byte	0x22
 7962 0549 9F       		.byte	0x9f
 7963 054a 00000000 		.4byte	0
 7964 054e 00000000 		.4byte	0
 7965              	.LLST34:
 7966 0552 00000000 		.4byte	.LVL75
 7967 0556 08000000 		.4byte	.LVL79
 7968 055a 0100     		.2byte	0x1
 7969 055c 50       		.byte	0x50
 7970 055d 08000000 		.4byte	.LVL79
 7971 0561 2E000000 		.4byte	.LVL87
 7972 0565 0100     		.2byte	0x1
 7973 0567 54       		.byte	0x54
 7974 0568 2E000000 		.4byte	.LVL87
 7975 056c 36000000 		.4byte	.LFE91
 7976 0570 0100     		.2byte	0x1
 7977 0572 50       		.byte	0x50
 7978 0573 00000000 		.4byte	0
 7979 0577 00000000 		.4byte	0
 7980              	.LLST35:
 7981 057b 00000000 		.4byte	.LVL75
 7982 057f 0C000000 		.4byte	.LVL80
 7983 0583 0100     		.2byte	0x1
 7984 0585 51       		.byte	0x51
 7985 0586 0C000000 		.4byte	.LVL80
 7986 058a 2E000000 		.4byte	.LVL87
 7987 058e 0100     		.2byte	0x1
 7988 0590 55       		.byte	0x55
 7989 0591 2E000000 		.4byte	.LVL87
 7990 0595 36000000 		.4byte	.LFE91
 7991 0599 0100     		.2byte	0x1
 7992 059b 51       		.byte	0x51
 7993 059c 00000000 		.4byte	0
 7994 05a0 00000000 		.4byte	0
 7995              	.LLST36:
 7996 05a4 00000000 		.4byte	.LVL75
 7997 05a8 06000000 		.4byte	.LVL78
 7998 05ac 0100     		.2byte	0x1
 7999 05ae 52       		.byte	0x52
 8000 05af 06000000 		.4byte	.LVL78
 8001 05b3 2E000000 		.4byte	.LVL87
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 310


 8002 05b7 0100     		.2byte	0x1
 8003 05b9 56       		.byte	0x56
 8004 05ba 2E000000 		.4byte	.LVL87
 8005 05be 36000000 		.4byte	.LFE91
 8006 05c2 0100     		.2byte	0x1
 8007 05c4 52       		.byte	0x52
 8008 05c5 00000000 		.4byte	0
 8009 05c9 00000000 		.4byte	0
 8010              	.LLST37:
 8011 05cd 00000000 		.4byte	.LVL75
 8012 05d1 04000000 		.4byte	.LVL77
 8013 05d5 0100     		.2byte	0x1
 8014 05d7 53       		.byte	0x53
 8015 05d8 04000000 		.4byte	.LVL77
 8016 05dc 36000000 		.4byte	.LFE91
 8017 05e0 0400     		.2byte	0x4
 8018 05e2 F3       		.byte	0xf3
 8019 05e3 01       		.uleb128 0x1
 8020 05e4 53       		.byte	0x53
 8021 05e5 9F       		.byte	0x9f
 8022 05e6 00000000 		.4byte	0
 8023 05ea 00000000 		.4byte	0
 8024              	.LLST38:
 8025 05ee 0E000000 		.4byte	.LVL81
 8026 05f2 12000000 		.4byte	.LVL82
 8027 05f6 0100     		.2byte	0x1
 8028 05f8 50       		.byte	0x50
 8029 05f9 12000000 		.4byte	.LVL82
 8030 05fd 26000000 		.4byte	.LVL85
 8031 0601 0200     		.2byte	0x2
 8032 0603 75       		.byte	0x75
 8033 0604 7C       		.sleb128 -4
 8034 0605 00000000 		.4byte	0
 8035 0609 00000000 		.4byte	0
 8036              	.LLST39:
 8037 060d 0E000000 		.4byte	.LVL81
 8038 0611 2E000000 		.4byte	.LVL87
 8039 0615 0100     		.2byte	0x1
 8040 0617 57       		.byte	0x57
 8041 0618 00000000 		.4byte	0
 8042 061c 00000000 		.4byte	0
 8043              	.LLST40:
 8044 0620 16000000 		.4byte	.LVL83
 8045 0624 20000000 		.4byte	.LVL84
 8046 0628 0600     		.2byte	0x6
 8047 062a 50       		.byte	0x50
 8048 062b 93       		.byte	0x93
 8049 062c 04       		.uleb128 0x4
 8050 062d 51       		.byte	0x51
 8051 062e 93       		.byte	0x93
 8052 062f 04       		.uleb128 0x4
 8053 0630 00000000 		.4byte	0
 8054 0634 00000000 		.4byte	0
 8055              	.LLST41:
 8056 0638 00000000 		.4byte	.LVL88
 8057 063c 08000000 		.4byte	.LVL92
 8058 0640 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 311


 8059 0642 50       		.byte	0x50
 8060 0643 08000000 		.4byte	.LVL92
 8061 0647 22000000 		.4byte	.LVL99
 8062 064b 0100     		.2byte	0x1
 8063 064d 55       		.byte	0x55
 8064 064e 22000000 		.4byte	.LVL99
 8065 0652 2A000000 		.4byte	.LFE92
 8066 0656 0100     		.2byte	0x1
 8067 0658 50       		.byte	0x50
 8068 0659 00000000 		.4byte	0
 8069 065d 00000000 		.4byte	0
 8070              	.LLST42:
 8071 0661 00000000 		.4byte	.LVL88
 8072 0665 0A000000 		.4byte	.LVL93
 8073 0669 0100     		.2byte	0x1
 8074 066b 51       		.byte	0x51
 8075 066c 0A000000 		.4byte	.LVL93
 8076 0670 22000000 		.4byte	.LVL99
 8077 0674 0100     		.2byte	0x1
 8078 0676 56       		.byte	0x56
 8079 0677 22000000 		.4byte	.LVL99
 8080 067b 2A000000 		.4byte	.LFE92
 8081 067f 0100     		.2byte	0x1
 8082 0681 51       		.byte	0x51
 8083 0682 00000000 		.4byte	0
 8084 0686 00000000 		.4byte	0
 8085              	.LLST43:
 8086 068a 00000000 		.4byte	.LVL88
 8087 068e 06000000 		.4byte	.LVL91
 8088 0692 0100     		.2byte	0x1
 8089 0694 52       		.byte	0x52
 8090 0695 06000000 		.4byte	.LVL91
 8091 0699 22000000 		.4byte	.LVL99
 8092 069d 0100     		.2byte	0x1
 8093 069f 57       		.byte	0x57
 8094 06a0 22000000 		.4byte	.LVL99
 8095 06a4 2A000000 		.4byte	.LFE92
 8096 06a8 0100     		.2byte	0x1
 8097 06aa 52       		.byte	0x52
 8098 06ab 00000000 		.4byte	0
 8099 06af 00000000 		.4byte	0
 8100              	.LLST44:
 8101 06b3 00000000 		.4byte	.LVL88
 8102 06b7 04000000 		.4byte	.LVL90
 8103 06bb 0100     		.2byte	0x1
 8104 06bd 53       		.byte	0x53
 8105 06be 04000000 		.4byte	.LVL90
 8106 06c2 2A000000 		.4byte	.LFE92
 8107 06c6 0400     		.2byte	0x4
 8108 06c8 F3       		.byte	0xf3
 8109 06c9 01       		.uleb128 0x1
 8110 06ca 53       		.byte	0x53
 8111 06cb 9F       		.byte	0x9f
 8112 06cc 00000000 		.4byte	0
 8113 06d0 00000000 		.4byte	0
 8114              	.LLST45:
 8115 06d4 18000000 		.4byte	.LVL95
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 312


 8116 06d8 20000000 		.4byte	.LVL98
 8117 06dc 0100     		.2byte	0x1
 8118 06de 51       		.byte	0x51
 8119 06df 00000000 		.4byte	0
 8120 06e3 00000000 		.4byte	0
 8121              	.LLST46:
 8122 06e7 14000000 		.4byte	.LVL94
 8123 06eb 18000000 		.4byte	.LVL95
 8124 06ef 0100     		.2byte	0x1
 8125 06f1 51       		.byte	0x51
 8126 06f2 18000000 		.4byte	.LVL95
 8127 06f6 1A000000 		.4byte	.LVL96
 8128 06fa 0C00     		.2byte	0xc
 8129 06fc 76       		.byte	0x76
 8130 06fd 7F       		.sleb128 -1
 8131 06fe 94       		.byte	0x94
 8132 06ff 01       		.byte	0x1
 8133 0700 48       		.byte	0x48
 8134 0701 24       		.byte	0x24
 8135 0702 48       		.byte	0x48
 8136 0703 26       		.byte	0x26
 8137 0704 70       		.byte	0x70
 8138 0705 00       		.sleb128 0
 8139 0706 22       		.byte	0x22
 8140 0707 9F       		.byte	0x9f
 8141 0708 00000000 		.4byte	0
 8142 070c 00000000 		.4byte	0
 8143              	.LLST47:
 8144 0710 00000000 		.4byte	.LVL100
 8145 0714 04000000 		.4byte	.LVL102
 8146 0718 0100     		.2byte	0x1
 8147 071a 50       		.byte	0x50
 8148 071b 04000000 		.4byte	.LVL102
 8149 071f 14000000 		.4byte	.LVL107
 8150 0723 0300     		.2byte	0x3
 8151 0725 70       		.byte	0x70
 8152 0726 02       		.sleb128 2
 8153 0727 9F       		.byte	0x9f
 8154 0728 14000000 		.4byte	.LVL107
 8155 072c 1C000000 		.4byte	.LFE93
 8156 0730 0100     		.2byte	0x1
 8157 0732 50       		.byte	0x50
 8158 0733 00000000 		.4byte	0
 8159 0737 00000000 		.4byte	0
 8160              	.LLST48:
 8161 073b 00000000 		.4byte	.LVL100
 8162 073f 06000000 		.4byte	.LVL103
 8163 0743 0100     		.2byte	0x1
 8164 0745 51       		.byte	0x51
 8165 0746 06000000 		.4byte	.LVL103
 8166 074a 12000000 		.4byte	.LVL106
 8167 074e 0300     		.2byte	0x3
 8168 0750 71       		.byte	0x71
 8169 0751 02       		.sleb128 2
 8170 0752 9F       		.byte	0x9f
 8171 0753 12000000 		.4byte	.LVL106
 8172 0757 1C000000 		.4byte	.LFE93
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 313


 8173 075b 0100     		.2byte	0x1
 8174 075d 51       		.byte	0x51
 8175 075e 00000000 		.4byte	0
 8176 0762 00000000 		.4byte	0
 8177              	.LLST49:
 8178 0766 00000000 		.4byte	.LVL100
 8179 076a 04000000 		.4byte	.LVL102
 8180 076e 0100     		.2byte	0x1
 8181 0770 52       		.byte	0x52
 8182 0771 04000000 		.4byte	.LVL102
 8183 0775 10000000 		.4byte	.LVL105
 8184 0779 0300     		.2byte	0x3
 8185 077b 72       		.byte	0x72
 8186 077c 02       		.sleb128 2
 8187 077d 9F       		.byte	0x9f
 8188 077e 10000000 		.4byte	.LVL105
 8189 0782 1C000000 		.4byte	.LFE93
 8190 0786 0100     		.2byte	0x1
 8191 0788 52       		.byte	0x52
 8192 0789 00000000 		.4byte	0
 8193 078d 00000000 		.4byte	0
 8194              	.LLST50:
 8195 0791 00000000 		.4byte	.LVL100
 8196 0795 04000000 		.4byte	.LVL102
 8197 0799 0100     		.2byte	0x1
 8198 079b 53       		.byte	0x53
 8199 079c 04000000 		.4byte	.LVL102
 8200 07a0 1C000000 		.4byte	.LFE93
 8201 07a4 0400     		.2byte	0x4
 8202 07a6 F3       		.byte	0xf3
 8203 07a7 01       		.uleb128 0x1
 8204 07a8 53       		.byte	0x53
 8205 07a9 9F       		.byte	0x9f
 8206 07aa 00000000 		.4byte	0
 8207 07ae 00000000 		.4byte	0
 8208              	.LLST51:
 8209 07b2 00000000 		.4byte	.LVL108
 8210 07b6 04000000 		.4byte	.LVL110
 8211 07ba 0100     		.2byte	0x1
 8212 07bc 50       		.byte	0x50
 8213 07bd 04000000 		.4byte	.LVL110
 8214 07c1 14000000 		.4byte	.LVL115
 8215 07c5 0300     		.2byte	0x3
 8216 07c7 70       		.byte	0x70
 8217 07c8 04       		.sleb128 4
 8218 07c9 9F       		.byte	0x9f
 8219 07ca 14000000 		.4byte	.LVL115
 8220 07ce 1C000000 		.4byte	.LFE94
 8221 07d2 0100     		.2byte	0x1
 8222 07d4 50       		.byte	0x50
 8223 07d5 00000000 		.4byte	0
 8224 07d9 00000000 		.4byte	0
 8225              	.LLST52:
 8226 07dd 00000000 		.4byte	.LVL108
 8227 07e1 06000000 		.4byte	.LVL111
 8228 07e5 0100     		.2byte	0x1
 8229 07e7 51       		.byte	0x51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 314


 8230 07e8 06000000 		.4byte	.LVL111
 8231 07ec 12000000 		.4byte	.LVL114
 8232 07f0 0300     		.2byte	0x3
 8233 07f2 71       		.byte	0x71
 8234 07f3 04       		.sleb128 4
 8235 07f4 9F       		.byte	0x9f
 8236 07f5 12000000 		.4byte	.LVL114
 8237 07f9 1C000000 		.4byte	.LFE94
 8238 07fd 0100     		.2byte	0x1
 8239 07ff 51       		.byte	0x51
 8240 0800 00000000 		.4byte	0
 8241 0804 00000000 		.4byte	0
 8242              	.LLST53:
 8243 0808 00000000 		.4byte	.LVL108
 8244 080c 04000000 		.4byte	.LVL110
 8245 0810 0100     		.2byte	0x1
 8246 0812 52       		.byte	0x52
 8247 0813 04000000 		.4byte	.LVL110
 8248 0817 10000000 		.4byte	.LVL113
 8249 081b 0300     		.2byte	0x3
 8250 081d 72       		.byte	0x72
 8251 081e 04       		.sleb128 4
 8252 081f 9F       		.byte	0x9f
 8253 0820 10000000 		.4byte	.LVL113
 8254 0824 1C000000 		.4byte	.LFE94
 8255 0828 0100     		.2byte	0x1
 8256 082a 52       		.byte	0x52
 8257 082b 00000000 		.4byte	0
 8258 082f 00000000 		.4byte	0
 8259              	.LLST54:
 8260 0833 00000000 		.4byte	.LVL108
 8261 0837 04000000 		.4byte	.LVL110
 8262 083b 0100     		.2byte	0x1
 8263 083d 53       		.byte	0x53
 8264 083e 04000000 		.4byte	.LVL110
 8265 0842 1C000000 		.4byte	.LFE94
 8266 0846 0400     		.2byte	0x4
 8267 0848 F3       		.byte	0xf3
 8268 0849 01       		.uleb128 0x1
 8269 084a 53       		.byte	0x53
 8270 084b 9F       		.byte	0x9f
 8271 084c 00000000 		.4byte	0
 8272 0850 00000000 		.4byte	0
 8273              	.LLST55:
 8274 0854 00000000 		.4byte	.LVL116
 8275 0858 04000000 		.4byte	.LVL118
 8276 085c 0100     		.2byte	0x1
 8277 085e 50       		.byte	0x50
 8278 085f 04000000 		.4byte	.LVL118
 8279 0863 14000000 		.4byte	.LVL123
 8280 0867 0300     		.2byte	0x3
 8281 0869 70       		.byte	0x70
 8282 086a 01       		.sleb128 1
 8283 086b 9F       		.byte	0x9f
 8284 086c 14000000 		.4byte	.LVL123
 8285 0870 1C000000 		.4byte	.LFE95
 8286 0874 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 315


 8287 0876 50       		.byte	0x50
 8288 0877 00000000 		.4byte	0
 8289 087b 00000000 		.4byte	0
 8290              	.LLST56:
 8291 087f 00000000 		.4byte	.LVL116
 8292 0883 06000000 		.4byte	.LVL119
 8293 0887 0100     		.2byte	0x1
 8294 0889 51       		.byte	0x51
 8295 088a 06000000 		.4byte	.LVL119
 8296 088e 12000000 		.4byte	.LVL122
 8297 0892 0300     		.2byte	0x3
 8298 0894 71       		.byte	0x71
 8299 0895 01       		.sleb128 1
 8300 0896 9F       		.byte	0x9f
 8301 0897 12000000 		.4byte	.LVL122
 8302 089b 1C000000 		.4byte	.LFE95
 8303 089f 0100     		.2byte	0x1
 8304 08a1 51       		.byte	0x51
 8305 08a2 00000000 		.4byte	0
 8306 08a6 00000000 		.4byte	0
 8307              	.LLST57:
 8308 08aa 00000000 		.4byte	.LVL116
 8309 08ae 04000000 		.4byte	.LVL118
 8310 08b2 0100     		.2byte	0x1
 8311 08b4 52       		.byte	0x52
 8312 08b5 04000000 		.4byte	.LVL118
 8313 08b9 10000000 		.4byte	.LVL121
 8314 08bd 0300     		.2byte	0x3
 8315 08bf 72       		.byte	0x72
 8316 08c0 01       		.sleb128 1
 8317 08c1 9F       		.byte	0x9f
 8318 08c2 10000000 		.4byte	.LVL121
 8319 08c6 1C000000 		.4byte	.LFE95
 8320 08ca 0100     		.2byte	0x1
 8321 08cc 52       		.byte	0x52
 8322 08cd 00000000 		.4byte	0
 8323 08d1 00000000 		.4byte	0
 8324              	.LLST58:
 8325 08d5 00000000 		.4byte	.LVL116
 8326 08d9 04000000 		.4byte	.LVL118
 8327 08dd 0100     		.2byte	0x1
 8328 08df 53       		.byte	0x53
 8329 08e0 04000000 		.4byte	.LVL118
 8330 08e4 1C000000 		.4byte	.LFE95
 8331 08e8 0400     		.2byte	0x4
 8332 08ea F3       		.byte	0xf3
 8333 08eb 01       		.uleb128 0x1
 8334 08ec 53       		.byte	0x53
 8335 08ed 9F       		.byte	0x9f
 8336 08ee 00000000 		.4byte	0
 8337 08f2 00000000 		.4byte	0
 8338              	.LLST59:
 8339 08f6 00000000 		.4byte	.LVL124
 8340 08fa 0E000000 		.4byte	.LVL127
 8341 08fe 0100     		.2byte	0x1
 8342 0900 50       		.byte	0x50
 8343 0901 0E000000 		.4byte	.LVL127
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 316


 8344 0905 28000000 		.4byte	.LVL133
 8345 0909 0100     		.2byte	0x1
 8346 090b 56       		.byte	0x56
 8347 090c 28000000 		.4byte	.LVL133
 8348 0910 34000000 		.4byte	.LFE96
 8349 0914 0100     		.2byte	0x1
 8350 0916 50       		.byte	0x50
 8351 0917 00000000 		.4byte	0
 8352 091b 00000000 		.4byte	0
 8353              	.LLST60:
 8354 091f 00000000 		.4byte	.LVL124
 8355 0923 10000000 		.4byte	.LVL128
 8356 0927 0100     		.2byte	0x1
 8357 0929 51       		.byte	0x51
 8358 092a 10000000 		.4byte	.LVL128
 8359 092e 28000000 		.4byte	.LVL133
 8360 0932 0100     		.2byte	0x1
 8361 0934 57       		.byte	0x57
 8362 0935 28000000 		.4byte	.LVL133
 8363 0939 34000000 		.4byte	.LFE96
 8364 093d 0100     		.2byte	0x1
 8365 093f 51       		.byte	0x51
 8366 0940 00000000 		.4byte	0
 8367 0944 00000000 		.4byte	0
 8368              	.LLST61:
 8369 0948 00000000 		.4byte	.LVL124
 8370 094c 0C000000 		.4byte	.LVL126
 8371 0950 0100     		.2byte	0x1
 8372 0952 52       		.byte	0x52
 8373 0953 0C000000 		.4byte	.LVL126
 8374 0957 34000000 		.4byte	.LFE96
 8375 095b 0400     		.2byte	0x4
 8376 095d F3       		.byte	0xf3
 8377 095e 01       		.uleb128 0x1
 8378 095f 52       		.byte	0x52
 8379 0960 9F       		.byte	0x9f
 8380 0961 00000000 		.4byte	0
 8381 0965 00000000 		.4byte	0
 8382              	.LLST62:
 8383 0969 00000000 		.4byte	.LVL124
 8384 096d 0C000000 		.4byte	.LVL126
 8385 0971 0100     		.2byte	0x1
 8386 0973 53       		.byte	0x53
 8387 0974 0C000000 		.4byte	.LVL126
 8388 0978 34000000 		.4byte	.LFE96
 8389 097c 0100     		.2byte	0x1
 8390 097e 58       		.byte	0x58
 8391 097f 00000000 		.4byte	0
 8392 0983 00000000 		.4byte	0
 8393              	.LLST63:
 8394 0987 08000000 		.4byte	.LVL125
 8395 098b 0C000000 		.4byte	.LVL126
 8396 098f 0100     		.2byte	0x1
 8397 0991 52       		.byte	0x52
 8398 0992 0C000000 		.4byte	.LVL126
 8399 0996 34000000 		.4byte	.LFE96
 8400 099a 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 317


 8401 099c 54       		.byte	0x54
 8402 099d 00000000 		.4byte	0
 8403 09a1 00000000 		.4byte	0
 8404              	.LLST64:
 8405 09a5 08000000 		.4byte	.LVL125
 8406 09a9 0C000000 		.4byte	.LVL126
 8407 09ad 0600     		.2byte	0x6
 8408 09af 9E       		.byte	0x9e
 8409 09b0 04       		.uleb128 0x4
 8410 09b1 00000000 		.4byte	0
 8411 09b5 0C000000 		.4byte	.LVL126
 8412 09b9 22000000 		.4byte	.LVL131
 8413 09bd 0100     		.2byte	0x1
 8414 09bf 55       		.byte	0x55
 8415 09c0 22000000 		.4byte	.LVL131
 8416 09c4 28000000 		.4byte	.LVL133
 8417 09c8 0100     		.2byte	0x1
 8418 09ca 50       		.byte	0x50
 8419 09cb 28000000 		.4byte	.LVL133
 8420 09cf 34000000 		.4byte	.LFE96
 8421 09d3 0100     		.2byte	0x1
 8422 09d5 55       		.byte	0x55
 8423 09d6 00000000 		.4byte	0
 8424 09da 00000000 		.4byte	0
 8425              	.LLST65:
 8426 09de 00000000 		.4byte	.LVL134
 8427 09e2 14000000 		.4byte	.LVL137
 8428 09e6 0100     		.2byte	0x1
 8429 09e8 50       		.byte	0x50
 8430 09e9 14000000 		.4byte	.LVL137
 8431 09ed 38000000 		.4byte	.LVL144
 8432 09f1 0100     		.2byte	0x1
 8433 09f3 58       		.byte	0x58
 8434 09f4 38000000 		.4byte	.LVL144
 8435 09f8 44000000 		.4byte	.LFE97
 8436 09fc 0100     		.2byte	0x1
 8437 09fe 50       		.byte	0x50
 8438 09ff 00000000 		.4byte	0
 8439 0a03 00000000 		.4byte	0
 8440              	.LLST66:
 8441 0a07 00000000 		.4byte	.LVL134
 8442 0a0b 10000000 		.4byte	.LVL136
 8443 0a0f 0100     		.2byte	0x1
 8444 0a11 51       		.byte	0x51
 8445 0a12 10000000 		.4byte	.LVL136
 8446 0a16 18000000 		.4byte	.LVL138
 8447 0a1a 0100     		.2byte	0x1
 8448 0a1c 55       		.byte	0x55
 8449 0a1d 18000000 		.4byte	.LVL138
 8450 0a21 38000000 		.4byte	.LVL144
 8451 0a25 0100     		.2byte	0x1
 8452 0a27 59       		.byte	0x59
 8453 0a28 38000000 		.4byte	.LVL144
 8454 0a2c 44000000 		.4byte	.LFE97
 8455 0a30 0100     		.2byte	0x1
 8456 0a32 55       		.byte	0x55
 8457 0a33 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 318


 8458 0a37 00000000 		.4byte	0
 8459              	.LLST67:
 8460 0a3b 00000000 		.4byte	.LVL134
 8461 0a3f 10000000 		.4byte	.LVL136
 8462 0a43 0100     		.2byte	0x1
 8463 0a45 52       		.byte	0x52
 8464 0a46 10000000 		.4byte	.LVL136
 8465 0a4a 44000000 		.4byte	.LFE97
 8466 0a4e 0400     		.2byte	0x4
 8467 0a50 F3       		.byte	0xf3
 8468 0a51 01       		.uleb128 0x1
 8469 0a52 52       		.byte	0x52
 8470 0a53 9F       		.byte	0x9f
 8471 0a54 00000000 		.4byte	0
 8472 0a58 00000000 		.4byte	0
 8473              	.LLST68:
 8474 0a5c 00000000 		.4byte	.LVL134
 8475 0a60 10000000 		.4byte	.LVL136
 8476 0a64 0100     		.2byte	0x1
 8477 0a66 53       		.byte	0x53
 8478 0a67 10000000 		.4byte	.LVL136
 8479 0a6b 44000000 		.4byte	.LFE97
 8480 0a6f 0100     		.2byte	0x1
 8481 0a71 5A       		.byte	0x5a
 8482 0a72 00000000 		.4byte	0
 8483 0a76 00000000 		.4byte	0
 8484              	.LLST69:
 8485 0a7a 0A000000 		.4byte	.LVL135
 8486 0a7e 10000000 		.4byte	.LVL136
 8487 0a82 0100     		.2byte	0x1
 8488 0a84 52       		.byte	0x52
 8489 0a85 10000000 		.4byte	.LVL136
 8490 0a89 44000000 		.4byte	.LFE97
 8491 0a8d 0100     		.2byte	0x1
 8492 0a8f 54       		.byte	0x54
 8493 0a90 00000000 		.4byte	0
 8494 0a94 00000000 		.4byte	0
 8495              	.LLST70:
 8496 0a98 0A000000 		.4byte	.LVL135
 8497 0a9c 10000000 		.4byte	.LVL136
 8498 0aa0 0A00     		.2byte	0xa
 8499 0aa2 9E       		.byte	0x9e
 8500 0aa3 08       		.uleb128 0x8
 8501 0aa4 00000000 		.4byte	0
 8502 0aa8 00000000 		.4byte	0
 8503 0aac 10000000 		.4byte	.LVL136
 8504 0ab0 30000000 		.4byte	.LVL141
 8505 0ab4 0600     		.2byte	0x6
 8506 0ab6 56       		.byte	0x56
 8507 0ab7 93       		.byte	0x93
 8508 0ab8 04       		.uleb128 0x4
 8509 0ab9 57       		.byte	0x57
 8510 0aba 93       		.byte	0x93
 8511 0abb 04       		.uleb128 0x4
 8512 0abc 32000000 		.4byte	.LVL142
 8513 0ac0 44000000 		.4byte	.LFE97
 8514 0ac4 0600     		.2byte	0x6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 319


 8515 0ac6 56       		.byte	0x56
 8516 0ac7 93       		.byte	0x93
 8517 0ac8 04       		.uleb128 0x4
 8518 0ac9 57       		.byte	0x57
 8519 0aca 93       		.byte	0x93
 8520 0acb 04       		.uleb128 0x4
 8521 0acc 00000000 		.4byte	0
 8522 0ad0 00000000 		.4byte	0
 8523              	.LLST71:
 8524 0ad4 00000000 		.4byte	.LVL145
 8525 0ad8 08000000 		.4byte	.LVL147
 8526 0adc 0100     		.2byte	0x1
 8527 0ade 50       		.byte	0x50
 8528 0adf 08000000 		.4byte	.LVL147
 8529 0ae3 20000000 		.4byte	.LVL153
 8530 0ae7 0300     		.2byte	0x3
 8531 0ae9 70       		.byte	0x70
 8532 0aea 02       		.sleb128 2
 8533 0aeb 9F       		.byte	0x9f
 8534 0aec 20000000 		.4byte	.LVL153
 8535 0af0 2C000000 		.4byte	.LFE98
 8536 0af4 0100     		.2byte	0x1
 8537 0af6 50       		.byte	0x50
 8538 0af7 00000000 		.4byte	0
 8539 0afb 00000000 		.4byte	0
 8540              	.LLST72:
 8541 0aff 00000000 		.4byte	.LVL145
 8542 0b03 0C000000 		.4byte	.LVL148
 8543 0b07 0100     		.2byte	0x1
 8544 0b09 51       		.byte	0x51
 8545 0b0a 0C000000 		.4byte	.LVL148
 8546 0b0e 1E000000 		.4byte	.LVL152
 8547 0b12 0300     		.2byte	0x3
 8548 0b14 71       		.byte	0x71
 8549 0b15 02       		.sleb128 2
 8550 0b16 9F       		.byte	0x9f
 8551 0b17 1E000000 		.4byte	.LVL152
 8552 0b1b 2C000000 		.4byte	.LFE98
 8553 0b1f 0100     		.2byte	0x1
 8554 0b21 51       		.byte	0x51
 8555 0b22 00000000 		.4byte	0
 8556 0b26 00000000 		.4byte	0
 8557              	.LLST73:
 8558 0b2a 00000000 		.4byte	.LVL145
 8559 0b2e 08000000 		.4byte	.LVL147
 8560 0b32 0100     		.2byte	0x1
 8561 0b34 52       		.byte	0x52
 8562 0b35 08000000 		.4byte	.LVL147
 8563 0b39 2C000000 		.4byte	.LFE98
 8564 0b3d 0400     		.2byte	0x4
 8565 0b3f F3       		.byte	0xf3
 8566 0b40 01       		.uleb128 0x1
 8567 0b41 52       		.byte	0x52
 8568 0b42 9F       		.byte	0x9f
 8569 0b43 00000000 		.4byte	0
 8570 0b47 00000000 		.4byte	0
 8571              	.LLST74:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 320


 8572 0b4b 02000000 		.4byte	.LVL146
 8573 0b4f 08000000 		.4byte	.LVL147
 8574 0b53 0A00     		.2byte	0xa
 8575 0b55 9E       		.byte	0x9e
 8576 0b56 08       		.uleb128 0x8
 8577 0b57 00000000 		.8byte	0
 8577      00000000 
 8578 0b5f 08000000 		.4byte	.LVL147
 8579 0b63 16000000 		.4byte	.LVL149
 8580 0b67 0600     		.2byte	0x6
 8581 0b69 56       		.byte	0x56
 8582 0b6a 93       		.byte	0x93
 8583 0b6b 04       		.uleb128 0x4
 8584 0b6c 57       		.byte	0x57
 8585 0b6d 93       		.byte	0x93
 8586 0b6e 04       		.uleb128 0x4
 8587 0b6f 1A000000 		.4byte	.LVL150
 8588 0b73 2A000000 		.4byte	.LVL154
 8589 0b77 0600     		.2byte	0x6
 8590 0b79 56       		.byte	0x56
 8591 0b7a 93       		.byte	0x93
 8592 0b7b 04       		.uleb128 0x4
 8593 0b7c 57       		.byte	0x57
 8594 0b7d 93       		.byte	0x93
 8595 0b7e 04       		.uleb128 0x4
 8596 0b7f 2A000000 		.4byte	.LVL154
 8597 0b83 2C000000 		.4byte	.LFE98
 8598 0b87 0200     		.2byte	0x2
 8599 0b89 73       		.byte	0x73
 8600 0b8a 00       		.sleb128 0
 8601 0b8b 00000000 		.4byte	0
 8602 0b8f 00000000 		.4byte	0
 8603              	.LLST75:
 8604 0b93 00000000 		.4byte	.LVL155
 8605 0b97 12000000 		.4byte	.LVL157
 8606 0b9b 0100     		.2byte	0x1
 8607 0b9d 50       		.byte	0x50
 8608 0b9e 12000000 		.4byte	.LVL157
 8609 0ba2 42000000 		.4byte	.LVL163
 8610 0ba6 0300     		.2byte	0x3
 8611 0ba8 70       		.byte	0x70
 8612 0ba9 04       		.sleb128 4
 8613 0baa 9F       		.byte	0x9f
 8614 0bab 42000000 		.4byte	.LVL163
 8615 0baf 50000000 		.4byte	.LFE99
 8616 0bb3 0100     		.2byte	0x1
 8617 0bb5 50       		.byte	0x50
 8618 0bb6 00000000 		.4byte	0
 8619 0bba 00000000 		.4byte	0
 8620              	.LLST76:
 8621 0bbe 00000000 		.4byte	.LVL155
 8622 0bc2 18000000 		.4byte	.LVL158
 8623 0bc6 0100     		.2byte	0x1
 8624 0bc8 51       		.byte	0x51
 8625 0bc9 18000000 		.4byte	.LVL158
 8626 0bcd 40000000 		.4byte	.LVL162
 8627 0bd1 0300     		.2byte	0x3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 321


 8628 0bd3 71       		.byte	0x71
 8629 0bd4 04       		.sleb128 4
 8630 0bd5 9F       		.byte	0x9f
 8631 0bd6 40000000 		.4byte	.LVL162
 8632 0bda 50000000 		.4byte	.LFE99
 8633 0bde 0100     		.2byte	0x1
 8634 0be0 51       		.byte	0x51
 8635 0be1 00000000 		.4byte	0
 8636 0be5 00000000 		.4byte	0
 8637              	.LLST77:
 8638 0be9 00000000 		.4byte	.LVL155
 8639 0bed 12000000 		.4byte	.LVL157
 8640 0bf1 0100     		.2byte	0x1
 8641 0bf3 53       		.byte	0x53
 8642 0bf4 12000000 		.4byte	.LVL157
 8643 0bf8 50000000 		.4byte	.LFE99
 8644 0bfc 0100     		.2byte	0x1
 8645 0bfe 5C       		.byte	0x5c
 8646 0bff 00000000 		.4byte	0
 8647 0c03 00000000 		.4byte	0
 8648              	.LLST78:
 8649 0c07 08000000 		.4byte	.LVL156
 8650 0c0b 12000000 		.4byte	.LVL157
 8651 0c0f 0100     		.2byte	0x1
 8652 0c11 52       		.byte	0x52
 8653 0c12 12000000 		.4byte	.LVL157
 8654 0c16 50000000 		.4byte	.LFE99
 8655 0c1a 0100     		.2byte	0x1
 8656 0c1c 5E       		.byte	0x5e
 8657 0c1d 00000000 		.4byte	0
 8658 0c21 00000000 		.4byte	0
 8659              	.LLST79:
 8660 0c25 08000000 		.4byte	.LVL156
 8661 0c29 12000000 		.4byte	.LVL157
 8662 0c2d 0A00     		.2byte	0xa
 8663 0c2f 9E       		.byte	0x9e
 8664 0c30 08       		.uleb128 0x8
 8665 0c31 00000000 		.8byte	0
 8665      00000000 
 8666 0c39 12000000 		.4byte	.LVL157
 8667 0c3d 36000000 		.4byte	.LVL159
 8668 0c41 0600     		.2byte	0x6
 8669 0c43 58       		.byte	0x58
 8670 0c44 93       		.byte	0x93
 8671 0c45 04       		.uleb128 0x4
 8672 0c46 59       		.byte	0x59
 8673 0c47 93       		.byte	0x93
 8674 0c48 04       		.uleb128 0x4
 8675 0c49 3A000000 		.4byte	.LVL160
 8676 0c4d 50000000 		.4byte	.LFE99
 8677 0c51 0600     		.2byte	0x6
 8678 0c53 58       		.byte	0x58
 8679 0c54 93       		.byte	0x93
 8680 0c55 04       		.uleb128 0x4
 8681 0c56 59       		.byte	0x59
 8682 0c57 93       		.byte	0x93
 8683 0c58 04       		.uleb128 0x4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 322


 8684 0c59 00000000 		.4byte	0
 8685 0c5d 00000000 		.4byte	0
 8686              	.LLST80:
 8687 0c61 00000000 		.4byte	.LVL164
 8688 0c65 06000000 		.4byte	.LVL166
 8689 0c69 0100     		.2byte	0x1
 8690 0c6b 50       		.byte	0x50
 8691 0c6c 06000000 		.4byte	.LVL166
 8692 0c70 18000000 		.4byte	.LVL171
 8693 0c74 0300     		.2byte	0x3
 8694 0c76 70       		.byte	0x70
 8695 0c77 01       		.sleb128 1
 8696 0c78 9F       		.byte	0x9f
 8697 0c79 18000000 		.4byte	.LVL171
 8698 0c7d 22000000 		.4byte	.LFE100
 8699 0c81 0100     		.2byte	0x1
 8700 0c83 50       		.byte	0x50
 8701 0c84 00000000 		.4byte	0
 8702 0c88 00000000 		.4byte	0
 8703              	.LLST81:
 8704 0c8c 00000000 		.4byte	.LVL164
 8705 0c90 0A000000 		.4byte	.LVL167
 8706 0c94 0100     		.2byte	0x1
 8707 0c96 51       		.byte	0x51
 8708 0c97 0A000000 		.4byte	.LVL167
 8709 0c9b 16000000 		.4byte	.LVL170
 8710 0c9f 0300     		.2byte	0x3
 8711 0ca1 71       		.byte	0x71
 8712 0ca2 01       		.sleb128 1
 8713 0ca3 9F       		.byte	0x9f
 8714 0ca4 16000000 		.4byte	.LVL170
 8715 0ca8 22000000 		.4byte	.LFE100
 8716 0cac 0100     		.2byte	0x1
 8717 0cae 51       		.byte	0x51
 8718 0caf 00000000 		.4byte	0
 8719 0cb3 00000000 		.4byte	0
 8720              	.LLST82:
 8721 0cb7 00000000 		.4byte	.LVL164
 8722 0cbb 06000000 		.4byte	.LVL166
 8723 0cbf 0100     		.2byte	0x1
 8724 0cc1 52       		.byte	0x52
 8725 0cc2 06000000 		.4byte	.LVL166
 8726 0cc6 22000000 		.4byte	.LFE100
 8727 0cca 0400     		.2byte	0x4
 8728 0ccc F3       		.byte	0xf3
 8729 0ccd 01       		.uleb128 0x1
 8730 0cce 52       		.byte	0x52
 8731 0ccf 9F       		.byte	0x9f
 8732 0cd0 00000000 		.4byte	0
 8733 0cd4 00000000 		.4byte	0
 8734              	.LLST83:
 8735 0cd8 02000000 		.4byte	.LVL165
 8736 0cdc 06000000 		.4byte	.LVL166
 8737 0ce0 0200     		.2byte	0x2
 8738 0ce2 30       		.byte	0x30
 8739 0ce3 9F       		.byte	0x9f
 8740 0ce4 06000000 		.4byte	.LVL166
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 323


 8741 0ce8 20000000 		.4byte	.LVL172
 8742 0cec 0100     		.2byte	0x1
 8743 0cee 54       		.byte	0x54
 8744 0cef 20000000 		.4byte	.LVL172
 8745 0cf3 22000000 		.4byte	.LFE100
 8746 0cf7 0200     		.2byte	0x2
 8747 0cf9 73       		.byte	0x73
 8748 0cfa 00       		.sleb128 0
 8749 0cfb 00000000 		.4byte	0
 8750 0cff 00000000 		.4byte	0
 8751              	.LLST84:
 8752 0d03 00000000 		.4byte	.LVL173
 8753 0d07 10000000 		.4byte	.LVL177
 8754 0d0b 0100     		.2byte	0x1
 8755 0d0d 50       		.byte	0x50
 8756 0d0e 10000000 		.4byte	.LVL177
 8757 0d12 24000000 		.4byte	.LVL181
 8758 0d16 0100     		.2byte	0x1
 8759 0d18 56       		.byte	0x56
 8760 0d19 24000000 		.4byte	.LVL181
 8761 0d1d 2C000000 		.4byte	.LFE101
 8762 0d21 0100     		.2byte	0x1
 8763 0d23 50       		.byte	0x50
 8764 0d24 00000000 		.4byte	0
 8765 0d28 00000000 		.4byte	0
 8766              	.LLST85:
 8767 0d2c 00000000 		.4byte	.LVL173
 8768 0d30 12000000 		.4byte	.LVL178
 8769 0d34 0100     		.2byte	0x1
 8770 0d36 51       		.byte	0x51
 8771 0d37 12000000 		.4byte	.LVL178
 8772 0d3b 24000000 		.4byte	.LVL181
 8773 0d3f 0100     		.2byte	0x1
 8774 0d41 57       		.byte	0x57
 8775 0d42 24000000 		.4byte	.LVL181
 8776 0d46 2C000000 		.4byte	.LFE101
 8777 0d4a 0100     		.2byte	0x1
 8778 0d4c 51       		.byte	0x51
 8779 0d4d 00000000 		.4byte	0
 8780 0d51 00000000 		.4byte	0
 8781              	.LLST86:
 8782 0d55 00000000 		.4byte	.LVL173
 8783 0d59 0A000000 		.4byte	.LVL175
 8784 0d5d 0100     		.2byte	0x1
 8785 0d5f 52       		.byte	0x52
 8786 0d60 0A000000 		.4byte	.LVL175
 8787 0d64 0E000000 		.4byte	.LVL176
 8788 0d68 0100     		.2byte	0x1
 8789 0d6a 55       		.byte	0x55
 8790 0d6b 0E000000 		.4byte	.LVL176
 8791 0d6f 24000000 		.4byte	.LVL181
 8792 0d73 0100     		.2byte	0x1
 8793 0d75 58       		.byte	0x58
 8794 0d76 24000000 		.4byte	.LVL181
 8795 0d7a 2C000000 		.4byte	.LFE101
 8796 0d7e 0100     		.2byte	0x1
 8797 0d80 55       		.byte	0x55
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 324


 8798 0d81 00000000 		.4byte	0
 8799 0d85 00000000 		.4byte	0
 8800              	.LLST87:
 8801 0d89 00000000 		.4byte	.LVL173
 8802 0d8d 0A000000 		.4byte	.LVL175
 8803 0d91 0100     		.2byte	0x1
 8804 0d93 53       		.byte	0x53
 8805 0d94 0A000000 		.4byte	.LVL175
 8806 0d98 2C000000 		.4byte	.LFE101
 8807 0d9c 0400     		.2byte	0x4
 8808 0d9e F3       		.byte	0xf3
 8809 0d9f 01       		.uleb128 0x1
 8810 0da0 53       		.byte	0x53
 8811 0da1 9F       		.byte	0x9f
 8812 0da2 00000000 		.4byte	0
 8813 0da6 00000000 		.4byte	0
 8814              	.LLST88:
 8815 0daa 08000000 		.4byte	.LVL174
 8816 0dae 0A000000 		.4byte	.LVL175
 8817 0db2 0100     		.2byte	0x1
 8818 0db4 53       		.byte	0x53
 8819 0db5 0A000000 		.4byte	.LVL175
 8820 0db9 2C000000 		.4byte	.LFE101
 8821 0dbd 0100     		.2byte	0x1
 8822 0dbf 54       		.byte	0x54
 8823 0dc0 00000000 		.4byte	0
 8824 0dc4 00000000 		.4byte	0
 8825              	.LLST89:
 8826 0dc8 00000000 		.4byte	.LVL182
 8827 0dcc 14000000 		.4byte	.LVL186
 8828 0dd0 0100     		.2byte	0x1
 8829 0dd2 50       		.byte	0x50
 8830 0dd3 14000000 		.4byte	.LVL186
 8831 0dd7 2E000000 		.4byte	.LVL190
 8832 0ddb 0100     		.2byte	0x1
 8833 0ddd 57       		.byte	0x57
 8834 0dde 2E000000 		.4byte	.LVL190
 8835 0de2 36000000 		.4byte	.LFE102
 8836 0de6 0100     		.2byte	0x1
 8837 0de8 50       		.byte	0x50
 8838 0de9 00000000 		.4byte	0
 8839 0ded 00000000 		.4byte	0
 8840              	.LLST90:
 8841 0df1 00000000 		.4byte	.LVL182
 8842 0df5 0C000000 		.4byte	.LVL184
 8843 0df9 0100     		.2byte	0x1
 8844 0dfb 51       		.byte	0x51
 8845 0dfc 0C000000 		.4byte	.LVL184
 8846 0e00 18000000 		.4byte	.LVL187
 8847 0e04 0100     		.2byte	0x1
 8848 0e06 56       		.byte	0x56
 8849 0e07 18000000 		.4byte	.LVL187
 8850 0e0b 2E000000 		.4byte	.LVL190
 8851 0e0f 0100     		.2byte	0x1
 8852 0e11 58       		.byte	0x58
 8853 0e12 2E000000 		.4byte	.LVL190
 8854 0e16 36000000 		.4byte	.LFE102
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 325


 8855 0e1a 0100     		.2byte	0x1
 8856 0e1c 56       		.byte	0x56
 8857 0e1d 00000000 		.4byte	0
 8858 0e21 00000000 		.4byte	0
 8859              	.LLST91:
 8860 0e25 00000000 		.4byte	.LVL182
 8861 0e29 0C000000 		.4byte	.LVL184
 8862 0e2d 0100     		.2byte	0x1
 8863 0e2f 52       		.byte	0x52
 8864 0e30 0C000000 		.4byte	.LVL184
 8865 0e34 10000000 		.4byte	.LVL185
 8866 0e38 0100     		.2byte	0x1
 8867 0e3a 55       		.byte	0x55
 8868 0e3b 10000000 		.4byte	.LVL185
 8869 0e3f 2E000000 		.4byte	.LVL190
 8870 0e43 0100     		.2byte	0x1
 8871 0e45 59       		.byte	0x59
 8872 0e46 2E000000 		.4byte	.LVL190
 8873 0e4a 36000000 		.4byte	.LFE102
 8874 0e4e 0100     		.2byte	0x1
 8875 0e50 55       		.byte	0x55
 8876 0e51 00000000 		.4byte	0
 8877 0e55 00000000 		.4byte	0
 8878              	.LLST92:
 8879 0e59 00000000 		.4byte	.LVL182
 8880 0e5d 0C000000 		.4byte	.LVL184
 8881 0e61 0100     		.2byte	0x1
 8882 0e63 53       		.byte	0x53
 8883 0e64 0C000000 		.4byte	.LVL184
 8884 0e68 36000000 		.4byte	.LFE102
 8885 0e6c 0400     		.2byte	0x4
 8886 0e6e F3       		.byte	0xf3
 8887 0e6f 01       		.uleb128 0x1
 8888 0e70 53       		.byte	0x53
 8889 0e71 9F       		.byte	0x9f
 8890 0e72 00000000 		.4byte	0
 8891 0e76 00000000 		.4byte	0
 8892              	.LLST93:
 8893 0e7a 0A000000 		.4byte	.LVL183
 8894 0e7e 0C000000 		.4byte	.LVL184
 8895 0e82 0100     		.2byte	0x1
 8896 0e84 53       		.byte	0x53
 8897 0e85 0C000000 		.4byte	.LVL184
 8898 0e89 36000000 		.4byte	.LFE102
 8899 0e8d 0100     		.2byte	0x1
 8900 0e8f 54       		.byte	0x54
 8901 0e90 00000000 		.4byte	0
 8902 0e94 00000000 		.4byte	0
 8903              	.LLST94:
 8904 0e98 00000000 		.4byte	.LVL191
 8905 0e9c 08000000 		.4byte	.LVL195
 8906 0ea0 0100     		.2byte	0x1
 8907 0ea2 50       		.byte	0x50
 8908 0ea3 08000000 		.4byte	.LVL195
 8909 0ea7 26000000 		.4byte	.LVL202
 8910 0eab 0100     		.2byte	0x1
 8911 0ead 55       		.byte	0x55
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 326


 8912 0eae 26000000 		.4byte	.LVL202
 8913 0eb2 2E000000 		.4byte	.LFE103
 8914 0eb6 0100     		.2byte	0x1
 8915 0eb8 50       		.byte	0x50
 8916 0eb9 00000000 		.4byte	0
 8917 0ebd 00000000 		.4byte	0
 8918              	.LLST95:
 8919 0ec1 00000000 		.4byte	.LVL191
 8920 0ec5 0E000000 		.4byte	.LVL196
 8921 0ec9 0100     		.2byte	0x1
 8922 0ecb 51       		.byte	0x51
 8923 0ecc 0E000000 		.4byte	.LVL196
 8924 0ed0 26000000 		.4byte	.LVL202
 8925 0ed4 0100     		.2byte	0x1
 8926 0ed6 50       		.byte	0x50
 8927 0ed7 26000000 		.4byte	.LVL202
 8928 0edb 2E000000 		.4byte	.LFE103
 8929 0edf 0100     		.2byte	0x1
 8930 0ee1 51       		.byte	0x51
 8931 0ee2 00000000 		.4byte	0
 8932 0ee6 00000000 		.4byte	0
 8933              	.LLST96:
 8934 0eea 00000000 		.4byte	.LVL191
 8935 0eee 06000000 		.4byte	.LVL194
 8936 0ef2 0100     		.2byte	0x1
 8937 0ef4 52       		.byte	0x52
 8938 0ef5 06000000 		.4byte	.LVL194
 8939 0ef9 26000000 		.4byte	.LVL202
 8940 0efd 0100     		.2byte	0x1
 8941 0eff 56       		.byte	0x56
 8942 0f00 26000000 		.4byte	.LVL202
 8943 0f04 2E000000 		.4byte	.LFE103
 8944 0f08 0100     		.2byte	0x1
 8945 0f0a 52       		.byte	0x52
 8946 0f0b 00000000 		.4byte	0
 8947 0f0f 00000000 		.4byte	0
 8948              	.LLST97:
 8949 0f13 00000000 		.4byte	.LVL191
 8950 0f17 04000000 		.4byte	.LVL193
 8951 0f1b 0100     		.2byte	0x1
 8952 0f1d 53       		.byte	0x53
 8953 0f1e 04000000 		.4byte	.LVL193
 8954 0f22 2E000000 		.4byte	.LFE103
 8955 0f26 0400     		.2byte	0x4
 8956 0f28 F3       		.byte	0xf3
 8957 0f29 01       		.uleb128 0x1
 8958 0f2a 53       		.byte	0x53
 8959 0f2b 9F       		.byte	0x9f
 8960 0f2c 00000000 		.4byte	0
 8961 0f30 00000000 		.4byte	0
 8962              	.LLST98:
 8963 0f34 1C000000 		.4byte	.LVL198
 8964 0f38 24000000 		.4byte	.LVL201
 8965 0f3c 0100     		.2byte	0x1
 8966 0f3e 51       		.byte	0x51
 8967 0f3f 00000000 		.4byte	0
 8968 0f43 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 327


 8969              	.LLST99:
 8970 0f47 18000000 		.4byte	.LVL197
 8971 0f4b 1C000000 		.4byte	.LVL198
 8972 0f4f 0100     		.2byte	0x1
 8973 0f51 51       		.byte	0x51
 8974 0f52 1C000000 		.4byte	.LVL198
 8975 0f56 1E000000 		.4byte	.LVL199
 8976 0f5a 0E00     		.2byte	0xe
 8977 0f5c 70       		.byte	0x70
 8978 0f5d 7E       		.sleb128 -2
 8979 0f5e 94       		.byte	0x94
 8980 0f5f 02       		.byte	0x2
 8981 0f60 40       		.byte	0x40
 8982 0f61 24       		.byte	0x24
 8983 0f62 40       		.byte	0x40
 8984 0f63 26       		.byte	0x26
 8985 0f64 77       		.byte	0x77
 8986 0f65 00       		.sleb128 0
 8987 0f66 1E       		.byte	0x1e
 8988 0f67 3F       		.byte	0x3f
 8989 0f68 26       		.byte	0x26
 8990 0f69 9F       		.byte	0x9f
 8991 0f6a 00000000 		.4byte	0
 8992 0f6e 00000000 		.4byte	0
 8993              	.LLST100:
 8994 0f72 00000000 		.4byte	.LVL203
 8995 0f76 08000000 		.4byte	.LVL206
 8996 0f7a 0100     		.2byte	0x1
 8997 0f7c 50       		.byte	0x50
 8998 0f7d 08000000 		.4byte	.LVL206
 8999 0f81 34000000 		.4byte	.LVL214
 9000 0f85 0100     		.2byte	0x1
 9001 0f87 56       		.byte	0x56
 9002 0f88 34000000 		.4byte	.LVL214
 9003 0f8c 3E000000 		.4byte	.LFE104
 9004 0f90 0100     		.2byte	0x1
 9005 0f92 50       		.byte	0x50
 9006 0f93 00000000 		.4byte	0
 9007 0f97 00000000 		.4byte	0
 9008              	.LLST101:
 9009 0f9b 00000000 		.4byte	.LVL203
 9010 0f9f 10000000 		.4byte	.LVL207
 9011 0fa3 0100     		.2byte	0x1
 9012 0fa5 51       		.byte	0x51
 9013 0fa6 10000000 		.4byte	.LVL207
 9014 0faa 34000000 		.4byte	.LVL214
 9015 0fae 0100     		.2byte	0x1
 9016 0fb0 50       		.byte	0x50
 9017 0fb1 34000000 		.4byte	.LVL214
 9018 0fb5 3E000000 		.4byte	.LFE104
 9019 0fb9 0100     		.2byte	0x1
 9020 0fbb 51       		.byte	0x51
 9021 0fbc 00000000 		.4byte	0
 9022 0fc0 00000000 		.4byte	0
 9023              	.LLST102:
 9024 0fc4 00000000 		.4byte	.LVL203
 9025 0fc8 28000000 		.4byte	.LVL209
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 328


 9026 0fcc 0100     		.2byte	0x1
 9027 0fce 52       		.byte	0x52
 9028 0fcf 28000000 		.4byte	.LVL209
 9029 0fd3 30000000 		.4byte	.LVL213
 9030 0fd7 0300     		.2byte	0x3
 9031 0fd9 72       		.byte	0x72
 9032 0fda 04       		.sleb128 4
 9033 0fdb 9F       		.byte	0x9f
 9034 0fdc 30000000 		.4byte	.LVL213
 9035 0fe0 3E000000 		.4byte	.LFE104
 9036 0fe4 0100     		.2byte	0x1
 9037 0fe6 52       		.byte	0x52
 9038 0fe7 00000000 		.4byte	0
 9039 0feb 00000000 		.4byte	0
 9040              	.LLST103:
 9041 0fef 00000000 		.4byte	.LVL203
 9042 0ff3 06000000 		.4byte	.LVL205
 9043 0ff7 0100     		.2byte	0x1
 9044 0ff9 53       		.byte	0x53
 9045 0ffa 06000000 		.4byte	.LVL205
 9046 0ffe 3E000000 		.4byte	.LFE104
 9047 1002 0400     		.2byte	0x4
 9048 1004 F3       		.byte	0xf3
 9049 1005 01       		.uleb128 0x1
 9050 1006 53       		.byte	0x53
 9051 1007 9F       		.byte	0x9f
 9052 1008 00000000 		.4byte	0
 9053 100c 00000000 		.4byte	0
 9054              	.LLST104:
 9055 1010 24000000 		.4byte	.LVL208
 9056 1014 2A000000 		.4byte	.LVL210
 9057 1018 0100     		.2byte	0x1
 9058 101a 51       		.byte	0x51
 9059 101b 00000000 		.4byte	0
 9060 101f 00000000 		.4byte	0
 9061              	.LLST105:
 9062 1023 28000000 		.4byte	.LVL209
 9063 1027 2A000000 		.4byte	.LVL210
 9064 102b 0100     		.2byte	0x1
 9065 102d 51       		.byte	0x51
 9066 102e 00000000 		.4byte	0
 9067 1032 00000000 		.4byte	0
 9068              	.LLST106:
 9069 1036 24000000 		.4byte	.LVL208
 9070 103a 28000000 		.4byte	.LVL209
 9071 103e 0100     		.2byte	0x1
 9072 1040 51       		.byte	0x51
 9073 1041 28000000 		.4byte	.LVL209
 9074 1045 2C000000 		.4byte	.LVL211
 9075 1049 0D00     		.2byte	0xd
 9076 104b 70       		.byte	0x70
 9077 104c 7C       		.sleb128 -4
 9078 104d 06       		.byte	0x6
 9079 104e 79       		.byte	0x79
 9080 104f 00       		.sleb128 0
 9081 1050 1E       		.byte	0x1e
 9082 1051 77       		.byte	0x77
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 329


 9083 1052 00       		.sleb128 0
 9084 1053 22       		.byte	0x22
 9085 1054 75       		.byte	0x75
 9086 1055 00       		.sleb128 0
 9087 1056 22       		.byte	0x22
 9088 1057 9F       		.byte	0x9f
 9089 1058 00000000 		.4byte	0
 9090 105c 00000000 		.4byte	0
 9091              	.LLST107:
 9092 1060 00000000 		.4byte	.LVL215
 9093 1064 08000000 		.4byte	.LVL219
 9094 1068 0100     		.2byte	0x1
 9095 106a 50       		.byte	0x50
 9096 106b 08000000 		.4byte	.LVL219
 9097 106f 26000000 		.4byte	.LVL226
 9098 1073 0100     		.2byte	0x1
 9099 1075 55       		.byte	0x55
 9100 1076 26000000 		.4byte	.LVL226
 9101 107a 2E000000 		.4byte	.LFE105
 9102 107e 0100     		.2byte	0x1
 9103 1080 50       		.byte	0x50
 9104 1081 00000000 		.4byte	0
 9105 1085 00000000 		.4byte	0
 9106              	.LLST108:
 9107 1089 00000000 		.4byte	.LVL215
 9108 108d 0A000000 		.4byte	.LVL220
 9109 1091 0100     		.2byte	0x1
 9110 1093 51       		.byte	0x51
 9111 1094 0A000000 		.4byte	.LVL220
 9112 1098 26000000 		.4byte	.LVL226
 9113 109c 0100     		.2byte	0x1
 9114 109e 56       		.byte	0x56
 9115 109f 26000000 		.4byte	.LVL226
 9116 10a3 2E000000 		.4byte	.LFE105
 9117 10a7 0100     		.2byte	0x1
 9118 10a9 51       		.byte	0x51
 9119 10aa 00000000 		.4byte	0
 9120 10ae 00000000 		.4byte	0
 9121              	.LLST109:
 9122 10b2 00000000 		.4byte	.LVL215
 9123 10b6 06000000 		.4byte	.LVL218
 9124 10ba 0100     		.2byte	0x1
 9125 10bc 52       		.byte	0x52
 9126 10bd 06000000 		.4byte	.LVL218
 9127 10c1 26000000 		.4byte	.LVL226
 9128 10c5 0100     		.2byte	0x1
 9129 10c7 57       		.byte	0x57
 9130 10c8 26000000 		.4byte	.LVL226
 9131 10cc 2E000000 		.4byte	.LFE105
 9132 10d0 0100     		.2byte	0x1
 9133 10d2 52       		.byte	0x52
 9134 10d3 00000000 		.4byte	0
 9135 10d7 00000000 		.4byte	0
 9136              	.LLST110:
 9137 10db 00000000 		.4byte	.LVL215
 9138 10df 04000000 		.4byte	.LVL217
 9139 10e3 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 330


 9140 10e5 53       		.byte	0x53
 9141 10e6 04000000 		.4byte	.LVL217
 9142 10ea 2E000000 		.4byte	.LFE105
 9143 10ee 0400     		.2byte	0x4
 9144 10f0 F3       		.byte	0xf3
 9145 10f1 01       		.uleb128 0x1
 9146 10f2 53       		.byte	0x53
 9147 10f3 9F       		.byte	0x9f
 9148 10f4 00000000 		.4byte	0
 9149 10f8 00000000 		.4byte	0
 9150              	.LLST111:
 9151 10fc 1C000000 		.4byte	.LVL222
 9152 1100 24000000 		.4byte	.LVL225
 9153 1104 0100     		.2byte	0x1
 9154 1106 51       		.byte	0x51
 9155 1107 00000000 		.4byte	0
 9156 110b 00000000 		.4byte	0
 9157              	.LLST112:
 9158 110f 18000000 		.4byte	.LVL221
 9159 1113 1C000000 		.4byte	.LVL222
 9160 1117 0100     		.2byte	0x1
 9161 1119 51       		.byte	0x51
 9162 111a 1C000000 		.4byte	.LVL222
 9163 111e 1E000000 		.4byte	.LVL223
 9164 1122 0E00     		.2byte	0xe
 9165 1124 76       		.byte	0x76
 9166 1125 7F       		.sleb128 -1
 9167 1126 94       		.byte	0x94
 9168 1127 01       		.byte	0x1
 9169 1128 48       		.byte	0x48
 9170 1129 24       		.byte	0x24
 9171 112a 48       		.byte	0x48
 9172 112b 26       		.byte	0x26
 9173 112c 70       		.byte	0x70
 9174 112d 00       		.sleb128 0
 9175 112e 1E       		.byte	0x1e
 9176 112f 37       		.byte	0x37
 9177 1130 26       		.byte	0x26
 9178 1131 9F       		.byte	0x9f
 9179 1132 00000000 		.4byte	0
 9180 1136 00000000 		.4byte	0
 9181              	.LLST113:
 9182 113a 00000000 		.4byte	.LVL227
 9183 113e 02000000 		.4byte	.LVL228
 9184 1142 0100     		.2byte	0x1
 9185 1144 50       		.byte	0x50
 9186 1145 02000000 		.4byte	.LVL228
 9187 1149 10000000 		.4byte	.LVL231
 9188 114d 0300     		.2byte	0x3
 9189 114f 70       		.byte	0x70
 9190 1150 04       		.sleb128 4
 9191 1151 9F       		.byte	0x9f
 9192 1152 10000000 		.4byte	.LVL231
 9193 1156 16000000 		.4byte	.LFE106
 9194 115a 0100     		.2byte	0x1
 9195 115c 50       		.byte	0x50
 9196 115d 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 331


 9197 1161 00000000 		.4byte	0
 9198              	.LLST114:
 9199 1165 00000000 		.4byte	.LVL227
 9200 1169 02000000 		.4byte	.LVL228
 9201 116d 0100     		.2byte	0x1
 9202 116f 51       		.byte	0x51
 9203 1170 02000000 		.4byte	.LVL228
 9204 1174 0E000000 		.4byte	.LVL230
 9205 1178 0300     		.2byte	0x3
 9206 117a 71       		.byte	0x71
 9207 117b 04       		.sleb128 4
 9208 117c 9F       		.byte	0x9f
 9209 117d 0E000000 		.4byte	.LVL230
 9210 1181 16000000 		.4byte	.LFE106
 9211 1185 0100     		.2byte	0x1
 9212 1187 51       		.byte	0x51
 9213 1188 00000000 		.4byte	0
 9214 118c 00000000 		.4byte	0
 9215              	.LLST115:
 9216 1190 00000000 		.4byte	.LVL227
 9217 1194 02000000 		.4byte	.LVL228
 9218 1198 0100     		.2byte	0x1
 9219 119a 52       		.byte	0x52
 9220 119b 02000000 		.4byte	.LVL228
 9221 119f 16000000 		.4byte	.LFE106
 9222 11a3 0400     		.2byte	0x4
 9223 11a5 F3       		.byte	0xf3
 9224 11a6 01       		.uleb128 0x1
 9225 11a7 52       		.byte	0x52
 9226 11a8 9F       		.byte	0x9f
 9227 11a9 00000000 		.4byte	0
 9228 11ad 00000000 		.4byte	0
 9229              	.LLST116:
 9230 11b1 00000000 		.4byte	.LVL232
 9231 11b5 04000000 		.4byte	.LVL234
 9232 11b9 0100     		.2byte	0x1
 9233 11bb 50       		.byte	0x50
 9234 11bc 04000000 		.4byte	.LVL234
 9235 11c0 16000000 		.4byte	.LVL237
 9236 11c4 0300     		.2byte	0x3
 9237 11c6 70       		.byte	0x70
 9238 11c7 08       		.sleb128 8
 9239 11c8 9F       		.byte	0x9f
 9240 11c9 16000000 		.4byte	.LVL237
 9241 11cd 1E000000 		.4byte	.LFE107
 9242 11d1 0100     		.2byte	0x1
 9243 11d3 50       		.byte	0x50
 9244 11d4 00000000 		.4byte	0
 9245 11d8 00000000 		.4byte	0
 9246              	.LLST117:
 9247 11dc 00000000 		.4byte	.LVL232
 9248 11e0 04000000 		.4byte	.LVL234
 9249 11e4 0100     		.2byte	0x1
 9250 11e6 51       		.byte	0x51
 9251 11e7 04000000 		.4byte	.LVL234
 9252 11eb 14000000 		.4byte	.LVL236
 9253 11ef 0300     		.2byte	0x3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 332


 9254 11f1 71       		.byte	0x71
 9255 11f2 08       		.sleb128 8
 9256 11f3 9F       		.byte	0x9f
 9257 11f4 14000000 		.4byte	.LVL236
 9258 11f8 1E000000 		.4byte	.LFE107
 9259 11fc 0100     		.2byte	0x1
 9260 11fe 51       		.byte	0x51
 9261 11ff 00000000 		.4byte	0
 9262 1203 00000000 		.4byte	0
 9263              	.LLST118:
 9264 1207 00000000 		.4byte	.LVL232
 9265 120b 04000000 		.4byte	.LVL234
 9266 120f 0100     		.2byte	0x1
 9267 1211 52       		.byte	0x52
 9268 1212 04000000 		.4byte	.LVL234
 9269 1216 1E000000 		.4byte	.LFE107
 9270 121a 0400     		.2byte	0x4
 9271 121c F3       		.byte	0xf3
 9272 121d 01       		.uleb128 0x1
 9273 121e 52       		.byte	0x52
 9274 121f 9F       		.byte	0x9f
 9275 1220 00000000 		.4byte	0
 9276 1224 00000000 		.4byte	0
 9277              	.LLST119:
 9278 1228 00000000 		.4byte	.LVL238
 9279 122c 06000000 		.4byte	.LVL241
 9280 1230 0100     		.2byte	0x1
 9281 1232 50       		.byte	0x50
 9282 1233 06000000 		.4byte	.LVL241
 9283 1237 24000000 		.4byte	.LVL248
 9284 123b 0100     		.2byte	0x1
 9285 123d 54       		.byte	0x54
 9286 123e 24000000 		.4byte	.LVL248
 9287 1242 2C000000 		.4byte	.LFE108
 9288 1246 0100     		.2byte	0x1
 9289 1248 50       		.byte	0x50
 9290 1249 00000000 		.4byte	0
 9291 124d 00000000 		.4byte	0
 9292              	.LLST120:
 9293 1251 00000000 		.4byte	.LVL238
 9294 1255 0A000000 		.4byte	.LVL243
 9295 1259 0100     		.2byte	0x1
 9296 125b 51       		.byte	0x51
 9297 125c 0A000000 		.4byte	.LVL243
 9298 1260 24000000 		.4byte	.LVL248
 9299 1264 0100     		.2byte	0x1
 9300 1266 50       		.byte	0x50
 9301 1267 24000000 		.4byte	.LVL248
 9302 126b 2C000000 		.4byte	.LFE108
 9303 126f 0100     		.2byte	0x1
 9304 1271 51       		.byte	0x51
 9305 1272 00000000 		.4byte	0
 9306 1276 00000000 		.4byte	0
 9307              	.LLST121:
 9308 127a 00000000 		.4byte	.LVL238
 9309 127e 04000000 		.4byte	.LVL240
 9310 1282 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 333


 9311 1284 52       		.byte	0x52
 9312 1285 04000000 		.4byte	.LVL240
 9313 1289 2C000000 		.4byte	.LFE108
 9314 128d 0400     		.2byte	0x4
 9315 128f F3       		.byte	0xf3
 9316 1290 01       		.uleb128 0x1
 9317 1291 52       		.byte	0x52
 9318 1292 9F       		.byte	0x9f
 9319 1293 00000000 		.4byte	0
 9320 1297 00000000 		.4byte	0
 9321              	.LLST122:
 9322 129b 08000000 		.4byte	.LVL242
 9323 129f 14000000 		.4byte	.LVL244
 9324 12a3 0100     		.2byte	0x1
 9325 12a5 53       		.byte	0x53
 9326 12a6 14000000 		.4byte	.LVL244
 9327 12aa 18000000 		.4byte	.LVL245
 9328 12ae 0100     		.2byte	0x1
 9329 12b0 55       		.byte	0x55
 9330 12b1 18000000 		.4byte	.LVL245
 9331 12b5 1C000000 		.4byte	.LVL246
 9332 12b9 0100     		.2byte	0x1
 9333 12bb 53       		.byte	0x53
 9334 12bc 1C000000 		.4byte	.LVL246
 9335 12c0 24000000 		.4byte	.LVL248
 9336 12c4 0100     		.2byte	0x1
 9337 12c6 55       		.byte	0x55
 9338 12c7 00000000 		.4byte	0
 9339 12cb 00000000 		.4byte	0
 9340              	.LLST123:
 9341 12cf 00000000 		.4byte	.LVL249
 9342 12d3 06000000 		.4byte	.LVL252
 9343 12d7 0100     		.2byte	0x1
 9344 12d9 50       		.byte	0x50
 9345 12da 06000000 		.4byte	.LVL252
 9346 12de 20000000 		.4byte	.LVL260
 9347 12e2 0100     		.2byte	0x1
 9348 12e4 54       		.byte	0x54
 9349 12e5 20000000 		.4byte	.LVL260
 9350 12e9 2A000000 		.4byte	.LFE109
 9351 12ed 0100     		.2byte	0x1
 9352 12ef 50       		.byte	0x50
 9353 12f0 00000000 		.4byte	0
 9354 12f4 00000000 		.4byte	0
 9355              	.LLST124:
 9356 12f8 00000000 		.4byte	.LVL249
 9357 12fc 0A000000 		.4byte	.LVL254
 9358 1300 0100     		.2byte	0x1
 9359 1302 51       		.byte	0x51
 9360 1303 0A000000 		.4byte	.LVL254
 9361 1307 20000000 		.4byte	.LVL260
 9362 130b 0100     		.2byte	0x1
 9363 130d 50       		.byte	0x50
 9364 130e 20000000 		.4byte	.LVL260
 9365 1312 2A000000 		.4byte	.LFE109
 9366 1316 0100     		.2byte	0x1
 9367 1318 51       		.byte	0x51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 334


 9368 1319 00000000 		.4byte	0
 9369 131d 00000000 		.4byte	0
 9370              	.LLST125:
 9371 1321 00000000 		.4byte	.LVL249
 9372 1325 04000000 		.4byte	.LVL251
 9373 1329 0100     		.2byte	0x1
 9374 132b 52       		.byte	0x52
 9375 132c 04000000 		.4byte	.LVL251
 9376 1330 2A000000 		.4byte	.LFE109
 9377 1334 0400     		.2byte	0x4
 9378 1336 F3       		.byte	0xf3
 9379 1337 01       		.uleb128 0x1
 9380 1338 52       		.byte	0x52
 9381 1339 9F       		.byte	0x9f
 9382 133a 00000000 		.4byte	0
 9383 133e 00000000 		.4byte	0
 9384              	.LLST126:
 9385 1342 08000000 		.4byte	.LVL253
 9386 1346 12000000 		.4byte	.LVL255
 9387 134a 0100     		.2byte	0x1
 9388 134c 53       		.byte	0x53
 9389 134d 12000000 		.4byte	.LVL255
 9390 1351 14000000 		.4byte	.LVL256
 9391 1355 0200     		.2byte	0x2
 9392 1357 74       		.byte	0x74
 9393 1358 7C       		.sleb128 -4
 9394 1359 14000000 		.4byte	.LVL256
 9395 135d 18000000 		.4byte	.LVL257
 9396 1361 0100     		.2byte	0x1
 9397 1363 53       		.byte	0x53
 9398 1364 18000000 		.4byte	.LVL257
 9399 1368 1A000000 		.4byte	.LVL258
 9400 136c 0200     		.2byte	0x2
 9401 136e 74       		.byte	0x74
 9402 136f 7C       		.sleb128 -4
 9403 1370 00000000 		.4byte	0
 9404 1374 00000000 		.4byte	0
 9405              	.LLST127:
 9406 1378 00000000 		.4byte	.LVL261
 9407 137c 06000000 		.4byte	.LVL264
 9408 1380 0100     		.2byte	0x1
 9409 1382 50       		.byte	0x50
 9410 1383 06000000 		.4byte	.LVL264
 9411 1387 22000000 		.4byte	.LVL271
 9412 138b 0100     		.2byte	0x1
 9413 138d 54       		.byte	0x54
 9414 138e 22000000 		.4byte	.LVL271
 9415 1392 2A000000 		.4byte	.LFE110
 9416 1396 0100     		.2byte	0x1
 9417 1398 50       		.byte	0x50
 9418 1399 00000000 		.4byte	0
 9419 139d 00000000 		.4byte	0
 9420              	.LLST128:
 9421 13a1 00000000 		.4byte	.LVL261
 9422 13a5 0A000000 		.4byte	.LVL266
 9423 13a9 0100     		.2byte	0x1
 9424 13ab 51       		.byte	0x51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 335


 9425 13ac 0A000000 		.4byte	.LVL266
 9426 13b0 22000000 		.4byte	.LVL271
 9427 13b4 0100     		.2byte	0x1
 9428 13b6 50       		.byte	0x50
 9429 13b7 22000000 		.4byte	.LVL271
 9430 13bb 2A000000 		.4byte	.LFE110
 9431 13bf 0100     		.2byte	0x1
 9432 13c1 51       		.byte	0x51
 9433 13c2 00000000 		.4byte	0
 9434 13c6 00000000 		.4byte	0
 9435              	.LLST129:
 9436 13ca 00000000 		.4byte	.LVL261
 9437 13ce 04000000 		.4byte	.LVL263
 9438 13d2 0100     		.2byte	0x1
 9439 13d4 52       		.byte	0x52
 9440 13d5 04000000 		.4byte	.LVL263
 9441 13d9 2A000000 		.4byte	.LFE110
 9442 13dd 0400     		.2byte	0x4
 9443 13df F3       		.byte	0xf3
 9444 13e0 01       		.uleb128 0x1
 9445 13e1 52       		.byte	0x52
 9446 13e2 9F       		.byte	0x9f
 9447 13e3 00000000 		.4byte	0
 9448 13e7 00000000 		.4byte	0
 9449              	.LLST130:
 9450 13eb 08000000 		.4byte	.LVL265
 9451 13ef 14000000 		.4byte	.LVL267
 9452 13f3 0100     		.2byte	0x1
 9453 13f5 53       		.byte	0x53
 9454 13f6 14000000 		.4byte	.LVL267
 9455 13fa 18000000 		.4byte	.LVL268
 9456 13fe 0100     		.2byte	0x1
 9457 1400 55       		.byte	0x55
 9458 1401 18000000 		.4byte	.LVL268
 9459 1405 1A000000 		.4byte	.LVL269
 9460 1409 0100     		.2byte	0x1
 9461 140b 53       		.byte	0x53
 9462 140c 1A000000 		.4byte	.LVL269
 9463 1410 22000000 		.4byte	.LVL271
 9464 1414 0100     		.2byte	0x1
 9465 1416 55       		.byte	0x55
 9466 1417 00000000 		.4byte	0
 9467 141b 00000000 		.4byte	0
 9468              	.LLST131:
 9469 141f 00000000 		.4byte	.LVL272
 9470 1423 02000000 		.4byte	.LVL273
 9471 1427 0100     		.2byte	0x1
 9472 1429 50       		.byte	0x50
 9473 142a 02000000 		.4byte	.LVL273
 9474 142e 0E000000 		.4byte	.LVL276
 9475 1432 0300     		.2byte	0x3
 9476 1434 70       		.byte	0x70
 9477 1435 02       		.sleb128 2
 9478 1436 9F       		.byte	0x9f
 9479 1437 0E000000 		.4byte	.LVL276
 9480 143b 14000000 		.4byte	.LFE111
 9481 143f 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 336


 9482 1441 50       		.byte	0x50
 9483 1442 00000000 		.4byte	0
 9484 1446 00000000 		.4byte	0
 9485              	.LLST132:
 9486 144a 00000000 		.4byte	.LVL272
 9487 144e 02000000 		.4byte	.LVL273
 9488 1452 0100     		.2byte	0x1
 9489 1454 51       		.byte	0x51
 9490 1455 02000000 		.4byte	.LVL273
 9491 1459 0C000000 		.4byte	.LVL275
 9492 145d 0300     		.2byte	0x3
 9493 145f 71       		.byte	0x71
 9494 1460 02       		.sleb128 2
 9495 1461 9F       		.byte	0x9f
 9496 1462 0C000000 		.4byte	.LVL275
 9497 1466 14000000 		.4byte	.LFE111
 9498 146a 0100     		.2byte	0x1
 9499 146c 51       		.byte	0x51
 9500 146d 00000000 		.4byte	0
 9501 1471 00000000 		.4byte	0
 9502              	.LLST133:
 9503 1475 00000000 		.4byte	.LVL272
 9504 1479 02000000 		.4byte	.LVL273
 9505 147d 0100     		.2byte	0x1
 9506 147f 52       		.byte	0x52
 9507 1480 02000000 		.4byte	.LVL273
 9508 1484 14000000 		.4byte	.LFE111
 9509 1488 0400     		.2byte	0x4
 9510 148a F3       		.byte	0xf3
 9511 148b 01       		.uleb128 0x1
 9512 148c 52       		.byte	0x52
 9513 148d 9F       		.byte	0x9f
 9514 148e 00000000 		.4byte	0
 9515 1492 00000000 		.4byte	0
 9516              	.LLST134:
 9517 1496 00000000 		.4byte	.LVL277
 9518 149a 02000000 		.4byte	.LVL278
 9519 149e 0100     		.2byte	0x1
 9520 14a0 50       		.byte	0x50
 9521 14a1 02000000 		.4byte	.LVL278
 9522 14a5 0E000000 		.4byte	.LVL281
 9523 14a9 0300     		.2byte	0x3
 9524 14ab 70       		.byte	0x70
 9525 14ac 04       		.sleb128 4
 9526 14ad 9F       		.byte	0x9f
 9527 14ae 0E000000 		.4byte	.LVL281
 9528 14b2 14000000 		.4byte	.LFE112
 9529 14b6 0100     		.2byte	0x1
 9530 14b8 50       		.byte	0x50
 9531 14b9 00000000 		.4byte	0
 9532 14bd 00000000 		.4byte	0
 9533              	.LLST135:
 9534 14c1 00000000 		.4byte	.LVL277
 9535 14c5 02000000 		.4byte	.LVL278
 9536 14c9 0100     		.2byte	0x1
 9537 14cb 51       		.byte	0x51
 9538 14cc 02000000 		.4byte	.LVL278
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 337


 9539 14d0 0C000000 		.4byte	.LVL280
 9540 14d4 0300     		.2byte	0x3
 9541 14d6 71       		.byte	0x71
 9542 14d7 04       		.sleb128 4
 9543 14d8 9F       		.byte	0x9f
 9544 14d9 0C000000 		.4byte	.LVL280
 9545 14dd 14000000 		.4byte	.LFE112
 9546 14e1 0100     		.2byte	0x1
 9547 14e3 51       		.byte	0x51
 9548 14e4 00000000 		.4byte	0
 9549 14e8 00000000 		.4byte	0
 9550              	.LLST136:
 9551 14ec 00000000 		.4byte	.LVL277
 9552 14f0 02000000 		.4byte	.LVL278
 9553 14f4 0100     		.2byte	0x1
 9554 14f6 52       		.byte	0x52
 9555 14f7 02000000 		.4byte	.LVL278
 9556 14fb 14000000 		.4byte	.LFE112
 9557 14ff 0400     		.2byte	0x4
 9558 1501 F3       		.byte	0xf3
 9559 1502 01       		.uleb128 0x1
 9560 1503 52       		.byte	0x52
 9561 1504 9F       		.byte	0x9f
 9562 1505 00000000 		.4byte	0
 9563 1509 00000000 		.4byte	0
 9564              	.LLST137:
 9565 150d 00000000 		.4byte	.LVL282
 9566 1511 02000000 		.4byte	.LVL283
 9567 1515 0100     		.2byte	0x1
 9568 1517 50       		.byte	0x50
 9569 1518 02000000 		.4byte	.LVL283
 9570 151c 0E000000 		.4byte	.LVL286
 9571 1520 0300     		.2byte	0x3
 9572 1522 70       		.byte	0x70
 9573 1523 01       		.sleb128 1
 9574 1524 9F       		.byte	0x9f
 9575 1525 0E000000 		.4byte	.LVL286
 9576 1529 14000000 		.4byte	.LFE113
 9577 152d 0100     		.2byte	0x1
 9578 152f 50       		.byte	0x50
 9579 1530 00000000 		.4byte	0
 9580 1534 00000000 		.4byte	0
 9581              	.LLST138:
 9582 1538 00000000 		.4byte	.LVL282
 9583 153c 02000000 		.4byte	.LVL283
 9584 1540 0100     		.2byte	0x1
 9585 1542 51       		.byte	0x51
 9586 1543 02000000 		.4byte	.LVL283
 9587 1547 0C000000 		.4byte	.LVL285
 9588 154b 0300     		.2byte	0x3
 9589 154d 71       		.byte	0x71
 9590 154e 01       		.sleb128 1
 9591 154f 9F       		.byte	0x9f
 9592 1550 0C000000 		.4byte	.LVL285
 9593 1554 14000000 		.4byte	.LFE113
 9594 1558 0100     		.2byte	0x1
 9595 155a 51       		.byte	0x51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 338


 9596 155b 00000000 		.4byte	0
 9597 155f 00000000 		.4byte	0
 9598              	.LLST139:
 9599 1563 00000000 		.4byte	.LVL282
 9600 1567 02000000 		.4byte	.LVL283
 9601 156b 0100     		.2byte	0x1
 9602 156d 52       		.byte	0x52
 9603 156e 02000000 		.4byte	.LVL283
 9604 1572 14000000 		.4byte	.LFE113
 9605 1576 0400     		.2byte	0x4
 9606 1578 F3       		.byte	0xf3
 9607 1579 01       		.uleb128 0x1
 9608 157a 52       		.byte	0x52
 9609 157b 9F       		.byte	0x9f
 9610 157c 00000000 		.4byte	0
 9611 1580 00000000 		.4byte	0
 9612              	.LLST140:
 9613 1584 00000000 		.4byte	.LVL287
 9614 1588 10000000 		.4byte	.LVL291
 9615 158c 0100     		.2byte	0x1
 9616 158e 50       		.byte	0x50
 9617 158f 10000000 		.4byte	.LVL291
 9618 1593 20000000 		.4byte	.LVL294
 9619 1597 0100     		.2byte	0x1
 9620 1599 56       		.byte	0x56
 9621 159a 20000000 		.4byte	.LVL294
 9622 159e 28000000 		.4byte	.LFE114
 9623 15a2 0100     		.2byte	0x1
 9624 15a4 50       		.byte	0x50
 9625 15a5 00000000 		.4byte	0
 9626 15a9 00000000 		.4byte	0
 9627              	.LLST141:
 9628 15ad 00000000 		.4byte	.LVL287
 9629 15b1 0C000000 		.4byte	.LVL289
 9630 15b5 0100     		.2byte	0x1
 9631 15b7 51       		.byte	0x51
 9632 15b8 0C000000 		.4byte	.LVL289
 9633 15bc 28000000 		.4byte	.LFE114
 9634 15c0 0100     		.2byte	0x1
 9635 15c2 58       		.byte	0x58
 9636 15c3 00000000 		.4byte	0
 9637 15c7 00000000 		.4byte	0
 9638              	.LLST142:
 9639 15cb 00000000 		.4byte	.LVL287
 9640 15cf 0C000000 		.4byte	.LVL289
 9641 15d3 0100     		.2byte	0x1
 9642 15d5 52       		.byte	0x52
 9643 15d6 0C000000 		.4byte	.LVL289
 9644 15da 0E000000 		.4byte	.LVL290
 9645 15de 0100     		.2byte	0x1
 9646 15e0 55       		.byte	0x55
 9647 15e1 0E000000 		.4byte	.LVL290
 9648 15e5 20000000 		.4byte	.LVL294
 9649 15e9 0100     		.2byte	0x1
 9650 15eb 57       		.byte	0x57
 9651 15ec 20000000 		.4byte	.LVL294
 9652 15f0 28000000 		.4byte	.LFE114
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 339


 9653 15f4 0100     		.2byte	0x1
 9654 15f6 55       		.byte	0x55
 9655 15f7 00000000 		.4byte	0
 9656 15fb 00000000 		.4byte	0
 9657              	.LLST143:
 9658 15ff 00000000 		.4byte	.LVL287
 9659 1603 0C000000 		.4byte	.LVL289
 9660 1607 0100     		.2byte	0x1
 9661 1609 53       		.byte	0x53
 9662 160a 0C000000 		.4byte	.LVL289
 9663 160e 28000000 		.4byte	.LFE114
 9664 1612 0400     		.2byte	0x4
 9665 1614 F3       		.byte	0xf3
 9666 1615 01       		.uleb128 0x1
 9667 1616 53       		.byte	0x53
 9668 1617 9F       		.byte	0x9f
 9669 1618 00000000 		.4byte	0
 9670 161c 00000000 		.4byte	0
 9671              	.LLST144:
 9672 1620 0A000000 		.4byte	.LVL288
 9673 1624 0C000000 		.4byte	.LVL289
 9674 1628 0100     		.2byte	0x1
 9675 162a 53       		.byte	0x53
 9676 162b 0C000000 		.4byte	.LVL289
 9677 162f 28000000 		.4byte	.LFE114
 9678 1633 0100     		.2byte	0x1
 9679 1635 54       		.byte	0x54
 9680 1636 00000000 		.4byte	0
 9681 163a 00000000 		.4byte	0
 9682              	.LLST145:
 9683 163e 00000000 		.4byte	.LVL295
 9684 1642 16000000 		.4byte	.LVL299
 9685 1646 0100     		.2byte	0x1
 9686 1648 50       		.byte	0x50
 9687 1649 16000000 		.4byte	.LVL299
 9688 164d 2A000000 		.4byte	.LVL302
 9689 1651 0100     		.2byte	0x1
 9690 1653 58       		.byte	0x58
 9691 1654 2A000000 		.4byte	.LVL302
 9692 1658 32000000 		.4byte	.LFE115
 9693 165c 0100     		.2byte	0x1
 9694 165e 50       		.byte	0x50
 9695 165f 00000000 		.4byte	0
 9696 1663 00000000 		.4byte	0
 9697              	.LLST146:
 9698 1667 00000000 		.4byte	.LVL295
 9699 166b 0E000000 		.4byte	.LVL297
 9700 166f 0600     		.2byte	0x6
 9701 1671 52       		.byte	0x52
 9702 1672 93       		.byte	0x93
 9703 1673 04       		.uleb128 0x4
 9704 1674 53       		.byte	0x53
 9705 1675 93       		.byte	0x93
 9706 1676 04       		.uleb128 0x4
 9707 1677 0E000000 		.4byte	.LVL297
 9708 167b 32000000 		.4byte	.LFE115
 9709 167f 0600     		.2byte	0x6
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 340


 9710 1681 F3       		.byte	0xf3
 9711 1682 03       		.uleb128 0x3
 9712 1683 F5       		.byte	0xf5
 9713 1684 02       		.uleb128 0x2
 9714 1685 25       		.uleb128 0x25
 9715 1686 9F       		.byte	0x9f
 9716 1687 00000000 		.4byte	0
 9717 168b 00000000 		.4byte	0
 9718              	.LLST147:
 9719 168f 00000000 		.4byte	.LVL295
 9720 1693 0E000000 		.4byte	.LVL297
 9721 1697 0200     		.2byte	0x2
 9722 1699 91       		.byte	0x91
 9723 169a 00       		.sleb128 0
 9724 169b 0E000000 		.4byte	.LVL297
 9725 169f 12000000 		.4byte	.LVL298
 9726 16a3 0100     		.2byte	0x1
 9727 16a5 55       		.byte	0x55
 9728 16a6 12000000 		.4byte	.LVL298
 9729 16aa 2A000000 		.4byte	.LVL302
 9730 16ae 0100     		.2byte	0x1
 9731 16b0 59       		.byte	0x59
 9732 16b1 2A000000 		.4byte	.LVL302
 9733 16b5 32000000 		.4byte	.LFE115
 9734 16b9 0100     		.2byte	0x1
 9735 16bb 55       		.byte	0x55
 9736 16bc 00000000 		.4byte	0
 9737 16c0 00000000 		.4byte	0
 9738              	.LLST148:
 9739 16c4 00000000 		.4byte	.LVL303
 9740 16c8 08000000 		.4byte	.LVL307
 9741 16cc 0100     		.2byte	0x1
 9742 16ce 50       		.byte	0x50
 9743 16cf 08000000 		.4byte	.LVL307
 9744 16d3 1A000000 		.4byte	.LVL312
 9745 16d7 0100     		.2byte	0x1
 9746 16d9 54       		.byte	0x54
 9747 16da 1A000000 		.4byte	.LVL312
 9748 16de 22000000 		.4byte	.LFE116
 9749 16e2 0100     		.2byte	0x1
 9750 16e4 50       		.byte	0x50
 9751 16e5 00000000 		.4byte	0
 9752 16e9 00000000 		.4byte	0
 9753              	.LLST149:
 9754 16ed 00000000 		.4byte	.LVL303
 9755 16f1 06000000 		.4byte	.LVL306
 9756 16f5 0100     		.2byte	0x1
 9757 16f7 52       		.byte	0x52
 9758 16f8 06000000 		.4byte	.LVL306
 9759 16fc 1A000000 		.4byte	.LVL312
 9760 1700 0100     		.2byte	0x1
 9761 1702 55       		.byte	0x55
 9762 1703 1A000000 		.4byte	.LVL312
 9763 1707 22000000 		.4byte	.LFE116
 9764 170b 0100     		.2byte	0x1
 9765 170d 52       		.byte	0x52
 9766 170e 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 341


 9767 1712 00000000 		.4byte	0
 9768              	.LLST150:
 9769 1716 00000000 		.4byte	.LVL303
 9770 171a 04000000 		.4byte	.LVL305
 9771 171e 0100     		.2byte	0x1
 9772 1720 53       		.byte	0x53
 9773 1721 04000000 		.4byte	.LVL305
 9774 1725 22000000 		.4byte	.LFE116
 9775 1729 0400     		.2byte	0x4
 9776 172b F3       		.byte	0xf3
 9777 172c 01       		.uleb128 0x1
 9778 172d 53       		.byte	0x53
 9779 172e 9F       		.byte	0x9f
 9780 172f 00000000 		.4byte	0
 9781 1733 00000000 		.4byte	0
 9782              	.LLST151:
 9783 1737 12000000 		.4byte	.LVL309
 9784 173b 1A000000 		.4byte	.LVL312
 9785 173f 0100     		.2byte	0x1
 9786 1741 50       		.byte	0x50
 9787 1742 00000000 		.4byte	0
 9788 1746 00000000 		.4byte	0
 9789              	.LLST152:
 9790 174a 0E000000 		.4byte	.LVL308
 9791 174e 12000000 		.4byte	.LVL309
 9792 1752 0100     		.2byte	0x1
 9793 1754 50       		.byte	0x50
 9794 1755 12000000 		.4byte	.LVL309
 9795 1759 14000000 		.4byte	.LVL310
 9796 175d 0C00     		.2byte	0xc
 9797 175f 74       		.byte	0x74
 9798 1760 7E       		.sleb128 -2
 9799 1761 94       		.byte	0x94
 9800 1762 02       		.byte	0x2
 9801 1763 40       		.byte	0x40
 9802 1764 24       		.byte	0x24
 9803 1765 40       		.byte	0x40
 9804 1766 26       		.byte	0x26
 9805 1767 71       		.byte	0x71
 9806 1768 00       		.sleb128 0
 9807 1769 22       		.byte	0x22
 9808 176a 9F       		.byte	0x9f
 9809 176b 00000000 		.4byte	0
 9810 176f 00000000 		.4byte	0
 9811              	.LLST153:
 9812 1773 00000000 		.4byte	.LVL313
 9813 1777 0A000000 		.4byte	.LVL317
 9814 177b 0100     		.2byte	0x1
 9815 177d 50       		.byte	0x50
 9816 177e 0A000000 		.4byte	.LVL317
 9817 1782 2A000000 		.4byte	.LVL321
 9818 1786 0100     		.2byte	0x1
 9819 1788 54       		.byte	0x54
 9820 1789 2A000000 		.4byte	.LVL321
 9821 178d 32000000 		.4byte	.LFE117
 9822 1791 0100     		.2byte	0x1
 9823 1793 50       		.byte	0x50
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 342


 9824 1794 00000000 		.4byte	0
 9825 1798 00000000 		.4byte	0
 9826              	.LLST154:
 9827 179c 00000000 		.4byte	.LVL313
 9828 17a0 06000000 		.4byte	.LVL315
 9829 17a4 0100     		.2byte	0x1
 9830 17a6 51       		.byte	0x51
 9831 17a7 06000000 		.4byte	.LVL315
 9832 17ab 30000000 		.4byte	.LVL322
 9833 17af 0100     		.2byte	0x1
 9834 17b1 57       		.byte	0x57
 9835 17b2 30000000 		.4byte	.LVL322
 9836 17b6 32000000 		.4byte	.LFE117
 9837 17ba 0400     		.2byte	0x4
 9838 17bc F3       		.byte	0xf3
 9839 17bd 01       		.uleb128 0x1
 9840 17be 51       		.byte	0x51
 9841 17bf 9F       		.byte	0x9f
 9842 17c0 00000000 		.4byte	0
 9843 17c4 00000000 		.4byte	0
 9844              	.LLST155:
 9845 17c8 00000000 		.4byte	.LVL313
 9846 17cc 08000000 		.4byte	.LVL316
 9847 17d0 0100     		.2byte	0x1
 9848 17d2 52       		.byte	0x52
 9849 17d3 08000000 		.4byte	.LVL316
 9850 17d7 2A000000 		.4byte	.LVL321
 9851 17db 0100     		.2byte	0x1
 9852 17dd 55       		.byte	0x55
 9853 17de 2A000000 		.4byte	.LVL321
 9854 17e2 32000000 		.4byte	.LFE117
 9855 17e6 0100     		.2byte	0x1
 9856 17e8 52       		.byte	0x52
 9857 17e9 00000000 		.4byte	0
 9858 17ed 00000000 		.4byte	0
 9859              	.LLST156:
 9860 17f1 00000000 		.4byte	.LVL313
 9861 17f5 06000000 		.4byte	.LVL315
 9862 17f9 0100     		.2byte	0x1
 9863 17fb 53       		.byte	0x53
 9864 17fc 06000000 		.4byte	.LVL315
 9865 1800 32000000 		.4byte	.LFE117
 9866 1804 0400     		.2byte	0x4
 9867 1806 F3       		.byte	0xf3
 9868 1807 01       		.uleb128 0x1
 9869 1808 53       		.byte	0x53
 9870 1809 9F       		.byte	0x9f
 9871 180a 00000000 		.4byte	0
 9872 180e 00000000 		.4byte	0
 9873              	.LLST157:
 9874 1812 14000000 		.4byte	.LVL318
 9875 1816 1E000000 		.4byte	.LVL319
 9876 181a 0600     		.2byte	0x6
 9877 181c 50       		.byte	0x50
 9878 181d 93       		.byte	0x93
 9879 181e 04       		.uleb128 0x4
 9880 181f 51       		.byte	0x51
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 343


 9881 1820 93       		.byte	0x93
 9882 1821 04       		.uleb128 0x4
 9883 1822 00000000 		.4byte	0
 9884 1826 00000000 		.4byte	0
 9885              	.LLST158:
 9886 182a 00000000 		.4byte	.LVL323
 9887 182e 08000000 		.4byte	.LVL327
 9888 1832 0100     		.2byte	0x1
 9889 1834 50       		.byte	0x50
 9890 1835 08000000 		.4byte	.LVL327
 9891 1839 1A000000 		.4byte	.LVL332
 9892 183d 0100     		.2byte	0x1
 9893 183f 54       		.byte	0x54
 9894 1840 1A000000 		.4byte	.LVL332
 9895 1844 22000000 		.4byte	.LFE118
 9896 1848 0100     		.2byte	0x1
 9897 184a 50       		.byte	0x50
 9898 184b 00000000 		.4byte	0
 9899 184f 00000000 		.4byte	0
 9900              	.LLST159:
 9901 1853 00000000 		.4byte	.LVL323
 9902 1857 06000000 		.4byte	.LVL326
 9903 185b 0100     		.2byte	0x1
 9904 185d 52       		.byte	0x52
 9905 185e 06000000 		.4byte	.LVL326
 9906 1862 1A000000 		.4byte	.LVL332
 9907 1866 0100     		.2byte	0x1
 9908 1868 55       		.byte	0x55
 9909 1869 1A000000 		.4byte	.LVL332
 9910 186d 22000000 		.4byte	.LFE118
 9911 1871 0100     		.2byte	0x1
 9912 1873 52       		.byte	0x52
 9913 1874 00000000 		.4byte	0
 9914 1878 00000000 		.4byte	0
 9915              	.LLST160:
 9916 187c 00000000 		.4byte	.LVL323
 9917 1880 04000000 		.4byte	.LVL325
 9918 1884 0100     		.2byte	0x1
 9919 1886 53       		.byte	0x53
 9920 1887 04000000 		.4byte	.LVL325
 9921 188b 22000000 		.4byte	.LFE118
 9922 188f 0400     		.2byte	0x4
 9923 1891 F3       		.byte	0xf3
 9924 1892 01       		.uleb128 0x1
 9925 1893 53       		.byte	0x53
 9926 1894 9F       		.byte	0x9f
 9927 1895 00000000 		.4byte	0
 9928 1899 00000000 		.4byte	0
 9929              	.LLST161:
 9930 189d 12000000 		.4byte	.LVL329
 9931 18a1 1A000000 		.4byte	.LVL332
 9932 18a5 0100     		.2byte	0x1
 9933 18a7 50       		.byte	0x50
 9934 18a8 00000000 		.4byte	0
 9935 18ac 00000000 		.4byte	0
 9936              	.LLST162:
 9937 18b0 0E000000 		.4byte	.LVL328
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 344


 9938 18b4 12000000 		.4byte	.LVL329
 9939 18b8 0100     		.2byte	0x1
 9940 18ba 50       		.byte	0x50
 9941 18bb 12000000 		.4byte	.LVL329
 9942 18bf 14000000 		.4byte	.LVL330
 9943 18c3 0C00     		.2byte	0xc
 9944 18c5 74       		.byte	0x74
 9945 18c6 7F       		.sleb128 -1
 9946 18c7 94       		.byte	0x94
 9947 18c8 01       		.byte	0x1
 9948 18c9 48       		.byte	0x48
 9949 18ca 24       		.byte	0x24
 9950 18cb 48       		.byte	0x48
 9951 18cc 26       		.byte	0x26
 9952 18cd 71       		.byte	0x71
 9953 18ce 00       		.sleb128 0
 9954 18cf 22       		.byte	0x22
 9955 18d0 9F       		.byte	0x9f
 9956 18d1 00000000 		.4byte	0
 9957 18d5 00000000 		.4byte	0
 9958              	.LLST163:
 9959 18d9 00000000 		.4byte	.LVL333
 9960 18dd 04000000 		.4byte	.LVL335
 9961 18e1 0100     		.2byte	0x1
 9962 18e3 50       		.byte	0x50
 9963 18e4 04000000 		.4byte	.LVL335
 9964 18e8 14000000 		.4byte	.LVL340
 9965 18ec 0300     		.2byte	0x3
 9966 18ee 70       		.byte	0x70
 9967 18ef 02       		.sleb128 2
 9968 18f0 9F       		.byte	0x9f
 9969 18f1 14000000 		.4byte	.LVL340
 9970 18f5 1C000000 		.4byte	.LFE119
 9971 18f9 0100     		.2byte	0x1
 9972 18fb 50       		.byte	0x50
 9973 18fc 00000000 		.4byte	0
 9974 1900 00000000 		.4byte	0
 9975              	.LLST164:
 9976 1904 00000000 		.4byte	.LVL333
 9977 1908 06000000 		.4byte	.LVL336
 9978 190c 0100     		.2byte	0x1
 9979 190e 51       		.byte	0x51
 9980 190f 06000000 		.4byte	.LVL336
 9981 1913 12000000 		.4byte	.LVL339
 9982 1917 0300     		.2byte	0x3
 9983 1919 71       		.byte	0x71
 9984 191a 02       		.sleb128 2
 9985 191b 9F       		.byte	0x9f
 9986 191c 12000000 		.4byte	.LVL339
 9987 1920 1C000000 		.4byte	.LFE119
 9988 1924 0100     		.2byte	0x1
 9989 1926 51       		.byte	0x51
 9990 1927 00000000 		.4byte	0
 9991 192b 00000000 		.4byte	0
 9992              	.LLST165:
 9993 192f 00000000 		.4byte	.LVL333
 9994 1933 04000000 		.4byte	.LVL335
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 345


 9995 1937 0100     		.2byte	0x1
 9996 1939 52       		.byte	0x52
 9997 193a 04000000 		.4byte	.LVL335
 9998 193e 10000000 		.4byte	.LVL338
 9999 1942 0300     		.2byte	0x3
 10000 1944 72       		.byte	0x72
 10001 1945 02       		.sleb128 2
 10002 1946 9F       		.byte	0x9f
 10003 1947 10000000 		.4byte	.LVL338
 10004 194b 1C000000 		.4byte	.LFE119
 10005 194f 0100     		.2byte	0x1
 10006 1951 52       		.byte	0x52
 10007 1952 00000000 		.4byte	0
 10008 1956 00000000 		.4byte	0
 10009              	.LLST166:
 10010 195a 00000000 		.4byte	.LVL333
 10011 195e 04000000 		.4byte	.LVL335
 10012 1962 0100     		.2byte	0x1
 10013 1964 53       		.byte	0x53
 10014 1965 04000000 		.4byte	.LVL335
 10015 1969 1C000000 		.4byte	.LFE119
 10016 196d 0400     		.2byte	0x4
 10017 196f F3       		.byte	0xf3
 10018 1970 01       		.uleb128 0x1
 10019 1971 53       		.byte	0x53
 10020 1972 9F       		.byte	0x9f
 10021 1973 00000000 		.4byte	0
 10022 1977 00000000 		.4byte	0
 10023              	.LLST167:
 10024 197b 00000000 		.4byte	.LVL341
 10025 197f 04000000 		.4byte	.LVL343
 10026 1983 0100     		.2byte	0x1
 10027 1985 50       		.byte	0x50
 10028 1986 04000000 		.4byte	.LVL343
 10029 198a 14000000 		.4byte	.LVL348
 10030 198e 0300     		.2byte	0x3
 10031 1990 70       		.byte	0x70
 10032 1991 04       		.sleb128 4
 10033 1992 9F       		.byte	0x9f
 10034 1993 14000000 		.4byte	.LVL348
 10035 1997 1C000000 		.4byte	.LFE120
 10036 199b 0100     		.2byte	0x1
 10037 199d 50       		.byte	0x50
 10038 199e 00000000 		.4byte	0
 10039 19a2 00000000 		.4byte	0
 10040              	.LLST168:
 10041 19a6 00000000 		.4byte	.LVL341
 10042 19aa 06000000 		.4byte	.LVL344
 10043 19ae 0100     		.2byte	0x1
 10044 19b0 51       		.byte	0x51
 10045 19b1 06000000 		.4byte	.LVL344
 10046 19b5 12000000 		.4byte	.LVL347
 10047 19b9 0300     		.2byte	0x3
 10048 19bb 71       		.byte	0x71
 10049 19bc 04       		.sleb128 4
 10050 19bd 9F       		.byte	0x9f
 10051 19be 12000000 		.4byte	.LVL347
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 346


 10052 19c2 1C000000 		.4byte	.LFE120
 10053 19c6 0100     		.2byte	0x1
 10054 19c8 51       		.byte	0x51
 10055 19c9 00000000 		.4byte	0
 10056 19cd 00000000 		.4byte	0
 10057              	.LLST169:
 10058 19d1 00000000 		.4byte	.LVL341
 10059 19d5 04000000 		.4byte	.LVL343
 10060 19d9 0100     		.2byte	0x1
 10061 19db 52       		.byte	0x52
 10062 19dc 04000000 		.4byte	.LVL343
 10063 19e0 10000000 		.4byte	.LVL346
 10064 19e4 0300     		.2byte	0x3
 10065 19e6 72       		.byte	0x72
 10066 19e7 04       		.sleb128 4
 10067 19e8 9F       		.byte	0x9f
 10068 19e9 10000000 		.4byte	.LVL346
 10069 19ed 1C000000 		.4byte	.LFE120
 10070 19f1 0100     		.2byte	0x1
 10071 19f3 52       		.byte	0x52
 10072 19f4 00000000 		.4byte	0
 10073 19f8 00000000 		.4byte	0
 10074              	.LLST170:
 10075 19fc 00000000 		.4byte	.LVL341
 10076 1a00 04000000 		.4byte	.LVL343
 10077 1a04 0100     		.2byte	0x1
 10078 1a06 53       		.byte	0x53
 10079 1a07 04000000 		.4byte	.LVL343
 10080 1a0b 1C000000 		.4byte	.LFE120
 10081 1a0f 0400     		.2byte	0x4
 10082 1a11 F3       		.byte	0xf3
 10083 1a12 01       		.uleb128 0x1
 10084 1a13 53       		.byte	0x53
 10085 1a14 9F       		.byte	0x9f
 10086 1a15 00000000 		.4byte	0
 10087 1a19 00000000 		.4byte	0
 10088              	.LLST171:
 10089 1a1d 00000000 		.4byte	.LVL349
 10090 1a21 04000000 		.4byte	.LVL351
 10091 1a25 0100     		.2byte	0x1
 10092 1a27 50       		.byte	0x50
 10093 1a28 04000000 		.4byte	.LVL351
 10094 1a2c 14000000 		.4byte	.LVL356
 10095 1a30 0300     		.2byte	0x3
 10096 1a32 70       		.byte	0x70
 10097 1a33 01       		.sleb128 1
 10098 1a34 9F       		.byte	0x9f
 10099 1a35 14000000 		.4byte	.LVL356
 10100 1a39 1C000000 		.4byte	.LFE121
 10101 1a3d 0100     		.2byte	0x1
 10102 1a3f 50       		.byte	0x50
 10103 1a40 00000000 		.4byte	0
 10104 1a44 00000000 		.4byte	0
 10105              	.LLST172:
 10106 1a48 00000000 		.4byte	.LVL349
 10107 1a4c 06000000 		.4byte	.LVL352
 10108 1a50 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 347


 10109 1a52 51       		.byte	0x51
 10110 1a53 06000000 		.4byte	.LVL352
 10111 1a57 12000000 		.4byte	.LVL355
 10112 1a5b 0300     		.2byte	0x3
 10113 1a5d 71       		.byte	0x71
 10114 1a5e 01       		.sleb128 1
 10115 1a5f 9F       		.byte	0x9f
 10116 1a60 12000000 		.4byte	.LVL355
 10117 1a64 1C000000 		.4byte	.LFE121
 10118 1a68 0100     		.2byte	0x1
 10119 1a6a 51       		.byte	0x51
 10120 1a6b 00000000 		.4byte	0
 10121 1a6f 00000000 		.4byte	0
 10122              	.LLST173:
 10123 1a73 00000000 		.4byte	.LVL349
 10124 1a77 04000000 		.4byte	.LVL351
 10125 1a7b 0100     		.2byte	0x1
 10126 1a7d 52       		.byte	0x52
 10127 1a7e 04000000 		.4byte	.LVL351
 10128 1a82 10000000 		.4byte	.LVL354
 10129 1a86 0300     		.2byte	0x3
 10130 1a88 72       		.byte	0x72
 10131 1a89 01       		.sleb128 1
 10132 1a8a 9F       		.byte	0x9f
 10133 1a8b 10000000 		.4byte	.LVL354
 10134 1a8f 1C000000 		.4byte	.LFE121
 10135 1a93 0100     		.2byte	0x1
 10136 1a95 52       		.byte	0x52
 10137 1a96 00000000 		.4byte	0
 10138 1a9a 00000000 		.4byte	0
 10139              	.LLST174:
 10140 1a9e 00000000 		.4byte	.LVL349
 10141 1aa2 04000000 		.4byte	.LVL351
 10142 1aa6 0100     		.2byte	0x1
 10143 1aa8 53       		.byte	0x53
 10144 1aa9 04000000 		.4byte	.LVL351
 10145 1aad 1C000000 		.4byte	.LFE121
 10146 1ab1 0400     		.2byte	0x4
 10147 1ab3 F3       		.byte	0xf3
 10148 1ab4 01       		.uleb128 0x1
 10149 1ab5 53       		.byte	0x53
 10150 1ab6 9F       		.byte	0x9f
 10151 1ab7 00000000 		.4byte	0
 10152 1abb 00000000 		.4byte	0
 10153              	.LLST175:
 10154 1abf 00000000 		.4byte	.LVL357
 10155 1ac3 10000000 		.4byte	.LVL361
 10156 1ac7 0100     		.2byte	0x1
 10157 1ac9 50       		.byte	0x50
 10158 1aca 10000000 		.4byte	.LVL361
 10159 1ace 20000000 		.4byte	.LVL364
 10160 1ad2 0100     		.2byte	0x1
 10161 1ad4 56       		.byte	0x56
 10162 1ad5 20000000 		.4byte	.LVL364
 10163 1ad9 28000000 		.4byte	.LFE122
 10164 1add 0100     		.2byte	0x1
 10165 1adf 50       		.byte	0x50
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 348


 10166 1ae0 00000000 		.4byte	0
 10167 1ae4 00000000 		.4byte	0
 10168              	.LLST176:
 10169 1ae8 00000000 		.4byte	.LVL357
 10170 1aec 0C000000 		.4byte	.LVL359
 10171 1af0 0100     		.2byte	0x1
 10172 1af2 51       		.byte	0x51
 10173 1af3 0C000000 		.4byte	.LVL359
 10174 1af7 28000000 		.4byte	.LFE122
 10175 1afb 0100     		.2byte	0x1
 10176 1afd 58       		.byte	0x58
 10177 1afe 00000000 		.4byte	0
 10178 1b02 00000000 		.4byte	0
 10179              	.LLST177:
 10180 1b06 00000000 		.4byte	.LVL357
 10181 1b0a 0C000000 		.4byte	.LVL359
 10182 1b0e 0100     		.2byte	0x1
 10183 1b10 52       		.byte	0x52
 10184 1b11 0C000000 		.4byte	.LVL359
 10185 1b15 0E000000 		.4byte	.LVL360
 10186 1b19 0100     		.2byte	0x1
 10187 1b1b 55       		.byte	0x55
 10188 1b1c 0E000000 		.4byte	.LVL360
 10189 1b20 20000000 		.4byte	.LVL364
 10190 1b24 0100     		.2byte	0x1
 10191 1b26 57       		.byte	0x57
 10192 1b27 20000000 		.4byte	.LVL364
 10193 1b2b 28000000 		.4byte	.LFE122
 10194 1b2f 0100     		.2byte	0x1
 10195 1b31 55       		.byte	0x55
 10196 1b32 00000000 		.4byte	0
 10197 1b36 00000000 		.4byte	0
 10198              	.LLST178:
 10199 1b3a 00000000 		.4byte	.LVL357
 10200 1b3e 0C000000 		.4byte	.LVL359
 10201 1b42 0100     		.2byte	0x1
 10202 1b44 53       		.byte	0x53
 10203 1b45 0C000000 		.4byte	.LVL359
 10204 1b49 28000000 		.4byte	.LFE122
 10205 1b4d 0400     		.2byte	0x4
 10206 1b4f F3       		.byte	0xf3
 10207 1b50 01       		.uleb128 0x1
 10208 1b51 53       		.byte	0x53
 10209 1b52 9F       		.byte	0x9f
 10210 1b53 00000000 		.4byte	0
 10211 1b57 00000000 		.4byte	0
 10212              	.LLST179:
 10213 1b5b 0A000000 		.4byte	.LVL358
 10214 1b5f 0C000000 		.4byte	.LVL359
 10215 1b63 0100     		.2byte	0x1
 10216 1b65 53       		.byte	0x53
 10217 1b66 0C000000 		.4byte	.LVL359
 10218 1b6a 28000000 		.4byte	.LFE122
 10219 1b6e 0100     		.2byte	0x1
 10220 1b70 54       		.byte	0x54
 10221 1b71 00000000 		.4byte	0
 10222 1b75 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 349


 10223              	.LLST180:
 10224 1b79 00000000 		.4byte	.LVL365
 10225 1b7d 16000000 		.4byte	.LVL369
 10226 1b81 0100     		.2byte	0x1
 10227 1b83 50       		.byte	0x50
 10228 1b84 16000000 		.4byte	.LVL369
 10229 1b88 2A000000 		.4byte	.LVL372
 10230 1b8c 0100     		.2byte	0x1
 10231 1b8e 58       		.byte	0x58
 10232 1b8f 2A000000 		.4byte	.LVL372
 10233 1b93 32000000 		.4byte	.LFE123
 10234 1b97 0100     		.2byte	0x1
 10235 1b99 50       		.byte	0x50
 10236 1b9a 00000000 		.4byte	0
 10237 1b9e 00000000 		.4byte	0
 10238              	.LLST181:
 10239 1ba2 00000000 		.4byte	.LVL365
 10240 1ba6 0E000000 		.4byte	.LVL367
 10241 1baa 0600     		.2byte	0x6
 10242 1bac 52       		.byte	0x52
 10243 1bad 93       		.byte	0x93
 10244 1bae 04       		.uleb128 0x4
 10245 1baf 53       		.byte	0x53
 10246 1bb0 93       		.byte	0x93
 10247 1bb1 04       		.uleb128 0x4
 10248 1bb2 0E000000 		.4byte	.LVL367
 10249 1bb6 32000000 		.4byte	.LFE123
 10250 1bba 0600     		.2byte	0x6
 10251 1bbc F3       		.byte	0xf3
 10252 1bbd 03       		.uleb128 0x3
 10253 1bbe F5       		.byte	0xf5
 10254 1bbf 02       		.uleb128 0x2
 10255 1bc0 25       		.uleb128 0x25
 10256 1bc1 9F       		.byte	0x9f
 10257 1bc2 00000000 		.4byte	0
 10258 1bc6 00000000 		.4byte	0
 10259              	.LLST182:
 10260 1bca 00000000 		.4byte	.LVL365
 10261 1bce 0E000000 		.4byte	.LVL367
 10262 1bd2 0200     		.2byte	0x2
 10263 1bd4 91       		.byte	0x91
 10264 1bd5 00       		.sleb128 0
 10265 1bd6 0E000000 		.4byte	.LVL367
 10266 1bda 12000000 		.4byte	.LVL368
 10267 1bde 0100     		.2byte	0x1
 10268 1be0 55       		.byte	0x55
 10269 1be1 12000000 		.4byte	.LVL368
 10270 1be5 2A000000 		.4byte	.LVL372
 10271 1be9 0100     		.2byte	0x1
 10272 1beb 59       		.byte	0x59
 10273 1bec 2A000000 		.4byte	.LVL372
 10274 1bf0 32000000 		.4byte	.LFE123
 10275 1bf4 0100     		.2byte	0x1
 10276 1bf6 55       		.byte	0x55
 10277 1bf7 00000000 		.4byte	0
 10278 1bfb 00000000 		.4byte	0
 10279              	.LLST183:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 350


 10280 1bff 00000000 		.4byte	.LVL373
 10281 1c03 10000000 		.4byte	.LVL377
 10282 1c07 0100     		.2byte	0x1
 10283 1c09 50       		.byte	0x50
 10284 1c0a 10000000 		.4byte	.LVL377
 10285 1c0e 28000000 		.4byte	.LVL382
 10286 1c12 0100     		.2byte	0x1
 10287 1c14 55       		.byte	0x55
 10288 1c15 28000000 		.4byte	.LVL382
 10289 1c19 30000000 		.4byte	.LFE124
 10290 1c1d 0100     		.2byte	0x1
 10291 1c1f 50       		.byte	0x50
 10292 1c20 00000000 		.4byte	0
 10293 1c24 00000000 		.4byte	0
 10294              	.LLST184:
 10295 1c28 00000000 		.4byte	.LVL373
 10296 1c2c 08000000 		.4byte	.LVL374
 10297 1c30 0100     		.2byte	0x1
 10298 1c32 52       		.byte	0x52
 10299 1c33 08000000 		.4byte	.LVL374
 10300 1c37 30000000 		.4byte	.LFE124
 10301 1c3b 0400     		.2byte	0x4
 10302 1c3d F3       		.byte	0xf3
 10303 1c3e 01       		.uleb128 0x1
 10304 1c3f 52       		.byte	0x52
 10305 1c40 9F       		.byte	0x9f
 10306 1c41 00000000 		.4byte	0
 10307 1c45 00000000 		.4byte	0
 10308              	.LLST185:
 10309 1c49 00000000 		.4byte	.LVL373
 10310 1c4d 0E000000 		.4byte	.LVL376
 10311 1c51 0100     		.2byte	0x1
 10312 1c53 53       		.byte	0x53
 10313 1c54 0E000000 		.4byte	.LVL376
 10314 1c58 28000000 		.4byte	.LVL382
 10315 1c5c 0100     		.2byte	0x1
 10316 1c5e 56       		.byte	0x56
 10317 1c5f 28000000 		.4byte	.LVL382
 10318 1c63 30000000 		.4byte	.LFE124
 10319 1c67 0100     		.2byte	0x1
 10320 1c69 53       		.byte	0x53
 10321 1c6a 00000000 		.4byte	0
 10322 1c6e 00000000 		.4byte	0
 10323              	.LLST186:
 10324 1c72 00000000 		.4byte	.LVL373
 10325 1c76 2E000000 		.4byte	.LVL383
 10326 1c7a 0200     		.2byte	0x2
 10327 1c7c 91       		.byte	0x91
 10328 1c7d 00       		.sleb128 0
 10329 1c7e 2E000000 		.4byte	.LVL383
 10330 1c82 30000000 		.4byte	.LFE124
 10331 1c86 0200     		.2byte	0x2
 10332 1c88 7D       		.byte	0x7d
 10333 1c89 00       		.sleb128 0
 10334 1c8a 00000000 		.4byte	0
 10335 1c8e 00000000 		.4byte	0
 10336              	.LLST187:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 351


 10337 1c92 0A000000 		.4byte	.LVL375
 10338 1c96 2E000000 		.4byte	.LVL383
 10339 1c9a 0100     		.2byte	0x1
 10340 1c9c 54       		.byte	0x54
 10341 1c9d 00000000 		.4byte	0
 10342 1ca1 00000000 		.4byte	0
 10343              	.LLST188:
 10344 1ca5 20000000 		.4byte	.LVL379
 10345 1ca9 28000000 		.4byte	.LVL382
 10346 1cad 0100     		.2byte	0x1
 10347 1caf 50       		.byte	0x50
 10348 1cb0 00000000 		.4byte	0
 10349 1cb4 00000000 		.4byte	0
 10350              	.LLST189:
 10351 1cb8 1C000000 		.4byte	.LVL378
 10352 1cbc 20000000 		.4byte	.LVL379
 10353 1cc0 0100     		.2byte	0x1
 10354 1cc2 50       		.byte	0x50
 10355 1cc3 20000000 		.4byte	.LVL379
 10356 1cc7 22000000 		.4byte	.LVL380
 10357 1ccb 0F00     		.2byte	0xf
 10358 1ccd 75       		.byte	0x75
 10359 1cce 7E       		.sleb128 -2
 10360 1ccf 94       		.byte	0x94
 10361 1cd0 02       		.byte	0x2
 10362 1cd1 40       		.byte	0x40
 10363 1cd2 24       		.byte	0x24
 10364 1cd3 40       		.byte	0x40
 10365 1cd4 26       		.byte	0x26
 10366 1cd5 71       		.byte	0x71
 10367 1cd6 00       		.sleb128 0
 10368 1cd7 1E       		.byte	0x1e
 10369 1cd8 77       		.byte	0x77
 10370 1cd9 00       		.sleb128 0
 10371 1cda 26       		.byte	0x26
 10372 1cdb 9F       		.byte	0x9f
 10373 1cdc 00000000 		.4byte	0
 10374 1ce0 00000000 		.4byte	0
 10375              	.LLST190:
 10376 1ce4 00000000 		.4byte	.LVL384
 10377 1ce8 14000000 		.4byte	.LVL387
 10378 1cec 0100     		.2byte	0x1
 10379 1cee 50       		.byte	0x50
 10380 1cef 14000000 		.4byte	.LVL387
 10381 1cf3 4A000000 		.4byte	.LVL396
 10382 1cf7 0100     		.2byte	0x1
 10383 1cf9 57       		.byte	0x57
 10384 1cfa 4A000000 		.4byte	.LVL396
 10385 1cfe 50000000 		.4byte	.LVL397
 10386 1d02 0100     		.2byte	0x1
 10387 1d04 50       		.byte	0x50
 10388 1d05 50000000 		.4byte	.LVL397
 10389 1d09 74000000 		.4byte	.LVL403
 10390 1d0d 0300     		.2byte	0x3
 10391 1d0f 70       		.byte	0x70
 10392 1d10 04       		.sleb128 4
 10393 1d11 9F       		.byte	0x9f
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 352


 10394 1d12 74000000 		.4byte	.LVL403
 10395 1d16 7E000000 		.4byte	.LFE125
 10396 1d1a 0100     		.2byte	0x1
 10397 1d1c 50       		.byte	0x50
 10398 1d1d 00000000 		.4byte	0
 10399 1d21 00000000 		.4byte	0
 10400              	.LLST191:
 10401 1d25 00000000 		.4byte	.LVL384
 10402 1d29 08000000 		.4byte	.LVL385
 10403 1d2d 0100     		.2byte	0x1
 10404 1d2f 52       		.byte	0x52
 10405 1d30 08000000 		.4byte	.LVL385
 10406 1d34 7E000000 		.4byte	.LFE125
 10407 1d38 0400     		.2byte	0x4
 10408 1d3a F3       		.byte	0xf3
 10409 1d3b 01       		.uleb128 0x1
 10410 1d3c 52       		.byte	0x52
 10411 1d3d 9F       		.byte	0x9f
 10412 1d3e 00000000 		.4byte	0
 10413 1d42 00000000 		.4byte	0
 10414              	.LLST192:
 10415 1d46 00000000 		.4byte	.LVL384
 10416 1d4a 42000000 		.4byte	.LVL393
 10417 1d4e 0100     		.2byte	0x1
 10418 1d50 53       		.byte	0x53
 10419 1d51 42000000 		.4byte	.LVL393
 10420 1d55 48000000 		.4byte	.LVL395
 10421 1d59 0300     		.2byte	0x3
 10422 1d5b 73       		.byte	0x73
 10423 1d5c 04       		.sleb128 4
 10424 1d5d 9F       		.byte	0x9f
 10425 1d5e 48000000 		.4byte	.LVL395
 10426 1d62 6C000000 		.4byte	.LVL400
 10427 1d66 0100     		.2byte	0x1
 10428 1d68 53       		.byte	0x53
 10429 1d69 6C000000 		.4byte	.LVL400
 10430 1d6d 72000000 		.4byte	.LVL402
 10431 1d71 0300     		.2byte	0x3
 10432 1d73 73       		.byte	0x73
 10433 1d74 04       		.sleb128 4
 10434 1d75 9F       		.byte	0x9f
 10435 1d76 72000000 		.4byte	.LVL402
 10436 1d7a 7E000000 		.4byte	.LFE125
 10437 1d7e 0100     		.2byte	0x1
 10438 1d80 53       		.byte	0x53
 10439 1d81 00000000 		.4byte	0
 10440 1d85 00000000 		.4byte	0
 10441              	.LLST193:
 10442 1d89 00000000 		.4byte	.LVL384
 10443 1d8d 7C000000 		.4byte	.LVL404
 10444 1d91 0200     		.2byte	0x2
 10445 1d93 91       		.byte	0x91
 10446 1d94 00       		.sleb128 0
 10447 1d95 7C000000 		.4byte	.LVL404
 10448 1d99 7E000000 		.4byte	.LFE125
 10449 1d9d 0200     		.2byte	0x2
 10450 1d9f 7D       		.byte	0x7d
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 353


 10451 1da0 00       		.sleb128 0
 10452 1da1 00000000 		.4byte	0
 10453 1da5 00000000 		.4byte	0
 10454              	.LLST194:
 10455 1da9 0A000000 		.4byte	.LVL386
 10456 1dad 7C000000 		.4byte	.LVL404
 10457 1db1 0100     		.2byte	0x1
 10458 1db3 56       		.byte	0x56
 10459 1db4 00000000 		.4byte	0
 10460 1db8 00000000 		.4byte	0
 10461              	.LLST195:
 10462 1dbc 16000000 		.4byte	.LVL388
 10463 1dc0 26000000 		.4byte	.LVL389
 10464 1dc4 0100     		.2byte	0x1
 10465 1dc6 54       		.byte	0x54
 10466 1dc7 26000000 		.4byte	.LVL389
 10467 1dcb 2C000000 		.4byte	.LVL390
 10468 1dcf 0200     		.2byte	0x2
 10469 1dd1 77       		.byte	0x77
 10470 1dd2 7C       		.sleb128 -4
 10471 1dd3 2C000000 		.4byte	.LVL390
 10472 1dd7 4A000000 		.4byte	.LVL396
 10473 1ddb 0100     		.2byte	0x1
 10474 1ddd 50       		.byte	0x50
 10475 1dde 52000000 		.4byte	.LVL398
 10476 1de2 66000000 		.4byte	.LVL399
 10477 1de6 0100     		.2byte	0x1
 10478 1de8 57       		.byte	0x57
 10479 1de9 66000000 		.4byte	.LVL399
 10480 1ded 6C000000 		.4byte	.LVL400
 10481 1df1 0100     		.2byte	0x1
 10482 1df3 54       		.byte	0x54
 10483 1df4 6C000000 		.4byte	.LVL400
 10484 1df8 74000000 		.4byte	.LVL403
 10485 1dfc 1100     		.2byte	0x11
 10486 1dfe 71       		.byte	0x71
 10487 1dff 00       		.sleb128 0
 10488 1e00 7B       		.byte	0x7b
 10489 1e01 00       		.sleb128 0
 10490 1e02 1E       		.byte	0x1e
 10491 1e03 71       		.byte	0x71
 10492 1e04 00       		.sleb128 0
 10493 1e05 4F       		.byte	0x4f
 10494 1e06 26       		.byte	0x26
 10495 1e07 77       		.byte	0x77
 10496 1e08 00       		.sleb128 0
 10497 1e09 1E       		.byte	0x1e
 10498 1e0a 22       		.byte	0x22
 10499 1e0b 79       		.byte	0x79
 10500 1e0c 00       		.sleb128 0
 10501 1e0d 22       		.byte	0x22
 10502 1e0e 9F       		.byte	0x9f
 10503 1e0f 00000000 		.4byte	0
 10504 1e13 00000000 		.4byte	0
 10505              	.LLST196:
 10506 1e17 32000000 		.4byte	.LVL391
 10507 1e1b 3E000000 		.4byte	.LVL392
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 354


 10508 1e1f 0100     		.2byte	0x1
 10509 1e21 54       		.byte	0x54
 10510 1e22 3E000000 		.4byte	.LVL392
 10511 1e26 42000000 		.4byte	.LVL393
 10512 1e2a 0A00     		.2byte	0xa
 10513 1e2c 70       		.byte	0x70
 10514 1e2d 00       		.sleb128 0
 10515 1e2e 72       		.byte	0x72
 10516 1e2f 00       		.sleb128 0
 10517 1e30 48       		.byte	0x48
 10518 1e31 24       		.byte	0x24
 10519 1e32 48       		.byte	0x48
 10520 1e33 26       		.byte	0x26
 10521 1e34 24       		.byte	0x24
 10522 1e35 9F       		.byte	0x9f
 10523 1e36 42000000 		.4byte	.LVL393
 10524 1e3a 4A000000 		.4byte	.LVL396
 10525 1e3e 0100     		.2byte	0x1
 10526 1e40 54       		.byte	0x54
 10527 1e41 6C000000 		.4byte	.LVL400
 10528 1e45 74000000 		.4byte	.LVL403
 10529 1e49 0100     		.2byte	0x1
 10530 1e4b 54       		.byte	0x54
 10531 1e4c 00000000 		.4byte	0
 10532 1e50 00000000 		.4byte	0
 10533              	.LLST197:
 10534 1e54 00000000 		.4byte	.LVL405
 10535 1e58 10000000 		.4byte	.LVL409
 10536 1e5c 0100     		.2byte	0x1
 10537 1e5e 50       		.byte	0x50
 10538 1e5f 10000000 		.4byte	.LVL409
 10539 1e63 28000000 		.4byte	.LVL414
 10540 1e67 0100     		.2byte	0x1
 10541 1e69 55       		.byte	0x55
 10542 1e6a 28000000 		.4byte	.LVL414
 10543 1e6e 30000000 		.4byte	.LFE126
 10544 1e72 0100     		.2byte	0x1
 10545 1e74 50       		.byte	0x50
 10546 1e75 00000000 		.4byte	0
 10547 1e79 00000000 		.4byte	0
 10548              	.LLST198:
 10549 1e7d 00000000 		.4byte	.LVL405
 10550 1e81 08000000 		.4byte	.LVL406
 10551 1e85 0100     		.2byte	0x1
 10552 1e87 52       		.byte	0x52
 10553 1e88 08000000 		.4byte	.LVL406
 10554 1e8c 30000000 		.4byte	.LFE126
 10555 1e90 0400     		.2byte	0x4
 10556 1e92 F3       		.byte	0xf3
 10557 1e93 01       		.uleb128 0x1
 10558 1e94 52       		.byte	0x52
 10559 1e95 9F       		.byte	0x9f
 10560 1e96 00000000 		.4byte	0
 10561 1e9a 00000000 		.4byte	0
 10562              	.LLST199:
 10563 1e9e 00000000 		.4byte	.LVL405
 10564 1ea2 0E000000 		.4byte	.LVL408
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 355


 10565 1ea6 0100     		.2byte	0x1
 10566 1ea8 53       		.byte	0x53
 10567 1ea9 0E000000 		.4byte	.LVL408
 10568 1ead 28000000 		.4byte	.LVL414
 10569 1eb1 0100     		.2byte	0x1
 10570 1eb3 56       		.byte	0x56
 10571 1eb4 28000000 		.4byte	.LVL414
 10572 1eb8 30000000 		.4byte	.LFE126
 10573 1ebc 0100     		.2byte	0x1
 10574 1ebe 53       		.byte	0x53
 10575 1ebf 00000000 		.4byte	0
 10576 1ec3 00000000 		.4byte	0
 10577              	.LLST200:
 10578 1ec7 00000000 		.4byte	.LVL405
 10579 1ecb 2E000000 		.4byte	.LVL415
 10580 1ecf 0200     		.2byte	0x2
 10581 1ed1 91       		.byte	0x91
 10582 1ed2 00       		.sleb128 0
 10583 1ed3 2E000000 		.4byte	.LVL415
 10584 1ed7 30000000 		.4byte	.LFE126
 10585 1edb 0200     		.2byte	0x2
 10586 1edd 7D       		.byte	0x7d
 10587 1ede 00       		.sleb128 0
 10588 1edf 00000000 		.4byte	0
 10589 1ee3 00000000 		.4byte	0
 10590              	.LLST201:
 10591 1ee7 0A000000 		.4byte	.LVL407
 10592 1eeb 2E000000 		.4byte	.LVL415
 10593 1eef 0100     		.2byte	0x1
 10594 1ef1 54       		.byte	0x54
 10595 1ef2 00000000 		.4byte	0
 10596 1ef6 00000000 		.4byte	0
 10597              	.LLST202:
 10598 1efa 20000000 		.4byte	.LVL411
 10599 1efe 28000000 		.4byte	.LVL414
 10600 1f02 0100     		.2byte	0x1
 10601 1f04 50       		.byte	0x50
 10602 1f05 00000000 		.4byte	0
 10603 1f09 00000000 		.4byte	0
 10604              	.LLST203:
 10605 1f0d 1C000000 		.4byte	.LVL410
 10606 1f11 20000000 		.4byte	.LVL411
 10607 1f15 0100     		.2byte	0x1
 10608 1f17 50       		.byte	0x50
 10609 1f18 20000000 		.4byte	.LVL411
 10610 1f1c 22000000 		.4byte	.LVL412
 10611 1f20 0F00     		.2byte	0xf
 10612 1f22 75       		.byte	0x75
 10613 1f23 7F       		.sleb128 -1
 10614 1f24 94       		.byte	0x94
 10615 1f25 01       		.byte	0x1
 10616 1f26 48       		.byte	0x48
 10617 1f27 24       		.byte	0x24
 10618 1f28 48       		.byte	0x48
 10619 1f29 26       		.byte	0x26
 10620 1f2a 71       		.byte	0x71
 10621 1f2b 00       		.sleb128 0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 356


 10622 1f2c 1E       		.byte	0x1e
 10623 1f2d 77       		.byte	0x77
 10624 1f2e 00       		.sleb128 0
 10625 1f2f 26       		.byte	0x26
 10626 1f30 9F       		.byte	0x9f
 10627 1f31 00000000 		.4byte	0
 10628 1f35 00000000 		.4byte	0
 10629              	.LLST204:
 10630 1f39 00000000 		.4byte	.LVL416
 10631 1f3d 0C000000 		.4byte	.LVL421
 10632 1f41 0100     		.2byte	0x1
 10633 1f43 50       		.byte	0x50
 10634 1f44 0C000000 		.4byte	.LVL421
 10635 1f48 1E000000 		.4byte	.LVL426
 10636 1f4c 0100     		.2byte	0x1
 10637 1f4e 54       		.byte	0x54
 10638 1f4f 1E000000 		.4byte	.LVL426
 10639 1f53 24000000 		.4byte	.LVL427
 10640 1f57 0100     		.2byte	0x1
 10641 1f59 50       		.byte	0x50
 10642 1f5a 24000000 		.4byte	.LVL427
 10643 1f5e 34000000 		.4byte	.LVL430
 10644 1f62 0300     		.2byte	0x3
 10645 1f64 70       		.byte	0x70
 10646 1f65 02       		.sleb128 2
 10647 1f66 9F       		.byte	0x9f
 10648 1f67 34000000 		.4byte	.LVL430
 10649 1f6b 3C000000 		.4byte	.LFE127
 10650 1f6f 0100     		.2byte	0x1
 10651 1f71 50       		.byte	0x50
 10652 1f72 00000000 		.4byte	0
 10653 1f76 00000000 		.4byte	0
 10654              	.LLST205:
 10655 1f7a 00000000 		.4byte	.LVL416
 10656 1f7e 04000000 		.4byte	.LVL418
 10657 1f82 0100     		.2byte	0x1
 10658 1f84 51       		.byte	0x51
 10659 1f85 04000000 		.4byte	.LVL418
 10660 1f89 3C000000 		.4byte	.LFE127
 10661 1f8d 0400     		.2byte	0x4
 10662 1f8f F3       		.byte	0xf3
 10663 1f90 01       		.uleb128 0x1
 10664 1f91 51       		.byte	0x51
 10665 1f92 9F       		.byte	0x9f
 10666 1f93 00000000 		.4byte	0
 10667 1f97 00000000 		.4byte	0
 10668              	.LLST206:
 10669 1f9b 00000000 		.4byte	.LVL416
 10670 1f9f 0A000000 		.4byte	.LVL420
 10671 1fa3 0100     		.2byte	0x1
 10672 1fa5 52       		.byte	0x52
 10673 1fa6 0A000000 		.4byte	.LVL420
 10674 1faa 1E000000 		.4byte	.LVL426
 10675 1fae 0100     		.2byte	0x1
 10676 1fb0 55       		.byte	0x55
 10677 1fb1 1E000000 		.4byte	.LVL426
 10678 1fb5 24000000 		.4byte	.LVL427
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 357


 10679 1fb9 0100     		.2byte	0x1
 10680 1fbb 52       		.byte	0x52
 10681 1fbc 24000000 		.4byte	.LVL427
 10682 1fc0 32000000 		.4byte	.LVL429
 10683 1fc4 0300     		.2byte	0x3
 10684 1fc6 72       		.byte	0x72
 10685 1fc7 02       		.sleb128 2
 10686 1fc8 9F       		.byte	0x9f
 10687 1fc9 32000000 		.4byte	.LVL429
 10688 1fcd 3C000000 		.4byte	.LFE127
 10689 1fd1 0100     		.2byte	0x1
 10690 1fd3 52       		.byte	0x52
 10691 1fd4 00000000 		.4byte	0
 10692 1fd8 00000000 		.4byte	0
 10693              	.LLST207:
 10694 1fdc 00000000 		.4byte	.LVL416
 10695 1fe0 08000000 		.4byte	.LVL419
 10696 1fe4 0100     		.2byte	0x1
 10697 1fe6 53       		.byte	0x53
 10698 1fe7 08000000 		.4byte	.LVL419
 10699 1feb 3C000000 		.4byte	.LFE127
 10700 1fef 0400     		.2byte	0x4
 10701 1ff1 F3       		.byte	0xf3
 10702 1ff2 01       		.uleb128 0x1
 10703 1ff3 53       		.byte	0x53
 10704 1ff4 9F       		.byte	0x9f
 10705 1ff5 00000000 		.4byte	0
 10706 1ff9 00000000 		.4byte	0
 10707              	.LLST208:
 10708 1ffd 16000000 		.4byte	.LVL423
 10709 2001 1E000000 		.4byte	.LVL426
 10710 2005 0100     		.2byte	0x1
 10711 2007 50       		.byte	0x50
 10712 2008 00000000 		.4byte	0
 10713 200c 00000000 		.4byte	0
 10714              	.LLST209:
 10715 2010 12000000 		.4byte	.LVL422
 10716 2014 16000000 		.4byte	.LVL423
 10717 2018 0100     		.2byte	0x1
 10718 201a 50       		.byte	0x50
 10719 201b 16000000 		.4byte	.LVL423
 10720 201f 18000000 		.4byte	.LVL424
 10721 2023 0C00     		.2byte	0xc
 10722 2025 74       		.byte	0x74
 10723 2026 7E       		.sleb128 -2
 10724 2027 94       		.byte	0x94
 10725 2028 02       		.byte	0x2
 10726 2029 40       		.byte	0x40
 10727 202a 24       		.byte	0x24
 10728 202b 40       		.byte	0x40
 10729 202c 26       		.byte	0x26
 10730 202d 71       		.byte	0x71
 10731 202e 00       		.sleb128 0
 10732 202f 24       		.byte	0x24
 10733 2030 9F       		.byte	0x9f
 10734 2031 00000000 		.4byte	0
 10735 2035 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 358


 10736              	.LLST210:
 10737 2039 00000000 		.4byte	.LVL431
 10738 203d 0E000000 		.4byte	.LVL436
 10739 2041 0100     		.2byte	0x1
 10740 2043 50       		.byte	0x50
 10741 2044 0E000000 		.4byte	.LVL436
 10742 2048 46000000 		.4byte	.LVL441
 10743 204c 0100     		.2byte	0x1
 10744 204e 56       		.byte	0x56
 10745 204f 46000000 		.4byte	.LVL441
 10746 2053 4E000000 		.4byte	.LVL442
 10747 2057 0100     		.2byte	0x1
 10748 2059 50       		.byte	0x50
 10749 205a 4E000000 		.4byte	.LVL442
 10750 205e 5C000000 		.4byte	.LVL445
 10751 2062 0300     		.2byte	0x3
 10752 2064 70       		.byte	0x70
 10753 2065 04       		.sleb128 4
 10754 2066 9F       		.byte	0x9f
 10755 2067 5C000000 		.4byte	.LVL445
 10756 206b 64000000 		.4byte	.LFE128
 10757 206f 0100     		.2byte	0x1
 10758 2071 50       		.byte	0x50
 10759 2072 00000000 		.4byte	0
 10760 2076 00000000 		.4byte	0
 10761              	.LLST211:
 10762 207a 00000000 		.4byte	.LVL431
 10763 207e 06000000 		.4byte	.LVL433
 10764 2082 0100     		.2byte	0x1
 10765 2084 51       		.byte	0x51
 10766 2085 06000000 		.4byte	.LVL433
 10767 2089 64000000 		.4byte	.LFE128
 10768 208d 0400     		.2byte	0x4
 10769 208f F3       		.byte	0xf3
 10770 2090 01       		.uleb128 0x1
 10771 2091 51       		.byte	0x51
 10772 2092 9F       		.byte	0x9f
 10773 2093 00000000 		.4byte	0
 10774 2097 00000000 		.4byte	0
 10775              	.LLST212:
 10776 209b 00000000 		.4byte	.LVL431
 10777 209f 0C000000 		.4byte	.LVL435
 10778 20a3 0100     		.2byte	0x1
 10779 20a5 52       		.byte	0x52
 10780 20a6 0C000000 		.4byte	.LVL435
 10781 20aa 46000000 		.4byte	.LVL441
 10782 20ae 0100     		.2byte	0x1
 10783 20b0 57       		.byte	0x57
 10784 20b1 46000000 		.4byte	.LVL441
 10785 20b5 4E000000 		.4byte	.LVL442
 10786 20b9 0100     		.2byte	0x1
 10787 20bb 52       		.byte	0x52
 10788 20bc 4E000000 		.4byte	.LVL442
 10789 20c0 5A000000 		.4byte	.LVL444
 10790 20c4 0300     		.2byte	0x3
 10791 20c6 72       		.byte	0x72
 10792 20c7 04       		.sleb128 4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 359


 10793 20c8 9F       		.byte	0x9f
 10794 20c9 5A000000 		.4byte	.LVL444
 10795 20cd 64000000 		.4byte	.LFE128
 10796 20d1 0100     		.2byte	0x1
 10797 20d3 52       		.byte	0x52
 10798 20d4 00000000 		.4byte	0
 10799 20d8 00000000 		.4byte	0
 10800              	.LLST213:
 10801 20dc 00000000 		.4byte	.LVL431
 10802 20e0 0A000000 		.4byte	.LVL434
 10803 20e4 0100     		.2byte	0x1
 10804 20e6 53       		.byte	0x53
 10805 20e7 0A000000 		.4byte	.LVL434
 10806 20eb 64000000 		.4byte	.LFE128
 10807 20ef 0400     		.2byte	0x4
 10808 20f1 F3       		.byte	0xf3
 10809 20f2 01       		.uleb128 0x1
 10810 20f3 53       		.byte	0x53
 10811 20f4 9F       		.byte	0x9f
 10812 20f5 00000000 		.4byte	0
 10813 20f9 00000000 		.4byte	0
 10814              	.LLST214:
 10815 20fd 30000000 		.4byte	.LVL437
 10816 2101 3A000000 		.4byte	.LVL438
 10817 2105 0600     		.2byte	0x6
 10818 2107 50       		.byte	0x50
 10819 2108 93       		.byte	0x93
 10820 2109 04       		.uleb128 0x4
 10821 210a 54       		.byte	0x54
 10822 210b 93       		.byte	0x93
 10823 210c 04       		.uleb128 0x4
 10824 210d 00000000 		.4byte	0
 10825 2111 00000000 		.4byte	0
 10826              	.LLST215:
 10827 2115 00000000 		.4byte	.LVL446
 10828 2119 0C000000 		.4byte	.LVL451
 10829 211d 0100     		.2byte	0x1
 10830 211f 50       		.byte	0x50
 10831 2120 0C000000 		.4byte	.LVL451
 10832 2124 1E000000 		.4byte	.LVL456
 10833 2128 0100     		.2byte	0x1
 10834 212a 54       		.byte	0x54
 10835 212b 1E000000 		.4byte	.LVL456
 10836 212f 24000000 		.4byte	.LVL457
 10837 2133 0100     		.2byte	0x1
 10838 2135 50       		.byte	0x50
 10839 2136 24000000 		.4byte	.LVL457
 10840 213a 34000000 		.4byte	.LVL460
 10841 213e 0300     		.2byte	0x3
 10842 2140 70       		.byte	0x70
 10843 2141 01       		.sleb128 1
 10844 2142 9F       		.byte	0x9f
 10845 2143 34000000 		.4byte	.LVL460
 10846 2147 3C000000 		.4byte	.LFE129
 10847 214b 0100     		.2byte	0x1
 10848 214d 50       		.byte	0x50
 10849 214e 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 360


 10850 2152 00000000 		.4byte	0
 10851              	.LLST216:
 10852 2156 00000000 		.4byte	.LVL446
 10853 215a 04000000 		.4byte	.LVL448
 10854 215e 0100     		.2byte	0x1
 10855 2160 51       		.byte	0x51
 10856 2161 04000000 		.4byte	.LVL448
 10857 2165 3C000000 		.4byte	.LFE129
 10858 2169 0400     		.2byte	0x4
 10859 216b F3       		.byte	0xf3
 10860 216c 01       		.uleb128 0x1
 10861 216d 51       		.byte	0x51
 10862 216e 9F       		.byte	0x9f
 10863 216f 00000000 		.4byte	0
 10864 2173 00000000 		.4byte	0
 10865              	.LLST217:
 10866 2177 00000000 		.4byte	.LVL446
 10867 217b 0A000000 		.4byte	.LVL450
 10868 217f 0100     		.2byte	0x1
 10869 2181 52       		.byte	0x52
 10870 2182 0A000000 		.4byte	.LVL450
 10871 2186 1E000000 		.4byte	.LVL456
 10872 218a 0100     		.2byte	0x1
 10873 218c 55       		.byte	0x55
 10874 218d 1E000000 		.4byte	.LVL456
 10875 2191 24000000 		.4byte	.LVL457
 10876 2195 0100     		.2byte	0x1
 10877 2197 52       		.byte	0x52
 10878 2198 24000000 		.4byte	.LVL457
 10879 219c 32000000 		.4byte	.LVL459
 10880 21a0 0300     		.2byte	0x3
 10881 21a2 72       		.byte	0x72
 10882 21a3 01       		.sleb128 1
 10883 21a4 9F       		.byte	0x9f
 10884 21a5 32000000 		.4byte	.LVL459
 10885 21a9 3C000000 		.4byte	.LFE129
 10886 21ad 0100     		.2byte	0x1
 10887 21af 52       		.byte	0x52
 10888 21b0 00000000 		.4byte	0
 10889 21b4 00000000 		.4byte	0
 10890              	.LLST218:
 10891 21b8 00000000 		.4byte	.LVL446
 10892 21bc 08000000 		.4byte	.LVL449
 10893 21c0 0100     		.2byte	0x1
 10894 21c2 53       		.byte	0x53
 10895 21c3 08000000 		.4byte	.LVL449
 10896 21c7 3C000000 		.4byte	.LFE129
 10897 21cb 0400     		.2byte	0x4
 10898 21cd F3       		.byte	0xf3
 10899 21ce 01       		.uleb128 0x1
 10900 21cf 53       		.byte	0x53
 10901 21d0 9F       		.byte	0x9f
 10902 21d1 00000000 		.4byte	0
 10903 21d5 00000000 		.4byte	0
 10904              	.LLST219:
 10905 21d9 16000000 		.4byte	.LVL453
 10906 21dd 1E000000 		.4byte	.LVL456
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 361


 10907 21e1 0100     		.2byte	0x1
 10908 21e3 50       		.byte	0x50
 10909 21e4 00000000 		.4byte	0
 10910 21e8 00000000 		.4byte	0
 10911              	.LLST220:
 10912 21ec 12000000 		.4byte	.LVL452
 10913 21f0 16000000 		.4byte	.LVL453
 10914 21f4 0100     		.2byte	0x1
 10915 21f6 50       		.byte	0x50
 10916 21f7 16000000 		.4byte	.LVL453
 10917 21fb 18000000 		.4byte	.LVL454
 10918 21ff 0C00     		.2byte	0xc
 10919 2201 74       		.byte	0x74
 10920 2202 7F       		.sleb128 -1
 10921 2203 94       		.byte	0x94
 10922 2204 01       		.byte	0x1
 10923 2205 48       		.byte	0x48
 10924 2206 24       		.byte	0x24
 10925 2207 48       		.byte	0x48
 10926 2208 26       		.byte	0x26
 10927 2209 71       		.byte	0x71
 10928 220a 00       		.sleb128 0
 10929 220b 24       		.byte	0x24
 10930 220c 9F       		.byte	0x9f
 10931 220d 00000000 		.4byte	0
 10932 2211 00000000 		.4byte	0
 10933              	.LLST221:
 10934 2215 00000000 		.4byte	.LVL461
 10935 2219 10000000 		.4byte	.LVL465
 10936 221d 0100     		.2byte	0x1
 10937 221f 50       		.byte	0x50
 10938 2220 10000000 		.4byte	.LVL465
 10939 2224 24000000 		.4byte	.LVL469
 10940 2228 0100     		.2byte	0x1
 10941 222a 56       		.byte	0x56
 10942 222b 24000000 		.4byte	.LVL469
 10943 222f 2C000000 		.4byte	.LFE130
 10944 2233 0100     		.2byte	0x1
 10945 2235 50       		.byte	0x50
 10946 2236 00000000 		.4byte	0
 10947 223a 00000000 		.4byte	0
 10948              	.LLST222:
 10949 223e 00000000 		.4byte	.LVL461
 10950 2242 12000000 		.4byte	.LVL466
 10951 2246 0100     		.2byte	0x1
 10952 2248 51       		.byte	0x51
 10953 2249 12000000 		.4byte	.LVL466
 10954 224d 24000000 		.4byte	.LVL469
 10955 2251 0100     		.2byte	0x1
 10956 2253 57       		.byte	0x57
 10957 2254 24000000 		.4byte	.LVL469
 10958 2258 2C000000 		.4byte	.LFE130
 10959 225c 0100     		.2byte	0x1
 10960 225e 51       		.byte	0x51
 10961 225f 00000000 		.4byte	0
 10962 2263 00000000 		.4byte	0
 10963              	.LLST223:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 362


 10964 2267 00000000 		.4byte	.LVL461
 10965 226b 0A000000 		.4byte	.LVL463
 10966 226f 0100     		.2byte	0x1
 10967 2271 52       		.byte	0x52
 10968 2272 0A000000 		.4byte	.LVL463
 10969 2276 0E000000 		.4byte	.LVL464
 10970 227a 0100     		.2byte	0x1
 10971 227c 55       		.byte	0x55
 10972 227d 0E000000 		.4byte	.LVL464
 10973 2281 24000000 		.4byte	.LVL469
 10974 2285 0100     		.2byte	0x1
 10975 2287 58       		.byte	0x58
 10976 2288 24000000 		.4byte	.LVL469
 10977 228c 2C000000 		.4byte	.LFE130
 10978 2290 0100     		.2byte	0x1
 10979 2292 55       		.byte	0x55
 10980 2293 00000000 		.4byte	0
 10981 2297 00000000 		.4byte	0
 10982              	.LLST224:
 10983 229b 00000000 		.4byte	.LVL461
 10984 229f 0A000000 		.4byte	.LVL463
 10985 22a3 0100     		.2byte	0x1
 10986 22a5 53       		.byte	0x53
 10987 22a6 0A000000 		.4byte	.LVL463
 10988 22aa 2C000000 		.4byte	.LFE130
 10989 22ae 0400     		.2byte	0x4
 10990 22b0 F3       		.byte	0xf3
 10991 22b1 01       		.uleb128 0x1
 10992 22b2 53       		.byte	0x53
 10993 22b3 9F       		.byte	0x9f
 10994 22b4 00000000 		.4byte	0
 10995 22b8 00000000 		.4byte	0
 10996              	.LLST225:
 10997 22bc 08000000 		.4byte	.LVL462
 10998 22c0 0A000000 		.4byte	.LVL463
 10999 22c4 0100     		.2byte	0x1
 11000 22c6 53       		.byte	0x53
 11001 22c7 0A000000 		.4byte	.LVL463
 11002 22cb 2C000000 		.4byte	.LFE130
 11003 22cf 0100     		.2byte	0x1
 11004 22d1 54       		.byte	0x54
 11005 22d2 00000000 		.4byte	0
 11006 22d6 00000000 		.4byte	0
 11007              	.LLST226:
 11008 22da 00000000 		.4byte	.LVL470
 11009 22de 14000000 		.4byte	.LVL474
 11010 22e2 0100     		.2byte	0x1
 11011 22e4 50       		.byte	0x50
 11012 22e5 14000000 		.4byte	.LVL474
 11013 22e9 2E000000 		.4byte	.LVL478
 11014 22ed 0100     		.2byte	0x1
 11015 22ef 57       		.byte	0x57
 11016 22f0 2E000000 		.4byte	.LVL478
 11017 22f4 36000000 		.4byte	.LFE131
 11018 22f8 0100     		.2byte	0x1
 11019 22fa 50       		.byte	0x50
 11020 22fb 00000000 		.4byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 363


 11021 22ff 00000000 		.4byte	0
 11022              	.LLST227:
 11023 2303 00000000 		.4byte	.LVL470
 11024 2307 0C000000 		.4byte	.LVL472
 11025 230b 0100     		.2byte	0x1
 11026 230d 51       		.byte	0x51
 11027 230e 0C000000 		.4byte	.LVL472
 11028 2312 18000000 		.4byte	.LVL475
 11029 2316 0100     		.2byte	0x1
 11030 2318 56       		.byte	0x56
 11031 2319 18000000 		.4byte	.LVL475
 11032 231d 2E000000 		.4byte	.LVL478
 11033 2321 0100     		.2byte	0x1
 11034 2323 58       		.byte	0x58
 11035 2324 2E000000 		.4byte	.LVL478
 11036 2328 36000000 		.4byte	.LFE131
 11037 232c 0100     		.2byte	0x1
 11038 232e 56       		.byte	0x56
 11039 232f 00000000 		.4byte	0
 11040 2333 00000000 		.4byte	0
 11041              	.LLST228:
 11042 2337 00000000 		.4byte	.LVL470
 11043 233b 0C000000 		.4byte	.LVL472
 11044 233f 0100     		.2byte	0x1
 11045 2341 52       		.byte	0x52
 11046 2342 0C000000 		.4byte	.LVL472
 11047 2346 10000000 		.4byte	.LVL473
 11048 234a 0100     		.2byte	0x1
 11049 234c 55       		.byte	0x55
 11050 234d 10000000 		.4byte	.LVL473
 11051 2351 2E000000 		.4byte	.LVL478
 11052 2355 0100     		.2byte	0x1
 11053 2357 59       		.byte	0x59
 11054 2358 2E000000 		.4byte	.LVL478
 11055 235c 36000000 		.4byte	.LFE131
 11056 2360 0100     		.2byte	0x1
 11057 2362 55       		.byte	0x55
 11058 2363 00000000 		.4byte	0
 11059 2367 00000000 		.4byte	0
 11060              	.LLST229:
 11061 236b 00000000 		.4byte	.LVL470
 11062 236f 0C000000 		.4byte	.LVL472
 11063 2373 0100     		.2byte	0x1
 11064 2375 53       		.byte	0x53
 11065 2376 0C000000 		.4byte	.LVL472
 11066 237a 36000000 		.4byte	.LFE131
 11067 237e 0400     		.2byte	0x4
 11068 2380 F3       		.byte	0xf3
 11069 2381 01       		.uleb128 0x1
 11070 2382 53       		.byte	0x53
 11071 2383 9F       		.byte	0x9f
 11072 2384 00000000 		.4byte	0
 11073 2388 00000000 		.4byte	0
 11074              	.LLST230:
 11075 238c 0A000000 		.4byte	.LVL471
 11076 2390 0C000000 		.4byte	.LVL472
 11077 2394 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 364


 11078 2396 53       		.byte	0x53
 11079 2397 0C000000 		.4byte	.LVL472
 11080 239b 36000000 		.4byte	.LFE131
 11081 239f 0100     		.2byte	0x1
 11082 23a1 54       		.byte	0x54
 11083 23a2 00000000 		.4byte	0
 11084 23a6 00000000 		.4byte	0
 11085              	.LLST231:
 11086 23aa 00000000 		.4byte	.LVL479
 11087 23ae 08000000 		.4byte	.LVL483
 11088 23b2 0100     		.2byte	0x1
 11089 23b4 50       		.byte	0x50
 11090 23b5 08000000 		.4byte	.LVL483
 11091 23b9 22000000 		.4byte	.LVL490
 11092 23bd 0100     		.2byte	0x1
 11093 23bf 54       		.byte	0x54
 11094 23c0 22000000 		.4byte	.LVL490
 11095 23c4 2A000000 		.4byte	.LFE132
 11096 23c8 0100     		.2byte	0x1
 11097 23ca 50       		.byte	0x50
 11098 23cb 00000000 		.4byte	0
 11099 23cf 00000000 		.4byte	0
 11100              	.LLST232:
 11101 23d3 00000000 		.4byte	.LVL479
 11102 23d7 0E000000 		.4byte	.LVL484
 11103 23db 0100     		.2byte	0x1
 11104 23dd 51       		.byte	0x51
 11105 23de 0E000000 		.4byte	.LVL484
 11106 23e2 22000000 		.4byte	.LVL490
 11107 23e6 0100     		.2byte	0x1
 11108 23e8 55       		.byte	0x55
 11109 23e9 22000000 		.4byte	.LVL490
 11110 23ed 2A000000 		.4byte	.LFE132
 11111 23f1 0100     		.2byte	0x1
 11112 23f3 51       		.byte	0x51
 11113 23f4 00000000 		.4byte	0
 11114 23f8 00000000 		.4byte	0
 11115              	.LLST233:
 11116 23fc 00000000 		.4byte	.LVL479
 11117 2400 06000000 		.4byte	.LVL482
 11118 2404 0100     		.2byte	0x1
 11119 2406 52       		.byte	0x52
 11120 2407 06000000 		.4byte	.LVL482
 11121 240b 22000000 		.4byte	.LVL490
 11122 240f 0100     		.2byte	0x1
 11123 2411 56       		.byte	0x56
 11124 2412 22000000 		.4byte	.LVL490
 11125 2416 2A000000 		.4byte	.LFE132
 11126 241a 0100     		.2byte	0x1
 11127 241c 52       		.byte	0x52
 11128 241d 00000000 		.4byte	0
 11129 2421 00000000 		.4byte	0
 11130              	.LLST234:
 11131 2425 00000000 		.4byte	.LVL479
 11132 2429 04000000 		.4byte	.LVL481
 11133 242d 0100     		.2byte	0x1
 11134 242f 53       		.byte	0x53
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 365


 11135 2430 04000000 		.4byte	.LVL481
 11136 2434 2A000000 		.4byte	.LFE132
 11137 2438 0400     		.2byte	0x4
 11138 243a F3       		.byte	0xf3
 11139 243b 01       		.uleb128 0x1
 11140 243c 53       		.byte	0x53
 11141 243d 9F       		.byte	0x9f
 11142 243e 00000000 		.4byte	0
 11143 2442 00000000 		.4byte	0
 11144              	.LLST235:
 11145 2446 18000000 		.4byte	.LVL486
 11146 244a 20000000 		.4byte	.LVL489
 11147 244e 0100     		.2byte	0x1
 11148 2450 51       		.byte	0x51
 11149 2451 00000000 		.4byte	0
 11150 2455 00000000 		.4byte	0
 11151              	.LLST236:
 11152 2459 14000000 		.4byte	.LVL485
 11153 245d 18000000 		.4byte	.LVL486
 11154 2461 0100     		.2byte	0x1
 11155 2463 51       		.byte	0x51
 11156 2464 18000000 		.4byte	.LVL486
 11157 2468 1A000000 		.4byte	.LVL487
 11158 246c 0C00     		.2byte	0xc
 11159 246e 70       		.byte	0x70
 11160 246f 00       		.sleb128 0
 11161 2470 75       		.byte	0x75
 11162 2471 7E       		.sleb128 -2
 11163 2472 94       		.byte	0x94
 11164 2473 02       		.byte	0x2
 11165 2474 40       		.byte	0x40
 11166 2475 24       		.byte	0x24
 11167 2476 40       		.byte	0x40
 11168 2477 26       		.byte	0x26
 11169 2478 1C       		.byte	0x1c
 11170 2479 9F       		.byte	0x9f
 11171 247a 00000000 		.4byte	0
 11172 247e 00000000 		.4byte	0
 11173              	.LLST237:
 11174 2482 00000000 		.4byte	.LVL491
 11175 2486 08000000 		.4byte	.LVL495
 11176 248a 0100     		.2byte	0x1
 11177 248c 50       		.byte	0x50
 11178 248d 08000000 		.4byte	.LVL495
 11179 2491 2E000000 		.4byte	.LVL503
 11180 2495 0100     		.2byte	0x1
 11181 2497 54       		.byte	0x54
 11182 2498 2E000000 		.4byte	.LVL503
 11183 249c 36000000 		.4byte	.LFE133
 11184 24a0 0100     		.2byte	0x1
 11185 24a2 50       		.byte	0x50
 11186 24a3 00000000 		.4byte	0
 11187 24a7 00000000 		.4byte	0
 11188              	.LLST238:
 11189 24ab 00000000 		.4byte	.LVL491
 11190 24af 0C000000 		.4byte	.LVL496
 11191 24b3 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 366


 11192 24b5 51       		.byte	0x51
 11193 24b6 0C000000 		.4byte	.LVL496
 11194 24ba 2E000000 		.4byte	.LVL503
 11195 24be 0100     		.2byte	0x1
 11196 24c0 55       		.byte	0x55
 11197 24c1 2E000000 		.4byte	.LVL503
 11198 24c5 36000000 		.4byte	.LFE133
 11199 24c9 0100     		.2byte	0x1
 11200 24cb 51       		.byte	0x51
 11201 24cc 00000000 		.4byte	0
 11202 24d0 00000000 		.4byte	0
 11203              	.LLST239:
 11204 24d4 00000000 		.4byte	.LVL491
 11205 24d8 06000000 		.4byte	.LVL494
 11206 24dc 0100     		.2byte	0x1
 11207 24de 52       		.byte	0x52
 11208 24df 06000000 		.4byte	.LVL494
 11209 24e3 2E000000 		.4byte	.LVL503
 11210 24e7 0100     		.2byte	0x1
 11211 24e9 56       		.byte	0x56
 11212 24ea 2E000000 		.4byte	.LVL503
 11213 24ee 36000000 		.4byte	.LFE133
 11214 24f2 0100     		.2byte	0x1
 11215 24f4 52       		.byte	0x52
 11216 24f5 00000000 		.4byte	0
 11217 24f9 00000000 		.4byte	0
 11218              	.LLST240:
 11219 24fd 00000000 		.4byte	.LVL491
 11220 2501 04000000 		.4byte	.LVL493
 11221 2505 0100     		.2byte	0x1
 11222 2507 53       		.byte	0x53
 11223 2508 04000000 		.4byte	.LVL493
 11224 250c 36000000 		.4byte	.LFE133
 11225 2510 0400     		.2byte	0x4
 11226 2512 F3       		.byte	0xf3
 11227 2513 01       		.uleb128 0x1
 11228 2514 53       		.byte	0x53
 11229 2515 9F       		.byte	0x9f
 11230 2516 00000000 		.4byte	0
 11231 251a 00000000 		.4byte	0
 11232              	.LLST241:
 11233 251e 0E000000 		.4byte	.LVL497
 11234 2522 2E000000 		.4byte	.LVL503
 11235 2526 0100     		.2byte	0x1
 11236 2528 57       		.byte	0x57
 11237 2529 00000000 		.4byte	0
 11238 252d 00000000 		.4byte	0
 11239              	.LLST242:
 11240 2531 0E000000 		.4byte	.LVL497
 11241 2535 12000000 		.4byte	.LVL498
 11242 2539 0100     		.2byte	0x1
 11243 253b 50       		.byte	0x50
 11244 253c 12000000 		.4byte	.LVL498
 11245 2540 26000000 		.4byte	.LVL501
 11246 2544 0200     		.2byte	0x2
 11247 2546 74       		.byte	0x74
 11248 2547 7C       		.sleb128 -4
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 367


 11249 2548 00000000 		.4byte	0
 11250 254c 00000000 		.4byte	0
 11251              	.LLST243:
 11252 2550 16000000 		.4byte	.LVL499
 11253 2554 20000000 		.4byte	.LVL500
 11254 2558 0600     		.2byte	0x6
 11255 255a 50       		.byte	0x50
 11256 255b 93       		.byte	0x93
 11257 255c 04       		.uleb128 0x4
 11258 255d 51       		.byte	0x51
 11259 255e 93       		.byte	0x93
 11260 255f 04       		.uleb128 0x4
 11261 2560 00000000 		.4byte	0
 11262 2564 00000000 		.4byte	0
 11263              	.LLST244:
 11264 2568 00000000 		.4byte	.LVL504
 11265 256c 08000000 		.4byte	.LVL508
 11266 2570 0100     		.2byte	0x1
 11267 2572 50       		.byte	0x50
 11268 2573 08000000 		.4byte	.LVL508
 11269 2577 22000000 		.4byte	.LVL515
 11270 257b 0100     		.2byte	0x1
 11271 257d 54       		.byte	0x54
 11272 257e 22000000 		.4byte	.LVL515
 11273 2582 2A000000 		.4byte	.LFE134
 11274 2586 0100     		.2byte	0x1
 11275 2588 50       		.byte	0x50
 11276 2589 00000000 		.4byte	0
 11277 258d 00000000 		.4byte	0
 11278              	.LLST245:
 11279 2591 00000000 		.4byte	.LVL504
 11280 2595 0A000000 		.4byte	.LVL509
 11281 2599 0100     		.2byte	0x1
 11282 259b 51       		.byte	0x51
 11283 259c 0A000000 		.4byte	.LVL509
 11284 25a0 22000000 		.4byte	.LVL515
 11285 25a4 0100     		.2byte	0x1
 11286 25a6 55       		.byte	0x55
 11287 25a7 22000000 		.4byte	.LVL515
 11288 25ab 2A000000 		.4byte	.LFE134
 11289 25af 0100     		.2byte	0x1
 11290 25b1 51       		.byte	0x51
 11291 25b2 00000000 		.4byte	0
 11292 25b6 00000000 		.4byte	0
 11293              	.LLST246:
 11294 25ba 00000000 		.4byte	.LVL504
 11295 25be 06000000 		.4byte	.LVL507
 11296 25c2 0100     		.2byte	0x1
 11297 25c4 52       		.byte	0x52
 11298 25c5 06000000 		.4byte	.LVL507
 11299 25c9 22000000 		.4byte	.LVL515
 11300 25cd 0100     		.2byte	0x1
 11301 25cf 56       		.byte	0x56
 11302 25d0 22000000 		.4byte	.LVL515
 11303 25d4 2A000000 		.4byte	.LFE134
 11304 25d8 0100     		.2byte	0x1
 11305 25da 52       		.byte	0x52
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 368


 11306 25db 00000000 		.4byte	0
 11307 25df 00000000 		.4byte	0
 11308              	.LLST247:
 11309 25e3 00000000 		.4byte	.LVL504
 11310 25e7 04000000 		.4byte	.LVL506
 11311 25eb 0100     		.2byte	0x1
 11312 25ed 53       		.byte	0x53
 11313 25ee 04000000 		.4byte	.LVL506
 11314 25f2 2A000000 		.4byte	.LFE134
 11315 25f6 0400     		.2byte	0x4
 11316 25f8 F3       		.byte	0xf3
 11317 25f9 01       		.uleb128 0x1
 11318 25fa 53       		.byte	0x53
 11319 25fb 9F       		.byte	0x9f
 11320 25fc 00000000 		.4byte	0
 11321 2600 00000000 		.4byte	0
 11322              	.LLST248:
 11323 2604 18000000 		.4byte	.LVL511
 11324 2608 20000000 		.4byte	.LVL514
 11325 260c 0100     		.2byte	0x1
 11326 260e 51       		.byte	0x51
 11327 260f 00000000 		.4byte	0
 11328 2613 00000000 		.4byte	0
 11329              	.LLST249:
 11330 2617 14000000 		.4byte	.LVL510
 11331 261b 18000000 		.4byte	.LVL511
 11332 261f 0100     		.2byte	0x1
 11333 2621 51       		.byte	0x51
 11334 2622 18000000 		.4byte	.LVL511
 11335 2626 1A000000 		.4byte	.LVL512
 11336 262a 0C00     		.2byte	0xc
 11337 262c 70       		.byte	0x70
 11338 262d 00       		.sleb128 0
 11339 262e 75       		.byte	0x75
 11340 262f 7F       		.sleb128 -1
 11341 2630 94       		.byte	0x94
 11342 2631 01       		.byte	0x1
 11343 2632 48       		.byte	0x48
 11344 2633 24       		.byte	0x24
 11345 2634 48       		.byte	0x48
 11346 2635 26       		.byte	0x26
 11347 2636 1C       		.byte	0x1c
 11348 2637 9F       		.byte	0x9f
 11349 2638 00000000 		.4byte	0
 11350 263c 00000000 		.4byte	0
 11351              	.LLST250:
 11352 2640 00000000 		.4byte	.LVL516
 11353 2644 04000000 		.4byte	.LVL518
 11354 2648 0100     		.2byte	0x1
 11355 264a 50       		.byte	0x50
 11356 264b 04000000 		.4byte	.LVL518
 11357 264f 14000000 		.4byte	.LVL523
 11358 2653 0300     		.2byte	0x3
 11359 2655 70       		.byte	0x70
 11360 2656 02       		.sleb128 2
 11361 2657 9F       		.byte	0x9f
 11362 2658 14000000 		.4byte	.LVL523
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 369


 11363 265c 1C000000 		.4byte	.LFE135
 11364 2660 0100     		.2byte	0x1
 11365 2662 50       		.byte	0x50
 11366 2663 00000000 		.4byte	0
 11367 2667 00000000 		.4byte	0
 11368              	.LLST251:
 11369 266b 00000000 		.4byte	.LVL516
 11370 266f 06000000 		.4byte	.LVL519
 11371 2673 0100     		.2byte	0x1
 11372 2675 51       		.byte	0x51
 11373 2676 06000000 		.4byte	.LVL519
 11374 267a 12000000 		.4byte	.LVL522
 11375 267e 0300     		.2byte	0x3
 11376 2680 71       		.byte	0x71
 11377 2681 02       		.sleb128 2
 11378 2682 9F       		.byte	0x9f
 11379 2683 12000000 		.4byte	.LVL522
 11380 2687 1C000000 		.4byte	.LFE135
 11381 268b 0100     		.2byte	0x1
 11382 268d 51       		.byte	0x51
 11383 268e 00000000 		.4byte	0
 11384 2692 00000000 		.4byte	0
 11385              	.LLST252:
 11386 2696 00000000 		.4byte	.LVL516
 11387 269a 04000000 		.4byte	.LVL518
 11388 269e 0100     		.2byte	0x1
 11389 26a0 52       		.byte	0x52
 11390 26a1 04000000 		.4byte	.LVL518
 11391 26a5 10000000 		.4byte	.LVL521
 11392 26a9 0300     		.2byte	0x3
 11393 26ab 72       		.byte	0x72
 11394 26ac 02       		.sleb128 2
 11395 26ad 9F       		.byte	0x9f
 11396 26ae 10000000 		.4byte	.LVL521
 11397 26b2 1C000000 		.4byte	.LFE135
 11398 26b6 0100     		.2byte	0x1
 11399 26b8 52       		.byte	0x52
 11400 26b9 00000000 		.4byte	0
 11401 26bd 00000000 		.4byte	0
 11402              	.LLST253:
 11403 26c1 00000000 		.4byte	.LVL516
 11404 26c5 04000000 		.4byte	.LVL518
 11405 26c9 0100     		.2byte	0x1
 11406 26cb 53       		.byte	0x53
 11407 26cc 04000000 		.4byte	.LVL518
 11408 26d0 1C000000 		.4byte	.LFE135
 11409 26d4 0400     		.2byte	0x4
 11410 26d6 F3       		.byte	0xf3
 11411 26d7 01       		.uleb128 0x1
 11412 26d8 53       		.byte	0x53
 11413 26d9 9F       		.byte	0x9f
 11414 26da 00000000 		.4byte	0
 11415 26de 00000000 		.4byte	0
 11416              	.LLST254:
 11417 26e2 00000000 		.4byte	.LVL524
 11418 26e6 04000000 		.4byte	.LVL526
 11419 26ea 0100     		.2byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 370


 11420 26ec 50       		.byte	0x50
 11421 26ed 04000000 		.4byte	.LVL526
 11422 26f1 14000000 		.4byte	.LVL531
 11423 26f5 0300     		.2byte	0x3
 11424 26f7 70       		.byte	0x70
 11425 26f8 04       		.sleb128 4
 11426 26f9 9F       		.byte	0x9f
 11427 26fa 14000000 		.4byte	.LVL531
 11428 26fe 1C000000 		.4byte	.LFE136
 11429 2702 0100     		.2byte	0x1
 11430 2704 50       		.byte	0x50
 11431 2705 00000000 		.4byte	0
 11432 2709 00000000 		.4byte	0
 11433              	.LLST255:
 11434 270d 00000000 		.4byte	.LVL524
 11435 2711 06000000 		.4byte	.LVL527
 11436 2715 0100     		.2byte	0x1
 11437 2717 51       		.byte	0x51
 11438 2718 06000000 		.4byte	.LVL527
 11439 271c 12000000 		.4byte	.LVL530
 11440 2720 0300     		.2byte	0x3
 11441 2722 71       		.byte	0x71
 11442 2723 04       		.sleb128 4
 11443 2724 9F       		.byte	0x9f
 11444 2725 12000000 		.4byte	.LVL530
 11445 2729 1C000000 		.4byte	.LFE136
 11446 272d 0100     		.2byte	0x1
 11447 272f 51       		.byte	0x51
 11448 2730 00000000 		.4byte	0
 11449 2734 00000000 		.4byte	0
 11450              	.LLST256:
 11451 2738 00000000 		.4byte	.LVL524
 11452 273c 04000000 		.4byte	.LVL526
 11453 2740 0100     		.2byte	0x1
 11454 2742 52       		.byte	0x52
 11455 2743 04000000 		.4byte	.LVL526
 11456 2747 10000000 		.4byte	.LVL529
 11457 274b 0300     		.2byte	0x3
 11458 274d 72       		.byte	0x72
 11459 274e 04       		.sleb128 4
 11460 274f 9F       		.byte	0x9f
 11461 2750 10000000 		.4byte	.LVL529
 11462 2754 1C000000 		.4byte	.LFE136
 11463 2758 0100     		.2byte	0x1
 11464 275a 52       		.byte	0x52
 11465 275b 00000000 		.4byte	0
 11466 275f 00000000 		.4byte	0
 11467              	.LLST257:
 11468 2763 00000000 		.4byte	.LVL524
 11469 2767 04000000 		.4byte	.LVL526
 11470 276b 0100     		.2byte	0x1
 11471 276d 53       		.byte	0x53
 11472 276e 04000000 		.4byte	.LVL526
 11473 2772 1C000000 		.4byte	.LFE136
 11474 2776 0400     		.2byte	0x4
 11475 2778 F3       		.byte	0xf3
 11476 2779 01       		.uleb128 0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 371


 11477 277a 53       		.byte	0x53
 11478 277b 9F       		.byte	0x9f
 11479 277c 00000000 		.4byte	0
 11480 2780 00000000 		.4byte	0
 11481              	.LLST258:
 11482 2784 00000000 		.4byte	.LVL532
 11483 2788 04000000 		.4byte	.LVL534
 11484 278c 0100     		.2byte	0x1
 11485 278e 50       		.byte	0x50
 11486 278f 04000000 		.4byte	.LVL534
 11487 2793 14000000 		.4byte	.LVL539
 11488 2797 0300     		.2byte	0x3
 11489 2799 70       		.byte	0x70
 11490 279a 01       		.sleb128 1
 11491 279b 9F       		.byte	0x9f
 11492 279c 14000000 		.4byte	.LVL539
 11493 27a0 1C000000 		.4byte	.LFE137
 11494 27a4 0100     		.2byte	0x1
 11495 27a6 50       		.byte	0x50
 11496 27a7 00000000 		.4byte	0
 11497 27ab 00000000 		.4byte	0
 11498              	.LLST259:
 11499 27af 00000000 		.4byte	.LVL532
 11500 27b3 06000000 		.4byte	.LVL535
 11501 27b7 0100     		.2byte	0x1
 11502 27b9 51       		.byte	0x51
 11503 27ba 06000000 		.4byte	.LVL535
 11504 27be 12000000 		.4byte	.LVL538
 11505 27c2 0300     		.2byte	0x3
 11506 27c4 71       		.byte	0x71
 11507 27c5 01       		.sleb128 1
 11508 27c6 9F       		.byte	0x9f
 11509 27c7 12000000 		.4byte	.LVL538
 11510 27cb 1C000000 		.4byte	.LFE137
 11511 27cf 0100     		.2byte	0x1
 11512 27d1 51       		.byte	0x51
 11513 27d2 00000000 		.4byte	0
 11514 27d6 00000000 		.4byte	0
 11515              	.LLST260:
 11516 27da 00000000 		.4byte	.LVL532
 11517 27de 04000000 		.4byte	.LVL534
 11518 27e2 0100     		.2byte	0x1
 11519 27e4 52       		.byte	0x52
 11520 27e5 04000000 		.4byte	.LVL534
 11521 27e9 10000000 		.4byte	.LVL537
 11522 27ed 0300     		.2byte	0x3
 11523 27ef 72       		.byte	0x72
 11524 27f0 01       		.sleb128 1
 11525 27f1 9F       		.byte	0x9f
 11526 27f2 10000000 		.4byte	.LVL537
 11527 27f6 1C000000 		.4byte	.LFE137
 11528 27fa 0100     		.2byte	0x1
 11529 27fc 52       		.byte	0x52
 11530 27fd 00000000 		.4byte	0
 11531 2801 00000000 		.4byte	0
 11532              	.LLST261:
 11533 2805 00000000 		.4byte	.LVL532
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 372


 11534 2809 04000000 		.4byte	.LVL534
 11535 280d 0100     		.2byte	0x1
 11536 280f 53       		.byte	0x53
 11537 2810 04000000 		.4byte	.LVL534
 11538 2814 1C000000 		.4byte	.LFE137
 11539 2818 0400     		.2byte	0x4
 11540 281a F3       		.byte	0xf3
 11541 281b 01       		.uleb128 0x1
 11542 281c 53       		.byte	0x53
 11543 281d 9F       		.byte	0x9f
 11544 281e 00000000 		.4byte	0
 11545 2822 00000000 		.4byte	0
 11546              	.LLST262:
 11547 2826 00000000 		.4byte	.LVL540
 11548 282a 14000000 		.4byte	.LVL542
 11549 282e 0100     		.2byte	0x1
 11550 2830 50       		.byte	0x50
 11551 2831 14000000 		.4byte	.LVL542
 11552 2835 48000000 		.4byte	.LFE138
 11553 2839 0100     		.2byte	0x1
 11554 283b 59       		.byte	0x59
 11555 283c 00000000 		.4byte	0
 11556 2840 00000000 		.4byte	0
 11557              	.LLST263:
 11558 2844 00000000 		.4byte	.LVL540
 11559 2848 14000000 		.4byte	.LVL542
 11560 284c 0100     		.2byte	0x1
 11561 284e 51       		.byte	0x51
 11562 284f 14000000 		.4byte	.LVL542
 11563 2853 48000000 		.4byte	.LFE138
 11564 2857 0100     		.2byte	0x1
 11565 2859 5A       		.byte	0x5a
 11566 285a 00000000 		.4byte	0
 11567 285e 00000000 		.4byte	0
 11568              	.LLST264:
 11569 2862 00000000 		.4byte	.LVL540
 11570 2866 14000000 		.4byte	.LVL542
 11571 286a 0100     		.2byte	0x1
 11572 286c 52       		.byte	0x52
 11573 286d 14000000 		.4byte	.LVL542
 11574 2871 48000000 		.4byte	.LFE138
 11575 2875 0100     		.2byte	0x1
 11576 2877 5B       		.byte	0x5b
 11577 2878 00000000 		.4byte	0
 11578 287c 00000000 		.4byte	0
 11579              	.LLST265:
 11580 2880 00000000 		.4byte	.LVL540
 11581 2884 14000000 		.4byte	.LVL542
 11582 2888 0100     		.2byte	0x1
 11583 288a 53       		.byte	0x53
 11584 288b 14000000 		.4byte	.LVL542
 11585 288f 48000000 		.4byte	.LFE138
 11586 2893 0100     		.2byte	0x1
 11587 2895 56       		.byte	0x56
 11588 2896 00000000 		.4byte	0
 11589 289a 00000000 		.4byte	0
 11590              	.LLST266:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 373


 11591 289e 10000000 		.4byte	.LVL541
 11592 28a2 14000000 		.4byte	.LVL542
 11593 28a6 0200     		.2byte	0x2
 11594 28a8 30       		.byte	0x30
 11595 28a9 9F       		.byte	0x9f
 11596 28aa 14000000 		.4byte	.LVL542
 11597 28ae 48000000 		.4byte	.LFE138
 11598 28b2 0100     		.2byte	0x1
 11599 28b4 54       		.byte	0x54
 11600 28b5 00000000 		.4byte	0
 11601 28b9 00000000 		.4byte	0
 11602              	.LLST267:
 11603 28bd 00000000 		.4byte	.LVL546
 11604 28c1 2A000000 		.4byte	.LVL550
 11605 28c5 0200     		.2byte	0x2
 11606 28c7 91       		.byte	0x91
 11607 28c8 00       		.sleb128 0
 11608 28c9 2A000000 		.4byte	.LVL550
 11609 28cd 2C000000 		.4byte	.LFE139
 11610 28d1 0200     		.2byte	0x2
 11611 28d3 7D       		.byte	0x7d
 11612 28d4 00       		.sleb128 0
 11613 28d5 00000000 		.4byte	0
 11614 28d9 00000000 		.4byte	0
 11615              	.LLST268:
 11616 28dd 04000000 		.4byte	.LVL547
 11617 28e1 08000000 		.4byte	.LVL548
 11618 28e5 0200     		.2byte	0x2
 11619 28e7 30       		.byte	0x30
 11620 28e8 9F       		.byte	0x9f
 11621 28e9 08000000 		.4byte	.LVL548
 11622 28ed 2A000000 		.4byte	.LVL550
 11623 28f1 0100     		.2byte	0x1
 11624 28f3 54       		.byte	0x54
 11625 28f4 00000000 		.4byte	0
 11626 28f8 00000000 		.4byte	0
 11627              	.LLST269:
 11628 28fc 06000000 		.4byte	.LVL552
 11629 2900 0A000000 		.4byte	.LVL553
 11630 2904 0200     		.2byte	0x2
 11631 2906 30       		.byte	0x30
 11632 2907 9F       		.byte	0x9f
 11633 2908 0A000000 		.4byte	.LVL553
 11634 290c 30000000 		.4byte	.LFE140
 11635 2910 0100     		.2byte	0x1
 11636 2912 54       		.byte	0x54
 11637 2913 00000000 		.4byte	0
 11638 2917 00000000 		.4byte	0
 11639              	.LLST270:
 11640 291b 00000000 		.4byte	.LVL555
 11641 291f 28000000 		.4byte	.LVL559
 11642 2923 0200     		.2byte	0x2
 11643 2925 91       		.byte	0x91
 11644 2926 00       		.sleb128 0
 11645 2927 28000000 		.4byte	.LVL559
 11646 292b 2A000000 		.4byte	.LFE141
 11647 292f 0200     		.2byte	0x2
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 374


 11648 2931 7D       		.byte	0x7d
 11649 2932 00       		.sleb128 0
 11650 2933 00000000 		.4byte	0
 11651 2937 00000000 		.4byte	0
 11652              	.LLST271:
 11653 293b 04000000 		.4byte	.LVL556
 11654 293f 08000000 		.4byte	.LVL557
 11655 2943 0200     		.2byte	0x2
 11656 2945 30       		.byte	0x30
 11657 2946 9F       		.byte	0x9f
 11658 2947 08000000 		.4byte	.LVL557
 11659 294b 28000000 		.4byte	.LVL559
 11660 294f 0100     		.2byte	0x1
 11661 2951 54       		.byte	0x54
 11662 2952 00000000 		.4byte	0
 11663 2956 00000000 		.4byte	0
 11664              		.section	.debug_aranges,"",%progbits
 11665 0000 EC010000 		.4byte	0x1ec
 11666 0004 0200     		.2byte	0x2
 11667 0006 00000000 		.4byte	.Ldebug_info0
 11668 000a 04       		.byte	0x4
 11669 000b 00       		.byte	0
 11670 000c 0000     		.2byte	0
 11671 000e 0000     		.2byte	0
 11672 0010 00000000 		.4byte	.LFB83
 11673 0014 16000000 		.4byte	.LFE83-.LFB83
 11674 0018 00000000 		.4byte	.LFB84
 11675 001c 1E000000 		.4byte	.LFE84-.LFB84
 11676 0020 00000000 		.4byte	.LFB85
 11677 0024 30000000 		.4byte	.LFE85-.LFB85
 11678 0028 00000000 		.4byte	.LFB86
 11679 002c 2E000000 		.4byte	.LFE86-.LFB86
 11680 0030 00000000 		.4byte	.LFB87
 11681 0034 2E000000 		.4byte	.LFE87-.LFB87
 11682 0038 00000000 		.4byte	.LFB88
 11683 003c 2C000000 		.4byte	.LFE88-.LFB88
 11684 0040 00000000 		.4byte	.LFB89
 11685 0044 36000000 		.4byte	.LFE89-.LFB89
 11686 0048 00000000 		.4byte	.LFB90
 11687 004c 2A000000 		.4byte	.LFE90-.LFB90
 11688 0050 00000000 		.4byte	.LFB91
 11689 0054 36000000 		.4byte	.LFE91-.LFB91
 11690 0058 00000000 		.4byte	.LFB92
 11691 005c 2A000000 		.4byte	.LFE92-.LFB92
 11692 0060 00000000 		.4byte	.LFB93
 11693 0064 1C000000 		.4byte	.LFE93-.LFB93
 11694 0068 00000000 		.4byte	.LFB94
 11695 006c 1C000000 		.4byte	.LFE94-.LFB94
 11696 0070 00000000 		.4byte	.LFB95
 11697 0074 1C000000 		.4byte	.LFE95-.LFB95
 11698 0078 00000000 		.4byte	.LFB96
 11699 007c 34000000 		.4byte	.LFE96-.LFB96
 11700 0080 00000000 		.4byte	.LFB97
 11701 0084 44000000 		.4byte	.LFE97-.LFB97
 11702 0088 00000000 		.4byte	.LFB98
 11703 008c 2C000000 		.4byte	.LFE98-.LFB98
 11704 0090 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 375


 11705 0094 50000000 		.4byte	.LFE99-.LFB99
 11706 0098 00000000 		.4byte	.LFB100
 11707 009c 22000000 		.4byte	.LFE100-.LFB100
 11708 00a0 00000000 		.4byte	.LFB101
 11709 00a4 2C000000 		.4byte	.LFE101-.LFB101
 11710 00a8 00000000 		.4byte	.LFB102
 11711 00ac 36000000 		.4byte	.LFE102-.LFB102
 11712 00b0 00000000 		.4byte	.LFB103
 11713 00b4 2E000000 		.4byte	.LFE103-.LFB103
 11714 00b8 00000000 		.4byte	.LFB104
 11715 00bc 3E000000 		.4byte	.LFE104-.LFB104
 11716 00c0 00000000 		.4byte	.LFB105
 11717 00c4 2E000000 		.4byte	.LFE105-.LFB105
 11718 00c8 00000000 		.4byte	.LFB106
 11719 00cc 16000000 		.4byte	.LFE106-.LFB106
 11720 00d0 00000000 		.4byte	.LFB107
 11721 00d4 1E000000 		.4byte	.LFE107-.LFB107
 11722 00d8 00000000 		.4byte	.LFB108
 11723 00dc 2C000000 		.4byte	.LFE108-.LFB108
 11724 00e0 00000000 		.4byte	.LFB109
 11725 00e4 2A000000 		.4byte	.LFE109-.LFB109
 11726 00e8 00000000 		.4byte	.LFB110
 11727 00ec 2A000000 		.4byte	.LFE110-.LFB110
 11728 00f0 00000000 		.4byte	.LFB111
 11729 00f4 14000000 		.4byte	.LFE111-.LFB111
 11730 00f8 00000000 		.4byte	.LFB112
 11731 00fc 14000000 		.4byte	.LFE112-.LFB112
 11732 0100 00000000 		.4byte	.LFB113
 11733 0104 14000000 		.4byte	.LFE113-.LFB113
 11734 0108 00000000 		.4byte	.LFB114
 11735 010c 28000000 		.4byte	.LFE114-.LFB114
 11736 0110 00000000 		.4byte	.LFB115
 11737 0114 32000000 		.4byte	.LFE115-.LFB115
 11738 0118 00000000 		.4byte	.LFB116
 11739 011c 22000000 		.4byte	.LFE116-.LFB116
 11740 0120 00000000 		.4byte	.LFB117
 11741 0124 32000000 		.4byte	.LFE117-.LFB117
 11742 0128 00000000 		.4byte	.LFB118
 11743 012c 22000000 		.4byte	.LFE118-.LFB118
 11744 0130 00000000 		.4byte	.LFB119
 11745 0134 1C000000 		.4byte	.LFE119-.LFB119
 11746 0138 00000000 		.4byte	.LFB120
 11747 013c 1C000000 		.4byte	.LFE120-.LFB120
 11748 0140 00000000 		.4byte	.LFB121
 11749 0144 1C000000 		.4byte	.LFE121-.LFB121
 11750 0148 00000000 		.4byte	.LFB122
 11751 014c 28000000 		.4byte	.LFE122-.LFB122
 11752 0150 00000000 		.4byte	.LFB123
 11753 0154 32000000 		.4byte	.LFE123-.LFB123
 11754 0158 00000000 		.4byte	.LFB124
 11755 015c 30000000 		.4byte	.LFE124-.LFB124
 11756 0160 00000000 		.4byte	.LFB125
 11757 0164 7E000000 		.4byte	.LFE125-.LFB125
 11758 0168 00000000 		.4byte	.LFB126
 11759 016c 30000000 		.4byte	.LFE126-.LFB126
 11760 0170 00000000 		.4byte	.LFB127
 11761 0174 3C000000 		.4byte	.LFE127-.LFB127
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 376


 11762 0178 00000000 		.4byte	.LFB128
 11763 017c 64000000 		.4byte	.LFE128-.LFB128
 11764 0180 00000000 		.4byte	.LFB129
 11765 0184 3C000000 		.4byte	.LFE129-.LFB129
 11766 0188 00000000 		.4byte	.LFB130
 11767 018c 2C000000 		.4byte	.LFE130-.LFB130
 11768 0190 00000000 		.4byte	.LFB131
 11769 0194 36000000 		.4byte	.LFE131-.LFB131
 11770 0198 00000000 		.4byte	.LFB132
 11771 019c 2A000000 		.4byte	.LFE132-.LFB132
 11772 01a0 00000000 		.4byte	.LFB133
 11773 01a4 36000000 		.4byte	.LFE133-.LFB133
 11774 01a8 00000000 		.4byte	.LFB134
 11775 01ac 2A000000 		.4byte	.LFE134-.LFB134
 11776 01b0 00000000 		.4byte	.LFB135
 11777 01b4 1C000000 		.4byte	.LFE135-.LFB135
 11778 01b8 00000000 		.4byte	.LFB136
 11779 01bc 1C000000 		.4byte	.LFE136-.LFB136
 11780 01c0 00000000 		.4byte	.LFB137
 11781 01c4 1C000000 		.4byte	.LFE137-.LFB137
 11782 01c8 00000000 		.4byte	.LFB138
 11783 01cc 48000000 		.4byte	.LFE138-.LFB138
 11784 01d0 00000000 		.4byte	.LFB139
 11785 01d4 2C000000 		.4byte	.LFE139-.LFB139
 11786 01d8 00000000 		.4byte	.LFB140
 11787 01dc 30000000 		.4byte	.LFE140-.LFB140
 11788 01e0 00000000 		.4byte	.LFB141
 11789 01e4 2A000000 		.4byte	.LFE141-.LFB141
 11790 01e8 00000000 		.4byte	0
 11791 01ec 00000000 		.4byte	0
 11792              		.section	.debug_ranges,"",%progbits
 11793              	.Ldebug_ranges0:
 11794 0000 06000000 		.4byte	.LBB18
 11795 0004 18000000 		.4byte	.LBE18
 11796 0008 1E000000 		.4byte	.LBB19
 11797 000c 22000000 		.4byte	.LBE19
 11798 0010 00000000 		.4byte	0
 11799 0014 00000000 		.4byte	0
 11800 0018 06000000 		.4byte	.LBB24
 11801 001c 18000000 		.4byte	.LBE24
 11802 0020 1E000000 		.4byte	.LBB25
 11803 0024 22000000 		.4byte	.LBE25
 11804 0028 00000000 		.4byte	0
 11805 002c 00000000 		.4byte	0
 11806 0030 06000000 		.4byte	.LBB26
 11807 0034 1C000000 		.4byte	.LBE26
 11808 0038 22000000 		.4byte	.LBB27
 11809 003c 26000000 		.4byte	.LBE27
 11810 0040 00000000 		.4byte	0
 11811 0044 00000000 		.4byte	0
 11812 0048 06000000 		.4byte	.LBB29
 11813 004c 1C000000 		.4byte	.LBE29
 11814 0050 22000000 		.4byte	.LBB30
 11815 0054 26000000 		.4byte	.LBE30
 11816 0058 00000000 		.4byte	0
 11817 005c 00000000 		.4byte	0
 11818 0060 06000000 		.4byte	.LBB31
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 377


 11819 0064 12000000 		.4byte	.LBE31
 11820 0068 18000000 		.4byte	.LBB32
 11821 006c 1A000000 		.4byte	.LBE32
 11822 0070 00000000 		.4byte	0
 11823 0074 00000000 		.4byte	0
 11824 0078 06000000 		.4byte	.LBB35
 11825 007c 12000000 		.4byte	.LBE35
 11826 0080 18000000 		.4byte	.LBB36
 11827 0084 1A000000 		.4byte	.LBE36
 11828 0088 00000000 		.4byte	0
 11829 008c 00000000 		.4byte	0
 11830 0090 0E000000 		.4byte	.LBB37
 11831 0094 20000000 		.4byte	.LBE37
 11832 0098 26000000 		.4byte	.LBB38
 11833 009c 28000000 		.4byte	.LBE38
 11834 00a0 00000000 		.4byte	0
 11835 00a4 00000000 		.4byte	0
 11836 00a8 0E000000 		.4byte	.LBB39
 11837 00ac 20000000 		.4byte	.LBE39
 11838 00b0 26000000 		.4byte	.LBB40
 11839 00b4 28000000 		.4byte	.LBE40
 11840 00b8 00000000 		.4byte	0
 11841 00bc 00000000 		.4byte	0
 11842 00c0 0A000000 		.4byte	.LBB41
 11843 00c4 16000000 		.4byte	.LBE41
 11844 00c8 1C000000 		.4byte	.LBB42
 11845 00cc 1E000000 		.4byte	.LBE42
 11846 00d0 00000000 		.4byte	0
 11847 00d4 00000000 		.4byte	0
 11848 00d8 0A000000 		.4byte	.LBB45
 11849 00dc 16000000 		.4byte	.LBE45
 11850 00e0 1C000000 		.4byte	.LBB46
 11851 00e4 1E000000 		.4byte	.LBE46
 11852 00e8 00000000 		.4byte	0
 11853 00ec 00000000 		.4byte	0
 11854 00f0 06000000 		.4byte	.LBB47
 11855 00f4 18000000 		.4byte	.LBE47
 11856 00f8 1E000000 		.4byte	.LBB48
 11857 00fc 22000000 		.4byte	.LBE48
 11858 0100 00000000 		.4byte	0
 11859 0104 00000000 		.4byte	0
 11860 0108 06000000 		.4byte	.LBB53
 11861 010c 18000000 		.4byte	.LBE53
 11862 0110 1E000000 		.4byte	.LBB54
 11863 0114 22000000 		.4byte	.LBE54
 11864 0118 00000000 		.4byte	0
 11865 011c 00000000 		.4byte	0
 11866 0120 00000000 		.4byte	.LFB83
 11867 0124 16000000 		.4byte	.LFE83
 11868 0128 00000000 		.4byte	.LFB84
 11869 012c 1E000000 		.4byte	.LFE84
 11870 0130 00000000 		.4byte	.LFB85
 11871 0134 30000000 		.4byte	.LFE85
 11872 0138 00000000 		.4byte	.LFB86
 11873 013c 2E000000 		.4byte	.LFE86
 11874 0140 00000000 		.4byte	.LFB87
 11875 0144 2E000000 		.4byte	.LFE87
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 378


 11876 0148 00000000 		.4byte	.LFB88
 11877 014c 2C000000 		.4byte	.LFE88
 11878 0150 00000000 		.4byte	.LFB89
 11879 0154 36000000 		.4byte	.LFE89
 11880 0158 00000000 		.4byte	.LFB90
 11881 015c 2A000000 		.4byte	.LFE90
 11882 0160 00000000 		.4byte	.LFB91
 11883 0164 36000000 		.4byte	.LFE91
 11884 0168 00000000 		.4byte	.LFB92
 11885 016c 2A000000 		.4byte	.LFE92
 11886 0170 00000000 		.4byte	.LFB93
 11887 0174 1C000000 		.4byte	.LFE93
 11888 0178 00000000 		.4byte	.LFB94
 11889 017c 1C000000 		.4byte	.LFE94
 11890 0180 00000000 		.4byte	.LFB95
 11891 0184 1C000000 		.4byte	.LFE95
 11892 0188 00000000 		.4byte	.LFB96
 11893 018c 34000000 		.4byte	.LFE96
 11894 0190 00000000 		.4byte	.LFB97
 11895 0194 44000000 		.4byte	.LFE97
 11896 0198 00000000 		.4byte	.LFB98
 11897 019c 2C000000 		.4byte	.LFE98
 11898 01a0 00000000 		.4byte	.LFB99
 11899 01a4 50000000 		.4byte	.LFE99
 11900 01a8 00000000 		.4byte	.LFB100
 11901 01ac 22000000 		.4byte	.LFE100
 11902 01b0 00000000 		.4byte	.LFB101
 11903 01b4 2C000000 		.4byte	.LFE101
 11904 01b8 00000000 		.4byte	.LFB102
 11905 01bc 36000000 		.4byte	.LFE102
 11906 01c0 00000000 		.4byte	.LFB103
 11907 01c4 2E000000 		.4byte	.LFE103
 11908 01c8 00000000 		.4byte	.LFB104
 11909 01cc 3E000000 		.4byte	.LFE104
 11910 01d0 00000000 		.4byte	.LFB105
 11911 01d4 2E000000 		.4byte	.LFE105
 11912 01d8 00000000 		.4byte	.LFB106
 11913 01dc 16000000 		.4byte	.LFE106
 11914 01e0 00000000 		.4byte	.LFB107
 11915 01e4 1E000000 		.4byte	.LFE107
 11916 01e8 00000000 		.4byte	.LFB108
 11917 01ec 2C000000 		.4byte	.LFE108
 11918 01f0 00000000 		.4byte	.LFB109
 11919 01f4 2A000000 		.4byte	.LFE109
 11920 01f8 00000000 		.4byte	.LFB110
 11921 01fc 2A000000 		.4byte	.LFE110
 11922 0200 00000000 		.4byte	.LFB111
 11923 0204 14000000 		.4byte	.LFE111
 11924 0208 00000000 		.4byte	.LFB112
 11925 020c 14000000 		.4byte	.LFE112
 11926 0210 00000000 		.4byte	.LFB113
 11927 0214 14000000 		.4byte	.LFE113
 11928 0218 00000000 		.4byte	.LFB114
 11929 021c 28000000 		.4byte	.LFE114
 11930 0220 00000000 		.4byte	.LFB115
 11931 0224 32000000 		.4byte	.LFE115
 11932 0228 00000000 		.4byte	.LFB116
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 379


 11933 022c 22000000 		.4byte	.LFE116
 11934 0230 00000000 		.4byte	.LFB117
 11935 0234 32000000 		.4byte	.LFE117
 11936 0238 00000000 		.4byte	.LFB118
 11937 023c 22000000 		.4byte	.LFE118
 11938 0240 00000000 		.4byte	.LFB119
 11939 0244 1C000000 		.4byte	.LFE119
 11940 0248 00000000 		.4byte	.LFB120
 11941 024c 1C000000 		.4byte	.LFE120
 11942 0250 00000000 		.4byte	.LFB121
 11943 0254 1C000000 		.4byte	.LFE121
 11944 0258 00000000 		.4byte	.LFB122
 11945 025c 28000000 		.4byte	.LFE122
 11946 0260 00000000 		.4byte	.LFB123
 11947 0264 32000000 		.4byte	.LFE123
 11948 0268 00000000 		.4byte	.LFB124
 11949 026c 30000000 		.4byte	.LFE124
 11950 0270 00000000 		.4byte	.LFB125
 11951 0274 7E000000 		.4byte	.LFE125
 11952 0278 00000000 		.4byte	.LFB126
 11953 027c 30000000 		.4byte	.LFE126
 11954 0280 00000000 		.4byte	.LFB127
 11955 0284 3C000000 		.4byte	.LFE127
 11956 0288 00000000 		.4byte	.LFB128
 11957 028c 64000000 		.4byte	.LFE128
 11958 0290 00000000 		.4byte	.LFB129
 11959 0294 3C000000 		.4byte	.LFE129
 11960 0298 00000000 		.4byte	.LFB130
 11961 029c 2C000000 		.4byte	.LFE130
 11962 02a0 00000000 		.4byte	.LFB131
 11963 02a4 36000000 		.4byte	.LFE131
 11964 02a8 00000000 		.4byte	.LFB132
 11965 02ac 2A000000 		.4byte	.LFE132
 11966 02b0 00000000 		.4byte	.LFB133
 11967 02b4 36000000 		.4byte	.LFE133
 11968 02b8 00000000 		.4byte	.LFB134
 11969 02bc 2A000000 		.4byte	.LFE134
 11970 02c0 00000000 		.4byte	.LFB135
 11971 02c4 1C000000 		.4byte	.LFE135
 11972 02c8 00000000 		.4byte	.LFB136
 11973 02cc 1C000000 		.4byte	.LFE136
 11974 02d0 00000000 		.4byte	.LFB137
 11975 02d4 1C000000 		.4byte	.LFE137
 11976 02d8 00000000 		.4byte	.LFB138
 11977 02dc 48000000 		.4byte	.LFE138
 11978 02e0 00000000 		.4byte	.LFB139
 11979 02e4 2C000000 		.4byte	.LFE139
 11980 02e8 00000000 		.4byte	.LFB140
 11981 02ec 30000000 		.4byte	.LFE140
 11982 02f0 00000000 		.4byte	.LFB141
 11983 02f4 2A000000 		.4byte	.LFE141
 11984 02f8 00000000 		.4byte	0
 11985 02fc 00000000 		.4byte	0
 11986              		.section	.debug_line,"",%progbits
 11987              	.Ldebug_line0:
 11988 0000 4A0D0000 		.section	.debug_str,"MS",%progbits,1
 11988      0200B105 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 380


 11988      00000201 
 11988      FB0E0D00 
 11988      01010101 
 11989              	.LASF87:
 11990 0000 7363616C 		.ascii	"scale\000"
 11990      6500
 11991              	.LASF114:
 11992 0006 5F5F636F 		.ascii	"__copy_table_t\000"
 11992      70795F74 
 11992      61626C65 
 11992      5F7400
 11993              	.LASF41:
 11994 0015 61726D5F 		.ascii	"arm_abs_f64\000"
 11994      6162735F 
 11994      66363400 
 11995              	.LASF31:
 11996 0021 7136335F 		.ascii	"q63_t\000"
 11996      7400
 11997              	.LASF101:
 11998 0027 61726D5F 		.ascii	"arm_sub_f64\000"
 11998      7375625F 
 11998      66363400 
 11999              	.LASF73:
 12000 0033 61726D5F 		.ascii	"arm_negate_q7\000"
 12000      6E656761 
 12000      74655F71 
 12000      3700
 12001              	.LASF117:
 12002 0041 5F5F7A65 		.ascii	"__zero_table_t\000"
 12002      726F5F74 
 12002      61626C65 
 12002      5F7400
 12003              	.LASF3:
 12004 0050 5F5F7569 		.ascii	"__uint8_t\000"
 12004      6E74385F 
 12004      7400
 12005              	.LASF113:
 12006 005a 61726D5F 		.ascii	"arm_clip_q7\000"
 12006      636C6970 
 12006      5F713700 
 12007              	.LASF74:
 12008 0066 61726D5F 		.ascii	"arm_not_u16\000"
 12008      6E6F745F 
 12008      75313600 
 12009              	.LASF84:
 12010 0072 61726D5F 		.ascii	"arm_or_u32\000"
 12010      6F725F75 
 12010      333200
 12011              	.LASF15:
 12012 007d 6C6F6E67 		.ascii	"long long unsigned int\000"
 12012      206C6F6E 
 12012      6720756E 
 12012      7369676E 
 12012      65642069 
 12013              	.LASF112:
 12014 0094 61726D5F 		.ascii	"arm_clip_q15\000"
 12014      636C6970 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 381


 12014      5F713135 
 12014      00
 12015              	.LASF89:
 12016 00a1 61726D5F 		.ascii	"arm_scale_q15\000"
 12016      7363616C 
 12016      655F7131 
 12016      3500
 12017              	.LASF42:
 12018 00af 626C6B43 		.ascii	"blkCnt\000"
 12018      6E7400
 12019              	.LASF13:
 12020 00b6 5F5F696E 		.ascii	"__int64_t\000"
 12020      7436345F 
 12020      7400
 12021              	.LASF2:
 12022 00c0 5F5F696E 		.ascii	"__int8_t\000"
 12022      74385F74 
 12022      00
 12023              	.LASF33:
 12024 00c9 666C6F61 		.ascii	"float64_t\000"
 12024      7436345F 
 12024      7400
 12025              	.LASF116:
 12026 00d3 5F5F636F 		.ascii	"__copy_table_end__\000"
 12026      70795F74 
 12026      61626C65 
 12026      5F656E64 
 12026      5F5F00
 12027              	.LASF65:
 12028 00e6 61726D5F 		.ascii	"arm_mult_f64\000"
 12028      6D756C74 
 12028      5F663634 
 12028      00
 12029              	.LASF103:
 12030 00f3 61726D5F 		.ascii	"arm_sub_q31\000"
 12030      7375625F 
 12030      71333100 
 12031              	.LASF123:
 12032 00ff 2E5C4453 		.ascii	".\\DSP\\Source\\BasicMathFunctions\\BasicMathFuncti"
 12032      505C536F 
 12032      75726365 
 12032      5C426173 
 12032      69634D61 
 12033 012e 6F6E732E 		.ascii	"ons.c\000"
 12033      6300
 12034              	.LASF19:
 12035 0134 696E7431 		.ascii	"int16_t\000"
 12035      365F7400 
 12036              	.LASF76:
 12037 013c 61726D5F 		.ascii	"arm_not_u8\000"
 12037      6E6F745F 
 12037      753800
 12038              	.LASF14:
 12039 0147 6C6F6E67 		.ascii	"long long int\000"
 12039      206C6F6E 
 12039      6720696E 
 12039      7400
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 382


 12040              	.LASF1:
 12041 0155 7369676E 		.ascii	"signed char\000"
 12041      65642063 
 12041      68617200 
 12042              	.LASF107:
 12043 0161 61726D5F 		.ascii	"arm_xor_u8\000"
 12043      786F725F 
 12043      753800
 12044              	.LASF118:
 12045 016c 5F5F7A65 		.ascii	"__zero_table_start__\000"
 12045      726F5F74 
 12045      61626C65 
 12045      5F737461 
 12045      72745F5F 
 12046              	.LASF77:
 12047 0181 61726D5F 		.ascii	"arm_offset_f32\000"
 12047      6F666673 
 12047      65745F66 
 12047      333200
 12048              	.LASF81:
 12049 0190 61726D5F 		.ascii	"arm_offset_q31\000"
 12049      6F666673 
 12049      65745F71 
 12049      333100
 12050              	.LASF10:
 12051 019f 6C6F6E67 		.ascii	"long int\000"
 12051      20696E74 
 12051      00
 12052              	.LASF50:
 12053 01a8 61726D5F 		.ascii	"arm_add_q15\000"
 12053      6164645F 
 12053      71313500 
 12054              	.LASF38:
 12055 01b4 70447374 		.ascii	"pDst\000"
 12055      00
 12056              	.LASF29:
 12057 01b9 7131355F 		.ascii	"q15_t\000"
 12057      7400
 12058              	.LASF106:
 12059 01bf 61726D5F 		.ascii	"arm_xor_u32\000"
 12059      786F725F 
 12059      75333200 
 12060              	.LASF20:
 12061 01cb 75696E74 		.ascii	"uint16_t\000"
 12061      31365F74 
 12061      00
 12062              	.LASF0:
 12063 01d4 646F7562 		.ascii	"double\000"
 12063      6C6500
 12064              	.LASF62:
 12065 01db 61726D5F 		.ascii	"arm_dot_prod_q31\000"
 12065      646F745F 
 12065      70726F64 
 12065      5F713331 
 12065      00
 12066              	.LASF58:
 12067 01ec 61726D5F 		.ascii	"arm_dot_prod_f32\000"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 383


 12067      646F745F 
 12067      70726F64 
 12067      5F663332 
 12067      00
 12068              	.LASF56:
 12069 01fd 61726D5F 		.ascii	"arm_and_u32\000"
 12069      616E645F 
 12069      75333200 
 12070              	.LASF47:
 12071 0209 70537263 		.ascii	"pSrcA\000"
 12071      4100
 12072              	.LASF48:
 12073 020f 70537263 		.ascii	"pSrcB\000"
 12073      4200
 12074              	.LASF51:
 12075 0215 5F5F5245 		.ascii	"__RES\000"
 12075      5300
 12076              	.LASF11:
 12077 021b 5F5F7569 		.ascii	"__uint32_t\000"
 12077      6E743332 
 12077      5F7400
 12078              	.LASF5:
 12079 0226 5F5F696E 		.ascii	"__int16_t\000"
 12079      7431365F 
 12079      7400
 12080              	.LASF115:
 12081 0230 5F5F636F 		.ascii	"__copy_table_start__\000"
 12081      70795F74 
 12081      61626C65 
 12081      5F737461 
 12081      72745F5F 
 12082              	.LASF70:
 12083 0245 61726D5F 		.ascii	"arm_negate_f64\000"
 12083      6E656761 
 12083      74655F66 
 12083      363400
 12084              	.LASF16:
 12085 0254 756E7369 		.ascii	"unsigned int\000"
 12085      676E6564 
 12085      20696E74 
 12085      00
 12086              	.LASF37:
 12087 0261 70537263 		.ascii	"pSrc\000"
 12087      00
 12088              	.LASF75:
 12089 0266 61726D5F 		.ascii	"arm_not_u32\000"
 12089      6E6F745F 
 12089      75333200 
 12090              	.LASF108:
 12091 0272 61726D5F 		.ascii	"arm_clip_f32\000"
 12091      636C6970 
 12091      5F663332 
 12091      00
 12092              	.LASF86:
 12093 027f 61726D5F 		.ascii	"arm_scale_f32\000"
 12093      7363616C 
 12093      655F6633 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 384


 12093      3200
 12094              	.LASF111:
 12095 028d 61726D5F 		.ascii	"arm_clip_q31\000"
 12095      636C6970 
 12095      5F713331 
 12095      00
 12096              	.LASF12:
 12097 029a 6C6F6E67 		.ascii	"long unsigned int\000"
 12097      20756E73 
 12097      69676E65 
 12097      6420696E 
 12097      7400
 12098              	.LASF93:
 12099 02ac 61726D5F 		.ascii	"arm_scale_q31\000"
 12099      7363616C 
 12099      655F7133 
 12099      3100
 12100              	.LASF98:
 12101 02ba 61726D5F 		.ascii	"arm_shift_q31\000"
 12101      73686966 
 12101      745F7133 
 12101      3100
 12102              	.LASF43:
 12103 02c8 61726D5F 		.ascii	"arm_abs_q15\000"
 12103      6162735F 
 12103      71313500 
 12104              	.LASF8:
 12105 02d4 73686F72 		.ascii	"short unsigned int\000"
 12105      7420756E 
 12105      7369676E 
 12105      65642069 
 12105      6E7400
 12106              	.LASF102:
 12107 02e7 61726D5F 		.ascii	"arm_sub_q15\000"
 12107      7375625F 
 12107      71313500 
 12108              	.LASF71:
 12109 02f3 61726D5F 		.ascii	"arm_negate_q15\000"
 12109      6E656761 
 12109      74655F71 
 12109      313500
 12110              	.LASF46:
 12111 0302 61726D5F 		.ascii	"arm_add_f32\000"
 12111      6164645F 
 12111      66333200 
 12112              	.LASF53:
 12113 030e 61726D5F 		.ascii	"arm_add_q31\000"
 12113      6164645F 
 12113      71333100 
 12114              	.LASF57:
 12115 031a 61726D5F 		.ascii	"arm_and_u8\000"
 12115      616E645F 
 12115      753800
 12116              	.LASF66:
 12117 0325 61726D5F 		.ascii	"arm_mult_q15\000"
 12117      6D756C74 
 12117      5F713135 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 385


 12117      00
 12118              	.LASF92:
 12119 0332 6B536869 		.ascii	"kShift\000"
 12119      667400
 12120              	.LASF24:
 12121 0339 73697A65 		.ascii	"sizetype\000"
 12121      74797065 
 12121      00
 12122              	.LASF27:
 12123 0342 6C6F6E67 		.ascii	"long double\000"
 12123      20646F75 
 12123      626C6500 
 12124              	.LASF90:
 12125 034e 7363616C 		.ascii	"scaleFract\000"
 12125      65467261 
 12125      637400
 12126              	.LASF36:
 12127 0359 5F5F5153 		.ascii	"__QSUB\000"
 12127      554200
 12128              	.LASF34:
 12129 0360 636C6970 		.ascii	"clip_q63_to_q31\000"
 12129      5F713633 
 12129      5F746F5F 
 12129      71333100 
 12130              	.LASF85:
 12131 0370 61726D5F 		.ascii	"arm_or_u8\000"
 12131      6F725F75 
 12131      3800
 12132              	.LASF120:
 12133 037a 64657374 		.ascii	"dest\000"
 12133      00
 12134              	.LASF79:
 12135 037f 61726D5F 		.ascii	"arm_offset_f64\000"
 12135      6F666673 
 12135      65745F66 
 12135      363400
 12136              	.LASF104:
 12137 038e 61726D5F 		.ascii	"arm_sub_q7\000"
 12137      7375625F 
 12137      713700
 12138              	.LASF91:
 12139 0399 73686966 		.ascii	"shift\000"
 12139      7400
 12140              	.LASF26:
 12141 039f 666C6F61 		.ascii	"float\000"
 12141      7400
 12142              	.LASF55:
 12143 03a5 61726D5F 		.ascii	"arm_and_u16\000"
 12143      616E645F 
 12143      75313600 
 12144              	.LASF40:
 12145 03b1 61726D5F 		.ascii	"arm_abs_f32\000"
 12145      6162735F 
 12145      66333200 
 12146              	.LASF60:
 12147 03bd 61726D5F 		.ascii	"arm_dot_prod_f64\000"
 12147      646F745F 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 386


 12147      70726F64 
 12147      5F663634 
 12147      00
 12148              	.LASF44:
 12149 03ce 61726D5F 		.ascii	"arm_abs_q31\000"
 12149      6162735F 
 12149      71333100 
 12150              	.LASF21:
 12151 03da 696E7433 		.ascii	"int32_t\000"
 12151      325F7400 
 12152              	.LASF4:
 12153 03e2 756E7369 		.ascii	"unsigned char\000"
 12153      676E6564 
 12153      20636861 
 12153      7200
 12154              	.LASF97:
 12155 03f0 73686966 		.ascii	"shiftBits\000"
 12155      74426974 
 12155      7300
 12156              	.LASF121:
 12157 03fa 776C656E 		.ascii	"wlen\000"
 12157      00
 12158              	.LASF68:
 12159 03ff 61726D5F 		.ascii	"arm_mult_q7\000"
 12159      6D756C74 
 12159      5F713700 
 12160              	.LASF54:
 12161 040b 61726D5F 		.ascii	"arm_add_q7\000"
 12161      6164645F 
 12161      713700
 12162              	.LASF6:
 12163 0416 73686F72 		.ascii	"short int\000"
 12163      7420696E 
 12163      7400
 12164              	.LASF30:
 12165 0420 7133315F 		.ascii	"q31_t\000"
 12165      7400
 12166              	.LASF64:
 12167 0426 61726D5F 		.ascii	"arm_mult_f32\000"
 12167      6D756C74 
 12167      5F663332 
 12167      00
 12168              	.LASF22:
 12169 0433 75696E74 		.ascii	"uint32_t\000"
 12169      33325F74 
 12169      00
 12170              	.LASF67:
 12171 043c 61726D5F 		.ascii	"arm_mult_q31\000"
 12171      6D756C74 
 12171      5F713331 
 12171      00
 12172              	.LASF88:
 12173 0449 61726D5F 		.ascii	"arm_scale_f64\000"
 12173      7363616C 
 12173      655F6636 
 12173      3400
 12174              	.LASF124:
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 387


 12175 0457 5C5C766D 		.ascii	"\\\\vmware-host\\Shared Folders\\Documents\\PSoC Cr"
 12175      77617265 
 12175      2D686F73 
 12175      745C5368 
 12175      61726564 
 12176 0485 6561746F 		.ascii	"eator\\FinalProject\\SoundDetection.cydsn\000"
 12176      725C4669 
 12176      6E616C50 
 12176      726F6A65 
 12176      63745C53 
 12177              	.LASF45:
 12178 04ad 61726D5F 		.ascii	"arm_abs_q7\000"
 12178      6162735F 
 12178      713700
 12179              	.LASF69:
 12180 04b8 61726D5F 		.ascii	"arm_negate_f32\000"
 12180      6E656761 
 12180      74655F66 
 12180      333200
 12181              	.LASF25:
 12182 04c7 63686172 		.ascii	"char\000"
 12182      00
 12183              	.LASF72:
 12184 04cc 61726D5F 		.ascii	"arm_negate_q31\000"
 12184      6E656761 
 12184      74655F71 
 12184      333100
 12185              	.LASF7:
 12186 04db 5F5F7569 		.ascii	"__uint16_t\000"
 12186      6E743136 
 12186      5F7400
 12187              	.LASF9:
 12188 04e6 5F5F696E 		.ascii	"__int32_t\000"
 12188      7433325F 
 12188      7400
 12189              	.LASF109:
 12190 04f0 68696768 		.ascii	"high\000"
 12190      00
 12191              	.LASF32:
 12192 04f5 666C6F61 		.ascii	"float32_t\000"
 12192      7433325F 
 12192      7400
 12193              	.LASF78:
 12194 04ff 6F666673 		.ascii	"offset\000"
 12194      657400
 12195              	.LASF28:
 12196 0506 71375F74 		.ascii	"q7_t\000"
 12196      00
 12197              	.LASF119:
 12198 050b 5F5F7A65 		.ascii	"__zero_table_end__\000"
 12198      726F5F74 
 12198      61626C65 
 12198      5F656E64 
 12198      5F5F00
 12199              	.LASF100:
 12200 051e 61726D5F 		.ascii	"arm_sub_f32\000"
 12200      7375625F 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 388


 12200      66333200 
 12201              	.LASF83:
 12202 052a 61726D5F 		.ascii	"arm_or_u16\000"
 12202      6F725F75 
 12202      313600
 12203              	.LASF17:
 12204 0535 696E7438 		.ascii	"int8_t\000"
 12204      5F7400
 12205              	.LASF49:
 12206 053c 61726D5F 		.ascii	"arm_add_f64\000"
 12206      6164645F 
 12206      66363400 
 12207              	.LASF95:
 12208 0548 61726D5F 		.ascii	"arm_scale_q7\000"
 12208      7363616C 
 12208      655F7137 
 12208      00
 12209              	.LASF39:
 12210 0555 626C6F63 		.ascii	"blockSize\000"
 12210      6B53697A 
 12210      6500
 12211              	.LASF35:
 12212 055f 5F5F5141 		.ascii	"__QADD\000"
 12212      444400
 12213              	.LASF99:
 12214 0566 61726D5F 		.ascii	"arm_shift_q7\000"
 12214      73686966 
 12214      745F7137 
 12214      00
 12215              	.LASF18:
 12216 0573 75696E74 		.ascii	"uint8_t\000"
 12216      385F7400 
 12217              	.LASF94:
 12218 057b 7369676E 		.ascii	"sign\000"
 12218      00
 12219              	.LASF52:
 12220 0580 5F5F4152 		.ascii	"__ARG1\000"
 12220      473100
 12221              	.LASF110:
 12222 0587 6E756D53 		.ascii	"numSamples\000"
 12222      616D706C 
 12222      657300
 12223              	.LASF80:
 12224 0592 61726D5F 		.ascii	"arm_offset_q15\000"
 12224      6F666673 
 12224      65745F71 
 12224      313500
 12225              	.LASF23:
 12226 05a1 696E7436 		.ascii	"int64_t\000"
 12226      345F7400 
 12227              	.LASF105:
 12228 05a9 61726D5F 		.ascii	"arm_xor_u16\000"
 12228      786F725F 
 12228      75313600 
 12229              	.LASF122:
 12230 05b5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 12230      4320342E 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\cc7gzL6d.s 			page 389


 12230      392E3320 
 12230      32303135 
 12230      30333033 
 12231 05e8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 12231      20726576 
 12231      6973696F 
 12231      6E203232 
 12231      31323230 
 12232 061b 67202D73 		.ascii	"g -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 12232      74643D67 
 12232      6E753939 
 12232      202D6666 
 12232      756E6374 
 12233              	.LASF63:
 12234 064e 61726D5F 		.ascii	"arm_dot_prod_q7\000"
 12234      646F745F 
 12234      70726F64 
 12234      5F713700 
 12235              	.LASF59:
 12236 065e 72657375 		.ascii	"result\000"
 12236      6C7400
 12237              	.LASF96:
 12238 0665 61726D5F 		.ascii	"arm_shift_q15\000"
 12238      73686966 
 12238      745F7131 
 12238      3500
 12239              	.LASF61:
 12240 0673 61726D5F 		.ascii	"arm_dot_prod_q15\000"
 12240      646F745F 
 12240      70726F64 
 12240      5F713135 
 12240      00
 12241              	.LASF82:
 12242 0684 61726D5F 		.ascii	"arm_offset_q7\000"
 12242      6F666673 
 12242      65745F71 
 12242      3700
 12243              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
