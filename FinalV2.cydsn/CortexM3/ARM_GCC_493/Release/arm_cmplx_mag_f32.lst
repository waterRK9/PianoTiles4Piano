ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"arm_cmplx_mag_f32.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	__aeabi_fmul
  19              		.global	__aeabi_fadd
  20              		.global	__aeabi_fcmpge
  21              		.section	.text.arm_cmplx_mag_f32,"ax",%progbits
  22              		.align	1
  23              		.global	arm_cmplx_mag_f32
  24              		.thumb
  25              		.thumb_func
  26              		.type	arm_cmplx_mag_f32, %function
  27              	arm_cmplx_mag_f32:
  28              	.LFB84:
  29              		.file 1 ".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag_f32.c"
   1:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /* ----------------------------------------------------------------------
   2:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Project:      CMSIS DSP Library
   3:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Title:        arm_cmplx_mag_f32.c
   4:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Description:  Floating-point complex magnitude
   5:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
   6:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * $Date:        23 April 2021
   7:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * $Revision:    V1.9.0
   8:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
   9:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * -------------------------------------------------------------------- */
  11:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /*
  12:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  14:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  16:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * not use this file except in compliance with the License.
  18:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * You may obtain a copy of the License at
  19:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  20:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  *
  22:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * See the License for the specific language governing permissions and
  26:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  * limitations under the License.
  27:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  28:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 2


  29:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "dsp/complex_math_functions.h"
  30:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  31:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  32:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @ingroup groupCmplxMath
  33:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  34:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  35:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  36:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @defgroup cmplx_mag Complex Magnitude
  37:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  38:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   Computes the magnitude of the elements of a complex data vector.
  39:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  40:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The <code>pSrc</code> points to the source data and
  41:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <code>pDst</code> points to the where the result should be written.
  42:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  43:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   in the input array and the data is stored in an interleaved fashion
  44:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   (real, imag, real, imag, ...).
  45:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The input array has a total of <code>2*numSamples</code> values;
  46:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   the output array has a total of <code>numSamples</code> values.
  47:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  48:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   The underlying algorithm is used:
  49:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  50:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   <pre>
  51:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   for (n = 0; n < numSamples; n++) {
  52:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       pDst[n] = sqrt(pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2);
  53:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
  54:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   </pre>
  55:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  56:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  57:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  58:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  59:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  60:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @addtogroup cmplx_mag
  61:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @{
  62:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  63:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  64:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** /**
  65:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @brief         Floating-point complex magnitude.
  66:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[in]     pSrc        points to input vector
  67:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[out]    pDst        points to output vector
  68:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   @return        none
  70:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****  */
  71:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  72:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "arm_vec_math.h"
  74:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif
  75:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  76:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  77:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  78:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #include "arm_helium_utils.h"
  79:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  80:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  81:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** void arm_cmplx_mag_f32(
  82:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   const float32_t * pSrc,
  83:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         float32_t * pDst,
  84:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         uint32_t numSamples)
  85:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** {
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 3


  86:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     int32_t blockSize = numSamples;  /* loop counters */
  87:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     uint32_t  blkCnt;           /* loop counters */
  88:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     f32x4x2_t vecSrc;
  89:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     f32x4_t sum;
  90:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     float32_t real, imag;                      /* Temporary variables to hold input values */
  91:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  92:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Compute 4 complex samples at a time */
  93:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt = blockSize >> 2;
  94:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     while (blkCnt > 0U)
  95:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     {
  96:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         q31x4_t newtonStartVec;
  97:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         f32x4_t sumHalf, invSqrt;
  98:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  99:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         vecSrc = vld2q(pSrc);  
 100:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         pSrc += 8;
 101:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vmulq(vecSrc.val[0], vecSrc.val[0]);
 102:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vfmaq(sum, vecSrc.val[1], vecSrc.val[1]);
 103:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 104:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 105:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * inlined Fast SQRT using inverse SQRT newton-raphson method
 106:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 107:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 108:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /* compute initial value */
 109:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         newtonStartVec = vdupq_n_s32(INVSQRT_MAGIC_F32) - vshrq((q31x4_t) sum, 1);
 110:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sumHalf = sum * 0.5f;
 111:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 112:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * compute 3 x iterations
 113:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          *
 114:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * The more iterations, the more accuracy.
 115:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * If you need to trade a bit of accuracy for more performance,
 116:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * you can comment out the 3rd use of the macro.
 117:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 118:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, (f32x4_t) newtonStartVec);
 119:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, invSqrt);
 120:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         INVSQRT_NEWTON_MVE_F32(invSqrt, sumHalf, invSqrt);
 121:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 122:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * set negative values to 0
 123:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 124:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         invSqrt = vdupq_m(invSqrt, 0.0f, vcmpltq(invSqrt, 0.0f));
 125:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 126:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * sqrt(x) = x * invSqrt(x)
 127:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 128:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         sum = vmulq(sum, invSqrt);
 129:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         vst1q(pDst, sum); 
 130:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         pDst += 4;
 131:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         /*
 132:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          * Decrement the blockSize loop counter
 133:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****          */
 134:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         blkCnt--;
 135:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     }
 136:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /*
 137:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****      * tail
 138:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****      */
 139:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt = blockSize & 3;
 140:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     while (blkCnt > 0U)
 141:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     {
 142:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 4


 143:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 144:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       real = *pSrc++;
 145:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       imag = *pSrc++;
 146:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 147:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* store result in destination buffer. */
 148:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 149:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   
 150:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       /* Decrement loop counter */
 151:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****       blkCnt--;
 152:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     }
 153:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** }
 154:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 155:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 156:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** void arm_cmplx_mag_f32(
 157:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   const float32_t * pSrc,
 158:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         float32_t * pDst,
 159:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****         uint32_t numSamples)
 160:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** {
  30              		.loc 1 160 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 4, -24
  38              		.cfi_offset 5, -20
  39              		.cfi_offset 6, -16
  40              		.cfi_offset 7, -12
  41              		.cfi_offset 8, -8
  42              		.cfi_offset 14, -4
  43              		.loc 1 160 0
  44 0004 0D46     		mov	r5, r1
  45 0006 1646     		mov	r6, r2
  46              	.LVL1:
  47 0008 00F10804 		add	r4, r0, #8
  48              	.LVL2:
  49              	.L2:
 161:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   uint32_t blkCnt;                               /* loop counter */
 162:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32_t real, imag;                      /* Temporary variables to hold input values */
 163:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 164:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 165:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 166:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4x2_t vecA;
 167:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vRealA;
 168:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vImagA;
 169:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vMagSqA;
 170:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 171:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4x2_t vecB;
 172:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vRealB;
 173:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vImagB;
 174:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   float32x4_t vMagSqB;
 175:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 176:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute 8 outputs at a time */
 177:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples >> 3;
 178:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 179:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 5


 180:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 181:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* out = sqrt((real * real) + (imag * imag)) */
 182:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 183:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vecA = vld2q_f32(pSrc);
 184:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pSrc += 8;
 185:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 186:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vecB = vld2q_f32(pSrc);
 187:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pSrc += 8;
 188:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 189:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vRealA = vmulq_f32(vecA.val[0], vecA.val[0]);
 190:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vImagA = vmulq_f32(vecA.val[1], vecA.val[1]);
 191:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vMagSqA = vaddq_f32(vRealA, vImagA);
 192:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 193:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vRealB = vmulq_f32(vecB.val[0], vecB.val[0]);
 194:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vImagB = vmulq_f32(vecB.val[1], vecB.val[1]);
 195:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vMagSqB = vaddq_f32(vRealB, vImagB);
 196:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 197:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Store the result in the destination buffer. */
 198:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vst1q_f32(pDst, __arm_vec_sqrt_f32_neon(vMagSqA));
 199:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pDst += 4;
 200:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 201:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     vst1q_f32(pDst, __arm_vec_sqrt_f32_neon(vMagSqB));
 202:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     pDst += 4;
 203:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 204:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement the loop counter */
 205:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 206:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 207:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 208:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples & 7;
 209:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 210:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 211:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 212:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 213:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 214:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 215:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples >> 2U;
 216:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 217:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
 218:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 219:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 220:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 221:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 222:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 223:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 224:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* store result in destination buffer. */
 225:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 226:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 227:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 228:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 229:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 230:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 231:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 232:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 233:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 234:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 235:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 236:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 6


 237:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 238:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 239:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement loop counter */
 240:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 241:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 242:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 243:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 244:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples % 0x4U;
 245:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 246:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #else
 247:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 248:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   /* Initialize blkCnt with number of samples */
 249:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   blkCnt = numSamples;
 250:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 251:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 252:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 253:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 254:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   while (blkCnt > 0U)
  50              		.loc 1 254 0
  51 000c 0EB3     		cbz	r6, .L11
  52              	.LVL3:
 255:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   {
 256:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 257:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 258:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     real = *pSrc++;
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     imag = *pSrc++;
 260:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 261:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* store result in destination buffer. */
 262:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     arm_sqrt_f32((real * real) + (imag * imag), pDst++);
  53              		.loc 1 262 0
  54 000e 54F8080C 		ldr	r0, [r4, #-8]	@ float
 259:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
  55              		.loc 1 259 0
  56 0012 54F8048C 		ldr	r8, [r4, #-4]	@ float
  57              	.LVL4:
  58              		.loc 1 262 0
  59 0016 0146     		mov	r1, r0
  60 0018 FFF7FEFF 		bl	__aeabi_fmul
  61              	.LVL5:
  62 001c 4146     		mov	r1, r8
  63 001e 0746     		mov	r7, r0
  64 0020 4046     		mov	r0, r8
  65 0022 FFF7FEFF 		bl	__aeabi_fmul
  66              	.LVL6:
  67 0026 0146     		mov	r1, r0
  68 0028 3846     		mov	r0, r7
  69 002a FFF7FEFF 		bl	__aeabi_fadd
  70              	.LVL7:
  71              	.LBB4:
  72              	.LBB5:
  73              		.file 2 ".\\DSP\\Include/dsp/fast_math_functions.h"
   1:.\DSP\Include/dsp/fast_math_functions.h **** /******************************************************************************
   2:.\DSP\Include/dsp/fast_math_functions.h ****  * @file     fast_math_functions.h
   3:.\DSP\Include/dsp/fast_math_functions.h ****  * @brief    Public header file for CMSIS DSP Library
   4:.\DSP\Include/dsp/fast_math_functions.h ****  * @version  V1.10.0
   5:.\DSP\Include/dsp/fast_math_functions.h ****  * @date     08 July 2021
   6:.\DSP\Include/dsp/fast_math_functions.h ****  * Target Processor: Cortex-M and Cortex-A cores
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 7


   7:.\DSP\Include/dsp/fast_math_functions.h ****  ******************************************************************************/
   8:.\DSP\Include/dsp/fast_math_functions.h **** /*
   9:.\DSP\Include/dsp/fast_math_functions.h ****  * Copyright (c) 2010-2020 Arm Limited or its affiliates. All rights reserved.
  10:.\DSP\Include/dsp/fast_math_functions.h ****  *
  11:.\DSP\Include/dsp/fast_math_functions.h ****  * SPDX-License-Identifier: Apache-2.0
  12:.\DSP\Include/dsp/fast_math_functions.h ****  *
  13:.\DSP\Include/dsp/fast_math_functions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  14:.\DSP\Include/dsp/fast_math_functions.h ****  * not use this file except in compliance with the License.
  15:.\DSP\Include/dsp/fast_math_functions.h ****  * You may obtain a copy of the License at
  16:.\DSP\Include/dsp/fast_math_functions.h ****  *
  17:.\DSP\Include/dsp/fast_math_functions.h ****  * www.apache.org/licenses/LICENSE-2.0
  18:.\DSP\Include/dsp/fast_math_functions.h ****  *
  19:.\DSP\Include/dsp/fast_math_functions.h ****  * Unless required by applicable law or agreed to in writing, software
  20:.\DSP\Include/dsp/fast_math_functions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  21:.\DSP\Include/dsp/fast_math_functions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:.\DSP\Include/dsp/fast_math_functions.h ****  * See the License for the specific language governing permissions and
  23:.\DSP\Include/dsp/fast_math_functions.h ****  * limitations under the License.
  24:.\DSP\Include/dsp/fast_math_functions.h ****  */
  25:.\DSP\Include/dsp/fast_math_functions.h **** 
  26:.\DSP\Include/dsp/fast_math_functions.h ****  
  27:.\DSP\Include/dsp/fast_math_functions.h **** #ifndef _FAST_MATH_FUNCTIONS_H_
  28:.\DSP\Include/dsp/fast_math_functions.h **** #define _FAST_MATH_FUNCTIONS_H_
  29:.\DSP\Include/dsp/fast_math_functions.h **** 
  30:.\DSP\Include/dsp/fast_math_functions.h **** #include "arm_math_types.h"
  31:.\DSP\Include/dsp/fast_math_functions.h **** #include "arm_math_memory.h"
  32:.\DSP\Include/dsp/fast_math_functions.h **** 
  33:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/none.h"
  34:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/utils.h"
  35:.\DSP\Include/dsp/fast_math_functions.h **** 
  36:.\DSP\Include/dsp/fast_math_functions.h **** #include "dsp/basic_math_functions.h"
  37:.\DSP\Include/dsp/fast_math_functions.h **** 
  38:.\DSP\Include/dsp/fast_math_functions.h **** 
  39:.\DSP\Include/dsp/fast_math_functions.h **** #ifdef   __cplusplus
  40:.\DSP\Include/dsp/fast_math_functions.h **** extern "C"
  41:.\DSP\Include/dsp/fast_math_functions.h **** {
  42:.\DSP\Include/dsp/fast_math_functions.h **** #endif
  43:.\DSP\Include/dsp/fast_math_functions.h **** 
  44:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  45:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
  46:.\DSP\Include/dsp/fast_math_functions.h ****    */
  47:.\DSP\Include/dsp/fast_math_functions.h **** 
  48:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_TABLE_SIZE  512
  49:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
  50:.\DSP\Include/dsp/fast_math_functions.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
  51:.\DSP\Include/dsp/fast_math_functions.h ****   
  52:.\DSP\Include/dsp/fast_math_functions.h **** #ifndef PI
  53:.\DSP\Include/dsp/fast_math_functions.h ****   #define PI               3.14159265358979f
  54:.\DSP\Include/dsp/fast_math_functions.h **** #endif
  55:.\DSP\Include/dsp/fast_math_functions.h **** 
  56:.\DSP\Include/dsp/fast_math_functions.h **** 
  57:.\DSP\Include/dsp/fast_math_functions.h **** /**
  58:.\DSP\Include/dsp/fast_math_functions.h ****  * @defgroup groupFastMath Fast Math Functions
  59:.\DSP\Include/dsp/fast_math_functions.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
  60:.\DSP\Include/dsp/fast_math_functions.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
  61:.\DSP\Include/dsp/fast_math_functions.h ****  * operate on individual values and not arrays.
  62:.\DSP\Include/dsp/fast_math_functions.h ****  * There are separate functions for Q15, Q31, and floating-point data.
  63:.\DSP\Include/dsp/fast_math_functions.h ****  *
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 8


  64:.\DSP\Include/dsp/fast_math_functions.h ****  */
  65:.\DSP\Include/dsp/fast_math_functions.h **** 
  66:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  67:.\DSP\Include/dsp/fast_math_functions.h ****    * @ingroup groupFastMath
  68:.\DSP\Include/dsp/fast_math_functions.h ****    */
  69:.\DSP\Include/dsp/fast_math_functions.h **** 
  70:.\DSP\Include/dsp/fast_math_functions.h **** 
  71:.\DSP\Include/dsp/fast_math_functions.h **** /**
  72:.\DSP\Include/dsp/fast_math_functions.h ****   @addtogroup sin
  73:.\DSP\Include/dsp/fast_math_functions.h ****   @{
  74:.\DSP\Include/dsp/fast_math_functions.h ****  */
  75:.\DSP\Include/dsp/fast_math_functions.h **** 
  76:.\DSP\Include/dsp/fast_math_functions.h **** /**
  77:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for floating-point data.
  78:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  input value in radians.
  79:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  80:.\DSP\Include/dsp/fast_math_functions.h ****    */
  81:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t arm_sin_f32(
  82:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t x);
  83:.\DSP\Include/dsp/fast_math_functions.h **** 
  84:.\DSP\Include/dsp/fast_math_functions.h **** 
  85:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  86:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for Q31 data.
  87:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
  88:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  89:.\DSP\Include/dsp/fast_math_functions.h ****    */
  90:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t arm_sin_q31(
  91:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t x);
  92:.\DSP\Include/dsp/fast_math_functions.h **** 
  93:.\DSP\Include/dsp/fast_math_functions.h **** 
  94:.\DSP\Include/dsp/fast_math_functions.h ****   /**
  95:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric sine function for Q15 data.
  96:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
  97:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  sin(x).
  98:.\DSP\Include/dsp/fast_math_functions.h ****    */
  99:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t arm_sin_q15(
 100:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t x);
 101:.\DSP\Include/dsp/fast_math_functions.h **** 
 102:.\DSP\Include/dsp/fast_math_functions.h **** /**
 103:.\DSP\Include/dsp/fast_math_functions.h ****   @} end of sin group
 104:.\DSP\Include/dsp/fast_math_functions.h ****  */
 105:.\DSP\Include/dsp/fast_math_functions.h **** 
 106:.\DSP\Include/dsp/fast_math_functions.h **** /**
 107:.\DSP\Include/dsp/fast_math_functions.h ****   @addtogroup cos
 108:.\DSP\Include/dsp/fast_math_functions.h ****   @{
 109:.\DSP\Include/dsp/fast_math_functions.h ****  */
 110:.\DSP\Include/dsp/fast_math_functions.h **** 
 111:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 112:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
 113:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  input value in radians.
 114:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 115:.\DSP\Include/dsp/fast_math_functions.h ****    */
 116:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t arm_cos_f32(
 117:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t x);
 118:.\DSP\Include/dsp/fast_math_functions.h **** 
 119:.\DSP\Include/dsp/fast_math_functions.h **** 
 120:.\DSP\Include/dsp/fast_math_functions.h ****   /**
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 9


 121:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief Fast approximation to the trigonometric cosine function for Q31 data.
 122:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
 123:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 124:.\DSP\Include/dsp/fast_math_functions.h ****    */
 125:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t arm_cos_q31(
 126:.\DSP\Include/dsp/fast_math_functions.h ****   q31_t x);
 127:.\DSP\Include/dsp/fast_math_functions.h **** 
 128:.\DSP\Include/dsp/fast_math_functions.h **** 
 129:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 130:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  Fast approximation to the trigonometric cosine function for Q15 data.
 131:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in] x  Scaled input value in radians.
 132:.\DSP\Include/dsp/fast_math_functions.h ****    * @return  cos(x).
 133:.\DSP\Include/dsp/fast_math_functions.h ****    */
 134:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t arm_cos_q15(
 135:.\DSP\Include/dsp/fast_math_functions.h ****   q15_t x);
 136:.\DSP\Include/dsp/fast_math_functions.h **** 
 137:.\DSP\Include/dsp/fast_math_functions.h **** /**
 138:.\DSP\Include/dsp/fast_math_functions.h ****   @} end of cos group
 139:.\DSP\Include/dsp/fast_math_functions.h ****  */
 140:.\DSP\Include/dsp/fast_math_functions.h **** 
 141:.\DSP\Include/dsp/fast_math_functions.h **** 
 142:.\DSP\Include/dsp/fast_math_functions.h **** /**
 143:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of log values.
 144:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 145:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 146:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 147:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 148:.\DSP\Include/dsp/fast_math_functions.h ****  */
 149:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_f32(
 150:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t * pSrc,
 151:.\DSP\Include/dsp/fast_math_functions.h ****         float32_t * pDst,
 152:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 153:.\DSP\Include/dsp/fast_math_functions.h **** 
 154:.\DSP\Include/dsp/fast_math_functions.h **** 
 155:.\DSP\Include/dsp/fast_math_functions.h **** 
 156:.\DSP\Include/dsp/fast_math_functions.h **** /**
 157:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of log values.
 158:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 159:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 160:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 161:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 162:.\DSP\Include/dsp/fast_math_functions.h ****  */
 163:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_f64(
 164:.\DSP\Include/dsp/fast_math_functions.h ****   const float64_t * pSrc,
 165:.\DSP\Include/dsp/fast_math_functions.h **** 		float64_t * pDst,
 166:.\DSP\Include/dsp/fast_math_functions.h **** 		uint32_t blockSize);
 167:.\DSP\Include/dsp/fast_math_functions.h **** 
 168:.\DSP\Include/dsp/fast_math_functions.h **** 
 169:.\DSP\Include/dsp/fast_math_functions.h **** 
 170:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 171:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  q31 vector of log values.
 172:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     pSrc       points to the input vector in q31
 173:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[out]    pDst       points to the output vector in q5.26
 174:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     blockSize  number of samples in each vector
 175:.\DSP\Include/dsp/fast_math_functions.h ****    * @return        none
 176:.\DSP\Include/dsp/fast_math_functions.h ****    */
 177:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_q31(const q31_t * pSrc,
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 10


 178:.\DSP\Include/dsp/fast_math_functions.h ****         q31_t * pDst,
 179:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 180:.\DSP\Include/dsp/fast_math_functions.h **** 
 181:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 182:.\DSP\Include/dsp/fast_math_functions.h ****    * @brief  q15 vector of log values.
 183:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     pSrc       points to the input vector in q15
 184:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[out]    pDst       points to the output vector in q4.11
 185:.\DSP\Include/dsp/fast_math_functions.h ****    * @param[in]     blockSize  number of samples in each vector
 186:.\DSP\Include/dsp/fast_math_functions.h ****    * @return        none
 187:.\DSP\Include/dsp/fast_math_functions.h ****    */
 188:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vlog_q15(const q15_t * pSrc,
 189:.\DSP\Include/dsp/fast_math_functions.h ****         q15_t * pDst,
 190:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 191:.\DSP\Include/dsp/fast_math_functions.h **** 
 192:.\DSP\Include/dsp/fast_math_functions.h **** 
 193:.\DSP\Include/dsp/fast_math_functions.h **** 
 194:.\DSP\Include/dsp/fast_math_functions.h **** /**
 195:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of exp values.
 196:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 197:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 198:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 199:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 200:.\DSP\Include/dsp/fast_math_functions.h ****  */
 201:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vexp_f32(
 202:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t * pSrc,
 203:.\DSP\Include/dsp/fast_math_functions.h ****         float32_t * pDst,
 204:.\DSP\Include/dsp/fast_math_functions.h ****         uint32_t blockSize);
 205:.\DSP\Include/dsp/fast_math_functions.h **** 
 206:.\DSP\Include/dsp/fast_math_functions.h **** 
 207:.\DSP\Include/dsp/fast_math_functions.h **** 
 208:.\DSP\Include/dsp/fast_math_functions.h **** /**
 209:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point vector of exp values.
 210:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     pSrc       points to the input vector
 211:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pDst       points to the output vector
 212:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     blockSize  number of samples in each vector
 213:.\DSP\Include/dsp/fast_math_functions.h ****   @return        none
 214:.\DSP\Include/dsp/fast_math_functions.h ****  */
 215:.\DSP\Include/dsp/fast_math_functions.h ****   void arm_vexp_f64(
 216:.\DSP\Include/dsp/fast_math_functions.h ****   const float64_t * pSrc,
 217:.\DSP\Include/dsp/fast_math_functions.h **** 		float64_t * pDst,
 218:.\DSP\Include/dsp/fast_math_functions.h **** 		uint32_t blockSize);
 219:.\DSP\Include/dsp/fast_math_functions.h **** 
 220:.\DSP\Include/dsp/fast_math_functions.h **** 
 221:.\DSP\Include/dsp/fast_math_functions.h **** 
 222:.\DSP\Include/dsp/fast_math_functions.h ****  /**
 223:.\DSP\Include/dsp/fast_math_functions.h ****    * @defgroup SQRT Square Root
 224:.\DSP\Include/dsp/fast_math_functions.h ****    *
 225:.\DSP\Include/dsp/fast_math_functions.h ****    * Computes the square root of a number.
 226:.\DSP\Include/dsp/fast_math_functions.h ****    * There are separate functions for Q15, Q31, and floating-point data types.
 227:.\DSP\Include/dsp/fast_math_functions.h ****    * The square root function is computed using the Newton-Raphson algorithm.
 228:.\DSP\Include/dsp/fast_math_functions.h ****    * This is an iterative algorithm of the form:
 229:.\DSP\Include/dsp/fast_math_functions.h ****    * <pre>
 230:.\DSP\Include/dsp/fast_math_functions.h ****    *      x1 = x0 - f(x0)/f'(x0)
 231:.\DSP\Include/dsp/fast_math_functions.h ****    * </pre>
 232:.\DSP\Include/dsp/fast_math_functions.h ****    * where <code>x1</code> is the current estimate,
 233:.\DSP\Include/dsp/fast_math_functions.h ****    * <code>x0</code> is the previous estimate, and
 234:.\DSP\Include/dsp/fast_math_functions.h ****    * <code>f'(x0)</code> is the derivative of <code>f()</code> evaluated at <code>x0</code>.
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 11


 235:.\DSP\Include/dsp/fast_math_functions.h ****    * For the square root function, the algorithm reduces to:
 236:.\DSP\Include/dsp/fast_math_functions.h ****    * <pre>
 237:.\DSP\Include/dsp/fast_math_functions.h ****    *     x0 = in/2                         [initial guess]
 238:.\DSP\Include/dsp/fast_math_functions.h ****    *     x1 = 1/2 * ( x0 + in / x0)        [each iteration]
 239:.\DSP\Include/dsp/fast_math_functions.h ****    * </pre>
 240:.\DSP\Include/dsp/fast_math_functions.h ****    */
 241:.\DSP\Include/dsp/fast_math_functions.h **** 
 242:.\DSP\Include/dsp/fast_math_functions.h **** 
 243:.\DSP\Include/dsp/fast_math_functions.h ****   /**
 244:.\DSP\Include/dsp/fast_math_functions.h ****    * @addtogroup SQRT
 245:.\DSP\Include/dsp/fast_math_functions.h ****    * @{
 246:.\DSP\Include/dsp/fast_math_functions.h ****    */
 247:.\DSP\Include/dsp/fast_math_functions.h **** 
 248:.\DSP\Include/dsp/fast_math_functions.h **** /**
 249:.\DSP\Include/dsp/fast_math_functions.h ****   @brief         Floating-point square root function.
 250:.\DSP\Include/dsp/fast_math_functions.h ****   @param[in]     in    input value
 251:.\DSP\Include/dsp/fast_math_functions.h ****   @param[out]    pOut  square root of input value
 252:.\DSP\Include/dsp/fast_math_functions.h ****   @return        execution status
 253:.\DSP\Include/dsp/fast_math_functions.h ****                    - \ref ARM_MATH_SUCCESS        : input value is positive
 254:.\DSP\Include/dsp/fast_math_functions.h ****                    - \ref ARM_MATH_ARGUMENT_ERROR : input value is negative; *pOut is set to 0
 255:.\DSP\Include/dsp/fast_math_functions.h ****  */
 256:.\DSP\Include/dsp/fast_math_functions.h **** __STATIC_FORCEINLINE arm_status arm_sqrt_f32(
 257:.\DSP\Include/dsp/fast_math_functions.h ****   const float32_t in,
 258:.\DSP\Include/dsp/fast_math_functions.h ****   float32_t * pOut)
 259:.\DSP\Include/dsp/fast_math_functions.h ****   {
 260:.\DSP\Include/dsp/fast_math_functions.h ****     if (in >= 0.0f)
  74              		.loc 2 260 0
  75 002e 0027     		movs	r7, #0
  76 0030 3946     		mov	r1, r7
  77              	.LBE5:
  78              	.LBE4:
  79              		.loc 1 262 0
  80 0032 8046     		mov	r8, r0
  81              	.LVL8:
  82 0034 0435     		adds	r5, r5, #4
  83              	.LVL9:
  84              	.LBB7:
  85              	.LBB6:
  86              		.loc 2 260 0
  87 0036 FFF7FEFF 		bl	__aeabi_fcmpge
  88              	.LVL10:
  89 003a 28B1     		cbz	r0, .L9
 261:.\DSP\Include/dsp/fast_math_functions.h ****     {
 262:.\DSP\Include/dsp/fast_math_functions.h **** #if defined ( __CC_ARM )
 263:.\DSP\Include/dsp/fast_math_functions.h ****   #if defined __TARGET_FPU_VFP
 264:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = __sqrtf(in);
 265:.\DSP\Include/dsp/fast_math_functions.h ****   #else
 266:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
 267:.\DSP\Include/dsp/fast_math_functions.h ****   #endif
 268:.\DSP\Include/dsp/fast_math_functions.h **** 
 269:.\DSP\Include/dsp/fast_math_functions.h **** #elif defined ( __ICCARM__ )
 270:.\DSP\Include/dsp/fast_math_functions.h ****   #if defined __ARMVFP__
 271:.\DSP\Include/dsp/fast_math_functions.h ****       __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 272:.\DSP\Include/dsp/fast_math_functions.h ****   #else
 273:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
 274:.\DSP\Include/dsp/fast_math_functions.h ****   #endif
 275:.\DSP\Include/dsp/fast_math_functions.h **** 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 12


 276:.\DSP\Include/dsp/fast_math_functions.h **** #else
 277:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = sqrtf(in);
  90              		.loc 2 277 0
  91 003c 4046     		mov	r0, r8
  92 003e FFF7FEFF 		bl	sqrtf
  93              	.LVL11:
  94 0042 45F8040C 		str	r0, [r5, #-4]	@ float
  95 0046 01E0     		b	.L8
  96              	.L9:
 278:.\DSP\Include/dsp/fast_math_functions.h **** #endif
 279:.\DSP\Include/dsp/fast_math_functions.h **** 
 280:.\DSP\Include/dsp/fast_math_functions.h ****       return (ARM_MATH_SUCCESS);
 281:.\DSP\Include/dsp/fast_math_functions.h ****     }
 282:.\DSP\Include/dsp/fast_math_functions.h ****     else
 283:.\DSP\Include/dsp/fast_math_functions.h ****     {
 284:.\DSP\Include/dsp/fast_math_functions.h ****       *pOut = 0.0f;
  97              		.loc 2 284 0
  98 0048 45F8047C 		str	r7, [r5, #-4]	@ float
  99              	.L8:
 100              	.LBE6:
 101              	.LBE7:
 263:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 264:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     /* Decrement loop counter */
 265:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****     blkCnt--;
 102              		.loc 1 265 0
 103 004c 013E     		subs	r6, r6, #1
 104              	.LVL12:
 105 004e 0834     		adds	r4, r4, #8
 106              	.LVL13:
 107 0050 DCE7     		b	.L2
 108              	.LVL14:
 109              	.L11:
 266:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c ****   }
 267:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** 
 268:.\DSP\Source\ComplexMathFunctions/arm_cmplx_mag_f32.c **** }
 110              		.loc 1 268 0
 111 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 112              		.cfi_endproc
 113              	.LFE84:
 114              		.size	arm_cmplx_mag_f32, .-arm_cmplx_mag_f32
 115              		.text
 116              	.Letext0:
 117              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 118              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 119              		.file 5 ".\\DSP\\Include/arm_math_types.h"
 120              		.file 6 ".\\Core\\Include/cmsis_gcc.h"
 121              		.file 7 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 122              		.section	.debug_info,"",%progbits
 123              	.Ldebug_info0:
 124 0000 8E020000 		.4byte	0x28e
 125 0004 0400     		.2byte	0x4
 126 0006 00000000 		.4byte	.Ldebug_abbrev0
 127 000a 04       		.byte	0x4
 128 000b 01       		.uleb128 0x1
 129 000c 19010000 		.4byte	.LASF41
 130 0010 01       		.byte	0x1
 131 0011 76000000 		.4byte	.LASF42
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 13


 132 0015 0F020000 		.4byte	.LASF43
 133 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 134 001d 00000000 		.4byte	0
 135 0021 00000000 		.4byte	.Ldebug_line0
 136 0025 02       		.uleb128 0x2
 137 0026 04       		.byte	0x4
 138 0027 04       		.byte	0x4
 139 0028 38000000 		.4byte	.LASF0
 140 002c 02       		.uleb128 0x2
 141 002d 01       		.byte	0x1
 142 002e 06       		.byte	0x6
 143 002f 19030000 		.4byte	.LASF1
 144 0033 02       		.uleb128 0x2
 145 0034 01       		.byte	0x1
 146 0035 08       		.byte	0x8
 147 0036 B6000000 		.4byte	.LASF2
 148 003a 02       		.uleb128 0x2
 149 003b 02       		.byte	0x2
 150 003c 05       		.byte	0x5
 151 003d DC020000 		.4byte	.LASF3
 152 0041 02       		.uleb128 0x2
 153 0042 02       		.byte	0x2
 154 0043 07       		.byte	0x7
 155 0044 06010000 		.4byte	.LASF4
 156 0048 02       		.uleb128 0x2
 157 0049 04       		.byte	0x4
 158 004a 05       		.byte	0x5
 159 004b EF020000 		.4byte	.LASF5
 160 004f 03       		.uleb128 0x3
 161 0050 D5010000 		.4byte	.LASF10
 162 0054 03       		.byte	0x3
 163 0055 41       		.byte	0x41
 164 0056 5A000000 		.4byte	0x5a
 165 005a 02       		.uleb128 0x2
 166 005b 04       		.byte	0x4
 167 005c 07       		.byte	0x7
 168 005d F4000000 		.4byte	.LASF6
 169 0061 02       		.uleb128 0x2
 170 0062 08       		.byte	0x8
 171 0063 05       		.byte	0x5
 172 0064 B3020000 		.4byte	.LASF7
 173 0068 02       		.uleb128 0x2
 174 0069 08       		.byte	0x8
 175 006a 07       		.byte	0x7
 176 006b 5E020000 		.4byte	.LASF8
 177 006f 04       		.uleb128 0x4
 178 0070 04       		.byte	0x4
 179 0071 05       		.byte	0x5
 180 0072 696E7400 		.ascii	"int\000"
 181 0076 02       		.uleb128 0x2
 182 0077 04       		.byte	0x4
 183 0078 07       		.byte	0x7
 184 0079 FD010000 		.4byte	.LASF9
 185 007d 03       		.uleb128 0x3
 186 007e E6020000 		.4byte	.LASF11
 187 0082 04       		.byte	0x4
 188 0083 2D       		.byte	0x2d
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 14


 189 0084 4F000000 		.4byte	0x4f
 190 0088 02       		.uleb128 0x2
 191 0089 04       		.byte	0x4
 192 008a 07       		.byte	0x7
 193 008b A4020000 		.4byte	.LASF12
 194 008f 02       		.uleb128 0x2
 195 0090 01       		.byte	0x1
 196 0091 08       		.byte	0x8
 197 0092 C1020000 		.4byte	.LASF13
 198 0096 02       		.uleb128 0x2
 199 0097 08       		.byte	0x8
 200 0098 04       		.byte	0x4
 201 0099 B7010000 		.4byte	.LASF14
 202 009d 02       		.uleb128 0x2
 203 009e 08       		.byte	0x8
 204 009f 04       		.byte	0x4
 205 00a0 F8020000 		.4byte	.LASF15
 206 00a4 05       		.uleb128 0x5
 207 00a5 CB010000 		.4byte	.LASF16
 208 00a9 05       		.byte	0x5
 209 00aa 2F01     		.2byte	0x12f
 210 00ac 25000000 		.4byte	0x25
 211 00b0 06       		.uleb128 0x6
 212 00b1 01       		.byte	0x1
 213 00b2 05       		.byte	0x5
 214 00b3 5802     		.2byte	0x258
 215 00b5 EA000000 		.4byte	0xea
 216 00b9 07       		.uleb128 0x7
 217 00ba C6020000 		.4byte	.LASF17
 218 00be 00       		.sleb128 0
 219 00bf 07       		.uleb128 0x7
 220 00c0 E5010000 		.4byte	.LASF18
 221 00c4 7F       		.sleb128 -1
 222 00c5 07       		.uleb128 0x7
 223 00c6 13000000 		.4byte	.LASF19
 224 00ca 7E       		.sleb128 -2
 225 00cb 07       		.uleb128 0x7
 226 00cc 5F000000 		.4byte	.LASF20
 227 00d0 7D       		.sleb128 -3
 228 00d1 07       		.uleb128 0x7
 229 00d2 75020000 		.4byte	.LASF21
 230 00d6 7C       		.sleb128 -4
 231 00d7 07       		.uleb128 0x7
 232 00d8 55030000 		.4byte	.LASF22
 233 00dc 7B       		.sleb128 -5
 234 00dd 07       		.uleb128 0x7
 235 00de DE000000 		.4byte	.LASF23
 236 00e2 7A       		.sleb128 -6
 237 00e3 07       		.uleb128 0x7
 238 00e4 85020000 		.4byte	.LASF24
 239 00e8 79       		.sleb128 -7
 240 00e9 00       		.byte	0
 241 00ea 05       		.uleb128 0x5
 242 00eb 4A030000 		.4byte	.LASF25
 243 00ef 05       		.byte	0x5
 244 00f0 6102     		.2byte	0x261
 245 00f2 B0000000 		.4byte	0xb0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 15


 246 00f6 08       		.uleb128 0x8
 247 00f7 BE010000 		.4byte	.LASF44
 248 00fb 02       		.byte	0x2
 249 00fc 0001     		.2byte	0x100
 250 00fe EA000000 		.4byte	0xea
 251 0102 03       		.byte	0x3
 252 0103 1F010000 		.4byte	0x11f
 253 0107 09       		.uleb128 0x9
 254 0108 696E00   		.ascii	"in\000"
 255 010b 02       		.byte	0x2
 256 010c 0101     		.2byte	0x101
 257 010e 1F010000 		.4byte	0x11f
 258 0112 0A       		.uleb128 0xa
 259 0113 AC000000 		.4byte	.LASF26
 260 0117 02       		.byte	0x2
 261 0118 0201     		.2byte	0x102
 262 011a 24010000 		.4byte	0x124
 263 011e 00       		.byte	0
 264 011f 0B       		.uleb128 0xb
 265 0120 A4000000 		.4byte	0xa4
 266 0124 0C       		.uleb128 0xc
 267 0125 04       		.byte	0x4
 268 0126 A4000000 		.4byte	0xa4
 269 012a 0D       		.uleb128 0xd
 270 012b 3E000000 		.4byte	.LASF45
 271 012f 01       		.byte	0x1
 272 0130 9C       		.byte	0x9c
 273 0131 00000000 		.4byte	.LFB84
 274 0135 56000000 		.4byte	.LFE84-.LFB84
 275 0139 01       		.uleb128 0x1
 276 013a 9C       		.byte	0x9c
 277 013b CE010000 		.4byte	0x1ce
 278 013f 0E       		.uleb128 0xe
 279 0140 25030000 		.4byte	.LASF27
 280 0144 01       		.byte	0x1
 281 0145 9D       		.byte	0x9d
 282 0146 CE010000 		.4byte	0x1ce
 283 014a 00000000 		.4byte	.LLST0
 284 014e 0E       		.uleb128 0xe
 285 014f B2010000 		.4byte	.LASF28
 286 0153 01       		.byte	0x1
 287 0154 9E       		.byte	0x9e
 288 0155 24010000 		.4byte	0x124
 289 0159 38000000 		.4byte	.LLST1
 290 015d 0E       		.uleb128 0xe
 291 015e 2A030000 		.4byte	.LASF29
 292 0162 01       		.byte	0x1
 293 0163 9F       		.byte	0x9f
 294 0164 7D000000 		.4byte	0x7d
 295 0168 56000000 		.4byte	.LLST2
 296 016c 0F       		.uleb128 0xf
 297 016d C4000000 		.4byte	.LASF30
 298 0171 01       		.byte	0x1
 299 0172 A1       		.byte	0xa1
 300 0173 7D000000 		.4byte	0x7d
 301 0177 77000000 		.4byte	.LLST3
 302 017b 0F       		.uleb128 0xf
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 16


 303 017c 0A020000 		.4byte	.LASF31
 304 0180 01       		.byte	0x1
 305 0181 A2       		.byte	0xa2
 306 0182 A4000000 		.4byte	0xa4
 307 0186 95000000 		.4byte	.LLST4
 308 018a 0F       		.uleb128 0xf
 309 018b E0010000 		.4byte	.LASF32
 310 018f 01       		.byte	0x1
 311 0190 A2       		.byte	0xa2
 312 0191 A4000000 		.4byte	0xa4
 313 0195 A9000000 		.4byte	.LLST5
 314 0199 10       		.uleb128 0x10
 315 019a F6000000 		.4byte	0xf6
 316 019e 2E000000 		.4byte	.LBB4
 317 01a2 00000000 		.4byte	.Ldebug_ranges0+0
 318 01a6 01       		.byte	0x1
 319 01a7 0601     		.2byte	0x106
 320 01a9 11       		.uleb128 0x11
 321 01aa 12010000 		.4byte	0x112
 322 01ae BC000000 		.4byte	.LLST6
 323 01b2 11       		.uleb128 0x11
 324 01b3 07010000 		.4byte	0x107
 325 01b7 CF000000 		.4byte	.LLST7
 326 01bb 12       		.uleb128 0x12
 327 01bc 42000000 		.4byte	.LVL11
 328 01c0 7F020000 		.4byte	0x27f
 329 01c4 13       		.uleb128 0x13
 330 01c5 01       		.uleb128 0x1
 331 01c6 50       		.byte	0x50
 332 01c7 03       		.uleb128 0x3
 333 01c8 F5       		.byte	0xf5
 334 01c9 08       		.uleb128 0x8
 335 01ca 25       		.uleb128 0x25
 336 01cb 00       		.byte	0
 337 01cc 00       		.byte	0
 338 01cd 00       		.byte	0
 339 01ce 0C       		.uleb128 0xc
 340 01cf 04       		.byte	0x4
 341 01d0 1F010000 		.4byte	0x11f
 342 01d4 03       		.uleb128 0x3
 343 01d5 29000000 		.4byte	.LASF33
 344 01d9 06       		.byte	0x6
 345 01da 8B       		.byte	0x8b
 346 01db 52020000 		.4byte	0x252
 347 01df 0C       		.uleb128 0xc
 348 01e0 04       		.byte	0x4
 349 01e1 E5010000 		.4byte	0x1e5
 350 01e5 0B       		.uleb128 0xb
 351 01e6 7D000000 		.4byte	0x7d
 352 01ea 0C       		.uleb128 0xc
 353 01eb 04       		.byte	0x4
 354 01ec 7D000000 		.4byte	0x7d
 355 01f0 14       		.uleb128 0x14
 356 01f1 35030000 		.4byte	.LASF34
 357 01f5 06       		.byte	0x6
 358 01f6 92       		.byte	0x92
 359 01f7 FB010000 		.4byte	0x1fb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 17


 360 01fb 0B       		.uleb128 0xb
 361 01fc D4010000 		.4byte	0x1d4
 362 0200 14       		.uleb128 0x14
 363 0201 CB000000 		.4byte	.LASF35
 364 0205 06       		.byte	0x6
 365 0206 93       		.byte	0x93
 366 0207 FB010000 		.4byte	0x1fb
 367 020b 03       		.uleb128 0x3
 368 020c 50000000 		.4byte	.LASF36
 369 0210 06       		.byte	0x6
 370 0211 90       		.byte	0x90
 371 0212 31020000 		.4byte	0x231
 372 0216 14       		.uleb128 0x14
 373 0217 04030000 		.4byte	.LASF37
 374 021b 06       		.byte	0x6
 375 021c 94       		.byte	0x94
 376 021d 21020000 		.4byte	0x221
 377 0221 0B       		.uleb128 0xb
 378 0222 0B020000 		.4byte	0x20b
 379 0226 14       		.uleb128 0x14
 380 0227 00000000 		.4byte	.LASF38
 381 022b 06       		.byte	0x6
 382 022c 95       		.byte	0x95
 383 022d 21020000 		.4byte	0x221
 384 0231 15       		.uleb128 0x15
 385 0232 08       		.byte	0x8
 386 0233 06       		.byte	0x6
 387 0234 8D       		.byte	0x8d
 388 0235 52020000 		.4byte	0x252
 389 0239 16       		.uleb128 0x16
 390 023a B1000000 		.4byte	.LASF39
 391 023e 06       		.byte	0x6
 392 023f 8E       		.byte	0x8e
 393 0240 EA010000 		.4byte	0x1ea
 394 0244 00       		.byte	0
 395 0245 16       		.uleb128 0x16
 396 0246 D7020000 		.4byte	.LASF40
 397 024a 06       		.byte	0x6
 398 024b 8F       		.byte	0x8f
 399 024c 7D000000 		.4byte	0x7d
 400 0250 04       		.byte	0x4
 401 0251 00       		.byte	0
 402 0252 15       		.uleb128 0x15
 403 0253 0C       		.byte	0xc
 404 0254 06       		.byte	0x6
 405 0255 87       		.byte	0x87
 406 0256 7F020000 		.4byte	0x27f
 407 025a 17       		.uleb128 0x17
 408 025b 73726300 		.ascii	"src\000"
 409 025f 06       		.byte	0x6
 410 0260 88       		.byte	0x88
 411 0261 DF010000 		.4byte	0x1df
 412 0265 00       		.byte	0
 413 0266 16       		.uleb128 0x16
 414 0267 B1000000 		.4byte	.LASF39
 415 026b 06       		.byte	0x6
 416 026c 89       		.byte	0x89
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 18


 417 026d EA010000 		.4byte	0x1ea
 418 0271 04       		.byte	0x4
 419 0272 16       		.uleb128 0x16
 420 0273 D7020000 		.4byte	.LASF40
 421 0277 06       		.byte	0x6
 422 0278 8A       		.byte	0x8a
 423 0279 7D000000 		.4byte	0x7d
 424 027d 08       		.byte	0x8
 425 027e 00       		.byte	0
 426 027f 18       		.uleb128 0x18
 427 0280 AD020000 		.4byte	.LASF46
 428 0284 07       		.byte	0x7
 429 0285 5401     		.2byte	0x154
 430 0287 25000000 		.4byte	0x25
 431 028b 19       		.uleb128 0x19
 432 028c 25000000 		.4byte	0x25
 433 0290 00       		.byte	0
 434 0291 00       		.byte	0
 435              		.section	.debug_abbrev,"",%progbits
 436              	.Ldebug_abbrev0:
 437 0000 01       		.uleb128 0x1
 438 0001 11       		.uleb128 0x11
 439 0002 01       		.byte	0x1
 440 0003 25       		.uleb128 0x25
 441 0004 0E       		.uleb128 0xe
 442 0005 13       		.uleb128 0x13
 443 0006 0B       		.uleb128 0xb
 444 0007 03       		.uleb128 0x3
 445 0008 0E       		.uleb128 0xe
 446 0009 1B       		.uleb128 0x1b
 447 000a 0E       		.uleb128 0xe
 448 000b 55       		.uleb128 0x55
 449 000c 17       		.uleb128 0x17
 450 000d 11       		.uleb128 0x11
 451 000e 01       		.uleb128 0x1
 452 000f 10       		.uleb128 0x10
 453 0010 17       		.uleb128 0x17
 454 0011 00       		.byte	0
 455 0012 00       		.byte	0
 456 0013 02       		.uleb128 0x2
 457 0014 24       		.uleb128 0x24
 458 0015 00       		.byte	0
 459 0016 0B       		.uleb128 0xb
 460 0017 0B       		.uleb128 0xb
 461 0018 3E       		.uleb128 0x3e
 462 0019 0B       		.uleb128 0xb
 463 001a 03       		.uleb128 0x3
 464 001b 0E       		.uleb128 0xe
 465 001c 00       		.byte	0
 466 001d 00       		.byte	0
 467 001e 03       		.uleb128 0x3
 468 001f 16       		.uleb128 0x16
 469 0020 00       		.byte	0
 470 0021 03       		.uleb128 0x3
 471 0022 0E       		.uleb128 0xe
 472 0023 3A       		.uleb128 0x3a
 473 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 19


 474 0025 3B       		.uleb128 0x3b
 475 0026 0B       		.uleb128 0xb
 476 0027 49       		.uleb128 0x49
 477 0028 13       		.uleb128 0x13
 478 0029 00       		.byte	0
 479 002a 00       		.byte	0
 480 002b 04       		.uleb128 0x4
 481 002c 24       		.uleb128 0x24
 482 002d 00       		.byte	0
 483 002e 0B       		.uleb128 0xb
 484 002f 0B       		.uleb128 0xb
 485 0030 3E       		.uleb128 0x3e
 486 0031 0B       		.uleb128 0xb
 487 0032 03       		.uleb128 0x3
 488 0033 08       		.uleb128 0x8
 489 0034 00       		.byte	0
 490 0035 00       		.byte	0
 491 0036 05       		.uleb128 0x5
 492 0037 16       		.uleb128 0x16
 493 0038 00       		.byte	0
 494 0039 03       		.uleb128 0x3
 495 003a 0E       		.uleb128 0xe
 496 003b 3A       		.uleb128 0x3a
 497 003c 0B       		.uleb128 0xb
 498 003d 3B       		.uleb128 0x3b
 499 003e 05       		.uleb128 0x5
 500 003f 49       		.uleb128 0x49
 501 0040 13       		.uleb128 0x13
 502 0041 00       		.byte	0
 503 0042 00       		.byte	0
 504 0043 06       		.uleb128 0x6
 505 0044 04       		.uleb128 0x4
 506 0045 01       		.byte	0x1
 507 0046 0B       		.uleb128 0xb
 508 0047 0B       		.uleb128 0xb
 509 0048 3A       		.uleb128 0x3a
 510 0049 0B       		.uleb128 0xb
 511 004a 3B       		.uleb128 0x3b
 512 004b 05       		.uleb128 0x5
 513 004c 01       		.uleb128 0x1
 514 004d 13       		.uleb128 0x13
 515 004e 00       		.byte	0
 516 004f 00       		.byte	0
 517 0050 07       		.uleb128 0x7
 518 0051 28       		.uleb128 0x28
 519 0052 00       		.byte	0
 520 0053 03       		.uleb128 0x3
 521 0054 0E       		.uleb128 0xe
 522 0055 1C       		.uleb128 0x1c
 523 0056 0D       		.uleb128 0xd
 524 0057 00       		.byte	0
 525 0058 00       		.byte	0
 526 0059 08       		.uleb128 0x8
 527 005a 2E       		.uleb128 0x2e
 528 005b 01       		.byte	0x1
 529 005c 03       		.uleb128 0x3
 530 005d 0E       		.uleb128 0xe
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 20


 531 005e 3A       		.uleb128 0x3a
 532 005f 0B       		.uleb128 0xb
 533 0060 3B       		.uleb128 0x3b
 534 0061 05       		.uleb128 0x5
 535 0062 27       		.uleb128 0x27
 536 0063 19       		.uleb128 0x19
 537 0064 49       		.uleb128 0x49
 538 0065 13       		.uleb128 0x13
 539 0066 20       		.uleb128 0x20
 540 0067 0B       		.uleb128 0xb
 541 0068 01       		.uleb128 0x1
 542 0069 13       		.uleb128 0x13
 543 006a 00       		.byte	0
 544 006b 00       		.byte	0
 545 006c 09       		.uleb128 0x9
 546 006d 05       		.uleb128 0x5
 547 006e 00       		.byte	0
 548 006f 03       		.uleb128 0x3
 549 0070 08       		.uleb128 0x8
 550 0071 3A       		.uleb128 0x3a
 551 0072 0B       		.uleb128 0xb
 552 0073 3B       		.uleb128 0x3b
 553 0074 05       		.uleb128 0x5
 554 0075 49       		.uleb128 0x49
 555 0076 13       		.uleb128 0x13
 556 0077 00       		.byte	0
 557 0078 00       		.byte	0
 558 0079 0A       		.uleb128 0xa
 559 007a 05       		.uleb128 0x5
 560 007b 00       		.byte	0
 561 007c 03       		.uleb128 0x3
 562 007d 0E       		.uleb128 0xe
 563 007e 3A       		.uleb128 0x3a
 564 007f 0B       		.uleb128 0xb
 565 0080 3B       		.uleb128 0x3b
 566 0081 05       		.uleb128 0x5
 567 0082 49       		.uleb128 0x49
 568 0083 13       		.uleb128 0x13
 569 0084 00       		.byte	0
 570 0085 00       		.byte	0
 571 0086 0B       		.uleb128 0xb
 572 0087 26       		.uleb128 0x26
 573 0088 00       		.byte	0
 574 0089 49       		.uleb128 0x49
 575 008a 13       		.uleb128 0x13
 576 008b 00       		.byte	0
 577 008c 00       		.byte	0
 578 008d 0C       		.uleb128 0xc
 579 008e 0F       		.uleb128 0xf
 580 008f 00       		.byte	0
 581 0090 0B       		.uleb128 0xb
 582 0091 0B       		.uleb128 0xb
 583 0092 49       		.uleb128 0x49
 584 0093 13       		.uleb128 0x13
 585 0094 00       		.byte	0
 586 0095 00       		.byte	0
 587 0096 0D       		.uleb128 0xd
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 21


 588 0097 2E       		.uleb128 0x2e
 589 0098 01       		.byte	0x1
 590 0099 3F       		.uleb128 0x3f
 591 009a 19       		.uleb128 0x19
 592 009b 03       		.uleb128 0x3
 593 009c 0E       		.uleb128 0xe
 594 009d 3A       		.uleb128 0x3a
 595 009e 0B       		.uleb128 0xb
 596 009f 3B       		.uleb128 0x3b
 597 00a0 0B       		.uleb128 0xb
 598 00a1 27       		.uleb128 0x27
 599 00a2 19       		.uleb128 0x19
 600 00a3 11       		.uleb128 0x11
 601 00a4 01       		.uleb128 0x1
 602 00a5 12       		.uleb128 0x12
 603 00a6 06       		.uleb128 0x6
 604 00a7 40       		.uleb128 0x40
 605 00a8 18       		.uleb128 0x18
 606 00a9 9642     		.uleb128 0x2116
 607 00ab 19       		.uleb128 0x19
 608 00ac 01       		.uleb128 0x1
 609 00ad 13       		.uleb128 0x13
 610 00ae 00       		.byte	0
 611 00af 00       		.byte	0
 612 00b0 0E       		.uleb128 0xe
 613 00b1 05       		.uleb128 0x5
 614 00b2 00       		.byte	0
 615 00b3 03       		.uleb128 0x3
 616 00b4 0E       		.uleb128 0xe
 617 00b5 3A       		.uleb128 0x3a
 618 00b6 0B       		.uleb128 0xb
 619 00b7 3B       		.uleb128 0x3b
 620 00b8 0B       		.uleb128 0xb
 621 00b9 49       		.uleb128 0x49
 622 00ba 13       		.uleb128 0x13
 623 00bb 02       		.uleb128 0x2
 624 00bc 17       		.uleb128 0x17
 625 00bd 00       		.byte	0
 626 00be 00       		.byte	0
 627 00bf 0F       		.uleb128 0xf
 628 00c0 34       		.uleb128 0x34
 629 00c1 00       		.byte	0
 630 00c2 03       		.uleb128 0x3
 631 00c3 0E       		.uleb128 0xe
 632 00c4 3A       		.uleb128 0x3a
 633 00c5 0B       		.uleb128 0xb
 634 00c6 3B       		.uleb128 0x3b
 635 00c7 0B       		.uleb128 0xb
 636 00c8 49       		.uleb128 0x49
 637 00c9 13       		.uleb128 0x13
 638 00ca 02       		.uleb128 0x2
 639 00cb 17       		.uleb128 0x17
 640 00cc 00       		.byte	0
 641 00cd 00       		.byte	0
 642 00ce 10       		.uleb128 0x10
 643 00cf 1D       		.uleb128 0x1d
 644 00d0 01       		.byte	0x1
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 22


 645 00d1 31       		.uleb128 0x31
 646 00d2 13       		.uleb128 0x13
 647 00d3 52       		.uleb128 0x52
 648 00d4 01       		.uleb128 0x1
 649 00d5 55       		.uleb128 0x55
 650 00d6 17       		.uleb128 0x17
 651 00d7 58       		.uleb128 0x58
 652 00d8 0B       		.uleb128 0xb
 653 00d9 59       		.uleb128 0x59
 654 00da 05       		.uleb128 0x5
 655 00db 00       		.byte	0
 656 00dc 00       		.byte	0
 657 00dd 11       		.uleb128 0x11
 658 00de 05       		.uleb128 0x5
 659 00df 00       		.byte	0
 660 00e0 31       		.uleb128 0x31
 661 00e1 13       		.uleb128 0x13
 662 00e2 02       		.uleb128 0x2
 663 00e3 17       		.uleb128 0x17
 664 00e4 00       		.byte	0
 665 00e5 00       		.byte	0
 666 00e6 12       		.uleb128 0x12
 667 00e7 898201   		.uleb128 0x4109
 668 00ea 01       		.byte	0x1
 669 00eb 11       		.uleb128 0x11
 670 00ec 01       		.uleb128 0x1
 671 00ed 31       		.uleb128 0x31
 672 00ee 13       		.uleb128 0x13
 673 00ef 00       		.byte	0
 674 00f0 00       		.byte	0
 675 00f1 13       		.uleb128 0x13
 676 00f2 8A8201   		.uleb128 0x410a
 677 00f5 00       		.byte	0
 678 00f6 02       		.uleb128 0x2
 679 00f7 18       		.uleb128 0x18
 680 00f8 9142     		.uleb128 0x2111
 681 00fa 18       		.uleb128 0x18
 682 00fb 00       		.byte	0
 683 00fc 00       		.byte	0
 684 00fd 14       		.uleb128 0x14
 685 00fe 34       		.uleb128 0x34
 686 00ff 00       		.byte	0
 687 0100 03       		.uleb128 0x3
 688 0101 0E       		.uleb128 0xe
 689 0102 3A       		.uleb128 0x3a
 690 0103 0B       		.uleb128 0xb
 691 0104 3B       		.uleb128 0x3b
 692 0105 0B       		.uleb128 0xb
 693 0106 49       		.uleb128 0x49
 694 0107 13       		.uleb128 0x13
 695 0108 3F       		.uleb128 0x3f
 696 0109 19       		.uleb128 0x19
 697 010a 3C       		.uleb128 0x3c
 698 010b 19       		.uleb128 0x19
 699 010c 00       		.byte	0
 700 010d 00       		.byte	0
 701 010e 15       		.uleb128 0x15
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 23


 702 010f 13       		.uleb128 0x13
 703 0110 01       		.byte	0x1
 704 0111 0B       		.uleb128 0xb
 705 0112 0B       		.uleb128 0xb
 706 0113 3A       		.uleb128 0x3a
 707 0114 0B       		.uleb128 0xb
 708 0115 3B       		.uleb128 0x3b
 709 0116 0B       		.uleb128 0xb
 710 0117 01       		.uleb128 0x1
 711 0118 13       		.uleb128 0x13
 712 0119 00       		.byte	0
 713 011a 00       		.byte	0
 714 011b 16       		.uleb128 0x16
 715 011c 0D       		.uleb128 0xd
 716 011d 00       		.byte	0
 717 011e 03       		.uleb128 0x3
 718 011f 0E       		.uleb128 0xe
 719 0120 3A       		.uleb128 0x3a
 720 0121 0B       		.uleb128 0xb
 721 0122 3B       		.uleb128 0x3b
 722 0123 0B       		.uleb128 0xb
 723 0124 49       		.uleb128 0x49
 724 0125 13       		.uleb128 0x13
 725 0126 38       		.uleb128 0x38
 726 0127 0B       		.uleb128 0xb
 727 0128 00       		.byte	0
 728 0129 00       		.byte	0
 729 012a 17       		.uleb128 0x17
 730 012b 0D       		.uleb128 0xd
 731 012c 00       		.byte	0
 732 012d 03       		.uleb128 0x3
 733 012e 08       		.uleb128 0x8
 734 012f 3A       		.uleb128 0x3a
 735 0130 0B       		.uleb128 0xb
 736 0131 3B       		.uleb128 0x3b
 737 0132 0B       		.uleb128 0xb
 738 0133 49       		.uleb128 0x49
 739 0134 13       		.uleb128 0x13
 740 0135 38       		.uleb128 0x38
 741 0136 0B       		.uleb128 0xb
 742 0137 00       		.byte	0
 743 0138 00       		.byte	0
 744 0139 18       		.uleb128 0x18
 745 013a 2E       		.uleb128 0x2e
 746 013b 01       		.byte	0x1
 747 013c 3F       		.uleb128 0x3f
 748 013d 19       		.uleb128 0x19
 749 013e 03       		.uleb128 0x3
 750 013f 0E       		.uleb128 0xe
 751 0140 3A       		.uleb128 0x3a
 752 0141 0B       		.uleb128 0xb
 753 0142 3B       		.uleb128 0x3b
 754 0143 05       		.uleb128 0x5
 755 0144 27       		.uleb128 0x27
 756 0145 19       		.uleb128 0x19
 757 0146 49       		.uleb128 0x49
 758 0147 13       		.uleb128 0x13
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 24


 759 0148 3C       		.uleb128 0x3c
 760 0149 19       		.uleb128 0x19
 761 014a 00       		.byte	0
 762 014b 00       		.byte	0
 763 014c 19       		.uleb128 0x19
 764 014d 05       		.uleb128 0x5
 765 014e 00       		.byte	0
 766 014f 49       		.uleb128 0x49
 767 0150 13       		.uleb128 0x13
 768 0151 00       		.byte	0
 769 0152 00       		.byte	0
 770 0153 00       		.byte	0
 771              		.section	.debug_loc,"",%progbits
 772              	.Ldebug_loc0:
 773              	.LLST0:
 774 0000 00000000 		.4byte	.LVL0
 775 0004 0C000000 		.4byte	.LVL2
 776 0008 0100     		.2byte	0x1
 777 000a 50       		.byte	0x50
 778 000b 0C000000 		.4byte	.LVL2
 779 000f 0E000000 		.4byte	.LVL3
 780 0013 0300     		.2byte	0x3
 781 0015 74       		.byte	0x74
 782 0016 78       		.sleb128 -8
 783 0017 9F       		.byte	0x9f
 784 0018 0E000000 		.4byte	.LVL3
 785 001c 50000000 		.4byte	.LVL13
 786 0020 0100     		.2byte	0x1
 787 0022 54       		.byte	0x54
 788 0023 50000000 		.4byte	.LVL13
 789 0027 56000000 		.4byte	.LFE84
 790 002b 0300     		.2byte	0x3
 791 002d 74       		.byte	0x74
 792 002e 78       		.sleb128 -8
 793 002f 9F       		.byte	0x9f
 794 0030 00000000 		.4byte	0
 795 0034 00000000 		.4byte	0
 796              	.LLST1:
 797 0038 00000000 		.4byte	.LVL0
 798 003c 0C000000 		.4byte	.LVL2
 799 0040 0100     		.2byte	0x1
 800 0042 51       		.byte	0x51
 801 0043 0C000000 		.4byte	.LVL2
 802 0047 56000000 		.4byte	.LFE84
 803 004b 0100     		.2byte	0x1
 804 004d 55       		.byte	0x55
 805 004e 00000000 		.4byte	0
 806 0052 00000000 		.4byte	0
 807              	.LLST2:
 808 0056 00000000 		.4byte	.LVL0
 809 005a 0C000000 		.4byte	.LVL2
 810 005e 0100     		.2byte	0x1
 811 0060 52       		.byte	0x52
 812 0061 0C000000 		.4byte	.LVL2
 813 0065 56000000 		.4byte	.LFE84
 814 0069 0400     		.2byte	0x4
 815 006b F3       		.byte	0xf3
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 25


 816 006c 01       		.uleb128 0x1
 817 006d 52       		.byte	0x52
 818 006e 9F       		.byte	0x9f
 819 006f 00000000 		.4byte	0
 820 0073 00000000 		.4byte	0
 821              	.LLST3:
 822 0077 08000000 		.4byte	.LVL1
 823 007b 0C000000 		.4byte	.LVL2
 824 007f 0100     		.2byte	0x1
 825 0081 52       		.byte	0x52
 826 0082 0C000000 		.4byte	.LVL2
 827 0086 56000000 		.4byte	.LFE84
 828 008a 0100     		.2byte	0x1
 829 008c 56       		.byte	0x56
 830 008d 00000000 		.4byte	0
 831 0091 00000000 		.4byte	0
 832              	.LLST4:
 833 0095 0E000000 		.4byte	.LVL3
 834 0099 1B000000 		.4byte	.LVL5-1
 835 009d 0200     		.2byte	0x2
 836 009f 74       		.byte	0x74
 837 00a0 78       		.sleb128 -8
 838 00a1 00000000 		.4byte	0
 839 00a5 00000000 		.4byte	0
 840              	.LLST5:
 841 00a9 16000000 		.4byte	.LVL4
 842 00ad 34000000 		.4byte	.LVL8
 843 00b1 0100     		.2byte	0x1
 844 00b3 58       		.byte	0x58
 845 00b4 00000000 		.4byte	0
 846 00b8 00000000 		.4byte	0
 847              	.LLST6:
 848 00bc 36000000 		.4byte	.LVL9
 849 00c0 52000000 		.4byte	.LVL14
 850 00c4 0100     		.2byte	0x1
 851 00c6 55       		.byte	0x55
 852 00c7 00000000 		.4byte	0
 853 00cb 00000000 		.4byte	0
 854              	.LLST7:
 855 00cf 36000000 		.4byte	.LVL9
 856 00d3 39000000 		.4byte	.LVL10-1
 857 00d7 0100     		.2byte	0x1
 858 00d9 50       		.byte	0x50
 859 00da 39000000 		.4byte	.LVL10-1
 860 00de 52000000 		.4byte	.LVL14
 861 00e2 0100     		.2byte	0x1
 862 00e4 58       		.byte	0x58
 863 00e5 00000000 		.4byte	0
 864 00e9 00000000 		.4byte	0
 865              		.section	.debug_aranges,"",%progbits
 866 0000 1C000000 		.4byte	0x1c
 867 0004 0200     		.2byte	0x2
 868 0006 00000000 		.4byte	.Ldebug_info0
 869 000a 04       		.byte	0x4
 870 000b 00       		.byte	0
 871 000c 0000     		.2byte	0
 872 000e 0000     		.2byte	0
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 26


 873 0010 00000000 		.4byte	.LFB84
 874 0014 56000000 		.4byte	.LFE84-.LFB84
 875 0018 00000000 		.4byte	0
 876 001c 00000000 		.4byte	0
 877              		.section	.debug_ranges,"",%progbits
 878              	.Ldebug_ranges0:
 879 0000 2E000000 		.4byte	.LBB4
 880 0004 32000000 		.4byte	.LBE4
 881 0008 36000000 		.4byte	.LBB7
 882 000c 4C000000 		.4byte	.LBE7
 883 0010 00000000 		.4byte	0
 884 0014 00000000 		.4byte	0
 885 0018 00000000 		.4byte	.LFB84
 886 001c 56000000 		.4byte	.LFE84
 887 0020 00000000 		.4byte	0
 888 0024 00000000 		.4byte	0
 889              		.section	.debug_line,"",%progbits
 890              	.Ldebug_line0:
 891 0000 EA010000 		.section	.debug_str,"MS",%progbits,1
 891      0200B901 
 891      00000201 
 891      FB0E0D00 
 891      01010101 
 892              	.LASF38:
 893 0000 5F5F7A65 		.ascii	"__zero_table_end__\000"
 893      726F5F74 
 893      61626C65 
 893      5F656E64 
 893      5F5F00
 894              	.LASF19:
 895 0013 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 895      4D415448 
 895      5F4C454E 
 895      4754485F 
 895      4552524F 
 896              	.LASF33:
 897 0029 5F5F636F 		.ascii	"__copy_table_t\000"
 897      70795F74 
 897      61626C65 
 897      5F7400
 898              	.LASF0:
 899 0038 666C6F61 		.ascii	"float\000"
 899      7400
 900              	.LASF45:
 901 003e 61726D5F 		.ascii	"arm_cmplx_mag_f32\000"
 901      636D706C 
 901      785F6D61 
 901      675F6633 
 901      3200
 902              	.LASF36:
 903 0050 5F5F7A65 		.ascii	"__zero_table_t\000"
 903      726F5F74 
 903      61626C65 
 903      5F7400
 904              	.LASF20:
 905 005f 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 905      4D415448 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 27


 905      5F53495A 
 905      455F4D49 
 905      534D4154 
 906              	.LASF42:
 907 0076 2E5C4453 		.ascii	".\\DSP\\Source\\ComplexMathFunctions\\arm_cmplx_mag"
 907      505C536F 
 907      75726365 
 907      5C436F6D 
 907      706C6578 
 908 00a5 5F663332 		.ascii	"_f32.c\000"
 908      2E6300
 909              	.LASF26:
 910 00ac 704F7574 		.ascii	"pOut\000"
 910      00
 911              	.LASF39:
 912 00b1 64657374 		.ascii	"dest\000"
 912      00
 913              	.LASF2:
 914 00b6 756E7369 		.ascii	"unsigned char\000"
 914      676E6564 
 914      20636861 
 914      7200
 915              	.LASF30:
 916 00c4 626C6B43 		.ascii	"blkCnt\000"
 916      6E7400
 917              	.LASF35:
 918 00cb 5F5F636F 		.ascii	"__copy_table_end__\000"
 918      70795F74 
 918      61626C65 
 918      5F656E64 
 918      5F5F00
 919              	.LASF23:
 920 00de 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 920      4D415448 
 920      5F544553 
 920      545F4641 
 920      494C5552 
 921              	.LASF6:
 922 00f4 6C6F6E67 		.ascii	"long unsigned int\000"
 922      20756E73 
 922      69676E65 
 922      6420696E 
 922      7400
 923              	.LASF4:
 924 0106 73686F72 		.ascii	"short unsigned int\000"
 924      7420756E 
 924      7369676E 
 924      65642069 
 924      6E7400
 925              	.LASF41:
 926 0119 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 926      4320342E 
 926      392E3320 
 926      32303135 
 926      30333033 
 927 014c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 927      20726576 
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 28


 927      6973696F 
 927      6E203232 
 927      31323230 
 928 017f 73202D73 		.ascii	"s -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 928      74643D67 
 928      6E753939 
 928      202D6666 
 928      756E6374 
 929              	.LASF28:
 930 01b2 70447374 		.ascii	"pDst\000"
 930      00
 931              	.LASF14:
 932 01b7 646F7562 		.ascii	"double\000"
 932      6C6500
 933              	.LASF44:
 934 01be 61726D5F 		.ascii	"arm_sqrt_f32\000"
 934      73717274 
 934      5F663332 
 934      00
 935              	.LASF16:
 936 01cb 666C6F61 		.ascii	"float32_t\000"
 936      7433325F 
 936      7400
 937              	.LASF10:
 938 01d5 5F5F7569 		.ascii	"__uint32_t\000"
 938      6E743332 
 938      5F7400
 939              	.LASF32:
 940 01e0 696D6167 		.ascii	"imag\000"
 940      00
 941              	.LASF18:
 942 01e5 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 942      4D415448 
 942      5F415247 
 942      554D454E 
 942      545F4552 
 943              	.LASF9:
 944 01fd 756E7369 		.ascii	"unsigned int\000"
 944      676E6564 
 944      20696E74 
 944      00
 945              	.LASF31:
 946 020a 7265616C 		.ascii	"real\000"
 946      00
 947              	.LASF43:
 948 020f 5C5C766D 		.ascii	"\\\\vmware-host\\Shared Folders\\Documents\\PSoC Cr"
 948      77617265 
 948      2D686F73 
 948      745C5368 
 948      61726564 
 949 023d 6561746F 		.ascii	"eator\\FinalProject\\FinalV2.cydsn\000"
 949      725C4669 
 949      6E616C50 
 949      726F6A65 
 949      63745C46 
 950              	.LASF8:
 951 025e 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 29


 951      206C6F6E 
 951      6720756E 
 951      7369676E 
 951      65642069 
 952              	.LASF21:
 953 0275 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 953      4D415448 
 953      5F4E414E 
 953      494E4600 
 954              	.LASF24:
 955 0285 41524D5F 		.ascii	"ARM_MATH_DECOMPOSITION_FAILURE\000"
 955      4D415448 
 955      5F444543 
 955      4F4D504F 
 955      53495449 
 956              	.LASF12:
 957 02a4 73697A65 		.ascii	"sizetype\000"
 957      74797065 
 957      00
 958              	.LASF46:
 959 02ad 73717274 		.ascii	"sqrtf\000"
 959      6600
 960              	.LASF7:
 961 02b3 6C6F6E67 		.ascii	"long long int\000"
 961      206C6F6E 
 961      6720696E 
 961      7400
 962              	.LASF13:
 963 02c1 63686172 		.ascii	"char\000"
 963      00
 964              	.LASF17:
 965 02c6 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 965      4D415448 
 965      5F535543 
 965      43455353 
 965      00
 966              	.LASF40:
 967 02d7 776C656E 		.ascii	"wlen\000"
 967      00
 968              	.LASF3:
 969 02dc 73686F72 		.ascii	"short int\000"
 969      7420696E 
 969      7400
 970              	.LASF11:
 971 02e6 75696E74 		.ascii	"uint32_t\000"
 971      33325F74 
 971      00
 972              	.LASF5:
 973 02ef 6C6F6E67 		.ascii	"long int\000"
 973      20696E74 
 973      00
 974              	.LASF15:
 975 02f8 6C6F6E67 		.ascii	"long double\000"
 975      20646F75 
 975      626C6500 
 976              	.LASF37:
 977 0304 5F5F7A65 		.ascii	"__zero_table_start__\000"
ARM GAS  C:\Users\IVYLIU~1\AppData\Local\Temp\ccii0f1h.s 			page 30


 977      726F5F74 
 977      61626C65 
 977      5F737461 
 977      72745F5F 
 978              	.LASF1:
 979 0319 7369676E 		.ascii	"signed char\000"
 979      65642063 
 979      68617200 
 980              	.LASF27:
 981 0325 70537263 		.ascii	"pSrc\000"
 981      00
 982              	.LASF29:
 983 032a 6E756D53 		.ascii	"numSamples\000"
 983      616D706C 
 983      657300
 984              	.LASF34:
 985 0335 5F5F636F 		.ascii	"__copy_table_start__\000"
 985      70795F74 
 985      61626C65 
 985      5F737461 
 985      72745F5F 
 986              	.LASF25:
 987 034a 61726D5F 		.ascii	"arm_status\000"
 987      73746174 
 987      757300
 988              	.LASF22:
 989 0355 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 989      4D415448 
 989      5F53494E 
 989      47554C41 
 989      5200
 990              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
