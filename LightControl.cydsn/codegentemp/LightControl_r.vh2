-- Project:   LightControl
-- Generated: 05/07/2024 22:51:57
-- PSoC Creator  3.3 CP3

ENTITY LightControl IS
    PORT(
        Data(0)_PAD : OUT std_ulogic);
    ATTRIBUTE voltage_VDDABUF OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDA OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VUSB OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDD OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDIO0 OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDIO1 OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDIO2 OF __DEFAULT__ : ENTITY IS 5e0;
    ATTRIBUTE voltage_VDDIO3 OF __DEFAULT__ : ENTITY IS 5e0;
END LightControl;

ARCHITECTURE __DEFAULT__ OF LightControl IS
    SIGNAL ClockBlock_100k : bit;
    SIGNAL ClockBlock_1k : bit;
    SIGNAL ClockBlock_32k : bit;
    SIGNAL ClockBlock_BUS_CLK : bit;
    ATTRIBUTE global_signal OF ClockBlock_BUS_CLK : SIGNAL IS true;
    SIGNAL ClockBlock_BUS_CLK_local : bit;
    SIGNAL ClockBlock_ILO : bit;
    SIGNAL ClockBlock_IMO : bit;
    SIGNAL ClockBlock_MASTER_CLK : bit;
    SIGNAL ClockBlock_PLL_OUT : bit;
    SIGNAL ClockBlock_XTAL : bit;
    SIGNAL ClockBlock_XTAL_32KHZ : bit;
    SIGNAL Data(0)__PA : bit;
    SIGNAL Net_49 : bit;
    ATTRIBUTE global_signal OF Net_49 : SIGNAL IS true;
    SIGNAL Net_49_local : bit;
    SIGNAL Net_58 : bit;
    ATTRIBUTE placement_force OF Net_58 : SIGNAL IS "U(3,0,B)3";
    SIGNAL \NP:Neo:BITCNT_count_0\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_1\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_2\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_3\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_4\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_5\ : bit;
    SIGNAL \NP:Neo:BITCNT_count_6\ : bit;
    SIGNAL \NP:Neo:CurrentBit\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:CurrentBit\ : SIGNAL IS "U(3,0,B)0";
    SIGNAL \NP:Neo:CycleTimeout\ : bit;
    SIGNAL \NP:Neo:DPTH_select_2\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:DPTH_select_2\ : SIGNAL IS "U(3,0,A)3";
    SIGNAL \NP:Neo:EnablePulseWidthCounters\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:EnablePulseWidthCounters\ : SIGNAL IS "U(3,0,B)2";
    SIGNAL \NP:Neo:FinalBit\ : bit;
    SIGNAL \NP:Neo:LoadCounter\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:LoadCounter\ : SIGNAL IS "U(2,0,A)1";
    SIGNAL \NP:Neo:MainState_0\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:MainState_0\ : SIGNAL IS "U(3,0,A)0";
    SIGNAL \NP:Neo:MainState_1\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:MainState_1\ : SIGNAL IS "U(2,0,A)0";
    SIGNAL \NP:Neo:MainState_2\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:MainState_2\ : SIGNAL IS "U(3,0,A)2";
    SIGNAL \NP:Neo:NoData\ : bit;
    SIGNAL \NP:Neo:OFFTimeDone\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_0\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_1\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_2\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_3\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_4\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_5\ : bit;
    SIGNAL \NP:Neo:OFFTime_count_6\ : bit;
    SIGNAL \NP:Neo:ONTimeDone\ : bit;
    SIGNAL \NP:Neo:ONTime_count_0\ : bit;
    SIGNAL \NP:Neo:ONTime_count_1\ : bit;
    SIGNAL \NP:Neo:ONTime_count_2\ : bit;
    SIGNAL \NP:Neo:ONTime_count_3\ : bit;
    SIGNAL \NP:Neo:ONTime_count_4\ : bit;
    SIGNAL \NP:Neo:ONTime_count_5\ : bit;
    SIGNAL \NP:Neo:ONTime_count_6\ : bit;
    SIGNAL \NP:Neo:ReloadPulsewidthCounters\ : bit;
    ATTRIBUTE placement_force OF \NP:Neo:ReloadPulsewidthCounters\ : SIGNAL IS "U(3,0,B)1";
    SIGNAL \NP:Neo:ShiftOut\ : bit;
    SIGNAL \NP:Net_13\ : bit;
    SIGNAL \NP:Net_3\ : bit;
    SIGNAL __ONE__ : bit;
    ATTRIBUTE POWER OF __ONE__ : SIGNAL IS true;
    SIGNAL __ZERO__ : bit;
    ATTRIBUTE GROUND OF __ZERO__ : SIGNAL IS true;
    SIGNAL tmpOE__Data_net_0 : bit;
    ATTRIBUTE POWER OF tmpOE__Data_net_0 : SIGNAL IS true;
    SIGNAL zero : bit;
    ATTRIBUTE GROUND OF zero : SIGNAL IS true;
    ATTRIBUTE Location OF ClockBlock : LABEL IS "F(Clock,0)";
    ATTRIBUTE lib_model OF Data(0) : LABEL IS "iocell1";
    ATTRIBUTE Location OF Data(0) : LABEL IS "P0[0]";
    ATTRIBUTE lib_model OF Net_58 : LABEL IS "macrocell1";
    ATTRIBUTE Location OF Net_58 : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:LoadCounter\ : LABEL IS "macrocell2";
    ATTRIBUTE Location OF \NP:Neo:LoadCounter\ : LABEL IS "U(2,0)";
    ATTRIBUTE lib_model OF \NP:Neo:ReloadPulsewidthCounters\ : LABEL IS "macrocell3";
    ATTRIBUTE Location OF \NP:Neo:ReloadPulsewidthCounters\ : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:EnablePulseWidthCounters\ : LABEL IS "macrocell4";
    ATTRIBUTE Location OF \NP:Neo:EnablePulseWidthCounters\ : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:DPTH_select_2\ : LABEL IS "macrocell5";
    ATTRIBUTE Location OF \NP:Neo:DPTH_select_2\ : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:DPTH:u0\ : LABEL IS "datapathcell1";
    ATTRIBUTE Location OF \NP:Neo:DPTH:u0\ : LABEL IS "U(3,0)";
    ATTRIBUTE Location OF \NP:Neo:BITCNT:Counter7\ : LABEL IS "U(2,0)";
    ATTRIBUTE Location OF \NP:Neo:ONTime:Counter7\ : LABEL IS "U(3,0)";
    ATTRIBUTE Location OF \NP:Neo:OFFTime:Counter7\ : LABEL IS "U(3,1)";
    ATTRIBUTE lib_model OF \NP:DMA\ : LABEL IS "drqcell1";
    ATTRIBUTE Location OF \NP:DMA\ : LABEL IS "[DrqContainer=(0)][DrqId=(0)]";
    ATTRIBUTE lib_model OF \NP:Neo:MainState_2\ : LABEL IS "macrocell6";
    ATTRIBUTE Location OF \NP:Neo:MainState_2\ : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:MainState_1\ : LABEL IS "macrocell7";
    ATTRIBUTE Location OF \NP:Neo:MainState_1\ : LABEL IS "U(2,0)";
    ATTRIBUTE lib_model OF \NP:Neo:MainState_0\ : LABEL IS "macrocell8";
    ATTRIBUTE Location OF \NP:Neo:MainState_0\ : LABEL IS "U(3,0)";
    ATTRIBUTE lib_model OF \NP:Neo:CurrentBit\ : LABEL IS "macrocell9";
    ATTRIBUTE Location OF \NP:Neo:CurrentBit\ : LABEL IS "U(3,0)";
    COMPONENT clockblockcell
        PORT (
            dclk_0 : OUT std_ulogic;
            dclk_1 : OUT std_ulogic;
            dclk_2 : OUT std_ulogic;
            dclk_3 : OUT std_ulogic;
            dclk_4 : OUT std_ulogic;
            dclk_5 : OUT std_ulogic;
            dclk_6 : OUT std_ulogic;
            dclk_7 : OUT std_ulogic;
            dclk_glb_0 : OUT std_ulogic;
            dclk_glb_1 : OUT std_ulogic;
            dclk_glb_2 : OUT std_ulogic;
            dclk_glb_3 : OUT std_ulogic;
            dclk_glb_4 : OUT std_ulogic;
            dclk_glb_5 : OUT std_ulogic;
            dclk_glb_6 : OUT std_ulogic;
            dclk_glb_7 : OUT std_ulogic;
            aclk_0 : OUT std_ulogic;
            aclk_1 : OUT std_ulogic;
            aclk_2 : OUT std_ulogic;
            aclk_3 : OUT std_ulogic;
            aclk_glb_0 : OUT std_ulogic;
            aclk_glb_1 : OUT std_ulogic;
            aclk_glb_2 : OUT std_ulogic;
            aclk_glb_3 : OUT std_ulogic;
            clk_a_dig_0 : OUT std_ulogic;
            clk_a_dig_1 : OUT std_ulogic;
            clk_a_dig_2 : OUT std_ulogic;
            clk_a_dig_3 : OUT std_ulogic;
            clk_a_dig_glb_0 : OUT std_ulogic;
            clk_a_dig_glb_1 : OUT std_ulogic;
            clk_a_dig_glb_2 : OUT std_ulogic;
            clk_a_dig_glb_3 : OUT std_ulogic;
            clk_bus : OUT std_ulogic;
            clk_bus_glb : OUT std_ulogic;
            clk_sync : OUT std_ulogic;
            clk_32k_xtal : OUT std_ulogic;
            clk_100k : OUT std_ulogic;
            clk_32k : OUT std_ulogic;
            clk_1k : OUT std_ulogic;
            clk_usb : OUT std_ulogic;
            xmhz_xerr : OUT std_ulogic;
            pll_lock_out : OUT std_ulogic;
            dsi_dig_div_0 : IN std_ulogic;
            dsi_dig_div_1 : IN std_ulogic;
            dsi_dig_div_2 : IN std_ulogic;
            dsi_dig_div_3 : IN std_ulogic;
            dsi_dig_div_4 : IN std_ulogic;
            dsi_dig_div_5 : IN std_ulogic;
            dsi_dig_div_6 : IN std_ulogic;
            dsi_dig_div_7 : IN std_ulogic;
            dsi_ana_div_0 : IN std_ulogic;
            dsi_ana_div_1 : IN std_ulogic;
            dsi_ana_div_2 : IN std_ulogic;
            dsi_ana_div_3 : IN std_ulogic;
            dsi_glb_div : IN std_ulogic;
            dsi_clkin_div : IN std_ulogic;
            imo : OUT std_ulogic;
            ilo : OUT std_ulogic;
            xtal : OUT std_ulogic;
            pllout : OUT std_ulogic;
            clk_bus_glb_ff : OUT std_ulogic;
            aclk_glb_ff_0 : OUT std_ulogic;
            clk_a_dig_glb_ff_0 : OUT std_ulogic;
            aclk_glb_ff_1 : OUT std_ulogic;
            clk_a_dig_glb_ff_1 : OUT std_ulogic;
            aclk_glb_ff_2 : OUT std_ulogic;
            clk_a_dig_glb_ff_2 : OUT std_ulogic;
            aclk_glb_ff_3 : OUT std_ulogic;
            clk_a_dig_glb_ff_3 : OUT std_ulogic;
            dclk_glb_ff_0 : OUT std_ulogic;
            dclk_glb_ff_1 : OUT std_ulogic;
            dclk_glb_ff_2 : OUT std_ulogic;
            dclk_glb_ff_3 : OUT std_ulogic;
            dclk_glb_ff_4 : OUT std_ulogic;
            dclk_glb_ff_5 : OUT std_ulogic;
            dclk_glb_ff_6 : OUT std_ulogic;
            dclk_glb_ff_7 : OUT std_ulogic);
    END COMPONENT;
    COMPONENT count7cell
        PORT (
            clock : IN std_ulogic;
            reset : IN std_ulogic;
            load : IN std_ulogic;
            enable : IN std_ulogic;
            clk_en : IN std_ulogic;
            count_0 : OUT std_ulogic;
            count_1 : OUT std_ulogic;
            count_2 : OUT std_ulogic;
            count_3 : OUT std_ulogic;
            count_4 : OUT std_ulogic;
            count_5 : OUT std_ulogic;
            count_6 : OUT std_ulogic;
            tc : OUT std_ulogic;
            clock_n : IN std_ulogic;
            extclk : IN std_ulogic;
            extclk_n : IN std_ulogic);
    END COMPONENT;
    COMPONENT datapathcell
        PORT (
            clock : IN std_ulogic;
            clk_en : IN std_ulogic;
            reset : IN std_ulogic;
            cs_addr_0 : IN std_ulogic;
            cs_addr_1 : IN std_ulogic;
            cs_addr_2 : IN std_ulogic;
            route_si : IN std_ulogic;
            route_ci : IN std_ulogic;
            f0_load : IN std_ulogic;
            f1_load : IN std_ulogic;
            d0_load : IN std_ulogic;
            d1_load : IN std_ulogic;
            ce0_reg : OUT std_ulogic;
            cl0_reg : OUT std_ulogic;
            z0_reg : OUT std_ulogic;
            f0_reg : OUT std_ulogic;
            ce1_reg : OUT std_ulogic;
            cl1_reg : OUT std_ulogic;
            z1_reg : OUT std_ulogic;
            f1_reg : OUT std_ulogic;
            ov_msb_reg : OUT std_ulogic;
            co_msb_reg : OUT std_ulogic;
            cmsb_reg : OUT std_ulogic;
            so_reg : OUT std_ulogic;
            f0_bus_stat_reg : OUT std_ulogic;
            f0_blk_stat_reg : OUT std_ulogic;
            f1_bus_stat_reg : OUT std_ulogic;
            f1_blk_stat_reg : OUT std_ulogic;
            ce0_comb : OUT std_ulogic;
            cl0_comb : OUT std_ulogic;
            z0_comb : OUT std_ulogic;
            f0_comb : OUT std_ulogic;
            ce1_comb : OUT std_ulogic;
            cl1_comb : OUT std_ulogic;
            z1_comb : OUT std_ulogic;
            f1_comb : OUT std_ulogic;
            ov_msb_comb : OUT std_ulogic;
            co_msb_comb : OUT std_ulogic;
            cmsb_comb : OUT std_ulogic;
            so_comb : OUT std_ulogic;
            f0_bus_stat_comb : OUT std_ulogic;
            f0_blk_stat_comb : OUT std_ulogic;
            f1_bus_stat_comb : OUT std_ulogic;
            f1_blk_stat_comb : OUT std_ulogic;
            ce0 : OUT std_ulogic;
            ce0i : IN std_ulogic;
            p_in_0 : IN std_ulogic;
            p_in_1 : IN std_ulogic;
            p_in_2 : IN std_ulogic;
            p_in_3 : IN std_ulogic;
            p_in_4 : IN std_ulogic;
            p_in_5 : IN std_ulogic;
            p_in_6 : IN std_ulogic;
            p_in_7 : IN std_ulogic;
            p_out_0 : OUT std_ulogic;
            p_out_1 : OUT std_ulogic;
            p_out_2 : OUT std_ulogic;
            p_out_3 : OUT std_ulogic;
            p_out_4 : OUT std_ulogic;
            p_out_5 : OUT std_ulogic;
            p_out_6 : OUT std_ulogic;
            p_out_7 : OUT std_ulogic;
            cl0i : IN std_ulogic;
            cl0 : OUT std_ulogic;
            z0i : IN std_ulogic;
            z0 : OUT std_ulogic;
            ff0i : IN std_ulogic;
            ff0 : OUT std_ulogic;
            ce1i : IN std_ulogic;
            ce1 : OUT std_ulogic;
            cl1i : IN std_ulogic;
            cl1 : OUT std_ulogic;
            z1i : IN std_ulogic;
            z1 : OUT std_ulogic;
            ff1i : IN std_ulogic;
            ff1 : OUT std_ulogic;
            cap0i : IN std_ulogic;
            cap0 : OUT std_ulogic;
            cap1i : IN std_ulogic;
            cap1 : OUT std_ulogic;
            ci : IN std_ulogic;
            co_msb : OUT std_ulogic;
            sir : IN std_ulogic;
            sol_msb : OUT std_ulogic;
            cfbi : IN std_ulogic;
            cfbo : OUT std_ulogic;
            sil : IN std_ulogic;
            sor : OUT std_ulogic;
            cmsbi : IN std_ulogic;
            cmsbo : OUT std_ulogic;
            busclk : IN std_ulogic);
    END COMPONENT;
    COMPONENT drqcell
        PORT (
            dmareq : IN std_ulogic;
            termin : IN std_ulogic;
            termout : OUT std_ulogic;
            clock : IN std_ulogic);
    END COMPONENT;
    COMPONENT iocell
        PORT (
            pin_input : IN std_ulogic;
            oe : IN std_ulogic;
            fb : OUT std_ulogic;
            pad_in : IN std_ulogic;
            pa_out : OUT std_ulogic;
            pad_out : OUT std_ulogic;
            oe_reg : OUT std_ulogic;
            oe_internal : IN std_ulogic;
            in_clock : IN std_ulogic;
            in_clock_en : IN std_ulogic;
            in_reset : IN std_ulogic;
            out_clock : IN std_ulogic;
            out_clock_en : IN std_ulogic;
            out_reset : IN std_ulogic);
    END COMPONENT;
    COMPONENT logicalport
        PORT (
            interrupt : OUT std_ulogic;
            precharge : IN std_ulogic;
            in_clock : IN std_ulogic;
            in_clock_en : IN std_ulogic;
            in_reset : IN std_ulogic;
            out_clock : IN std_ulogic;
            out_clock_en : IN std_ulogic;
            out_reset : IN std_ulogic);
    END COMPONENT;
    COMPONENT macrocell
        PORT (
            main_0 : IN std_ulogic;
            main_1 : IN std_ulogic;
            main_2 : IN std_ulogic;
            main_3 : IN std_ulogic;
            main_4 : IN std_ulogic;
            main_5 : IN std_ulogic;
            main_6 : IN std_ulogic;
            main_7 : IN std_ulogic;
            main_8 : IN std_ulogic;
            main_9 : IN std_ulogic;
            main_10 : IN std_ulogic;
            main_11 : IN std_ulogic;
            ar_0 : IN std_ulogic;
            ap_0 : IN std_ulogic;
            clock_0 : IN std_ulogic;
            clk_en : IN std_ulogic;
            cin : IN std_ulogic;
            cpt0_0 : IN std_ulogic;
            cpt0_1 : IN std_ulogic;
            cpt0_2 : IN std_ulogic;
            cpt0_3 : IN std_ulogic;
            cpt0_4 : IN std_ulogic;
            cpt0_5 : IN std_ulogic;
            cpt0_6 : IN std_ulogic;
            cpt0_7 : IN std_ulogic;
            cpt0_8 : IN std_ulogic;
            cpt0_9 : IN std_ulogic;
            cpt0_10 : IN std_ulogic;
            cpt0_11 : IN std_ulogic;
            cpt1_0 : IN std_ulogic;
            cpt1_1 : IN std_ulogic;
            cpt1_2 : IN std_ulogic;
            cpt1_3 : IN std_ulogic;
            cpt1_4 : IN std_ulogic;
            cpt1_5 : IN std_ulogic;
            cpt1_6 : IN std_ulogic;
            cpt1_7 : IN std_ulogic;
            cpt1_8 : IN std_ulogic;
            cpt1_9 : IN std_ulogic;
            cpt1_10 : IN std_ulogic;
            cpt1_11 : IN std_ulogic;
            cout : OUT std_ulogic;
            q : OUT std_ulogic;
            q_fixed : OUT std_ulogic);
    END COMPONENT;
BEGIN

    ClockBlock:clockblockcell
        PORT MAP(
            imo => ClockBlock_IMO,
            pllout => ClockBlock_PLL_OUT,
            ilo => ClockBlock_ILO,
            clk_100k => ClockBlock_100k,
            clk_1k => ClockBlock_1k,
            clk_32k => ClockBlock_32k,
            xtal => ClockBlock_XTAL,
            clk_32k_xtal => ClockBlock_XTAL_32KHZ,
            clk_sync => ClockBlock_MASTER_CLK,
            clk_bus_glb => ClockBlock_BUS_CLK,
            clk_bus => ClockBlock_BUS_CLK_local,
            dsi_clkin_div => open,
            dsi_glb_div => open,
            dclk_glb_0 => Net_49,
            dclk_0 => Net_49_local);

    Data:logicalport
        GENERIC MAP(
            drive_mode => "110",
            ibuf_enabled => "1",
            id => "e851a3b9-efb8-48be-bbb8-b303b216c393",
            init_dr_st => "0",
            input_buffer_sel => "00",
            input_clk_en => 0,
            input_sync => "1",
            input_sync_mode => "0",
            intr_mode => "00",
            invert_in_clock => 0,
            invert_in_clock_en => 0,
            invert_in_reset => 0,
            invert_out_clock => 0,
            invert_out_clock_en => 0,
            invert_out_reset => 0,
            io_voltage => "",
            layout_mode => "CONTIGUOUS",
            oe_conn => "0",
            oe_reset => 0,
            oe_sync => "0",
            output_clk_en => 0,
            output_clock_mode => "0",
            output_conn => "1",
            output_mode => "0",
            output_reset => 0,
            output_sync => "0",
            ovt_hyst_trim => "0",
            ovt_needed => "0",
            ovt_slew_control => "00",
            pa_in_clock => -1,
            pa_in_clock_en => -1,
            pa_in_reset => -1,
            pa_out_clock => -1,
            pa_out_clock_en => -1,
            pa_out_reset => -1,
            pin_aliases => "",
            pin_mode => "O",
            por_state => 4,
            port_alias_group => "",
            port_alias_required => 0,
            sio_group_cnt => 0,
            sio_hifreq => "",
            sio_hyst => "1",
            sio_ibuf => "00000000",
            sio_info => "00",
            sio_obuf => "00000000",
            sio_refsel => "00000000",
            sio_vohsel => "",
            sio_vtrip => "00000000",
            slew_rate => "0",
            spanning => 0,
            sw_only => 0,
            use_annotation => "0",
            vtrip => "10",
            width => 1,
            in_clk_inv => 0,
            in_clken_inv => 0,
            in_clken_mode => 1,
            in_rst_inv => 0,
            out_clk_inv => 0,
            out_clken_inv => 0,
            out_clken_mode => 1,
            out_rst_inv => 0)
        PORT MAP(
            in_clock_en => open,
            in_reset => open,
            out_clock_en => open,
            out_reset => open);

    Data(0):iocell
        GENERIC MAP(
            in_sync_mode => 0,
            out_sync_mode => 0,
            oe_sync_mode => 0,
            logicalport => "Data",
            logicalport_pin_id => 0,
            io_capabilities => "0000000000000000000000000000000000000000000000000000000000000101")
        PORT MAP(
            pa_out => Data(0)__PA,
            oe => open,
            pin_input => Net_58,
            pad_out => Data(0)_PAD,
            pad_in => Data(0)_PAD,
            in_clock => open,
            in_clock_en => '1',
            in_reset => '0',
            out_clock => open,
            out_clock_en => '1',
            out_reset => '0');

    Net_58:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1 * !main_2)",
            clken_mode => 1)
        PORT MAP(
            q => Net_58,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\);

    \NP:Neo:LoadCounter\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2)",
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:LoadCounter\,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\);

    \NP:Neo:ReloadPulsewidthCounters\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2) + (main_0 * !main_1 * !main_2)",
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:ReloadPulsewidthCounters\,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\);

    \NP:Neo:EnablePulseWidthCounters\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2) + (!main_0 * main_1 * !main_2) + (main_0 * !main_1 * !main_2)",
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:EnablePulseWidthCounters\,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\);

    \NP:Neo:DPTH_select_2\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1)",
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:DPTH_select_2\,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\);

    \NP:Neo:DPTH:u0\:datapathcell
        GENERIC MAP(
            a0_init => "00000000",
            a1_init => "00000000",
            ce0_sync => 1,
            ce1_sync => 1,
            cl0_sync => 1,
            cl1_sync => 1,
            cmsb_sync => 1,
            co_msb_sync => 1,
            cy_dpconfig => "0000000000000000000000011110000000000001000000000000000100000000000000010110000000000001000000000101000000010000010100000001000011111111000000001111111111111111001000000000000000000000111100000001000000000000",
            d0_init => "00000000",
            d1_init => "00000000",
            f0_blk_sync => 1,
            f0_bus_sync => 1,
            f1_blk_sync => 1,
            f1_bus_sync => 1,
            ff0_sync => 1,
            ff1_sync => 1,
            ov_msb_sync => 1,
            so_sync => 1,
            z0_sync => 1,
            z1_sync => 1,
            uses_p_in => '0',
            uses_p_out => '0',
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            clock => Net_49,
            cs_addr_2 => \NP:Neo:DPTH_select_2\,
            cs_addr_1 => \NP:Neo:MainState_1\,
            cs_addr_0 => \NP:Neo:MainState_0\,
            z1_comb => \NP:Neo:CycleTimeout\,
            so_comb => \NP:Neo:ShiftOut\,
            f0_bus_stat_comb => \NP:Net_3\,
            f0_blk_stat_comb => \NP:Neo:NoData\,
            busclk => ClockBlock_BUS_CLK);

    \NP:Neo:BITCNT:Counter7\:count7cell
        GENERIC MAP(
            cy_alt_mode => 0,
            cy_init_value => "0000000",
            cy_period => "1111111",
            cy_route_en => 1,
            cy_route_ld => 1,
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            clock => Net_49,
            load => \NP:Neo:LoadCounter\,
            enable => \NP:Neo:ReloadPulsewidthCounters\,
            count_6 => \NP:Neo:BITCNT_count_6\,
            count_5 => \NP:Neo:BITCNT_count_5\,
            count_4 => \NP:Neo:BITCNT_count_4\,
            count_3 => \NP:Neo:BITCNT_count_3\,
            count_2 => \NP:Neo:BITCNT_count_2\,
            count_1 => \NP:Neo:BITCNT_count_1\,
            count_0 => \NP:Neo:BITCNT_count_0\,
            tc => \NP:Neo:FinalBit\);

    \NP:Neo:ONTime:Counter7\:count7cell
        GENERIC MAP(
            cy_alt_mode => 0,
            cy_init_value => "0000000",
            cy_period => "1111111",
            cy_route_en => 1,
            cy_route_ld => 1,
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            clock => Net_49,
            load => \NP:Neo:ReloadPulsewidthCounters\,
            enable => \NP:Neo:EnablePulseWidthCounters\,
            count_6 => \NP:Neo:ONTime_count_6\,
            count_5 => \NP:Neo:ONTime_count_5\,
            count_4 => \NP:Neo:ONTime_count_4\,
            count_3 => \NP:Neo:ONTime_count_3\,
            count_2 => \NP:Neo:ONTime_count_2\,
            count_1 => \NP:Neo:ONTime_count_1\,
            count_0 => \NP:Neo:ONTime_count_0\,
            tc => \NP:Neo:ONTimeDone\);

    \NP:Neo:OFFTime:Counter7\:count7cell
        GENERIC MAP(
            cy_alt_mode => 0,
            cy_init_value => "0000000",
            cy_period => "1111111",
            cy_route_en => 1,
            cy_route_ld => 1,
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            clock => Net_49,
            load => \NP:Neo:ReloadPulsewidthCounters\,
            enable => \NP:Neo:EnablePulseWidthCounters\,
            count_6 => \NP:Neo:OFFTime_count_6\,
            count_5 => \NP:Neo:OFFTime_count_5\,
            count_4 => \NP:Neo:OFFTime_count_4\,
            count_3 => \NP:Neo:OFFTime_count_3\,
            count_2 => \NP:Neo:OFFTime_count_2\,
            count_1 => \NP:Neo:OFFTime_count_1\,
            count_0 => \NP:Neo:OFFTime_count_0\,
            tc => \NP:Neo:OFFTimeDone\);

    \NP:DMA\:drqcell
        GENERIC MAP(
            drq_type => "01",
            num_tds => 0)
        PORT MAP(
            dmareq => \NP:Net_3\,
            termin => '0',
            termout => \NP:Net_13\,
            clock => ClockBlock_BUS_CLK);

    \NP:Neo:MainState_2\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1 * main_2 * main_3)",
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:MainState_2\,
            clock_0 => Net_49,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\,
            main_3 => \NP:Neo:CycleTimeout\);

    \NP:Neo:MainState_1\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2) + (!main_0 * main_1 * !main_2) + (!main_0 * main_2 * !main_3) + (main_0 * !main_1 * !main_2 * !main_4)",
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:MainState_1\,
            clock_0 => Net_49,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\,
            main_3 => \NP:Neo:CycleTimeout\,
            main_4 => \NP:Neo:FinalBit\);

    \NP:Neo:MainState_0\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * !main_7) + (!main_0 * main_1 * !main_2 * main_3 * main_4) + (!main_0 * main_1 * !main_2 * !main_4 * main_5) + (!main_0 * main_1 * main_2 * !main_6) + (!main_1 * !main_2 * !main_7 * main_8)",
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:MainState_0\,
            clock_0 => Net_49,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\,
            main_3 => \NP:Neo:ONTimeDone\,
            main_4 => \NP:Neo:CurrentBit\,
            main_5 => \NP:Neo:OFFTimeDone\,
            main_6 => \NP:Neo:CycleTimeout\,
            main_7 => \NP:Neo:NoData\,
            main_8 => \NP:Neo:FinalBit\);

    \NP:Neo:CurrentBit\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2 * !main_3 * main_4) + (!main_0 * !main_1 * main_2 * main_3 * !main_4) + (main_0 * !main_1 * !main_2 * !main_3 * main_4) + (main_0 * !main_1 * !main_2 * main_3 * !main_4)",
            clk_inv => '0',
            clken_mode => 1)
        PORT MAP(
            q => \NP:Neo:CurrentBit\,
            clock_0 => Net_49,
            main_0 => \NP:Neo:MainState_2\,
            main_1 => \NP:Neo:MainState_1\,
            main_2 => \NP:Neo:MainState_0\,
            main_3 => \NP:Neo:CurrentBit\,
            main_4 => \NP:Neo:ShiftOut\);

END __DEFAULT__;
